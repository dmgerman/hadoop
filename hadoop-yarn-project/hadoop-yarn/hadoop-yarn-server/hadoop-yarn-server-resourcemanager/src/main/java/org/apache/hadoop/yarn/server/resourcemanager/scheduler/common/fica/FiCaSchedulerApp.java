begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerReservedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueResourceQuotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedContainerChangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivitiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|AbstractCSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSAMContainerLaunchDiagnosticsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityHeadroomProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|allocator
operator|.
name|AbstractContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|allocator
operator|.
name|ContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ContainerAllocationProposal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|PendingAsk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ResourceCommitRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|SchedulerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|AppPlacementAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|CandidateNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Represents an application attempt from the viewpoint of the FIFO or Capacity  * scheduler.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FiCaSchedulerApp
specifier|public
class|class
name|FiCaSchedulerApp
extends|extends
name|SchedulerApplicationAttempt
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|containersToPreempt
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containersToPreempt
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|headroomProvider
specifier|private
name|CapacityHeadroomProvider
name|headroomProvider
decl_stmt|;
DECL|field|rc
specifier|private
name|ResourceCalculator
name|rc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ResourceScheduler
name|scheduler
decl_stmt|;
DECL|field|containerAllocator
specifier|private
name|AbstractContainerAllocator
name|containerAllocator
decl_stmt|;
comment|/**    * to hold the message if its app doesn't not get container from a node    */
DECL|field|appSkipNodeDiagnostics
specifier|private
name|String
name|appSkipNodeDiagnostics
decl_stmt|;
DECL|field|toBeRemovedIncRequests
specifier|private
name|Map
argument_list|<
name|ContainerId
argument_list|,
name|SchedContainerChangeRequest
argument_list|>
name|toBeRemovedIncRequests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|FiCaSchedulerApp (ApplicationAttemptId applicationAttemptId, String user, Queue queue, AbstractUsersManager abstractUsersManager, RMContext rmContext)
specifier|public
name|FiCaSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|AbstractUsersManager
name|abstractUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|abstractUsersManager
argument_list|,
name|rmContext
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|FiCaSchedulerApp (ApplicationAttemptId applicationAttemptId, String user, Queue queue, AbstractUsersManager abstractUsersManager, RMContext rmContext, Priority appPriority, boolean isAttemptRecovering)
specifier|public
name|FiCaSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|AbstractUsersManager
name|abstractUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Priority
name|appPriority
parameter_list|,
name|boolean
name|isAttemptRecovering
parameter_list|)
block|{
name|this
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|abstractUsersManager
argument_list|,
name|rmContext
argument_list|,
name|appPriority
argument_list|,
name|isAttemptRecovering
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|FiCaSchedulerApp (ApplicationAttemptId applicationAttemptId, String user, Queue queue, AbstractUsersManager abstractUsersManager, RMContext rmContext, Priority appPriority, boolean isAttemptRecovering, ActivitiesManager activitiesManager)
specifier|public
name|FiCaSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|AbstractUsersManager
name|abstractUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Priority
name|appPriority
parameter_list|,
name|boolean
name|isAttemptRecovering
parameter_list|,
name|ActivitiesManager
name|activitiesManager
parameter_list|)
block|{
name|super
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|abstractUsersManager
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|amResource
decl_stmt|;
name|String
name|partition
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
operator|||
name|rmApp
operator|.
name|getAMResourceRequests
argument_list|()
operator|==
literal|null
operator|||
name|rmApp
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the rmApp may be undefined (the resource manager checks for this too)
comment|// and unmanaged applications do not provide an amResource request
comment|// in these cases, provide a default using the scheduler
name|amResource
operator|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getMinimumResourceCapability
argument_list|()
expr_stmt|;
name|partition
operator|=
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
expr_stmt|;
block|}
else|else
block|{
name|amResource
operator|=
name|rmApp
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCapability
argument_list|()
expr_stmt|;
name|partition
operator|=
operator|(
name|rmApp
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabelExpression
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
else|:
name|rmApp
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabelExpression
argument_list|()
expr_stmt|;
block|}
name|setAppAMNodePartitionName
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|setAMResource
argument_list|(
name|partition
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
name|appPriority
argument_list|)
expr_stmt|;
name|setAttemptRecovering
argument_list|(
name|isAttemptRecovering
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
if|if
condition|(
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
expr_stmt|;
block|}
name|containerAllocator
operator|=
operator|new
name|ContainerAllocator
argument_list|(
name|this
argument_list|,
name|rc
argument_list|,
name|rmContext
argument_list|,
name|activitiesManager
argument_list|)
expr_stmt|;
block|}
DECL|method|containerCompleted (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event, String partition)
specifier|public
name|boolean
name|containerCompleted
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|rmContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
comment|// Remove from the list of containers
if|if
condition|(
literal|null
operator|==
name|liveContainers
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Remove from the list of newly allocated containers if found
name|newlyAllocatedContainers
operator|.
name|remove
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|containersToPreempt
operator|.
name|remove
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|Resource
name|containerResource
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
comment|// Update usage metrics
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|releaseResources
argument_list|(
name|partition
argument_list|,
name|getUser
argument_list|()
argument_list|,
literal|1
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|attemptResourceUsage
operator|.
name|decUsed
argument_list|(
name|partition
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
comment|// Clear resource utilization metrics cache.
name|lastMemoryAggregateAllocationUpdateTime
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|allocate (FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, Container container)
specifier|public
name|RMContainer
name|allocate
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|isStopped
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Required sanity check - AM can call 'allocate' to update resource
comment|// request without locking the scheduler, hence we need to check
if|if
condition|(
name|getOutstandingAsksCount
argument_list|(
name|schedulerKey
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|AppPlacementAllocator
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|ps
init|=
name|appSchedulingInfo
operator|.
name|getAppPlacementAllocator
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ps
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get "
operator|+
name|AppPlacementAllocator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" for application="
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" schedulerRequestKey="
operator|+
name|schedulerKey
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Create RMContainer
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|schedulerKey
argument_list|,
name|this
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|appSchedulingInfo
operator|.
name|getUser
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
argument_list|,
name|ps
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RMContainerImpl
operator|)
name|rmContainer
operator|)
operator|.
name|setQueueName
argument_list|(
name|this
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIXME, should set when confirmed
name|updateAMContainerDiagnostics
argument_list|(
name|AMState
operator|.
name|ASSIGNED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|rmContainer
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|rmContainerInFinalState (RMContainer rmContainer)
specifier|private
name|boolean
name|rmContainerInFinalState
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|rmContainer
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|rmContainer
operator|.
name|completed
argument_list|()
return|;
block|}
DECL|method|anyContainerInFinalState ( ResourceCommitRequest<FiCaSchedulerApp, FiCaSchedulerNode> request)
specifier|private
name|boolean
name|anyContainerInFinalState
parameter_list|(
name|ResourceCommitRequest
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|request
parameter_list|)
block|{
for|for
control|(
name|SchedulerContainer
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|c
range|:
name|request
operator|.
name|getContainersToRelease
argument_list|()
control|)
block|{
if|if
condition|(
name|rmContainerInFinalState
argument_list|(
name|c
operator|.
name|getRmContainer
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"To-release container="
operator|+
name|c
operator|.
name|getRmContainer
argument_list|()
operator|+
literal|" is in final state"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|ContainerAllocationProposal
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|c
range|:
name|request
operator|.
name|getContainersToAllocate
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulerContainer
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|r
range|:
name|c
operator|.
name|getToRelease
argument_list|()
control|)
block|{
if|if
condition|(
name|rmContainerInFinalState
argument_list|(
name|r
operator|.
name|getRmContainer
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"To-release container="
operator|+
name|r
operator|.
name|getRmContainer
argument_list|()
operator|+
literal|", for to a new allocated container, is in final state"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|c
operator|.
name|getAllocateFromReservedContainer
argument_list|()
condition|)
block|{
if|if
condition|(
name|rmContainerInFinalState
argument_list|(
name|c
operator|.
name|getAllocateFromReservedContainer
argument_list|()
operator|.
name|getRmContainer
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Allocate from reserved container"
operator|+
name|c
operator|.
name|getAllocateFromReservedContainer
argument_list|()
operator|.
name|getRmContainer
argument_list|()
operator|+
literal|" is in final state"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
for|for
control|(
name|ContainerAllocationProposal
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|c
range|:
name|request
operator|.
name|getContainersToReserve
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulerContainer
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|r
range|:
name|c
operator|.
name|getToRelease
argument_list|()
control|)
block|{
if|if
condition|(
name|rmContainerInFinalState
argument_list|(
name|r
operator|.
name|getRmContainer
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"To-release container="
operator|+
name|r
operator|.
name|getRmContainer
argument_list|()
operator|+
literal|", for a reserved container, is in final state"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|commonCheckContainerAllocation ( ContainerAllocationProposal<FiCaSchedulerApp, FiCaSchedulerNode> allocation, SchedulerContainer<FiCaSchedulerApp, FiCaSchedulerNode> schedulerContainer)
specifier|private
name|boolean
name|commonCheckContainerAllocation
parameter_list|(
name|ContainerAllocationProposal
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|allocation
parameter_list|,
name|SchedulerContainer
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|schedulerContainer
parameter_list|)
block|{
comment|// Make sure node is not reserved by anyone else
name|RMContainer
name|reservedContainerOnNode
init|=
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservedContainerOnNode
operator|!=
literal|null
condition|)
block|{
comment|// adding NP check as this proposal could not be allocated from reserved
comment|// container in async-scheduling mode
if|if
condition|(
name|allocation
operator|.
name|getAllocateFromReservedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|RMContainer
name|fromReservedContainer
init|=
name|allocation
operator|.
name|getAllocateFromReservedContainer
argument_list|()
operator|.
name|getRmContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|fromReservedContainer
operator|!=
name|reservedContainerOnNode
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try to allocate from a non-existed reserved container"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
comment|// Do we have enough space on this node?
name|Resource
name|availableResource
init|=
name|Resources
operator|.
name|clone
argument_list|(
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
decl_stmt|;
comment|// If we have any to-release container in non-reserved state, they are
comment|// from lazy-preemption, add their consumption to available resource
comment|// of this node
if|if
condition|(
name|allocation
operator|.
name|getToRelease
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|allocation
operator|.
name|getToRelease
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SchedulerContainer
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|releaseContainer
range|:
name|allocation
operator|.
name|getToRelease
argument_list|()
control|)
block|{
comment|// Only consider non-reserved container (reserved container will
comment|// not affect available resource of node) on the same node
if|if
condition|(
name|releaseContainer
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getState
argument_list|()
operator|!=
name|RMContainerState
operator|.
name|RESERVED
operator|&&
name|releaseContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|==
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|availableResource
argument_list|,
name|releaseContainer
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|Resources
operator|.
name|fitsIn
argument_list|(
name|rc
argument_list|,
name|allocation
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|,
name|availableResource
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Node doesn't have enough available resource, asked="
operator|+
name|allocation
operator|.
name|getAllocatedOrReservedResource
argument_list|()
operator|+
literal|" available="
operator|+
name|availableResource
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|accept (Resource cluster, ResourceCommitRequest<FiCaSchedulerApp, FiCaSchedulerNode> request)
specifier|public
name|boolean
name|accept
parameter_list|(
name|Resource
name|cluster
parameter_list|,
name|ResourceCommitRequest
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|request
parameter_list|)
block|{
name|ContainerRequest
name|containerRequest
init|=
literal|null
decl_stmt|;
name|boolean
name|reReservation
init|=
literal|false
decl_stmt|;
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// First make sure no container in release list in final state
if|if
condition|(
name|anyContainerInFinalState
argument_list|(
name|request
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// TODO, make sure all scheduler nodes are existed
comment|// TODO, make sure all node labels are not changed
if|if
condition|(
name|request
operator|.
name|anythingAllocatedOrReserved
argument_list|()
condition|)
block|{
comment|/*          * 1) If this is a newly allocated container, check if the node is reserved          *    / not-reserved by any other application          * 2) If this is a newly reserved container, check if the node is reserved or not          */
comment|// Assume we have only one container allocated or reserved
name|ContainerAllocationProposal
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|allocation
init|=
name|request
operator|.
name|getFirstAllocatedOrReservedContainer
argument_list|()
decl_stmt|;
name|SchedulerContainer
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|schedulerContainer
init|=
name|allocation
operator|.
name|getAllocatedOrReservedContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|schedulerContainer
operator|.
name|isAllocated
argument_list|()
condition|)
block|{
comment|// When allocate a new container
name|containerRequest
operator|=
name|schedulerContainer
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getContainerRequest
argument_list|()
expr_stmt|;
comment|// Check pending resource request
if|if
condition|(
operator|!
name|appSchedulingInfo
operator|.
name|checkAllocation
argument_list|(
name|allocation
operator|.
name|getAllocationLocalityType
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getSchedulerRequestKey
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No pending resource for: nodeType="
operator|+
name|allocation
operator|.
name|getAllocationLocalityType
argument_list|()
operator|+
literal|", node="
operator|+
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|+
literal|", requestKey="
operator|+
name|schedulerContainer
operator|.
name|getSchedulerRequestKey
argument_list|()
operator|+
literal|", application="
operator|+
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Common part of check container allocation regardless if it is a
comment|// increase container or regular container
if|if
condition|(
operator|!
name|commonCheckContainerAllocation
argument_list|(
name|allocation
argument_list|,
name|schedulerContainer
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// Container reserved first time will be NEW, after the container
comment|// accepted& confirmed, it will become RESERVED state
if|if
condition|(
name|schedulerContainer
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|RESERVED
condition|)
block|{
comment|// Check if node currently reserved by other application, there may
comment|// be some outdated proposals in async-scheduling environment
if|if
condition|(
name|schedulerContainer
operator|.
name|getRmContainer
argument_list|()
operator|!=
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|getReservedContainer
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try to re-reserve a container, but node "
operator|+
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|+
literal|" is already reserved by another container"
operator|+
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Set reReservation == true
name|reReservation
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// When reserve a resource (state == NEW is for new container,
comment|// state == RUNNING is for increase container).
comment|// Just check if the node is not already reserved by someone
if|if
condition|(
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|getReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try to reserve a container, but the node is "
operator|+
literal|"already reserved by another container="
operator|+
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Skip check parent if this is a re-reservation container
name|boolean
name|accepted
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|reReservation
condition|)
block|{
comment|// Check parent if anything allocated or reserved
if|if
condition|(
name|request
operator|.
name|anythingAllocatedOrReserved
argument_list|()
condition|)
block|{
name|accepted
operator|=
name|getCSLeafQueue
argument_list|()
operator|.
name|accept
argument_list|(
name|cluster
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
comment|// When rejected, recover resource requests for this app
if|if
condition|(
operator|!
name|accepted
operator|&&
name|containerRequest
operator|!=
literal|null
condition|)
block|{
name|recoverResourceRequestsForContainer
argument_list|(
name|containerRequest
argument_list|)
expr_stmt|;
block|}
return|return
name|accepted
return|;
block|}
DECL|method|apply (Resource cluster, ResourceCommitRequest<FiCaSchedulerApp, FiCaSchedulerNode> request)
specifier|public
name|void
name|apply
parameter_list|(
name|Resource
name|cluster
parameter_list|,
name|ResourceCommitRequest
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|request
parameter_list|)
block|{
name|boolean
name|reReservation
init|=
literal|false
decl_stmt|;
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// If we allocated something
if|if
condition|(
name|request
operator|.
name|anythingAllocatedOrReserved
argument_list|()
condition|)
block|{
name|ContainerAllocationProposal
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|allocation
init|=
name|request
operator|.
name|getFirstAllocatedOrReservedContainer
argument_list|()
decl_stmt|;
name|SchedulerContainer
argument_list|<
name|FiCaSchedulerApp
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|schedulerContainer
init|=
name|allocation
operator|.
name|getAllocatedOrReservedContainer
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|schedulerContainer
operator|.
name|getRmContainer
argument_list|()
decl_stmt|;
name|reReservation
operator|=
operator|(
operator|!
name|schedulerContainer
operator|.
name|isAllocated
argument_list|()
operator|)
operator|&&
operator|(
name|rmContainer
operator|.
name|getState
argument_list|()
operator|==
name|RMContainerState
operator|.
name|RESERVED
operator|)
expr_stmt|;
comment|// Generate new containerId if it is not an allocation for increasing
comment|// Or re-reservation
if|if
condition|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|rmContainer
operator|.
name|setContainerId
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|getNewContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ContainerId
name|containerId
init|=
name|rmContainer
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
if|if
condition|(
name|schedulerContainer
operator|.
name|isAllocated
argument_list|()
condition|)
block|{
comment|// This allocation is from a reserved container
comment|// Unreserve it first
if|if
condition|(
name|allocation
operator|.
name|getAllocateFromReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RMContainer
name|reservedContainer
init|=
name|allocation
operator|.
name|getAllocateFromReservedContainer
argument_list|()
operator|.
name|getRmContainer
argument_list|()
decl_stmt|;
comment|// Handling container allocation
comment|// Did we previously reserve containers at this 'priority'?
name|unreserve
argument_list|(
name|schedulerContainer
operator|.
name|getSchedulerRequestKey
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
block|}
comment|// Allocate a new container
name|addToNewlyAllocatedContainers
argument_list|(
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
name|liveContainers
operator|.
name|put
argument_list|(
name|containerId
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Deduct pending resource requests
name|ContainerRequest
name|containerRequest
init|=
name|appSchedulingInfo
operator|.
name|allocate
argument_list|(
name|allocation
operator|.
name|getAllocationLocalityType
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getSchedulerRequestKey
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getContainer
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RMContainerImpl
operator|)
name|rmContainer
operator|)
operator|.
name|setContainerRequest
argument_list|(
name|containerRequest
argument_list|)
expr_stmt|;
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|schedulerContainer
operator|.
name|getNodePartition
argument_list|()
argument_list|,
name|allocation
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
expr_stmt|;
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|containerId
argument_list|,
name|RMContainerEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
comment|// Inform the node
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
operator|.
name|allocateContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// update locality statistics,
name|incNumAllocatedContainers
argument_list|(
name|allocation
operator|.
name|getAllocationLocalityType
argument_list|()
argument_list|,
name|allocation
operator|.
name|getRequestLocalityType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: applicationAttemptId="
operator|+
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" container="
operator|+
name|containerId
operator|+
literal|" host="
operator|+
name|rmContainer
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|" type="
operator|+
name|allocation
operator|.
name|getAllocationLocalityType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|ALLOC_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|allocation
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the rmContainer's state is already updated to RESERVED, this is
comment|// a reReservation
name|reserve
argument_list|(
name|schedulerContainer
operator|.
name|getSchedulerRequestKey
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getSchedulerNode
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getRmContainer
argument_list|()
argument_list|,
name|schedulerContainer
operator|.
name|getRmContainer
argument_list|()
operator|.
name|getContainer
argument_list|()
argument_list|,
name|reReservation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Don't bother CS leaf queue if it is a re-reservation
if|if
condition|(
operator|!
name|reReservation
condition|)
block|{
name|getCSLeafQueue
argument_list|()
operator|.
name|apply
argument_list|(
name|cluster
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unreserve (SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, RMContainer rmContainer)
specifier|public
name|boolean
name|unreserve
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// Done with the reservation?
if|if
condition|(
name|internalUnreserve
argument_list|(
name|node
argument_list|,
name|schedulerKey
argument_list|)
condition|)
block|{
name|node
operator|.
name|unreserveResource
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Update reserved metrics
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|unreserveResource
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|getUser
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getReservedResource
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|decReservedResource
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getReservedResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|internalUnreserve (FiCaSchedulerNode node, SchedulerRequestKey schedulerKey)
specifier|private
name|boolean
name|internalUnreserve
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|!=
literal|null
condition|)
block|{
name|RMContainer
name|reservedContainer
init|=
name|reservedContainers
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// unreserve is now triggered in new scenarios (preemption)
comment|// as a consequence reservedcontainer might be null, adding NP-checks
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
operator|&&
name|reservedContainer
operator|.
name|getContainer
argument_list|()
operator|!=
literal|null
operator|&&
name|reservedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reservedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|reservedContainers
operator|.
name|remove
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
block|}
comment|// Reset the re-reservation count
name|resetReReservations
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
decl_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|decReserved
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" unreserved "
operator|+
literal|" on node "
operator|+
name|node
operator|+
literal|", currently has "
operator|+
name|reservedContainers
operator|.
name|size
argument_list|()
operator|+
literal|" at priority "
operator|+
name|schedulerKey
operator|.
name|getPriority
argument_list|()
operator|+
literal|"; currentReservation "
operator|+
name|this
operator|.
name|attemptResourceUsage
operator|.
name|getReserved
argument_list|()
operator|+
literal|" on node-label="
operator|+
name|node
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getTotalPendingRequestsPerPartition ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|getTotalPendingRequestsPerPartition
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulerRequestKey
name|schedulerKey
range|:
name|appSchedulingInfo
operator|.
name|getSchedulerKeys
argument_list|()
control|)
block|{
name|AppPlacementAllocator
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|ps
init|=
name|appSchedulingInfo
operator|.
name|getAppPlacementAllocator
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
name|String
name|nodePartition
init|=
name|ps
operator|.
name|getPrimaryRequestedNodePartition
argument_list|()
decl_stmt|;
name|Resource
name|res
init|=
name|ret
operator|.
name|get
argument_list|(
name|nodePartition
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|res
condition|)
block|{
name|res
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|nodePartition
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
name|PendingAsk
name|ask
init|=
name|ps
operator|.
name|getPendingAsk
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|ask
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|res
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|ask
operator|.
name|getPerAllocationResource
argument_list|()
argument_list|,
name|ask
operator|.
name|getCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|markContainerForPreemption (ContainerId cont)
specifier|public
name|void
name|markContainerForPreemption
parameter_list|(
name|ContainerId
name|cont
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// ignore already completed containers
if|if
condition|(
name|liveContainers
operator|.
name|containsKey
argument_list|(
name|cont
argument_list|)
condition|)
block|{
name|containersToPreempt
operator|.
name|add
argument_list|(
name|cont
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This method produces an Allocation that includes the current view    * of the resources that will be allocated to and preempted from this    * application.    *    * @param resourceCalculator resourceCalculator    * @param clusterResource clusterResource    * @param minimumAllocation minimumAllocation    * @return an allocation    */
DECL|method|getAllocation (ResourceCalculator resourceCalculator, Resource clusterResource, Resource minimumAllocation)
specifier|public
name|Allocation
name|getAllocation
parameter_list|(
name|ResourceCalculator
name|resourceCalculator
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|minimumAllocation
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|currentContPreemption
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|containersToPreempt
argument_list|)
argument_list|)
decl_stmt|;
name|containersToPreempt
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Resource
name|tot
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerId
name|c
range|:
name|currentContPreemption
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|tot
argument_list|,
name|liveContainers
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numCont
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|tot
argument_list|,
name|minimumAllocation
argument_list|)
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rr
init|=
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|)
operator|.
name|resourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|capability
argument_list|(
name|minimumAllocation
argument_list|)
operator|.
name|numContainers
argument_list|(
name|numCont
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|previousAttemptContainers
init|=
name|pullPreviousAttemptContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|newlyAllocatedContainers
init|=
name|pullNewlyAllocatedContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|newlyIncreasedContainers
init|=
name|pullNewlyIncreasedContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|newlyDecreasedContainers
init|=
name|pullNewlyDecreasedContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|newlyPromotedContainers
init|=
name|pullNewlyPromotedContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|newlyDemotedContainers
init|=
name|pullNewlyDemotedContainers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NMToken
argument_list|>
name|updatedNMTokens
init|=
name|pullUpdatedNMTokens
argument_list|()
decl_stmt|;
name|Resource
name|headroom
init|=
name|getHeadroom
argument_list|()
decl_stmt|;
name|setApplicationHeadroomForMetrics
argument_list|(
name|headroom
argument_list|)
expr_stmt|;
return|return
operator|new
name|Allocation
argument_list|(
name|newlyAllocatedContainers
argument_list|,
name|headroom
argument_list|,
literal|null
argument_list|,
name|currentContPreemption
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rr
argument_list|)
argument_list|,
name|updatedNMTokens
argument_list|,
name|newlyIncreasedContainers
argument_list|,
name|newlyDecreasedContainers
argument_list|,
name|newlyPromotedContainers
argument_list|,
name|newlyDemotedContainers
argument_list|,
name|previousAttemptContainers
argument_list|)
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNodeIdToUnreserve (SchedulerRequestKey schedulerKey, Resource resourceNeedUnreserve, ResourceCalculator resourceCalculator)
specifier|public
name|NodeId
name|getNodeIdToUnreserve
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|Resource
name|resourceNeedUnreserve
parameter_list|,
name|ResourceCalculator
name|resourceCalculator
parameter_list|)
block|{
comment|// first go around make this algorithm simple and just grab first
comment|// reservation that has enough resources
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|schedulerKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|reservedContainers
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|reservedContainers
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|entry
range|:
name|reservedContainers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RMContainer
name|reservedContainer
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Resource
name|reservedResource
init|=
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
decl_stmt|;
comment|// make sure we unreserve one with at least the same amount of
comment|// resources, otherwise could affect capacity limits
if|if
condition|(
name|Resources
operator|.
name|fitsIn
argument_list|(
name|resourceCalculator
argument_list|,
name|resourceNeedUnreserve
argument_list|,
name|reservedResource
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unreserving node with reservation size: "
operator|+
name|reservedResource
operator|+
literal|" in order to allocate container with size: "
operator|+
name|resourceNeedUnreserve
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeId
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|setHeadroomProvider ( CapacityHeadroomProvider headroomProvider)
specifier|public
name|void
name|setHeadroomProvider
parameter_list|(
name|CapacityHeadroomProvider
name|headroomProvider
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|this
operator|.
name|headroomProvider
operator|=
name|headroomProvider
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getHeadroom ()
specifier|public
name|Resource
name|getHeadroom
parameter_list|()
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|headroomProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|headroomProvider
operator|.
name|getHeadroom
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getHeadroom
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|transferStateFromPreviousAttempt ( SchedulerApplicationAttempt appAttempt)
specifier|public
name|void
name|transferStateFromPreviousAttempt
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|super
operator|.
name|transferStateFromPreviousAttempt
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|this
operator|.
name|headroomProvider
operator|=
operator|(
operator|(
name|FiCaSchedulerApp
operator|)
name|appAttempt
operator|)
operator|.
name|headroomProvider
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|reserve (SchedulerRequestKey schedulerKey, FiCaSchedulerNode node, RMContainer rmContainer, Container container, boolean reReservation)
specifier|public
name|void
name|reserve
parameter_list|(
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Container
name|container
parameter_list|,
name|boolean
name|reReservation
parameter_list|)
block|{
comment|// Update reserved metrics if this is the first reservation
comment|// rmContainer will be moved to reserved in the super.reserve
if|if
condition|(
operator|!
name|reReservation
condition|)
block|{
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|reserveResource
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|getUser
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Inform the application
name|rmContainer
operator|=
name|super
operator|.
name|reserve
argument_list|(
name|node
argument_list|,
name|schedulerKey
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
comment|// Update the node
name|node
operator|.
name|reserveResource
argument_list|(
name|this
argument_list|,
name|schedulerKey
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|findNodeToUnreserve (FiCaSchedulerNode node, SchedulerRequestKey schedulerKey, Resource minimumUnreservedResource)
specifier|public
name|RMContainer
name|findNodeToUnreserve
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|Resource
name|minimumUnreservedResource
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// need to unreserve some other container first
name|NodeId
name|idToUnreserve
init|=
name|getNodeIdToUnreserve
argument_list|(
name|schedulerKey
argument_list|,
name|minimumUnreservedResource
argument_list|,
name|rc
argument_list|)
decl_stmt|;
if|if
condition|(
name|idToUnreserve
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"checked to see if could unreserve for app but nothing "
operator|+
literal|"reserved that matches for this app"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|FiCaSchedulerNode
name|nodeToUnreserve
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getNode
argument_list|(
name|idToUnreserve
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeToUnreserve
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"node to unreserve doesn't exist, nodeid: "
operator|+
name|idToUnreserve
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unreserving for app: "
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" on nodeId: "
operator|+
name|idToUnreserve
operator|+
literal|" in order to replace reserved application and place it on node: "
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" needing: "
operator|+
name|minimumUnreservedResource
argument_list|)
expr_stmt|;
block|}
comment|// headroom
name|Resources
operator|.
name|addTo
argument_list|(
name|getHeadroom
argument_list|()
argument_list|,
name|nodeToUnreserve
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getReservedResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodeToUnreserve
operator|.
name|getReservedContainer
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getCSLeafQueue ()
specifier|public
name|LeafQueue
name|getCSLeafQueue
parameter_list|()
block|{
return|return
operator|(
name|LeafQueue
operator|)
name|queue
return|;
block|}
DECL|method|assignContainers (Resource clusterResource, CandidateNodeSet<FiCaSchedulerNode> ps, ResourceLimits currentResourceLimits, SchedulingMode schedulingMode, RMContainer reservedContainer)
specifier|public
name|CSAssignment
name|assignContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|CandidateNodeSet
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|ps
parameter_list|,
name|ResourceLimits
name|currentResourceLimits
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pre-assignContainers for application "
operator|+
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|showRequests
argument_list|()
expr_stmt|;
block|}
return|return
name|containerAllocator
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|ps
argument_list|,
name|schedulingMode
argument_list|,
name|currentResourceLimits
argument_list|,
name|reservedContainer
argument_list|)
return|;
block|}
DECL|method|nodePartitionUpdated (RMContainer rmContainer, String oldPartition, String newPartition)
specifier|public
name|void
name|nodePartitionUpdated
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|String
name|oldPartition
parameter_list|,
name|String
name|newPartition
parameter_list|)
block|{
name|Resource
name|containerResource
init|=
name|rmContainer
operator|.
name|getAllocatedResource
argument_list|()
decl_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|decUsed
argument_list|(
name|oldPartition
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|newPartition
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|getCSLeafQueue
argument_list|()
operator|.
name|decUsedResource
argument_list|(
name|oldPartition
argument_list|,
name|containerResource
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|getCSLeafQueue
argument_list|()
operator|.
name|incUsedResource
argument_list|(
name|newPartition
argument_list|,
name|containerResource
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// Update new partition name if container is AM and also update AM resource
if|if
condition|(
name|rmContainer
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
name|setAppAMNodePartitionName
argument_list|(
name|newPartition
argument_list|)
expr_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|decAMUsed
argument_list|(
name|oldPartition
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|incAMUsed
argument_list|(
name|newPartition
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|getCSLeafQueue
argument_list|()
operator|.
name|decAMUsedResource
argument_list|(
name|oldPartition
argument_list|,
name|containerResource
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|getCSLeafQueue
argument_list|()
operator|.
name|incAMUsedResource
argument_list|(
name|newPartition
argument_list|,
name|containerResource
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPendingAppDiagnosticMessage ( StringBuilder diagnosticMessage)
specifier|protected
name|void
name|getPendingAppDiagnosticMessage
parameter_list|(
name|StringBuilder
name|diagnosticMessage
parameter_list|)
block|{
name|LeafQueue
name|queue
init|=
name|getCSLeafQueue
argument_list|()
decl_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" Details : AM Partition = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|appAMNodePartitionName
operator|.
name|isEmpty
argument_list|()
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|appAMNodePartitionName
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"AM Resource Request = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|getAMResource
argument_list|(
name|appAMNodePartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue Resource Limit for AM = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queue
operator|.
name|getAMResourceLimitPerPartition
argument_list|(
name|appAMNodePartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"User AM Resource Limit of the queue = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queue
operator|.
name|getUserAMResourceLimitPerPartition
argument_list|(
name|appAMNodePartitionName
argument_list|,
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue AM Resource Usage = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getAMUsed
argument_list|(
name|appAMNodePartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
block|}
DECL|method|getActivedAppDiagnosticMessage ( StringBuilder diagnosticMessage)
specifier|protected
name|void
name|getActivedAppDiagnosticMessage
parameter_list|(
name|StringBuilder
name|diagnosticMessage
parameter_list|)
block|{
name|LeafQueue
name|queue
init|=
name|getCSLeafQueue
argument_list|()
decl_stmt|;
name|QueueCapacities
name|queueCapacities
init|=
name|queue
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|QueueResourceQuotas
name|queueResourceQuotas
init|=
name|queue
operator|.
name|getQueueResourceQuotas
argument_list|()
decl_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" Details : AM Partition = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|appAMNodePartitionName
operator|.
name|isEmpty
argument_list|()
condition|?
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
else|:
name|appAMNodePartitionName
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" ; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Partition Resource = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getResourceByLabel
argument_list|(
name|appAMNodePartitionName
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" ; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue's Absolute capacity = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queueCapacities
operator|.
name|getAbsoluteCapacity
argument_list|(
name|appAMNodePartitionName
argument_list|)
operator|*
literal|100
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" % ; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue's Absolute used capacity = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queueCapacities
operator|.
name|getAbsoluteUsedCapacity
argument_list|(
name|appAMNodePartitionName
argument_list|)
operator|*
literal|100
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" % ; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue's Absolute max capacity = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queueCapacities
operator|.
name|getAbsoluteMaximumCapacity
argument_list|(
name|appAMNodePartitionName
argument_list|)
operator|*
literal|100
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" % ; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue's capacity (absolute resource) = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queueResourceQuotas
operator|.
name|getEffectiveMinResource
argument_list|(
name|appAMNodePartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" ; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue's used capacity (absolute resource) = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
name|appAMNodePartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" ; "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|"Queue's max capacity (absolute resource) = "
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
name|queueResourceQuotas
operator|.
name|getEffectiveMaxResource
argument_list|(
name|appAMNodePartitionName
argument_list|)
argument_list|)
expr_stmt|;
name|diagnosticMessage
operator|.
name|append
argument_list|(
literal|" ; "
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the message temporarily if the reason is known for why scheduling did    * not happen for a given node, if not message will be over written    * @param message Message of app skip diagnostics    */
DECL|method|updateAppSkipNodeDiagnostics (String message)
specifier|public
name|void
name|updateAppSkipNodeDiagnostics
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|appSkipNodeDiagnostics
operator|=
name|message
expr_stmt|;
block|}
DECL|method|updateNodeInfoForAMDiagnostics (FiCaSchedulerNode node)
specifier|public
name|void
name|updateNodeInfoForAMDiagnostics
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|)
block|{
comment|// FIXME, update AM diagnostics when global scheduling is enabled
if|if
condition|(
literal|null
operator|==
name|node
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isWaitingForAMContainer
argument_list|()
condition|)
block|{
name|StringBuilder
name|diagnosticMessageBldr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|appSkipNodeDiagnostics
operator|!=
literal|null
condition|)
block|{
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
name|appSkipNodeDiagnostics
argument_list|)
expr_stmt|;
name|appSkipNodeDiagnostics
operator|=
literal|null
expr_stmt|;
block|}
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
name|CSAMContainerLaunchDiagnosticsConstants
operator|.
name|LAST_NODE_PROCESSED_MSG
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
literal|" ( Partition : "
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
name|node
operator|.
name|getLabels
argument_list|()
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
literal|", Total resource : "
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
name|node
operator|.
name|getTotalResource
argument_list|()
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
literal|", Available resource : "
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
name|node
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|diagnosticMessageBldr
operator|.
name|append
argument_list|(
literal|" )."
argument_list|)
expr_stmt|;
name|updateAMContainerDiagnostics
argument_list|(
name|AMState
operator|.
name|ACTIVATED
argument_list|,
name|diagnosticMessageBldr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getAppPlacementAllocator ( SchedulerRequestKey schedulerRequestKey)
specifier|public
name|AppPlacementAllocator
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|getAppPlacementAllocator
parameter_list|(
name|SchedulerRequestKey
name|schedulerRequestKey
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAppPlacementAllocator
argument_list|(
name|schedulerRequestKey
argument_list|)
return|;
block|}
comment|/**    * Recalculates the per-app, percent of queue metric, specific to the    * Capacity Scheduler.    */
annotation|@
name|Override
DECL|method|getResourceUsageReport ()
specifier|public
name|ApplicationResourceUsageReport
name|getResourceUsageReport
parameter_list|()
block|{
try|try
block|{
comment|// Use write lock here because
comment|// SchedulerApplicationAttempt#getResourceUsageReport updated fields
comment|// TODO: improve this
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|ApplicationResourceUsageReport
name|report
init|=
name|super
operator|.
name|getResourceUsageReport
argument_list|()
decl_stmt|;
name|Resource
name|cluster
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getClusterResource
argument_list|()
decl_stmt|;
name|Resource
name|totalPartitionRes
init|=
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getResourceByLabel
argument_list|(
name|getAppAMNodePartitionName
argument_list|()
argument_list|,
name|cluster
argument_list|)
decl_stmt|;
name|ResourceCalculator
name|calc
init|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|float
name|queueUsagePerc
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
operator|!
name|calc
operator|.
name|isInvalidDivisor
argument_list|(
name|totalPartitionRes
argument_list|)
condition|)
block|{
name|Resource
name|effCap
init|=
operator|(
operator|(
name|AbstractCSQueue
operator|)
name|getQueue
argument_list|()
operator|)
operator|.
name|getEffectiveCapacity
argument_list|(
name|getAppAMNodePartitionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|effCap
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
name|queueUsagePerc
operator|=
name|calc
operator|.
name|divide
argument_list|(
name|totalPartitionRes
argument_list|,
name|report
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|effCap
argument_list|)
operator|*
literal|100
expr_stmt|;
block|}
name|report
operator|.
name|setQueueUsagePercentage
argument_list|(
name|queueUsagePerc
argument_list|)
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getWriteLock ()
specifier|public
name|ReentrantReadWriteLock
operator|.
name|WriteLock
name|getWriteLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|writeLock
return|;
block|}
DECL|method|addToBeRemovedIncreaseRequest ( SchedContainerChangeRequest request)
specifier|public
name|void
name|addToBeRemovedIncreaseRequest
parameter_list|(
name|SchedContainerChangeRequest
name|request
parameter_list|)
block|{
name|toBeRemovedIncRequests
operator|.
name|put
argument_list|(
name|request
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
comment|/*    * Overriding to appease findbugs    */
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/*    * Overriding to appease findbugs    */
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
return|;
block|}
comment|/**    * Move reservation from one node to another    * Comparing to unreserve container on source node and reserve a new    * container on target node. This method will not create new RMContainer    * instance. And this operation is atomic.    *    * @param reservedContainer to be moved reserved container    * @param sourceNode source node    * @param targetNode target node    *    * @return succeeded or not    */
DECL|method|moveReservation (RMContainer reservedContainer, FiCaSchedulerNode sourceNode, FiCaSchedulerNode targetNode)
specifier|public
name|boolean
name|moveReservation
parameter_list|(
name|RMContainer
name|reservedContainer
parameter_list|,
name|FiCaSchedulerNode
name|sourceNode
parameter_list|,
name|FiCaSchedulerNode
name|targetNode
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sourceNode
operator|.
name|getPartition
argument_list|()
operator|.
name|equals
argument_list|(
name|targetNode
operator|.
name|getPartition
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to move reservation, two nodes are in different partition"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Update reserved container to node map
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|map
init|=
name|reservedContainers
operator|.
name|get
argument_list|(
name|reservedContainer
operator|.
name|getReservedSchedulerKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|map
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot find reserved container map."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Check if reserved container changed
if|if
condition|(
name|sourceNode
operator|.
name|getReservedContainer
argument_list|()
operator|!=
name|reservedContainer
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"To-be-moved container already updated."
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Check if target node is empty, acquires lock of target node to make sure
comment|// reservation happens transactional
synchronized|synchronized
init|(
name|targetNode
init|)
block|{
if|if
condition|(
name|targetNode
operator|.
name|getReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Target node is already occupied before moving"
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|targetNode
operator|.
name|reserveResource
argument_list|(
name|this
argument_list|,
name|reservedContainer
operator|.
name|getReservedSchedulerKey
argument_list|()
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reserve on target node failed, e="
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|// Set source node's reserved container to null
name|sourceNode
operator|.
name|setReservedContainer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|sourceNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update reserved container
name|reservedContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerReservedEvent
argument_list|(
name|reservedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|reservedContainer
operator|.
name|getReservedResource
argument_list|()
argument_list|,
name|targetNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|reservedContainer
operator|.
name|getReservedSchedulerKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add to target node
name|map
operator|.
name|put
argument_list|(
name|targetNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|reservedContainer
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

