begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.common.fica
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAuditLogger
operator|.
name|AuditConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityHeadroomProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Represents an application attempt from the viewpoint of the FIFO or Capacity  * scheduler.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|FiCaSchedulerApp
specifier|public
class|class
name|FiCaSchedulerApp
extends|extends
name|SchedulerApplicationAttempt
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|NULL_ASSIGNMENT
specifier|static
specifier|final
name|CSAssignment
name|NULL_ASSIGNMENT
init|=
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
decl_stmt|;
DECL|field|SKIP_ASSIGNMENT
specifier|static
specifier|final
name|CSAssignment
name|SKIP_ASSIGNMENT
init|=
operator|new
name|CSAssignment
argument_list|(
literal|true
argument_list|)
decl_stmt|;
DECL|field|containersToPreempt
specifier|private
specifier|final
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|containersToPreempt
init|=
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|headroomProvider
specifier|private
name|CapacityHeadroomProvider
name|headroomProvider
decl_stmt|;
DECL|field|rc
specifier|private
name|ResourceCalculator
name|rc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|scheduler
specifier|private
name|ResourceScheduler
name|scheduler
decl_stmt|;
DECL|method|FiCaSchedulerApp (ApplicationAttemptId applicationAttemptId, String user, Queue queue, ActiveUsersManager activeUsersManager, RMContext rmContext)
specifier|public
name|FiCaSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|activeUsersManager
argument_list|,
name|rmContext
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|FiCaSchedulerApp (ApplicationAttemptId applicationAttemptId, String user, Queue queue, ActiveUsersManager activeUsersManager, RMContext rmContext, Priority appPriority)
specifier|public
name|FiCaSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|String
name|user
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|ActiveUsersManager
name|activeUsersManager
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|Priority
name|appPriority
parameter_list|)
block|{
name|super
argument_list|(
name|applicationAttemptId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|activeUsersManager
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|amResource
decl_stmt|;
if|if
condition|(
name|rmApp
operator|==
literal|null
operator|||
name|rmApp
operator|.
name|getAMResourceRequest
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//the rmApp may be undefined (the resource manager checks for this too)
comment|//and unmanaged applications do not provide an amResource request
comment|//in these cases, provide a default using the scheduler
name|amResource
operator|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getMinimumResourceCapability
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|amResource
operator|=
name|rmApp
operator|.
name|getAMResourceRequest
argument_list|()
operator|.
name|getCapability
argument_list|()
expr_stmt|;
block|}
name|setAMResource
argument_list|(
name|amResource
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
name|appPriority
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|rmContext
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
if|if
condition|(
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|containerCompleted (RMContainer rmContainer, ContainerStatus containerStatus, RMContainerEventType event, String partition)
specifier|synchronized
specifier|public
name|boolean
name|containerCompleted
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|ContainerStatus
name|containerStatus
parameter_list|,
name|RMContainerEventType
name|event
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
comment|// Remove from the list of containers
if|if
condition|(
literal|null
operator|==
name|liveContainers
operator|.
name|remove
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Remove from the list of newly allocated containers if found
name|newlyAllocatedContainers
operator|.
name|remove
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|container
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerFinishedEvent
argument_list|(
name|containerId
argument_list|,
name|containerStatus
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Completed container: "
operator|+
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|+
literal|" in state: "
operator|+
name|rmContainer
operator|.
name|getState
argument_list|()
operator|+
literal|" event:"
operator|+
name|event
argument_list|)
expr_stmt|;
name|containersToPreempt
operator|.
name|remove
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|RELEASE_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
comment|// Update usage metrics
name|Resource
name|containerResource
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|releaseResources
argument_list|(
name|getUser
argument_list|()
argument_list|,
literal|1
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
name|attemptResourceUsage
operator|.
name|decUsed
argument_list|(
name|partition
argument_list|,
name|containerResource
argument_list|)
expr_stmt|;
comment|// Clear resource utilization metrics cache.
name|lastMemoryAggregateAllocationUpdateTime
operator|=
operator|-
literal|1
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|allocate (NodeType type, FiCaSchedulerNode node, Priority priority, ResourceRequest request, Container container)
specifier|synchronized
specifier|public
name|RMContainer
name|allocate
parameter_list|(
name|NodeType
name|type
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
if|if
condition|(
name|isStopped
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Required sanity check - AM can call 'allocate' to update resource
comment|// request without locking the scheduler, hence we need to check
if|if
condition|(
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Create RMContainer
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|this
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|appSchedulingInfo
operator|.
name|getUser
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
argument_list|,
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add it to allContainers list.
name|newlyAllocatedContainers
operator|.
name|add
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|liveContainers
operator|.
name|put
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Update consumption and track allocations
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequestList
init|=
name|appSchedulingInfo
operator|.
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
decl_stmt|;
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update resource requests related to "request" and store in RMContainer
operator|(
operator|(
name|RMContainerImpl
operator|)
name|rmContainer
operator|)
operator|.
name|setResourceRequests
argument_list|(
name|resourceRequestList
argument_list|)
expr_stmt|;
comment|// Inform the container
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|RMContainerEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"allocate: applicationAttemptId="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" container="
operator|+
name|container
operator|.
name|getId
argument_list|()
operator|+
literal|" host="
operator|+
name|container
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
name|RMAuditLogger
operator|.
name|logSuccess
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|AuditConstants
operator|.
name|ALLOC_CONTAINER
argument_list|,
literal|"SchedulerApp"
argument_list|,
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rmContainer
return|;
block|}
DECL|method|unreserve (Priority priority, FiCaSchedulerNode node, RMContainer rmContainer)
specifier|public
name|boolean
name|unreserve
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|)
block|{
comment|// Done with the reservation?
if|if
condition|(
name|unreserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|)
condition|)
block|{
name|node
operator|.
name|unreserveResource
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Update reserved metrics
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|unreserveResource
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|unreserve (FiCaSchedulerNode node, Priority priority)
specifier|public
specifier|synchronized
name|boolean
name|unreserve
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|!=
literal|null
condition|)
block|{
name|RMContainer
name|reservedContainer
init|=
name|reservedContainers
operator|.
name|remove
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// unreserve is now triggered in new scenarios (preemption)
comment|// as a consequence reservedcontainer might be null, adding NP-checks
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
operator|&&
name|reservedContainer
operator|.
name|getContainer
argument_list|()
operator|!=
literal|null
operator|&&
name|reservedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reservedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|reservedContainers
operator|.
name|remove
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
comment|// Reset the re-reservation count
name|resetReReservations
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|reservedContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|this
operator|.
name|attemptResourceUsage
operator|.
name|decReserved
argument_list|(
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" unreserved "
operator|+
literal|" on node "
operator|+
name|node
operator|+
literal|", currently has "
operator|+
name|reservedContainers
operator|.
name|size
argument_list|()
operator|+
literal|" at priority "
operator|+
name|priority
operator|+
literal|"; currentReservation "
operator|+
name|this
operator|.
name|attemptResourceUsage
operator|.
name|getReserved
argument_list|()
operator|+
literal|" on node-label="
operator|+
name|node
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|getLocalityWaitFactor ( Priority priority, int clusterNodes)
specifier|public
specifier|synchronized
name|float
name|getLocalityWaitFactor
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|int
name|clusterNodes
parameter_list|)
block|{
comment|// Estimate: Required unique resources (i.e. hosts + racks)
name|int
name|requiredResources
init|=
name|Math
operator|.
name|max
argument_list|(
name|this
operator|.
name|getResourceRequests
argument_list|(
name|priority
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// waitFactor can't be more than '1'
comment|// i.e. no point skipping more than clustersize opportunities
return|return
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|float
operator|)
name|requiredResources
operator|/
name|clusterNodes
operator|)
argument_list|,
literal|1.0f
argument_list|)
return|;
block|}
DECL|method|getTotalPendingRequests ()
specifier|public
specifier|synchronized
name|Resource
name|getTotalPendingRequests
parameter_list|()
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|rr
range|:
name|appSchedulingInfo
operator|.
name|getAllResourceRequests
argument_list|()
control|)
block|{
comment|// to avoid double counting we count only "ANY" resource requests
if|if
condition|(
name|ResourceRequest
operator|.
name|isAnyLocation
argument_list|(
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|ret
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|,
name|rr
operator|.
name|getNumContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|addPreemptContainer (ContainerId cont)
specifier|public
specifier|synchronized
name|void
name|addPreemptContainer
parameter_list|(
name|ContainerId
name|cont
parameter_list|)
block|{
comment|// ignore already completed containers
if|if
condition|(
name|liveContainers
operator|.
name|containsKey
argument_list|(
name|cont
argument_list|)
condition|)
block|{
name|containersToPreempt
operator|.
name|add
argument_list|(
name|cont
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method produces an Allocation that includes the current view    * of the resources that will be allocated to and preempted from this    * application.    *    * @param rc    * @param clusterResource    * @param minimumAllocation    * @return an allocation    */
DECL|method|getAllocation (ResourceCalculator rc, Resource clusterResource, Resource minimumAllocation)
specifier|public
specifier|synchronized
name|Allocation
name|getAllocation
parameter_list|(
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|minimumAllocation
parameter_list|)
block|{
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|currentContPreemption
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ContainerId
argument_list|>
argument_list|(
name|containersToPreempt
argument_list|)
argument_list|)
decl_stmt|;
name|containersToPreempt
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Resource
name|tot
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|ContainerId
name|c
range|:
name|currentContPreemption
control|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|tot
argument_list|,
name|liveContainers
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numCont
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|tot
argument_list|,
name|minimumAllocation
argument_list|)
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rr
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|minimumAllocation
argument_list|,
name|numCont
argument_list|)
decl_stmt|;
name|ContainersAndNMTokensAllocation
name|allocation
init|=
name|pullNewlyAllocatedContainersAndNMTokens
argument_list|()
decl_stmt|;
name|Resource
name|headroom
init|=
name|getHeadroom
argument_list|()
decl_stmt|;
name|setApplicationHeadroomForMetrics
argument_list|(
name|headroom
argument_list|)
expr_stmt|;
return|return
operator|new
name|Allocation
argument_list|(
name|allocation
operator|.
name|getContainerList
argument_list|()
argument_list|,
name|headroom
argument_list|,
literal|null
argument_list|,
name|currentContPreemption
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rr
argument_list|)
argument_list|,
name|allocation
operator|.
name|getNMTokenList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getNodeIdToUnreserve (Priority priority, Resource resourceNeedUnreserve, ResourceCalculator rc, Resource clusterResource)
specifier|synchronized
specifier|public
name|NodeId
name|getNodeIdToUnreserve
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|Resource
name|resourceNeedUnreserve
parameter_list|,
name|ResourceCalculator
name|rc
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
comment|// first go around make this algorithm simple and just grab first
comment|// reservation that has enough resources
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservedContainers
init|=
name|this
operator|.
name|reservedContainers
operator|.
name|get
argument_list|(
name|priority
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|reservedContainers
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|reservedContainers
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|entry
range|:
name|reservedContainers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|NodeId
name|nodeId
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Resource
name|containerResource
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
comment|// make sure we unreserve one with at least the same amount of
comment|// resources, otherwise could affect capacity limits
if|if
condition|(
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|resourceNeedUnreserve
argument_list|,
name|containerResource
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unreserving node with reservation size: "
operator|+
name|containerResource
operator|+
literal|" in order to allocate container with size: "
operator|+
name|resourceNeedUnreserve
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeId
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|setHeadroomProvider ( CapacityHeadroomProvider headroomProvider)
specifier|public
specifier|synchronized
name|void
name|setHeadroomProvider
parameter_list|(
name|CapacityHeadroomProvider
name|headroomProvider
parameter_list|)
block|{
name|this
operator|.
name|headroomProvider
operator|=
name|headroomProvider
expr_stmt|;
block|}
DECL|method|getHeadroomProvider ()
specifier|public
specifier|synchronized
name|CapacityHeadroomProvider
name|getHeadroomProvider
parameter_list|()
block|{
return|return
name|headroomProvider
return|;
block|}
annotation|@
name|Override
DECL|method|getHeadroom ()
specifier|public
specifier|synchronized
name|Resource
name|getHeadroom
parameter_list|()
block|{
if|if
condition|(
name|headroomProvider
operator|!=
literal|null
condition|)
block|{
return|return
name|headroomProvider
operator|.
name|getHeadroom
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getHeadroom
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|transferStateFromPreviousAttempt ( SchedulerApplicationAttempt appAttempt)
specifier|public
specifier|synchronized
name|void
name|transferStateFromPreviousAttempt
parameter_list|(
name|SchedulerApplicationAttempt
name|appAttempt
parameter_list|)
block|{
name|super
operator|.
name|transferStateFromPreviousAttempt
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|this
operator|.
name|headroomProvider
operator|=
operator|(
operator|(
name|FiCaSchedulerApp
operator|)
name|appAttempt
operator|)
operator|.
name|getHeadroomProvider
argument_list|()
expr_stmt|;
block|}
DECL|method|getActualNodeLocalityDelay ()
specifier|private
name|int
name|getActualNodeLocalityDelay
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|,
name|getCSLeafQueue
argument_list|()
operator|.
name|getNodeLocalityDelay
argument_list|()
argument_list|)
return|;
block|}
DECL|method|canAssign (Priority priority, FiCaSchedulerNode node, NodeType type, RMContainer reservedContainer)
specifier|private
name|boolean
name|canAssign
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
comment|// Clearly we need containers for this application...
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
if|if
condition|(
name|reservedContainer
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// 'Delay' off-switch
name|ResourceRequest
name|offSwitchRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|long
name|missedOpportunities
init|=
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|long
name|requiredContainers
init|=
name|offSwitchRequest
operator|.
name|getNumContainers
argument_list|()
decl_stmt|;
name|float
name|localityWaitFactor
init|=
name|getLocalityWaitFactor
argument_list|(
name|priority
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|requiredContainers
operator|*
name|localityWaitFactor
operator|)
operator|<
name|missedOpportunities
operator|)
return|;
block|}
comment|// Check if we need containers on this rack
name|ResourceRequest
name|rackLocalRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackLocalRequest
operator|==
literal|null
operator|||
name|rackLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If we are here, we do need containers on this rack for RACK_LOCAL req
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
comment|// 'Delay' rack-local just a little bit...
name|long
name|missedOpportunities
init|=
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
decl_stmt|;
return|return
name|getActualNodeLocalityDelay
argument_list|()
operator|<
name|missedOpportunities
return|;
block|}
comment|// Check if we need containers on this host
if|if
condition|(
name|type
operator|==
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
comment|// Now check if we need containers on this host...
name|ResourceRequest
name|nodeLocalRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLocalRequest
operator|!=
literal|null
condition|)
block|{
return|return
name|nodeLocalRequest
operator|.
name|getNumContainers
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|boolean
DECL|method|shouldAllocOrReserveNewContainer (Priority priority, Resource required)
name|shouldAllocOrReserveNewContainer
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|Resource
name|required
parameter_list|)
block|{
name|int
name|requiredContainers
init|=
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|int
name|reservedContainers
init|=
name|getNumReservedContainers
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|int
name|starvation
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|reservedContainers
operator|>
literal|0
condition|)
block|{
name|float
name|nodeFactor
init|=
name|Resources
operator|.
name|ratio
argument_list|(
name|rc
argument_list|,
name|required
argument_list|,
name|getCSLeafQueue
argument_list|()
operator|.
name|getMaximumAllocation
argument_list|()
argument_list|)
decl_stmt|;
comment|// Use percentage of node required to bias against large containers...
comment|// Protect against corner case where you need the whole node with
comment|// Math.min(nodeFactor, minimumAllocationFactor)
name|starvation
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|getReReservations
argument_list|(
name|priority
argument_list|)
operator|/
operator|(
name|float
operator|)
name|reservedContainers
operator|)
operator|*
operator|(
literal|1.0f
operator|-
operator|(
name|Math
operator|.
name|min
argument_list|(
name|nodeFactor
argument_list|,
name|getCSLeafQueue
argument_list|()
operator|.
name|getMinimumAllocationFactor
argument_list|()
argument_list|)
operator|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"needsContainers:"
operator|+
literal|" app.#re-reserve="
operator|+
name|getReReservations
argument_list|(
name|priority
argument_list|)
operator|+
literal|" reserved="
operator|+
name|reservedContainers
operator|+
literal|" nodeFactor="
operator|+
name|nodeFactor
operator|+
literal|" minAllocFactor="
operator|+
name|getCSLeafQueue
argument_list|()
operator|.
name|getMinimumAllocationFactor
argument_list|()
operator|+
literal|" starvation="
operator|+
name|starvation
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
operator|(
operator|(
name|starvation
operator|+
name|requiredContainers
operator|)
operator|-
name|reservedContainers
operator|)
operator|>
literal|0
operator|)
return|;
block|}
DECL|method|assignNodeLocalContainers (Resource clusterResource, ResourceRequest nodeLocalResourceRequest, FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer, MutableObject allocatedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|CSAssignment
name|assignNodeLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceRequest
name|nodeLocalResourceRequest
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|MutableObject
name|allocatedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|nodeLocalResourceRequest
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|reservedContainer
argument_list|,
name|allocatedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
return|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
return|;
block|}
DECL|method|assignRackLocalContainers (Resource clusterResource, ResourceRequest rackLocalResourceRequest, FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer, MutableObject allocatedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|CSAssignment
name|assignRackLocalContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceRequest
name|rackLocalResourceRequest
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|MutableObject
name|allocatedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|rackLocalResourceRequest
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|reservedContainer
argument_list|,
name|allocatedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
return|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
return|;
block|}
DECL|method|assignOffSwitchContainers (Resource clusterResource, ResourceRequest offSwitchResourceRequest, FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer, MutableObject allocatedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|CSAssignment
name|assignOffSwitchContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceRequest
name|offSwitchResourceRequest
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|MutableObject
name|allocatedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
if|if
condition|(
name|canAssign
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|)
condition|)
block|{
return|return
name|assignContainer
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|offSwitchResourceRequest
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|reservedContainer
argument_list|,
name|allocatedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
return|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
return|;
block|}
DECL|method|assignContainersOnNode (Resource clusterResource, FiCaSchedulerNode node, Priority priority, RMContainer reservedContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|CSAssignment
name|assignContainersOnNode
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
name|CSAssignment
name|assigned
decl_stmt|;
name|NodeType
name|requestType
init|=
literal|null
decl_stmt|;
name|MutableObject
name|allocatedContainer
init|=
operator|new
name|MutableObject
argument_list|()
decl_stmt|;
comment|// Data-local
name|ResourceRequest
name|nodeLocalResourceRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLocalResourceRequest
operator|!=
literal|null
condition|)
block|{
name|requestType
operator|=
name|NodeType
operator|.
name|NODE_LOCAL
expr_stmt|;
name|assigned
operator|=
name|assignNodeLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|nodeLocalResourceRequest
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|,
name|allocatedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|assigned
operator|.
name|getResource
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|//update locality statistics
if|if
condition|(
name|allocatedContainer
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|incNumAllocatedContainers
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|requestType
argument_list|)
expr_stmt|;
block|}
name|assigned
operator|.
name|setType
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
return|return
name|assigned
return|;
block|}
block|}
comment|// Rack-local
name|ResourceRequest
name|rackLocalResourceRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rackLocalResourceRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|rackLocalResourceRequest
operator|.
name|getRelaxLocality
argument_list|()
condition|)
block|{
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
if|if
condition|(
name|requestType
operator|!=
name|NodeType
operator|.
name|NODE_LOCAL
condition|)
block|{
name|requestType
operator|=
name|NodeType
operator|.
name|RACK_LOCAL
expr_stmt|;
block|}
name|assigned
operator|=
name|assignRackLocalContainers
argument_list|(
name|clusterResource
argument_list|,
name|rackLocalResourceRequest
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|,
name|allocatedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
expr_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|assigned
operator|.
name|getResource
argument_list|()
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|//update locality statistics
if|if
condition|(
name|allocatedContainer
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|incNumAllocatedContainers
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|requestType
argument_list|)
expr_stmt|;
block|}
name|assigned
operator|.
name|setType
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
return|return
name|assigned
return|;
block|}
block|}
comment|// Off-switch
name|ResourceRequest
name|offSwitchResourceRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
name|offSwitchResourceRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|offSwitchResourceRequest
operator|.
name|getRelaxLocality
argument_list|()
condition|)
block|{
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
if|if
condition|(
name|requestType
operator|!=
name|NodeType
operator|.
name|NODE_LOCAL
operator|&&
name|requestType
operator|!=
name|NodeType
operator|.
name|RACK_LOCAL
condition|)
block|{
name|requestType
operator|=
name|NodeType
operator|.
name|OFF_SWITCH
expr_stmt|;
block|}
name|assigned
operator|=
name|assignOffSwitchContainers
argument_list|(
name|clusterResource
argument_list|,
name|offSwitchResourceRequest
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|reservedContainer
argument_list|,
name|allocatedContainer
argument_list|,
name|schedulingMode
argument_list|,
name|currentResoureLimits
argument_list|)
expr_stmt|;
comment|// update locality statistics
if|if
condition|(
name|allocatedContainer
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|incNumAllocatedContainers
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|requestType
argument_list|)
expr_stmt|;
block|}
name|assigned
operator|.
name|setType
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
return|return
name|assigned
return|;
block|}
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
DECL|method|reserve (Priority priority, FiCaSchedulerNode node, RMContainer rmContainer, Container container)
specifier|public
name|void
name|reserve
parameter_list|(
name|Priority
name|priority
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Container
name|container
parameter_list|)
block|{
comment|// Update reserved metrics if this is the first reservation
if|if
condition|(
name|rmContainer
operator|==
literal|null
condition|)
block|{
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|reserveResource
argument_list|(
name|getUser
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Inform the application
name|rmContainer
operator|=
name|super
operator|.
name|reserve
argument_list|(
name|node
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
comment|// Update the node
name|node
operator|.
name|reserveResource
argument_list|(
name|this
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
DECL|method|getContainer (RMContainer rmContainer, FiCaSchedulerNode node, Resource capability, Priority priority)
specifier|private
name|Container
name|getContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
return|return
operator|(
name|rmContainer
operator|!=
literal|null
operator|)
condition|?
name|rmContainer
operator|.
name|getContainer
argument_list|()
else|:
name|createContainer
argument_list|(
name|node
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|createContainer (FiCaSchedulerNode node, Resource capability, Priority priority)
name|Container
name|createContainer
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getNodeID
argument_list|()
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|getNewContainerId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create the container
return|return
name|BuilderUtils
operator|.
name|newContainer
argument_list|(
name|containerId
argument_list|,
name|nodeId
argument_list|,
name|node
operator|.
name|getRMNode
argument_list|()
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|findNodeToUnreserve (Resource clusterResource, FiCaSchedulerNode node, Priority priority, Resource minimumUnreservedResource)
specifier|public
name|RMContainer
name|findNodeToUnreserve
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Resource
name|minimumUnreservedResource
parameter_list|)
block|{
comment|// need to unreserve some other container first
name|NodeId
name|idToUnreserve
init|=
name|getNodeIdToUnreserve
argument_list|(
name|priority
argument_list|,
name|minimumUnreservedResource
argument_list|,
name|rc
argument_list|,
name|clusterResource
argument_list|)
decl_stmt|;
if|if
condition|(
name|idToUnreserve
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"checked to see if could unreserve for app but nothing "
operator|+
literal|"reserved that matches for this app"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|FiCaSchedulerNode
name|nodeToUnreserve
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getNode
argument_list|(
name|idToUnreserve
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeToUnreserve
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"node to unreserve doesn't exist, nodeid: "
operator|+
name|idToUnreserve
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unreserving for app: "
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" on nodeId: "
operator|+
name|idToUnreserve
operator|+
literal|" in order to replace reserved application and place it on node: "
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" needing: "
operator|+
name|minimumUnreservedResource
argument_list|)
expr_stmt|;
block|}
comment|// headroom
name|Resources
operator|.
name|addTo
argument_list|(
name|getHeadroom
argument_list|()
argument_list|,
name|nodeToUnreserve
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getReservedResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodeToUnreserve
operator|.
name|getReservedContainer
argument_list|()
return|;
block|}
DECL|method|getCSLeafQueue ()
specifier|private
name|LeafQueue
name|getCSLeafQueue
parameter_list|()
block|{
return|return
operator|(
name|LeafQueue
operator|)
name|queue
return|;
block|}
DECL|method|assignContainer (Resource clusterResource, FiCaSchedulerNode node, Priority priority, ResourceRequest request, NodeType type, RMContainer rmContainer, MutableObject createdContainer, SchedulingMode schedulingMode, ResourceLimits currentResoureLimits)
specifier|private
name|CSAssignment
name|assignContainer
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|ResourceRequest
name|request
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|MutableObject
name|createdContainer
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|,
name|ResourceLimits
name|currentResoureLimits
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"assignContainers: node="
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" application="
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|.
name|getPriority
argument_list|()
operator|+
literal|" request="
operator|+
name|request
operator|+
literal|" type="
operator|+
name|type
argument_list|)
expr_stmt|;
block|}
comment|// check if the resource request can access the label
if|if
condition|(
operator|!
name|SchedulerUtils
operator|.
name|checkResourceRequestMatchingNodePartition
argument_list|(
name|request
argument_list|,
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|schedulingMode
argument_list|)
condition|)
block|{
comment|// this is a reserved container, but we cannot allocate it now according
comment|// to label not match. This can be caused by node label changed
comment|// We should un-reserve this container.
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|unreserve
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
name|Resource
name|capability
init|=
name|request
operator|.
name|getCapability
argument_list|()
decl_stmt|;
name|Resource
name|available
init|=
name|node
operator|.
name|getAvailableResource
argument_list|()
decl_stmt|;
name|Resource
name|totalResource
init|=
name|node
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Resources
operator|.
name|lessThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|capability
argument_list|,
name|totalResource
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Node : "
operator|+
name|node
operator|.
name|getNodeID
argument_list|()
operator|+
literal|" does not have sufficient resource for request : "
operator|+
name|request
operator|+
literal|" node total capability : "
operator|+
name|node
operator|.
name|getTotalResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
assert|assert
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|available
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
assert|;
comment|// Create the container if necessary
name|Container
name|container
init|=
name|getContainer
argument_list|(
name|rmContainer
argument_list|,
name|node
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|)
decl_stmt|;
comment|// something went wrong getting/creating the container
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get container for allocation!"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
name|boolean
name|shouldAllocOrReserveNewContainer
init|=
name|shouldAllocOrReserveNewContainer
argument_list|(
name|priority
argument_list|,
name|capability
argument_list|)
decl_stmt|;
comment|// Can we allocate a container on this node?
name|int
name|availableContainers
init|=
name|rc
operator|.
name|computeAvailableContainers
argument_list|(
name|available
argument_list|,
name|capability
argument_list|)
decl_stmt|;
comment|// How much need to unreserve equals to:
comment|// max(required - headroom, amountNeedUnreserve)
name|Resource
name|resourceNeedToUnReserve
init|=
name|Resources
operator|.
name|max
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|capability
argument_list|,
name|currentResoureLimits
operator|.
name|getHeadroom
argument_list|()
argument_list|)
argument_list|,
name|currentResoureLimits
operator|.
name|getAmountNeededUnreserve
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|needToUnreserve
init|=
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|resourceNeedToUnReserve
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
decl_stmt|;
name|RMContainer
name|unreservedContainer
init|=
literal|null
decl_stmt|;
name|boolean
name|reservationsContinueLooking
init|=
name|getCSLeafQueue
argument_list|()
operator|.
name|getReservationContinueLooking
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableContainers
operator|>
literal|0
condition|)
block|{
comment|// Allocate...
comment|// Did we previously reserve containers at this 'priority'?
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|unreserve
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reservationsContinueLooking
operator|&&
name|node
operator|.
name|getLabels
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// when reservationsContinueLooking is set, we may need to unreserve
comment|// some containers to meet this queue, its parents', or the users' resource limits.
comment|// TODO, need change here when we want to support continuous reservation
comment|// looking for labeled partitions.
if|if
condition|(
operator|!
name|shouldAllocOrReserveNewContainer
operator|||
name|needToUnreserve
condition|)
block|{
if|if
condition|(
operator|!
name|needToUnreserve
condition|)
block|{
comment|// If we shouldn't allocate/reserve new container then we should
comment|// unreserve one the same size we are asking for since the
comment|// currentResoureLimits.getAmountNeededUnreserve could be zero. If
comment|// the limit was hit then use the amount we need to unreserve to be
comment|// under the limit.
name|resourceNeedToUnReserve
operator|=
name|capability
expr_stmt|;
block|}
name|unreservedContainer
operator|=
name|findNodeToUnreserve
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|resourceNeedToUnReserve
argument_list|)
expr_stmt|;
comment|// When (minimum-unreserved-resource> 0 OR we cannot allocate new/reserved
comment|// container (That means we *have to* unreserve some resource to
comment|// continue)). If we failed to unreserve some resource, we can't continue.
if|if
condition|(
literal|null
operator|==
name|unreservedContainer
condition|)
block|{
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
block|}
comment|// Inform the application
name|RMContainer
name|allocatedContainer
init|=
name|allocate
argument_list|(
name|type
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|request
argument_list|,
name|container
argument_list|)
decl_stmt|;
comment|// Does the application need this resource?
if|if
condition|(
name|allocatedContainer
operator|==
literal|null
condition|)
block|{
name|CSAssignment
name|csAssignment
init|=
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|csAssignment
operator|.
name|setApplication
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|csAssignment
operator|.
name|setExcessReservation
argument_list|(
name|unreservedContainer
argument_list|)
expr_stmt|;
return|return
name|csAssignment
return|;
block|}
comment|// Inform the node
name|node
operator|.
name|allocateContainer
argument_list|(
name|allocatedContainer
argument_list|)
expr_stmt|;
comment|// Inform the ordering policy
name|getCSLeafQueue
argument_list|()
operator|.
name|getOrderingPolicy
argument_list|()
operator|.
name|containerAllocated
argument_list|(
name|this
argument_list|,
name|allocatedContainer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"assignedContainer"
operator|+
literal|" application attempt="
operator|+
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" container="
operator|+
name|container
operator|+
literal|" queue="
operator|+
name|this
operator|+
literal|" clusterResource="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
name|createdContainer
operator|.
name|setValue
argument_list|(
name|allocatedContainer
argument_list|)
expr_stmt|;
name|CSAssignment
name|assignment
init|=
operator|new
name|CSAssignment
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|assignment
operator|.
name|getAssignmentInformation
argument_list|()
operator|.
name|addAllocationDetails
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|getCSLeafQueue
argument_list|()
operator|.
name|getQueuePath
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|getAssignmentInformation
argument_list|()
operator|.
name|incrAllocations
argument_list|()
expr_stmt|;
name|assignment
operator|.
name|setApplication
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|assignment
operator|.
name|getAssignmentInformation
argument_list|()
operator|.
name|getAllocated
argument_list|()
argument_list|,
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setExcessReservation
argument_list|(
name|unreservedContainer
argument_list|)
expr_stmt|;
return|return
name|assignment
return|;
block|}
else|else
block|{
comment|// if we are allowed to allocate but this node doesn't have space, reserve it or
comment|// if this was an already a reserved container, reserve it again
if|if
condition|(
name|shouldAllocOrReserveNewContainer
operator|||
name|rmContainer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reservationsContinueLooking
operator|&&
name|rmContainer
operator|==
literal|null
condition|)
block|{
comment|// we could possibly ignoring queue capacity or user limits when
comment|// reservationsContinueLooking is set. Make sure we didn't need to unreserve
comment|// one.
if|if
condition|(
name|needToUnreserve
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"we needed to unreserve to be able to allocate"
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
comment|// Reserve by 'charging' in advance...
name|reserve
argument_list|(
name|priority
argument_list|,
name|node
argument_list|,
name|rmContainer
argument_list|,
name|container
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reserved container "
operator|+
literal|" application="
operator|+
name|getApplicationId
argument_list|()
operator|+
literal|" resource="
operator|+
name|request
operator|.
name|getCapability
argument_list|()
operator|+
literal|" queue="
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|" cluster="
operator|+
name|clusterResource
argument_list|)
expr_stmt|;
name|CSAssignment
name|assignment
init|=
operator|new
name|CSAssignment
argument_list|(
name|request
operator|.
name|getCapability
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|assignment
operator|.
name|getAssignmentInformation
argument_list|()
operator|.
name|addReservationDetails
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|getCSLeafQueue
argument_list|()
operator|.
name|getQueuePath
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|getAssignmentInformation
argument_list|()
operator|.
name|incrReservations
argument_list|()
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|assignment
operator|.
name|getAssignmentInformation
argument_list|()
operator|.
name|getReserved
argument_list|()
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|assignment
return|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
DECL|method|checkHeadroom (Resource clusterResource, ResourceLimits currentResourceLimits, Resource required, FiCaSchedulerNode node)
specifier|private
name|boolean
name|checkHeadroom
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|ResourceLimits
name|currentResourceLimits
parameter_list|,
name|Resource
name|required
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|)
block|{
comment|// If headroom + currentReservation< required, we cannot allocate this
comment|// require
name|Resource
name|resourceCouldBeUnReserved
init|=
name|getCurrentReservation
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getCSLeafQueue
argument_list|()
operator|.
name|getReservationContinueLooking
argument_list|()
operator|||
operator|!
name|node
operator|.
name|getPartition
argument_list|()
operator|.
name|equals
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
comment|// If we don't allow reservation continuous looking, OR we're looking at
comment|// non-default node partition, we won't allow to unreserve before
comment|// allocation.
name|resourceCouldBeUnReserved
operator|=
name|Resources
operator|.
name|none
argument_list|()
expr_stmt|;
block|}
return|return
name|Resources
operator|.
name|greaterThanOrEqual
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|currentResourceLimits
operator|.
name|getHeadroom
argument_list|()
argument_list|,
name|resourceCouldBeUnReserved
argument_list|)
argument_list|,
name|required
argument_list|)
return|;
block|}
DECL|method|assignContainers (Resource clusterResource, FiCaSchedulerNode node, ResourceLimits currentResourceLimits, SchedulingMode schedulingMode)
specifier|public
name|CSAssignment
name|assignContainers
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|FiCaSchedulerNode
name|node
parameter_list|,
name|ResourceLimits
name|currentResourceLimits
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"pre-assignContainers for application "
operator|+
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|showRequests
argument_list|()
expr_stmt|;
block|}
comment|// Check if application needs more resource, skip if it doesn't need more.
if|if
condition|(
operator|!
name|hasPendingResourceRequest
argument_list|(
name|rc
argument_list|,
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|clusterResource
argument_list|,
name|schedulingMode
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip app_attempt="
operator|+
name|getApplicationAttemptId
argument_list|()
operator|+
literal|", because it doesn't need more resource, schedulingMode="
operator|+
name|schedulingMode
operator|.
name|name
argument_list|()
operator|+
literal|" node-label="
operator|+
name|node
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// Check if this resource is on the blacklist
if|if
condition|(
name|SchedulerAppUtils
operator|.
name|isBlacklisted
argument_list|(
name|this
argument_list|,
name|node
argument_list|,
name|LOG
argument_list|)
condition|)
block|{
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
comment|// Schedule in priority order
for|for
control|(
name|Priority
name|priority
range|:
name|getPriorities
argument_list|()
control|)
block|{
name|ResourceRequest
name|anyRequest
init|=
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|anyRequest
condition|)
block|{
continue|continue;
block|}
comment|// Required resource
name|Resource
name|required
init|=
name|anyRequest
operator|.
name|getCapability
argument_list|()
decl_stmt|;
comment|// Do we need containers at this 'priority'?
if|if
condition|(
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|<=
literal|0
condition|)
block|{
continue|continue;
block|}
comment|// AM container allocation doesn't support non-exclusive allocation to
comment|// avoid painful of preempt an AM container
if|if
condition|(
name|schedulingMode
operator|==
name|SchedulingMode
operator|.
name|IGNORE_PARTITION_EXCLUSIVITY
condition|)
block|{
name|RMAppAttempt
name|rmAppAttempt
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmAppAttempt
operator|.
name|getSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
operator|==
literal|false
operator|&&
literal|null
operator|==
name|rmAppAttempt
operator|.
name|getMasterContainer
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip allocating AM container to app_attempt="
operator|+
name|getApplicationAttemptId
argument_list|()
operator|+
literal|", don't allow to allocate AM container in non-exclusive mode"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
comment|// Is the node-label-expression of this offswitch resource request
comment|// matches the node's label?
comment|// If not match, jump to next priority.
if|if
condition|(
operator|!
name|SchedulerUtils
operator|.
name|checkResourceRequestMatchingNodePartition
argument_list|(
name|anyRequest
argument_list|,
name|node
operator|.
name|getPartition
argument_list|()
argument_list|,
name|schedulingMode
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|getCSLeafQueue
argument_list|()
operator|.
name|getReservationContinueLooking
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|shouldAllocOrReserveNewContainer
argument_list|(
name|priority
argument_list|,
name|required
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"doesn't need containers based on reservation algo!"
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
block|}
if|if
condition|(
operator|!
name|checkHeadroom
argument_list|(
name|clusterResource
argument_list|,
name|currentResourceLimits
argument_list|,
name|required
argument_list|,
name|node
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"cannot allocate required resource="
operator|+
name|required
operator|+
literal|" because of headroom"
argument_list|)
expr_stmt|;
block|}
return|return
name|NULL_ASSIGNMENT
return|;
block|}
comment|// Inform the application it is about to get a scheduling opportunity
name|addSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
comment|// Increase missed-non-partitioned-resource-request-opportunity.
comment|// This is to make sure non-partitioned-resource-request will prefer
comment|// to be allocated to non-partitioned nodes
name|int
name|missedNonPartitionedRequestSchedulingOpportunity
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|anyRequest
operator|.
name|getNodeLabelExpression
argument_list|()
operator|.
name|equals
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
condition|)
block|{
name|missedNonPartitionedRequestSchedulingOpportunity
operator|=
name|addMissedNonPartitionedRequestSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schedulingMode
operator|==
name|SchedulingMode
operator|.
name|IGNORE_PARTITION_EXCLUSIVITY
condition|)
block|{
comment|// Before doing allocation, we need to check scheduling opportunity to
comment|// make sure : non-partitioned resource request should be scheduled to
comment|// non-partitioned partition first.
if|if
condition|(
name|missedNonPartitionedRequestSchedulingOpportunity
operator|<
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Skip app_attempt="
operator|+
name|getApplicationAttemptId
argument_list|()
operator|+
literal|" priority="
operator|+
name|priority
operator|+
literal|" because missed-non-partitioned-resource-request"
operator|+
literal|" opportunity under requred:"
operator|+
literal|" Now="
operator|+
name|missedNonPartitionedRequestSchedulingOpportunity
operator|+
literal|" required="
operator|+
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
block|}
comment|// Try to schedule
name|CSAssignment
name|assignment
init|=
name|assignContainersOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|,
name|schedulingMode
argument_list|,
name|currentResourceLimits
argument_list|)
decl_stmt|;
comment|// Did the application skip this node?
if|if
condition|(
name|assignment
operator|.
name|getSkipped
argument_list|()
condition|)
block|{
comment|// Don't count 'skipped nodes' as a scheduling opportunity!
name|subtractSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Did we schedule or reserve a container?
name|Resource
name|assigned
init|=
name|assignment
operator|.
name|getResource
argument_list|()
decl_stmt|;
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|rc
argument_list|,
name|clusterResource
argument_list|,
name|assigned
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{
comment|// Don't reset scheduling opportunities for offswitch assignments
comment|// otherwise the app will be delayed for each non-local assignment.
comment|// This helps apps with many off-cluster requests schedule faster.
if|if
condition|(
name|assignment
operator|.
name|getType
argument_list|()
operator|!=
name|NodeType
operator|.
name|OFF_SWITCH
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resetting scheduling opportunities"
argument_list|)
expr_stmt|;
block|}
name|resetSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
comment|// Non-exclusive scheduling opportunity is different: we need reset
comment|// it every time to make sure non-labeled resource request will be
comment|// most likely allocated on non-labeled nodes first.
name|resetMissedNonPartitionedRequestSchedulingOpportunity
argument_list|(
name|priority
argument_list|)
expr_stmt|;
comment|// Done
return|return
name|assignment
return|;
block|}
else|else
block|{
comment|// Do not assign out of order w.r.t priorities
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
block|}
block|}
return|return
name|SKIP_ASSIGNMENT
return|;
block|}
DECL|method|assignReservedContainer ( FiCaSchedulerNode node, RMContainer rmContainer, Resource clusterResource, SchedulingMode schedulingMode)
specifier|public
specifier|synchronized
name|CSAssignment
name|assignReservedContainer
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|RMContainer
name|rmContainer
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|SchedulingMode
name|schedulingMode
parameter_list|)
block|{
comment|// Do we still need this reservation?
name|Priority
name|priority
init|=
name|rmContainer
operator|.
name|getReservedPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// Release
return|return
operator|new
name|CSAssignment
argument_list|(
name|this
argument_list|,
name|rmContainer
argument_list|)
return|;
block|}
comment|// Try to assign if we have sufficient resources
name|CSAssignment
name|tmp
init|=
name|assignContainersOnNode
argument_list|(
name|clusterResource
argument_list|,
name|node
argument_list|,
name|priority
argument_list|,
name|rmContainer
argument_list|,
name|schedulingMode
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Doesn't matter... since it's already charged for at time of reservation
comment|// "re-reservation" is *free*
name|CSAssignment
name|ret
init|=
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|getAssignmentInformation
argument_list|()
operator|.
name|getNumAllocations
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|.
name|setFulfilledReservation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

