begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerCommonProtos
operator|.
name|VersionProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|AMRMTokenSecretManagerStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ApplicationAttemptStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ApplicationStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|EpochProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMZKUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|AMRMTokenSecretManagerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|Epoch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|AMRMTokenSecretManagerStatePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|EpochPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
operator|.
name|auth
operator|.
name|DigestAuthenticationProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Changes from 1.1 to 1.2, AMRMTokenSecretManager state has been saved  * separately. The currentMasterkey and nextMasterkey have been stored.  * Also, AMRMToken has been removed from ApplicationAttemptState.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ZKRMStateStore
specifier|public
class|class
name|ZKRMStateStore
extends|extends
name|RMStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|random
specifier|private
specifier|final
name|SecureRandom
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
DECL|field|ROOT_ZNODE_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_ZNODE_NAME
init|=
literal|"ZKRMStateRoot"
decl_stmt|;
DECL|field|CURRENT_VERSION_INFO
specifier|protected
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
DECL|field|RM_DELEGATION_TOKENS_ROOT_ZNODE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|RM_DELEGATION_TOKENS_ROOT_ZNODE_NAME
init|=
literal|"RMDelegationTokensRoot"
decl_stmt|;
DECL|field|RM_DT_SEQUENTIAL_NUMBER_ZNODE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|RM_DT_SEQUENTIAL_NUMBER_ZNODE_NAME
init|=
literal|"RMDTSequentialNumber"
decl_stmt|;
DECL|field|RM_DT_MASTER_KEYS_ROOT_ZNODE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|RM_DT_MASTER_KEYS_ROOT_ZNODE_NAME
init|=
literal|"RMDTMasterKeysRoot"
decl_stmt|;
DECL|field|numRetries
specifier|private
name|int
name|numRetries
decl_stmt|;
DECL|field|zkHostPort
specifier|private
name|String
name|zkHostPort
init|=
literal|null
decl_stmt|;
DECL|field|zkSessionTimeout
specifier|private
name|int
name|zkSessionTimeout
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|zkRetryInterval
name|long
name|zkRetryInterval
decl_stmt|;
DECL|field|zkAcl
specifier|private
name|List
argument_list|<
name|ACL
argument_list|>
name|zkAcl
decl_stmt|;
DECL|field|zkAuths
specifier|private
name|List
argument_list|<
name|ZKUtil
operator|.
name|ZKAuthInfo
argument_list|>
name|zkAuths
decl_stmt|;
comment|/**    *    * ROOT_DIR_PATH    * |--- VERSION_INFO    * |--- EPOCH_NODE    * |--- RM_ZK_FENCING_LOCK    * |--- RM_APP_ROOT    * |     |----- (#ApplicationId1)    * |     |        |----- (#ApplicationAttemptIds)    * |     |    * |     |----- (#ApplicationId2)    * |     |       |----- (#ApplicationAttemptIds)    * |     ....    * |    * |--- RM_DT_SECRET_MANAGER_ROOT    *        |----- RM_DT_SEQUENTIAL_NUMBER_ZNODE_NAME    *        |----- RM_DELEGATION_TOKENS_ROOT_ZNODE_NAME    *        |       |----- Token_1    *        |       |----- Token_2    *        |       ....    *        |    *        |----- RM_DT_MASTER_KEYS_ROOT_ZNODE_NAME    *        |      |----- Key_1    *        |      |----- Key_2    *                ....    * |--- AMRMTOKEN_SECRET_MANAGER_ROOT    *        |----- currentMasterKey    *        |----- nextMasterKey    *    */
DECL|field|zkRootNodePath
specifier|private
name|String
name|zkRootNodePath
decl_stmt|;
DECL|field|rmAppRoot
specifier|private
name|String
name|rmAppRoot
decl_stmt|;
DECL|field|rmDTSecretManagerRoot
specifier|private
name|String
name|rmDTSecretManagerRoot
decl_stmt|;
DECL|field|dtMasterKeysRootPath
specifier|private
name|String
name|dtMasterKeysRootPath
decl_stmt|;
DECL|field|delegationTokensRootPath
specifier|private
name|String
name|delegationTokensRootPath
decl_stmt|;
DECL|field|dtSequenceNumberPath
specifier|private
name|String
name|dtSequenceNumberPath
decl_stmt|;
DECL|field|amrmTokenSecretManagerRoot
specifier|private
name|String
name|amrmTokenSecretManagerRoot
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|znodeWorkingPath
specifier|protected
name|String
name|znodeWorkingPath
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|zkClient
specifier|protected
name|ZooKeeper
name|zkClient
decl_stmt|;
DECL|field|oldZkClient
specifier|private
name|ZooKeeper
name|oldZkClient
decl_stmt|;
comment|/** Fencing related variables */
DECL|field|FENCING_LOCK
specifier|private
specifier|static
specifier|final
name|String
name|FENCING_LOCK
init|=
literal|"RM_ZK_FENCING_LOCK"
decl_stmt|;
DECL|field|fencingNodePath
specifier|private
name|String
name|fencingNodePath
decl_stmt|;
DECL|field|createFencingNodePathOp
specifier|private
name|Op
name|createFencingNodePathOp
decl_stmt|;
DECL|field|deleteFencingNodePathOp
specifier|private
name|Op
name|deleteFencingNodePathOp
decl_stmt|;
DECL|field|verifyActiveStatusThread
specifier|private
name|Thread
name|verifyActiveStatusThread
decl_stmt|;
DECL|field|zkRootNodeUsername
specifier|private
name|String
name|zkRootNodeUsername
decl_stmt|;
DECL|field|zkRootNodePassword
specifier|private
specifier|final
name|String
name|zkRootNodePassword
init|=
name|Long
operator|.
name|toString
argument_list|(
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|zkRootNodeAcl
name|List
argument_list|<
name|ACL
argument_list|>
name|zkRootNodeAcl
decl_stmt|;
DECL|field|useDefaultFencingScheme
specifier|private
name|boolean
name|useDefaultFencingScheme
init|=
literal|false
decl_stmt|;
DECL|field|CREATE_DELETE_PERMS
specifier|public
specifier|static
specifier|final
name|int
name|CREATE_DELETE_PERMS
init|=
name|ZooDefs
operator|.
name|Perms
operator|.
name|CREATE
operator||
name|ZooDefs
operator|.
name|Perms
operator|.
name|DELETE
decl_stmt|;
DECL|field|zkRootNodeAuthScheme
specifier|private
specifier|final
name|String
name|zkRootNodeAuthScheme
init|=
operator|new
name|DigestAuthenticationProvider
argument_list|()
operator|.
name|getScheme
argument_list|()
decl_stmt|;
comment|/**    * Given the {@link Configuration} and {@link ACL}s used (zkAcl) for    * ZooKeeper access, construct the {@link ACL}s for the store's root node.    * In the constructed {@link ACL}, all the users allowed by zkAcl are given    * rwa access, while the current RM has exclude create-delete access.    *    * To be called only when HA is enabled and the configuration doesn't set ACL    * for the root node.    */
annotation|@
name|VisibleForTesting
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|constructZkRootNodeACL ( Configuration conf, List<ACL> sourceACLs)
specifier|protected
name|List
argument_list|<
name|ACL
argument_list|>
name|constructZkRootNodeACL
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|sourceACLs
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|zkRootNodeAcl
init|=
operator|new
name|ArrayList
argument_list|<
name|ACL
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ACL
name|acl
range|:
name|sourceACLs
control|)
block|{
name|zkRootNodeAcl
operator|.
name|add
argument_list|(
operator|new
name|ACL
argument_list|(
name|ZKUtil
operator|.
name|removeSpecificPerms
argument_list|(
name|acl
operator|.
name|getPerms
argument_list|()
argument_list|,
name|CREATE_DELETE_PERMS
argument_list|)
argument_list|,
name|acl
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|zkRootNodeUsername
operator|=
name|HAUtil
operator|.
name|getConfValueForRMInstance
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Id
name|rmId
init|=
operator|new
name|Id
argument_list|(
name|zkRootNodeAuthScheme
argument_list|,
name|DigestAuthenticationProvider
operator|.
name|generateDigest
argument_list|(
name|zkRootNodeUsername
operator|+
literal|":"
operator|+
name|zkRootNodePassword
argument_list|)
argument_list|)
decl_stmt|;
name|zkRootNodeAcl
operator|.
name|add
argument_list|(
operator|new
name|ACL
argument_list|(
name|CREATE_DELETE_PERMS
argument_list|,
name|rmId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|zkRootNodeAcl
return|;
block|}
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|zkHostPort
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkHostPort
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"No server address specified for "
operator|+
literal|"zookeeper state store for Resource Manager recovery. "
operator|+
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_NUM_RETRIES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_NUM_RETRIES
argument_list|)
expr_stmt|;
name|znodeWorkingPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_PARENT_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
argument_list|)
expr_stmt|;
name|zkSessionTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_TIMEOUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ZK_TIMEOUT_MS
argument_list|)
expr_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|zkRetryInterval
operator|=
name|zkSessionTimeout
operator|/
name|numRetries
expr_stmt|;
block|}
else|else
block|{
name|zkRetryInterval
operator|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_RETRY_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ZK_RETRY_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
name|zkAcl
operator|=
name|RMZKUtils
operator|.
name|getZKAcls
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|zkAuths
operator|=
name|RMZKUtils
operator|.
name|getZKAuths
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|zkRootNodePath
operator|=
name|getNodePath
argument_list|(
name|znodeWorkingPath
argument_list|,
name|ROOT_ZNODE_NAME
argument_list|)
expr_stmt|;
name|rmAppRoot
operator|=
name|getNodePath
argument_list|(
name|zkRootNodePath
argument_list|,
name|RM_APP_ROOT
argument_list|)
expr_stmt|;
comment|/* Initialize fencing related paths, acls, and ops */
name|fencingNodePath
operator|=
name|getNodePath
argument_list|(
name|zkRootNodePath
argument_list|,
name|FENCING_LOCK
argument_list|)
expr_stmt|;
name|createFencingNodePathOp
operator|=
name|Op
operator|.
name|create
argument_list|(
name|fencingNodePath
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|deleteFencingNodePathOp
operator|=
name|Op
operator|.
name|delete
argument_list|(
name|fencingNodePath
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|String
name|zkRootNodeAclConf
init|=
name|HAUtil
operator|.
name|getConfValueForRMInstance
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_ROOT_NODE_ACL
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkRootNodeAclConf
operator|!=
literal|null
condition|)
block|{
name|zkRootNodeAclConf
operator|=
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
name|zkRootNodeAclConf
argument_list|)
expr_stmt|;
try|try
block|{
name|zkRootNodeAcl
operator|=
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
name|zkRootNodeAclConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZKUtil
operator|.
name|BadAclFormatException
name|bafe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid format for "
operator|+
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_ROOT_NODE_ACL
argument_list|)
expr_stmt|;
throw|throw
name|bafe
throw|;
block|}
block|}
else|else
block|{
name|useDefaultFencingScheme
operator|=
literal|true
expr_stmt|;
name|zkRootNodeAcl
operator|=
name|constructZkRootNodeACL
argument_list|(
name|conf
argument_list|,
name|zkAcl
argument_list|)
expr_stmt|;
block|}
block|}
name|rmDTSecretManagerRoot
operator|=
name|getNodePath
argument_list|(
name|zkRootNodePath
argument_list|,
name|RM_DT_SECRET_MANAGER_ROOT
argument_list|)
expr_stmt|;
name|dtMasterKeysRootPath
operator|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|RM_DT_MASTER_KEYS_ROOT_ZNODE_NAME
argument_list|)
expr_stmt|;
name|delegationTokensRootPath
operator|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|RM_DELEGATION_TOKENS_ROOT_ZNODE_NAME
argument_list|)
expr_stmt|;
name|dtSequenceNumberPath
operator|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|RM_DT_SEQUENTIAL_NUMBER_ZNODE_NAME
argument_list|)
expr_stmt|;
name|amrmTokenSecretManagerRoot
operator|=
name|getNodePath
argument_list|(
name|zkRootNodePath
argument_list|,
name|AMRMTOKEN_SECRET_MANAGER_ROOT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startInternal ()
specifier|public
specifier|synchronized
name|void
name|startInternal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// createConnection for future API calls
name|createConnection
argument_list|()
expr_stmt|;
comment|// ensure root dirs exist
name|createRootDir
argument_list|(
name|znodeWorkingPath
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|zkRootNodePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|fence
argument_list|()
expr_stmt|;
name|verifyActiveStatusThread
operator|=
operator|new
name|VerifyActiveStatusThread
argument_list|()
expr_stmt|;
name|verifyActiveStatusThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|createRootDir
argument_list|(
name|rmAppRoot
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|rmDTSecretManagerRoot
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|dtMasterKeysRootPath
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|delegationTokensRootPath
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|dtSequenceNumberPath
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|amrmTokenSecretManagerRoot
argument_list|)
expr_stmt|;
block|}
DECL|method|createRootDir (final String rootPath)
specifier|private
name|void
name|createRootDir
parameter_list|(
specifier|final
name|String
name|rootPath
parameter_list|)
throws|throws
name|Exception
block|{
comment|// For root dirs, we shouldn't use the doMulti helper methods
operator|new
name|ZKAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
try|try
block|{
return|return
name|zkClient
operator|.
name|create
argument_list|(
name|rootPath
argument_list|,
literal|null
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
if|if
condition|(
name|ke
operator|.
name|code
argument_list|()
operator|==
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|rootPath
operator|+
literal|"znode already exists!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
name|ke
throw|;
block|}
block|}
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|logRootNodeAcls (String prefix)
specifier|private
name|void
name|logRootNodeAcls
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|Exception
block|{
name|Stat
name|getStat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|getAcls
init|=
name|getACLWithRetries
argument_list|(
name|zkRootNodePath
argument_list|,
name|getStat
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
for|for
control|(
name|ACL
name|acl
range|:
name|getAcls
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|acl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|getStat
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|fence ()
specifier|private
specifier|synchronized
name|void
name|fence
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logRootNodeAcls
argument_list|(
literal|"Before fencing\n"
argument_list|)
expr_stmt|;
block|}
operator|new
name|ZKAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkClient
operator|.
name|setACL
argument_list|(
name|zkRootNodePath
argument_list|,
name|zkRootNodeAcl
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
comment|// delete fencingnodepath
operator|new
name|ZKAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|zkClient
operator|.
name|multi
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|deleteFencingNodePathOp
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fencing node "
operator|+
name|fencingNodePath
operator|+
literal|" doesn't exist to delete"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logRootNodeAcls
argument_list|(
literal|"After fencing\n"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|closeZkClients ()
specifier|private
specifier|synchronized
name|void
name|closeZkClients
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|zkClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while closing ZK"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|zkClient
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|oldZkClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oldZkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while closing old ZK"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|oldZkClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|closeInternal ()
specifier|protected
specifier|synchronized
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|verifyActiveStatusThread
operator|!=
literal|null
condition|)
block|{
name|verifyActiveStatusThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|verifyActiveStatusThread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|closeZkClients
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|protected
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
annotation|@
name|Override
DECL|method|storeVersion ()
specifier|protected
specifier|synchronized
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|versionNodePath
init|=
name|getNodePath
argument_list|(
name|zkRootNodePath
argument_list|,
name|VERSION_NODE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
operator|(
name|VersionPBImpl
operator|)
name|CURRENT_VERSION_INFO
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|versionNodePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|setDataWithRetries
argument_list|(
name|versionNodePath
argument_list|,
name|data
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createWithRetries
argument_list|(
name|versionNodePath
argument_list|,
name|data
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|loadVersion ()
specifier|protected
specifier|synchronized
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|versionNodePath
init|=
name|getNodePath
argument_list|(
name|zkRootNodePath
argument_list|,
name|VERSION_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|versionNodePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|getDataWithRetries
argument_list|(
name|versionNodePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Version
name|version
init|=
operator|new
name|VersionPBImpl
argument_list|(
name|VersionProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|version
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getAndIncrementEpoch ()
specifier|public
specifier|synchronized
name|int
name|getAndIncrementEpoch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|epochNodePath
init|=
name|getNodePath
argument_list|(
name|zkRootNodePath
argument_list|,
name|EPOCH_NODE
argument_list|)
decl_stmt|;
name|int
name|currentEpoch
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|epochNodePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// load current epoch
name|byte
index|[]
name|data
init|=
name|getDataWithRetries
argument_list|(
name|epochNodePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Epoch
name|epoch
init|=
operator|new
name|EpochPBImpl
argument_list|(
name|EpochProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|currentEpoch
operator|=
name|epoch
operator|.
name|getEpoch
argument_list|()
expr_stmt|;
comment|// increment epoch and store it
name|byte
index|[]
name|storeData
init|=
name|Epoch
operator|.
name|newInstance
argument_list|(
name|currentEpoch
operator|+
literal|1
argument_list|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|setDataWithRetries
argument_list|(
name|epochNodePath
argument_list|,
name|storeData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// initialize epoch node with 1 for the next time.
name|byte
index|[]
name|storeData
init|=
name|Epoch
operator|.
name|newInstance
argument_list|(
name|currentEpoch
operator|+
literal|1
argument_list|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|createWithRetries
argument_list|(
name|epochNodePath
argument_list|,
name|storeData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
return|return
name|currentEpoch
return|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
specifier|synchronized
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
block|{
name|RMState
name|rmState
init|=
operator|new
name|RMState
argument_list|()
decl_stmt|;
comment|// recover DelegationTokenSecretManager
name|loadRMDTSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
comment|// recover RM applications
name|loadRMAppState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
comment|// recover AMRMTokenSecretManager
name|loadAMRMTokenSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
return|return
name|rmState
return|;
block|}
DECL|method|loadAMRMTokenSecretManagerState (RMState rmState)
specifier|private
name|void
name|loadAMRMTokenSecretManagerState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
name|getDataWithRetries
argument_list|(
name|amrmTokenSecretManagerRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"There is no data saved"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AMRMTokenSecretManagerStatePBImpl
name|stateData
init|=
operator|new
name|AMRMTokenSecretManagerStatePBImpl
argument_list|(
name|AMRMTokenSecretManagerStateProto
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|rmState
operator|.
name|amrmTokenSecretManagerState
operator|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|stateData
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|,
name|stateData
operator|.
name|getNextMasterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRMDTSecretManagerState (RMState rmState)
specifier|private
specifier|synchronized
name|void
name|loadRMDTSecretManagerState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|loadRMDelegationKeyState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
name|loadRMSequentialNumberState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
name|loadRMDelegationTokenState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
block|}
DECL|method|loadRMDelegationKeyState (RMState rmState)
specifier|private
name|void
name|loadRMDelegationKeyState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNodes
init|=
name|getChildrenWithRetries
argument_list|(
name|dtMasterKeysRootPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childNodeName
range|:
name|childNodes
control|)
block|{
name|String
name|childNodePath
init|=
name|getNodePath
argument_list|(
name|dtMasterKeysRootPath
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|getDataWithRetries
argument_list|(
name|childNodePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|childData
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Content of "
operator|+
name|childNodePath
operator|+
literal|" is broken."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|childData
argument_list|)
decl_stmt|;
name|DataInputStream
name|fsIn
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_KEY_PREFIX
argument_list|)
condition|)
block|{
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|masterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadRMSequentialNumberState (RMState rmState)
specifier|private
name|void
name|loadRMSequentialNumberState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|seqData
init|=
name|getDataWithRetries
argument_list|(
name|dtSequenceNumberPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|seqData
operator|!=
literal|null
condition|)
block|{
name|ByteArrayInputStream
name|seqIs
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|seqData
argument_list|)
decl_stmt|;
name|DataInputStream
name|seqIn
init|=
operator|new
name|DataInputStream
argument_list|(
name|seqIs
argument_list|)
decl_stmt|;
try|try
block|{
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|dtSequenceNumber
operator|=
name|seqIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|seqIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadRMDelegationTokenState (RMState rmState)
specifier|private
name|void
name|loadRMDelegationTokenState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNodes
init|=
name|getChildrenWithRetries
argument_list|(
name|delegationTokensRootPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childNodeName
range|:
name|childNodes
control|)
block|{
name|String
name|childNodePath
init|=
name|getNodePath
argument_list|(
name|delegationTokensRootPath
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|getDataWithRetries
argument_list|(
name|childNodePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|childData
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Content of "
operator|+
name|childNodePath
operator|+
literal|" is broken."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|childData
argument_list|)
decl_stmt|;
name|DataInputStream
name|fsIn
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_TOKEN_PREFIX
argument_list|)
condition|)
block|{
name|RMDelegationTokenIdentifier
name|identifier
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|long
name|renewDate
init|=
name|fsIn
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|delegationTokenState
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadRMAppState (RMState rmState)
specifier|private
specifier|synchronized
name|void
name|loadRMAppState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNodes
init|=
name|getChildrenWithRetries
argument_list|(
name|rmAppRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childNodeName
range|:
name|childNodes
control|)
block|{
name|String
name|childNodePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|getDataWithRetries
argument_list|(
name|childNodePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|ApplicationId
operator|.
name|appIdStrPrefix
argument_list|)
condition|)
block|{
comment|// application
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading application from znode: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
name|ApplicationStateDataPBImpl
name|appStateData
init|=
operator|new
name|ApplicationStateDataPBImpl
argument_list|(
name|ApplicationStateDataProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationState
name|appState
init|=
operator|new
name|ApplicationState
argument_list|(
name|appStateData
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getUser
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getState
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getFinishTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|appState
operator|.
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The child node name is different "
operator|+
literal|"from the application id"
argument_list|)
throw|;
block|}
name|rmState
operator|.
name|appState
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|loadApplicationAttemptState
argument_list|(
name|appState
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown child node with name: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadApplicationAttemptState (ApplicationState appState, ApplicationId appId)
specifier|private
name|void
name|loadApplicationAttemptState
parameter_list|(
name|ApplicationState
name|appState
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appPath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|attempts
init|=
name|getChildrenWithRetries
argument_list|(
name|appPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|attemptIDStr
range|:
name|attempts
control|)
block|{
if|if
condition|(
name|attemptIDStr
operator|.
name|startsWith
argument_list|(
name|ApplicationAttemptId
operator|.
name|appAttemptIdStrPrefix
argument_list|)
condition|)
block|{
name|String
name|attemptPath
init|=
name|getNodePath
argument_list|(
name|appPath
argument_list|,
name|attemptIDStr
argument_list|)
decl_stmt|;
name|byte
index|[]
name|attemptData
init|=
name|getDataWithRetries
argument_list|(
name|attemptPath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|attemptIDStr
argument_list|)
decl_stmt|;
name|ApplicationAttemptStateDataPBImpl
name|attemptStateData
init|=
operator|new
name|ApplicationAttemptStateDataPBImpl
argument_list|(
name|ApplicationAttemptStateDataProto
operator|.
name|parseFrom
argument_list|(
name|attemptData
argument_list|)
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|dibb
operator|.
name|reset
argument_list|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptState
name|attemptState
init|=
operator|new
name|ApplicationAttemptState
argument_list|(
name|attemptId
argument_list|,
name|attemptStateData
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|credentials
argument_list|,
name|attemptStateData
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getState
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|,
name|attemptStateData
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
decl_stmt|;
name|appState
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Done loading applications from ZK state store"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|appStateData
init|=
name|appStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|createWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|appStateData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateDataPB)
specifier|public
specifier|synchronized
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeUpdatePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing final state info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeUpdatePath
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|appStateData
init|=
name|appStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|nodeUpdatePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|setDataWithRetries
argument_list|(
name|nodeUpdatePath
argument_list|,
name|appStateData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createWithRetries
argument_list|(
name|nodeUpdatePath
argument_list|,
name|appStateData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|appId
operator|+
literal|" znode didn't exist. Created a new znode to"
operator|+
literal|" update the application state."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeApplicationAttemptStateInternal ( ApplicationAttemptId appAttemptId, ApplicationAttemptStateData attemptStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appDirPath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing info for attempt: "
operator|+
name|appAttemptId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|attemptStateData
init|=
name|attemptStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|createWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|attemptStateData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationAttemptStateInternal ( ApplicationAttemptId appAttemptId, ApplicationAttemptStateData attemptStateDataPB)
specifier|public
specifier|synchronized
name|void
name|updateApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appIdStr
init|=
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appAttemptIdStr
init|=
name|appAttemptId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appDirPath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appIdStr
argument_list|)
decl_stmt|;
name|String
name|nodeUpdatePath
init|=
name|getNodePath
argument_list|(
name|appDirPath
argument_list|,
name|appAttemptIdStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing final state info for attempt: "
operator|+
name|appAttemptIdStr
operator|+
literal|" at: "
operator|+
name|nodeUpdatePath
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|attemptStateData
init|=
name|attemptStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|nodeUpdatePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|setDataWithRetries
argument_list|(
name|nodeUpdatePath
argument_list|,
name|attemptStateData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createWithRetries
argument_list|(
name|nodeUpdatePath
argument_list|,
name|attemptStateData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|appAttemptId
operator|+
literal|" znode didn't exist. Created a new znode to"
operator|+
literal|" update the application attempt state."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeApplicationStateInternal (ApplicationState appState)
specifier|public
specifier|synchronized
name|void
name|removeApplicationStateInternal
parameter_list|(
name|ApplicationState
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appId
init|=
name|appState
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appIdRemovePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationAttemptId
name|attemptId
range|:
name|appState
operator|.
name|attempts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|attemptRemovePath
init|=
name|getNodePath
argument_list|(
name|appIdRemovePath
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|attemptRemovePath
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|appIdRemovePath
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|appIdRemovePath
operator|+
literal|" and its attempts."
argument_list|)
expr_stmt|;
block|}
name|doMultiWithRetries
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeRMDelegationTokenAndSequenceNumberState ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber)
specifier|protected
specifier|synchronized
name|void
name|storeRMDelegationTokenAndSequenceNumberState
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
name|addStoreOrUpdateOps
argument_list|(
name|opList
argument_list|,
name|rmDTIdentifier
argument_list|,
name|renewDate
argument_list|,
name|latestSequenceNumber
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doMultiWithRetries
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeRMDelegationTokenState ( RMDelegationTokenIdentifier rmDTIdentifier)
specifier|protected
specifier|synchronized
name|void
name|removeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|nodeRemovePath
init|=
name|getNodePath
argument_list|(
name|delegationTokensRootPath
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing RMDelegationToken_"
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existsWithRetries
argument_list|(
name|nodeRemovePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|nodeRemovePath
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempted to delete a non-existing znode "
operator|+
name|nodeRemovePath
argument_list|)
expr_stmt|;
block|}
name|doMultiWithRetries
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateRMDelegationTokenAndSequenceNumberInternal ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber)
specifier|protected
name|void
name|updateRMDelegationTokenAndSequenceNumberInternal
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|nodeRemovePath
init|=
name|getNodePath
argument_list|(
name|delegationTokensRootPath
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existsWithRetries
argument_list|(
name|nodeRemovePath
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// in case znode doesn't exist
name|addStoreOrUpdateOps
argument_list|(
name|opList
argument_list|,
name|rmDTIdentifier
argument_list|,
name|renewDate
argument_list|,
name|latestSequenceNumber
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempted to update a non-existing znode "
operator|+
name|nodeRemovePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// in case znode exists
name|addStoreOrUpdateOps
argument_list|(
name|opList
argument_list|,
name|rmDTIdentifier
argument_list|,
name|renewDate
argument_list|,
name|latestSequenceNumber
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|doMultiWithRetries
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
DECL|method|addStoreOrUpdateOps (ArrayList<Op> opList, RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber, boolean isUpdate)
specifier|private
name|void
name|addStoreOrUpdateOps
parameter_list|(
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
parameter_list|,
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
throws|throws
name|Exception
block|{
comment|// store RM delegation token
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|delegationTokensRootPath
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|tokenOs
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|tokenOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|tokenOs
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|seqOs
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|seqOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|seqOs
argument_list|)
decl_stmt|;
try|try
block|{
name|rmDTIdentifier
operator|.
name|write
argument_list|(
name|tokenOut
argument_list|)
expr_stmt|;
name|tokenOut
operator|.
name|writeLong
argument_list|(
name|renewDate
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
operator|(
name|isUpdate
condition|?
literal|"Storing "
else|:
literal|"Updating "
operator|)
operator|+
literal|"RMDelegationToken_"
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUpdate
condition|)
block|{
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|setData
argument_list|(
name|nodeCreatePath
argument_list|,
name|tokenOs
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|nodeCreatePath
argument_list|,
name|tokenOs
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|seqOut
operator|.
name|writeInt
argument_list|(
name|latestSequenceNumber
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
operator|(
name|isUpdate
condition|?
literal|"Storing "
else|:
literal|"Updating "
operator|)
operator|+
name|dtSequenceNumberPath
operator|+
literal|". SequenceNumber: "
operator|+
name|latestSequenceNumber
argument_list|)
expr_stmt|;
block|}
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|setData
argument_list|(
name|dtSequenceNumberPath
argument_list|,
name|seqOs
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tokenOs
operator|.
name|close
argument_list|()
expr_stmt|;
name|seqOs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|storeRMDTMasterKeyState ( DelegationKey delegationKey)
specifier|protected
specifier|synchronized
name|void
name|storeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|dtMasterKeysRootPath
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|fsOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing RMDelegationKey_"
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|delegationKey
operator|.
name|write
argument_list|(
name|fsOut
argument_list|)
expr_stmt|;
try|try
block|{
name|createWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeRMDTMasterKeyState ( DelegationKey delegationKey)
specifier|protected
specifier|synchronized
name|void
name|removeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeRemovePath
init|=
name|getNodePath
argument_list|(
name|dtMasterKeysRootPath
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing RMDelegationKey_"
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existsWithRetries
argument_list|(
name|nodeRemovePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|doMultiWithRetries
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|nodeRemovePath
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempted to delete a non-existing znode "
operator|+
name|nodeRemovePath
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteStore ()
specifier|public
specifier|synchronized
name|void
name|deleteStore
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|existsWithRetries
argument_list|(
name|zkRootNodePath
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|deleteWithRetries
argument_list|(
name|zkRootNodePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ZK related code
comment|/**    * Watcher implementation which forward events to the ZKRMStateStore This    * hides the ZK methods of the store from its public interface    */
DECL|class|ForwardingWatcher
specifier|private
specifier|final
class|class
name|ForwardingWatcher
implements|implements
name|Watcher
block|{
annotation|@
name|Override
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|ZKRMStateStore
operator|.
name|this
operator|.
name|processWatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process watcher event "
operator|+
name|event
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|processWatchEvent (WatchedEvent event)
specifier|public
specifier|synchronized
name|void
name|processWatchEvent
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|Event
operator|.
name|EventType
name|eventType
init|=
name|event
operator|.
name|getType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Watcher event type: "
operator|+
name|eventType
operator|+
literal|" with state:"
operator|+
name|event
operator|.
name|getState
argument_list|()
operator|+
literal|" for path:"
operator|+
name|event
operator|.
name|getPath
argument_list|()
operator|+
literal|" for "
operator|+
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventType
operator|==
name|Event
operator|.
name|EventType
operator|.
name|None
condition|)
block|{
comment|// the connection state has changed
switch|switch
condition|(
name|event
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|SyncConnected
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"ZKRMStateStore Session connected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldZkClient
operator|!=
literal|null
condition|)
block|{
comment|// the SyncConnected must be from the client that sent Disconnected
name|zkClient
operator|=
name|oldZkClient
expr_stmt|;
name|oldZkClient
operator|=
literal|null
expr_stmt|;
name|ZKRMStateStore
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZKRMStateStore Session restored"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Disconnected
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"ZKRMStateStore Session disconnected"
argument_list|)
expr_stmt|;
name|oldZkClient
operator|=
name|zkClient
expr_stmt|;
name|zkClient
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|Expired
case|:
comment|// the connection got terminated because of session timeout
comment|// call listener to reconnect
name|LOG
operator|.
name|info
argument_list|(
literal|"ZKRMStateStore Session expired"
argument_list|)
expr_stmt|;
name|createConnection
argument_list|()
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Zookeeper"
operator|+
literal|" watch event state: "
operator|+
name|event
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|getNodePath (String root, String nodeName)
name|String
name|getNodePath
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|(
name|root
operator|+
literal|"/"
operator|+
name|nodeName
operator|)
return|;
block|}
comment|/**    * Helper method that creates fencing node, executes the passed operations,    * and deletes the fencing node.    */
DECL|method|doMultiWithRetries ( final List<Op> opList)
specifier|private
specifier|synchronized
name|void
name|doMultiWithRetries
parameter_list|(
specifier|final
name|List
argument_list|<
name|Op
argument_list|>
name|opList
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Op
argument_list|>
name|execOpList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|(
name|opList
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
name|execOpList
operator|.
name|add
argument_list|(
name|createFencingNodePathOp
argument_list|)
expr_stmt|;
name|execOpList
operator|.
name|addAll
argument_list|(
name|opList
argument_list|)
expr_stmt|;
name|execOpList
operator|.
name|add
argument_list|(
name|deleteFencingNodePathOp
argument_list|)
expr_stmt|;
operator|new
name|ZKAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkClient
operator|.
name|multi
argument_list|(
name|execOpList
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper method that creates fencing node, executes the passed operation,    * and deletes the fencing node.    */
DECL|method|doMultiWithRetries (final Op op)
specifier|private
name|void
name|doMultiWithRetries
parameter_list|(
specifier|final
name|Op
name|op
parameter_list|)
throws|throws
name|Exception
block|{
name|doMultiWithRetries
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|createWithRetries ( final String path, final byte[] data, final List<ACL> acl, final CreateMode mode)
specifier|public
name|void
name|createWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
specifier|final
name|CreateMode
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
name|doMultiWithRetries
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|acl
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|setDataWithRetries (final String path, final byte[] data, final int version)
specifier|public
name|void
name|setDataWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|doMultiWithRetries
argument_list|(
name|Op
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|version
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|getDataWithRetries (final String path, final boolean watch)
specifier|public
name|byte
index|[]
name|getDataWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|watch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ZKAction
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|watch
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|getACLWithRetries ( final String path, final Stat stat)
specifier|private
name|List
argument_list|<
name|ACL
argument_list|>
name|getACLWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Stat
name|stat
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ZKAction
argument_list|<
name|List
argument_list|<
name|ACL
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|getACL
argument_list|(
name|path
argument_list|,
name|stat
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|getChildrenWithRetries ( final String path, final boolean watch)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getChildrenWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|watch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ZKAction
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|List
argument_list|<
name|String
argument_list|>
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
name|watch
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|existsWithRetries ( final String path, final boolean watch)
specifier|private
name|Stat
name|existsWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|watch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ZKAction
argument_list|<
name|Stat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Stat
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|exists
argument_list|(
name|path
argument_list|,
name|watch
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|deleteWithRetries ( final String path, final boolean watch)
specifier|private
name|void
name|deleteWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|watch
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|ZKAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
name|Void
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|recursiveDeleteWithRetriesHelper
argument_list|(
name|path
argument_list|,
name|watch
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper method that deletes znodes recursively    */
DECL|method|recursiveDeleteWithRetriesHelper (String path, boolean watch)
specifier|private
name|void
name|recursiveDeleteWithRetriesHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
name|watch
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|path
argument_list|,
name|watch
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|children
control|)
block|{
name|recursiveDeleteWithRetriesHelper
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper class that periodically attempts creating a znode to ensure that    * this RM continues to be the Active.    */
DECL|class|VerifyActiveStatusThread
specifier|private
class|class
name|VerifyActiveStatusThread
extends|extends
name|Thread
block|{
DECL|field|emptyOpList
specifier|private
name|List
argument_list|<
name|Op
argument_list|>
name|emptyOpList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|VerifyActiveStatusThread ()
name|VerifyActiveStatusThread
parameter_list|()
block|{
name|super
argument_list|(
name|VerifyActiveStatusThread
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|doMultiWithRetries
argument_list|(
name|emptyOpList
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|zkSessionTimeout
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|VerifyActiveStatusThread
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" thread "
operator|+
literal|"interrupted! Exiting!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|notifyStoreOperationFailed
argument_list|(
operator|new
name|StoreFencedException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|ZKAction
specifier|private
specifier|abstract
class|class
name|ZKAction
parameter_list|<
name|T
parameter_list|>
block|{
comment|// run() expects synchronization on ZKRMStateStore.this
DECL|method|run ()
specifier|abstract
name|T
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
function_decl|;
DECL|method|runWithCheck ()
name|T
name|runWithCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|ZKRMStateStore
operator|.
name|this
init|)
block|{
while|while
condition|(
name|zkClient
operator|==
literal|null
condition|)
block|{
name|ZKRMStateStore
operator|.
name|this
operator|.
name|wait
argument_list|(
name|zkSessionTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkClient
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
name|zkSessionTimeout
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wait for ZKClient creation timed out"
argument_list|)
throw|;
block|}
block|}
return|return
name|run
argument_list|()
return|;
block|}
block|}
DECL|method|shouldRetry (Code code)
specifier|private
name|boolean
name|shouldRetry
parameter_list|(
name|Code
name|code
parameter_list|)
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|CONNECTIONLOSS
case|:
case|case
name|OPERATIONTIMEOUT
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
DECL|method|runWithRetries ()
name|T
name|runWithRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|runWithCheck
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoAuthException
name|nae
parameter_list|)
block|{
if|if
condition|(
name|HAUtil
operator|.
name|isHAEnabled
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
comment|// NoAuthException possibly means that this store is fenced due to
comment|// another RM becoming active. Even if not,
comment|// it is safer to assume we have been fenced
throw|throw
operator|new
name|StoreFencedException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception while executing a ZK operation."
argument_list|,
name|ke
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldRetry
argument_list|(
name|ke
operator|.
name|code
argument_list|()
argument_list|)
operator|&&
operator|++
name|retry
operator|<
name|numRetries
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Retrying operation on ZK. Retry no. "
operator|+
name|retry
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|zkRetryInterval
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Maxed out ZK retries. Giving up!"
argument_list|)
expr_stmt|;
throw|throw
name|ke
throw|;
block|}
block|}
block|}
block|}
DECL|method|createConnection ()
specifier|private
specifier|synchronized
name|void
name|createConnection
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|closeZkClients
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|retries
init|=
literal|0
init|;
name|retries
operator|<
name|numRetries
operator|&&
name|zkClient
operator|==
literal|null
condition|;
name|retries
operator|++
control|)
block|{
try|try
block|{
name|zkClient
operator|=
name|getNewZooKeeper
argument_list|()
expr_stmt|;
for|for
control|(
name|ZKUtil
operator|.
name|ZKAuthInfo
name|zkAuth
range|:
name|zkAuths
control|)
block|{
name|zkClient
operator|.
name|addAuthInfo
argument_list|(
name|zkAuth
operator|.
name|getScheme
argument_list|()
argument_list|,
name|zkAuth
operator|.
name|getAuth
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useDefaultFencingScheme
condition|)
block|{
name|zkClient
operator|.
name|addAuthInfo
argument_list|(
name|zkRootNodeAuthScheme
argument_list|,
operator|(
name|zkRootNodeUsername
operator|+
literal|":"
operator|+
name|zkRootNodePassword
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Retry in case of network failures
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to connect to the ZooKeeper on attempt - "
operator|+
operator|(
name|retries
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|zkClient
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to connect to Zookeeper"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unable to connect to Zookeeper"
argument_list|)
throw|;
block|}
name|ZKRMStateStore
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created new ZK connection"
argument_list|)
expr_stmt|;
block|}
comment|// protected to mock for testing
annotation|@
name|VisibleForTesting
annotation|@
name|Private
annotation|@
name|Unstable
DECL|method|getNewZooKeeper ()
specifier|protected
specifier|synchronized
name|ZooKeeper
name|getNewZooKeeper
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ZooKeeper
name|zk
init|=
operator|new
name|ZooKeeper
argument_list|(
name|zkHostPort
argument_list|,
name|zkSessionTimeout
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|zk
operator|.
name|register
argument_list|(
operator|new
name|ForwardingWatcher
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|zk
return|;
block|}
annotation|@
name|Override
DECL|method|storeOrUpdateAMRMTokenSecretManagerState ( AMRMTokenSecretManagerState amrmTokenSecretManagerState, boolean isUpdate)
specifier|public
specifier|synchronized
name|void
name|storeOrUpdateAMRMTokenSecretManagerState
parameter_list|(
name|AMRMTokenSecretManagerState
name|amrmTokenSecretManagerState
parameter_list|,
name|boolean
name|isUpdate
parameter_list|)
block|{
name|AMRMTokenSecretManagerState
name|data
init|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|amrmTokenSecretManagerState
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stateData
init|=
name|data
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
try|try
block|{
name|setDataWithRetries
argument_list|(
name|amrmTokenSecretManagerRoot
argument_list|,
name|stateData
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Error storing info for AMRMTokenSecretManager"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|notifyStoreOperationFailed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

