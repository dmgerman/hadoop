begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerServiceProtos
operator|.
name|ApplicationAttemptStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerServiceProtos
operator|.
name|ApplicationStateDataProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationAttemptStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|Code
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Op
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|ZKRMStateStore
specifier|public
class|class
name|ZKRMStateStore
extends|extends
name|RMStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZKRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT_ZNODE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_ZNODE_NAME
init|=
literal|"ZKRMStateRoot"
decl_stmt|;
DECL|field|numRetries
specifier|private
name|int
name|numRetries
decl_stmt|;
DECL|field|zkHostPort
specifier|private
name|String
name|zkHostPort
init|=
literal|null
decl_stmt|;
DECL|field|zkSessionTimeout
specifier|private
name|int
name|zkSessionTimeout
decl_stmt|;
DECL|field|zkAcl
specifier|private
name|List
argument_list|<
name|ACL
argument_list|>
name|zkAcl
decl_stmt|;
DECL|field|zkRootNodePath
specifier|private
name|String
name|zkRootNodePath
decl_stmt|;
DECL|field|rmDTSecretManagerRoot
specifier|private
name|String
name|rmDTSecretManagerRoot
decl_stmt|;
DECL|field|rmAppRoot
specifier|private
name|String
name|rmAppRoot
decl_stmt|;
DECL|field|dtSequenceNumberPath
specifier|private
name|String
name|dtSequenceNumberPath
init|=
literal|null
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|znodeWorkingPath
specifier|protected
name|String
name|znodeWorkingPath
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|zkClient
specifier|protected
name|ZooKeeper
name|zkClient
decl_stmt|;
DECL|field|oldZkClient
specifier|private
name|ZooKeeper
name|oldZkClient
decl_stmt|;
annotation|@
name|Override
DECL|method|initInternal (Configuration conf)
specifier|public
specifier|synchronized
name|void
name|initInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|zkHostPort
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_ADDRESS
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkHostPort
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"No server address specified for "
operator|+
literal|"zookeeper state store for Resource Manager recovery. "
operator|+
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_ADDRESS
operator|+
literal|" is not configured."
argument_list|)
throw|;
block|}
name|numRetries
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_NUM_RETRIES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_NUM_RETRIES
argument_list|)
expr_stmt|;
name|znodeWorkingPath
operator|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_PARENT_PATH
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
argument_list|)
expr_stmt|;
name|zkSessionTimeout
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_TIMEOUT_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_TIMEOUT_MS
argument_list|)
expr_stmt|;
comment|// Parse authentication from configuration.
name|String
name|zkAclConf
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_ACL
argument_list|)
decl_stmt|;
name|zkAclConf
operator|=
name|ZKUtil
operator|.
name|resolveConfIndirection
argument_list|(
name|zkAclConf
argument_list|)
expr_stmt|;
try|try
block|{
name|zkAcl
operator|=
name|ZKUtil
operator|.
name|parseACLs
argument_list|(
name|zkAclConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ZKUtil
operator|.
name|BadAclFormatException
name|bafe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Invalid format for "
operator|+
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_ACL
argument_list|)
expr_stmt|;
throw|throw
name|bafe
throw|;
block|}
name|zkRootNodePath
operator|=
name|znodeWorkingPath
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
expr_stmt|;
name|rmDTSecretManagerRoot
operator|=
name|zkRootNodePath
operator|+
literal|"/"
operator|+
name|RM_DT_SECRET_MANAGER_ROOT
expr_stmt|;
name|rmAppRoot
operator|=
name|zkRootNodePath
operator|+
literal|"/"
operator|+
name|RM_APP_ROOT
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startInternal ()
specifier|public
specifier|synchronized
name|void
name|startInternal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// createConnection for future API calls
name|createConnection
argument_list|()
expr_stmt|;
comment|// ensure root dirs exist
name|createRootDir
argument_list|(
name|znodeWorkingPath
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|zkRootNodePath
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|rmDTSecretManagerRoot
argument_list|)
expr_stmt|;
name|createRootDir
argument_list|(
name|rmAppRoot
argument_list|)
expr_stmt|;
block|}
DECL|method|createRootDir (String rootPath)
specifier|private
name|void
name|createRootDir
parameter_list|(
name|String
name|rootPath
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|createWithRetries
argument_list|(
name|rootPath
argument_list|,
literal|null
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
if|if
condition|(
name|ke
operator|.
name|code
argument_list|()
operator|!=
name|Code
operator|.
name|NODEEXISTS
condition|)
block|{
throw|throw
name|ke
throw|;
block|}
block|}
block|}
DECL|method|closeZkClients ()
specifier|private
specifier|synchronized
name|void
name|closeZkClients
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|zkClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while closing ZK"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|zkClient
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|oldZkClient
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|oldZkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Interrupted while closing old ZK"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|oldZkClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|closeInternal ()
specifier|protected
specifier|synchronized
name|void
name|closeInternal
parameter_list|()
throws|throws
name|Exception
block|{
name|closeZkClients
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
specifier|synchronized
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
block|{
name|RMState
name|rmState
init|=
operator|new
name|RMState
argument_list|()
decl_stmt|;
comment|// recover DelegationTokenSecretManager
name|loadRMDTSecretManagerState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
comment|// recover RM applications
name|loadRMAppState
argument_list|(
name|rmState
argument_list|)
expr_stmt|;
return|return
name|rmState
return|;
block|}
DECL|method|loadRMDTSecretManagerState (RMState rmState)
specifier|private
specifier|synchronized
name|void
name|loadRMDTSecretManagerState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNodes
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|childNodeName
range|:
name|childNodes
control|)
block|{
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
argument_list|)
condition|)
block|{
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|dtSequenceNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|childNodeName
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|childNodePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|getDataWithRetries
argument_list|(
name|childNodePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|childData
argument_list|)
decl_stmt|;
name|DataInputStream
name|fsIn
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_KEY_PREFIX
argument_list|)
condition|)
block|{
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|()
decl_stmt|;
name|key
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|masterKeyState
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|DELEGATION_TOKEN_PREFIX
argument_list|)
condition|)
block|{
name|RMDelegationTokenIdentifier
name|identifier
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|()
decl_stmt|;
name|identifier
operator|.
name|readFields
argument_list|(
name|fsIn
argument_list|)
expr_stmt|;
name|long
name|renewDate
init|=
name|fsIn
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|rmState
operator|.
name|rmSecretManagerState
operator|.
name|delegationTokenState
operator|.
name|put
argument_list|(
name|identifier
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loadRMAppState (RMState rmState)
specifier|private
specifier|synchronized
name|void
name|loadRMAppState
parameter_list|(
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|childNodes
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|rmAppRoot
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptState
argument_list|>
name|attempts
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptState
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|childNodeName
range|:
name|childNodes
control|)
block|{
name|String
name|childNodePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|childNodeName
argument_list|)
decl_stmt|;
name|byte
index|[]
name|childData
init|=
name|getDataWithRetries
argument_list|(
name|childNodePath
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|ApplicationId
operator|.
name|appIdStrPrefix
argument_list|)
condition|)
block|{
comment|// application
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading application from znode: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
name|ApplicationStateDataPBImpl
name|appStateData
init|=
operator|new
name|ApplicationStateDataPBImpl
argument_list|(
name|ApplicationStateDataProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationState
name|appState
init|=
operator|new
name|ApplicationState
argument_list|(
name|appStateData
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|,
name|appStateData
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|appId
operator|.
name|equals
argument_list|(
name|appState
operator|.
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The child node name is different "
operator|+
literal|"from the application id"
argument_list|)
throw|;
block|}
name|rmState
operator|.
name|appState
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childNodeName
operator|.
name|startsWith
argument_list|(
name|ApplicationAttemptId
operator|.
name|appAttemptIdStrPrefix
argument_list|)
condition|)
block|{
comment|// attempt
name|LOG
operator|.
name|info
argument_list|(
literal|"Loading application attempt from znode: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|childNodeName
argument_list|)
decl_stmt|;
name|ApplicationAttemptStateDataPBImpl
name|attemptStateData
init|=
operator|new
name|ApplicationAttemptStateDataPBImpl
argument_list|(
name|ApplicationAttemptStateDataProto
operator|.
name|parseFrom
argument_list|(
name|childData
argument_list|)
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|credentials
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|DataInputByteBuffer
name|dibb
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|dibb
operator|.
name|reset
argument_list|(
name|attemptStateData
operator|.
name|getAppAttemptTokens
argument_list|()
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|readTokenStorageStream
argument_list|(
name|dibb
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptState
name|attemptState
init|=
operator|new
name|ApplicationAttemptState
argument_list|(
name|attemptId
argument_list|,
name|attemptStateData
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attemptId
operator|.
name|equals
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"The child node name is different "
operator|+
literal|"from the application attempt id"
argument_list|)
throw|;
block|}
name|attempts
operator|.
name|add
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown child node with name: "
operator|+
name|childNodeName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// go through all attempts and add them to their apps
for|for
control|(
name|ApplicationAttemptState
name|attemptState
range|:
name|attempts
control|)
block|{
name|ApplicationId
name|appId
init|=
name|attemptState
operator|.
name|getAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|ApplicationState
name|appState
init|=
name|rmState
operator|.
name|appState
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|appState
operator|!=
literal|null
condition|)
block|{
name|appState
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// the application znode may have been removed when the application
comment|// completed but the RM might have stopped before it could remove the
comment|// application attempt znodes
name|LOG
operator|.
name|info
argument_list|(
literal|"Application node not found for attempt: "
operator|+
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|deleteWithRetries
argument_list|(
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|attemptState
operator|.
name|getAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|storeApplicationState ( String appId, ApplicationStateDataPBImpl appStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationState
parameter_list|(
name|String
name|appId
parameter_list|,
name|ApplicationStateDataPBImpl
name|appStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|appStateData
init|=
name|appStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|createWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|appStateData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeApplicationAttemptState ( String attemptId, ApplicationAttemptStateDataPBImpl attemptStateDataPB)
specifier|public
specifier|synchronized
name|void
name|storeApplicationAttemptState
parameter_list|(
name|String
name|attemptId
parameter_list|,
name|ApplicationAttemptStateDataPBImpl
name|attemptStateDataPB
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing info for attempt: "
operator|+
name|attemptId
operator|+
literal|" at: "
operator|+
name|nodeCreatePath
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|attemptStateData
init|=
name|attemptStateDataPB
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|createWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|attemptStateData
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeApplicationState (ApplicationState appState)
specifier|public
specifier|synchronized
name|void
name|removeApplicationState
parameter_list|(
name|ApplicationState
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appId
init|=
name|appState
operator|.
name|getAppId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|nodeRemovePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|nodeRemovePath
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationAttemptId
name|attemptId
range|:
name|appState
operator|.
name|attempts
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|attemptRemovePath
init|=
name|getNodePath
argument_list|(
name|rmAppRoot
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|attemptRemovePath
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing info for app: "
operator|+
name|appId
operator|+
literal|" at: "
operator|+
name|nodeRemovePath
operator|+
literal|" and its attempts."
argument_list|)
expr_stmt|;
block|}
name|doMultiWithRetries
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeRMDelegationTokenAndSequenceNumberState ( RMDelegationTokenIdentifier rmDTIdentifier, Long renewDate, int latestSequenceNumber)
specifier|protected
specifier|synchronized
name|void
name|storeRMDelegationTokenAndSequenceNumberState
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|,
name|Long
name|renewDate
parameter_list|,
name|int
name|latestSequenceNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
init|=
operator|new
name|ArrayList
argument_list|<
name|Op
argument_list|>
argument_list|()
decl_stmt|;
comment|// store RM delegation token
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|fsOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
name|rmDTIdentifier
operator|.
name|write
argument_list|(
name|fsOut
argument_list|)
expr_stmt|;
name|fsOut
operator|.
name|writeLong
argument_list|(
name|renewDate
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing RMDelegationToken_"
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|nodeCreatePath
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// store sequence number
name|String
name|latestSequenceNumberPath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
operator|+
name|latestSequenceNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing "
operator|+
name|DELEGATION_TOKEN_SEQUENCE_NUMBER_PREFIX
operator|+
name|latestSequenceNumber
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dtSequenceNumberPath
operator|!=
literal|null
condition|)
block|{
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|delete
argument_list|(
name|dtSequenceNumberPath
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|opList
operator|.
name|add
argument_list|(
name|Op
operator|.
name|create
argument_list|(
name|latestSequenceNumberPath
argument_list|,
literal|null
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|dtSequenceNumberPath
operator|=
name|latestSequenceNumberPath
expr_stmt|;
name|doMultiWithRetries
argument_list|(
name|opList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeRMDelegationTokenState ( RMDelegationTokenIdentifier rmDTIdentifier)
specifier|protected
specifier|synchronized
name|void
name|removeRMDelegationTokenState
parameter_list|(
name|RMDelegationTokenIdentifier
name|rmDTIdentifier
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeRemovePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_TOKEN_PREFIX
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing RMDelegationToken_"
operator|+
name|rmDTIdentifier
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteWithRetries
argument_list|(
name|nodeRemovePath
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|storeRMDTMasterKeyState ( DelegationKey delegationKey)
specifier|protected
specifier|synchronized
name|void
name|storeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeCreatePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|fsOut
init|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing RMDelegationKey_"
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|delegationKey
operator|.
name|write
argument_list|(
name|fsOut
argument_list|)
expr_stmt|;
try|try
block|{
name|createWithRetries
argument_list|(
name|nodeCreatePath
argument_list|,
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|zkAcl
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|removeRMDTMasterKeyState ( DelegationKey delegationKey)
specifier|protected
specifier|synchronized
name|void
name|removeRMDTMasterKeyState
parameter_list|(
name|DelegationKey
name|delegationKey
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|nodeRemovePath
init|=
name|getNodePath
argument_list|(
name|rmDTSecretManagerRoot
argument_list|,
name|DELEGATION_KEY_PREFIX
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing RMDelegationKey_"
operator|+
name|delegationKey
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteWithRetries
argument_list|(
name|nodeRemovePath
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// ZK related code
comment|/**    * Watcher implementation which forward events to the ZKRMStateStore This    * hides the ZK methods of the store from its public interface    */
DECL|class|ForwardingWatcher
specifier|private
specifier|final
class|class
name|ForwardingWatcher
implements|implements
name|Watcher
block|{
annotation|@
name|Override
DECL|method|process (WatchedEvent event)
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|ZKRMStateStore
operator|.
name|this
operator|.
name|processWatchEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to process watcher event "
operator|+
name|event
operator|+
literal|": "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|processWatchEvent (WatchedEvent event)
specifier|public
specifier|synchronized
name|void
name|processWatchEvent
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|Event
operator|.
name|EventType
name|eventType
init|=
name|event
operator|.
name|getType
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Watcher event type: "
operator|+
name|eventType
operator|+
literal|" with state:"
operator|+
name|event
operator|.
name|getState
argument_list|()
operator|+
literal|" for path:"
operator|+
name|event
operator|.
name|getPath
argument_list|()
operator|+
literal|" for "
operator|+
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|eventType
operator|==
name|Event
operator|.
name|EventType
operator|.
name|None
condition|)
block|{
comment|// the connection state has changed
switch|switch
condition|(
name|event
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|SyncConnected
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"ZKRMStateStore Session connected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldZkClient
operator|!=
literal|null
condition|)
block|{
comment|// the SyncConnected must be from the client that sent Disconnected
name|zkClient
operator|=
name|oldZkClient
expr_stmt|;
name|oldZkClient
operator|=
literal|null
expr_stmt|;
name|ZKRMStateStore
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZKRMStateStore Session restored"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Disconnected
case|:
name|LOG
operator|.
name|info
argument_list|(
literal|"ZKRMStateStore Session disconnected"
argument_list|)
expr_stmt|;
name|oldZkClient
operator|=
name|zkClient
expr_stmt|;
name|zkClient
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|Expired
case|:
comment|// the connection got terminated because of session timeout
comment|// call listener to reconnect
name|LOG
operator|.
name|info
argument_list|(
literal|"Session expired"
argument_list|)
expr_stmt|;
name|createConnection
argument_list|()
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Zookeeper"
operator|+
literal|" watch event state: "
operator|+
name|event
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getNodePath (String root, String nodeName)
name|String
name|getNodePath
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
return|return
operator|(
name|root
operator|+
literal|"/"
operator|+
name|nodeName
operator|)
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|createWithRetries ( final String path, final byte[] data, final List<ACL> acl, final CreateMode mode)
specifier|public
name|String
name|createWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|List
argument_list|<
name|ACL
argument_list|>
name|acl
parameter_list|,
specifier|final
name|CreateMode
name|mode
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ZKAction
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|zkClient
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|acl
argument_list|,
name|mode
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|method|deleteWithRetries (final String path, final int version)
specifier|private
name|void
name|deleteWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|ZKAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|/**          * Call exists() to leave a watch on the node denoted by path.          * Delete node if exists. To pass the existence information to the          * caller, call delete irrespective of whether node exists or not.          */
if|if
condition|(
name|zkClient
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Trying to delete a path ("
operator|+
name|path
operator|+
literal|") that doesn't exist."
argument_list|)
expr_stmt|;
block|}
name|zkClient
operator|.
name|delete
argument_list|(
name|path
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
DECL|method|doMultiWithRetries (final ArrayList<Op> opList)
specifier|private
name|void
name|doMultiWithRetries
parameter_list|(
specifier|final
name|ArrayList
argument_list|<
name|Op
argument_list|>
name|opList
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|ZKAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkClient
operator|.
name|multi
argument_list|(
name|opList
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setDataWithRetries (final String path, final byte[] data, final int version)
specifier|public
name|void
name|setDataWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|byte
index|[]
name|data
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|ZKAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|version
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|getDataWithRetries (final String path, final boolean watch)
specifier|public
name|byte
index|[]
name|getDataWithRetries
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|boolean
name|watch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ZKAction
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
return|return
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
name|watch
argument_list|,
name|stat
argument_list|)
return|;
block|}
block|}
operator|.
name|runWithRetries
argument_list|()
return|;
block|}
DECL|class|ZKAction
specifier|private
specifier|abstract
class|class
name|ZKAction
parameter_list|<
name|T
parameter_list|>
block|{
comment|// run() expects synchronization on ZKRMStateStore.this
DECL|method|run ()
specifier|abstract
name|T
name|run
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
function_decl|;
DECL|method|runWithCheck ()
name|T
name|runWithCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|ZKRMStateStore
operator|.
name|this
init|)
block|{
while|while
condition|(
name|zkClient
operator|==
literal|null
condition|)
block|{
name|ZKRMStateStore
operator|.
name|this
operator|.
name|wait
argument_list|(
name|zkSessionTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|zkClient
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
name|zkSessionTimeout
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Wait for ZKClient creation timed out"
argument_list|)
throw|;
block|}
block|}
return|return
name|run
argument_list|()
return|;
block|}
block|}
DECL|method|runWithRetries ()
name|T
name|runWithRetries
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
return|return
name|runWithCheck
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ke
parameter_list|)
block|{
if|if
condition|(
name|shouldRetry
argument_list|(
name|ke
operator|.
name|code
argument_list|()
argument_list|)
operator|&&
operator|++
name|retry
operator|<
name|numRetries
condition|)
block|{
continue|continue;
block|}
throw|throw
name|ke
throw|;
block|}
block|}
block|}
block|}
DECL|method|shouldRetry (Code code)
specifier|private
specifier|static
name|boolean
name|shouldRetry
parameter_list|(
name|Code
name|code
parameter_list|)
block|{
switch|switch
condition|(
name|code
condition|)
block|{
case|case
name|CONNECTIONLOSS
case|:
case|case
name|OPERATIONTIMEOUT
case|:
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
DECL|method|createConnection ()
specifier|private
specifier|synchronized
name|void
name|createConnection
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|closeZkClients
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|retries
init|=
literal|0
init|;
name|retries
operator|<
name|numRetries
operator|&&
name|zkClient
operator|==
literal|null
condition|;
name|retries
operator|++
control|)
block|{
try|try
block|{
name|zkClient
operator|=
name|getNewZooKeeper
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// Retry in case of network failures
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to connect to the ZooKeeper on attempt - "
operator|+
operator|(
name|retries
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|zkClient
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to connect to Zookeeper"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Unable to connect to Zookeeper"
argument_list|)
throw|;
block|}
name|ZKRMStateStore
operator|.
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created new ZK connection"
argument_list|)
expr_stmt|;
block|}
comment|// protected to mock for testing
annotation|@
name|VisibleForTesting
DECL|method|getNewZooKeeper ()
specifier|protected
specifier|synchronized
name|ZooKeeper
name|getNewZooKeeper
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|ZooKeeper
name|zk
init|=
operator|new
name|ZooKeeper
argument_list|(
name|zkHostPort
argument_list|,
name|zkSessionTimeout
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|zk
operator|.
name|register
argument_list|(
operator|new
name|ForwardingWatcher
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|zk
return|;
block|}
block|}
end_class

end_unit

