begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Abstract base for all {@link FairScheduler} Placement Rules.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Unstable
DECL|class|FSPlacementRule
specifier|public
specifier|abstract
class|class
name|FSPlacementRule
extends|extends
name|PlacementRule
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FSPlacementRule
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Flag to show if the rule can create a queue
annotation|@
name|VisibleForTesting
DECL|field|createQueue
specifier|protected
name|boolean
name|createQueue
init|=
literal|true
decl_stmt|;
DECL|field|queueManager
specifier|private
name|QueueManager
name|queueManager
decl_stmt|;
DECL|field|parentRule
specifier|private
name|PlacementRule
name|parentRule
decl_stmt|;
comment|/**    * Get the {@link QueueManager} loaded from the scheduler when the rule is    * initialised. All rules are initialised before the can be called to place    * an application.    * @return The queue manager from the scheduler, this can never be    *<code>null</code> for an initialised rule.    */
DECL|method|getQueueManager ()
name|QueueManager
name|getQueueManager
parameter_list|()
block|{
return|return
name|queueManager
return|;
block|}
comment|/**    * Set a rule to generate the parent queue dynamically. The parent rule    * should only be called on rule creation when the policy is read from the    * configuration.    * @param parent A PlacementRule    */
DECL|method|setParentRule (PlacementRule parent)
specifier|public
name|void
name|setParentRule
parameter_list|(
name|PlacementRule
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parentRule
operator|=
name|parent
expr_stmt|;
block|}
comment|/**    * Get the rule that is set to generate the parent queue dynamically.    * @return The rule set or<code>null</code> if not set.    */
annotation|@
name|VisibleForTesting
DECL|method|getParentRule ()
specifier|public
name|PlacementRule
name|getParentRule
parameter_list|()
block|{
return|return
name|parentRule
return|;
block|}
comment|/**    * Set the config based on the type of object passed in.    * @param initArg the config to be set    */
annotation|@
name|Override
DECL|method|setConfig (Object initArg)
specifier|public
name|void
name|setConfig
parameter_list|(
name|Object
name|initArg
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|initArg
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Null object passed in: no config set"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|initArg
operator|instanceof
name|Element
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting config from XML"
argument_list|)
expr_stmt|;
name|setConfig
argument_list|(
operator|(
name|Element
operator|)
name|initArg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|initArg
operator|instanceof
name|Boolean
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting config from Boolean"
argument_list|)
expr_stmt|;
name|setConfig
argument_list|(
operator|(
name|Boolean
operator|)
name|initArg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unknown object type passed in as config for rule {}: {}"
argument_list|,
name|getName
argument_list|()
argument_list|,
name|initArg
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Set the rule config from the xml config.    * @param conf An xml element from the {@link FairScheduler#conf}    */
DECL|method|setConfig (Element conf)
specifier|protected
name|void
name|setConfig
parameter_list|(
name|Element
name|conf
parameter_list|)
block|{
comment|// Get the flag from the config (defaults to true if not set)
name|createQueue
operator|=
name|getCreateFlag
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the rule config just setting the create flag.    * @param create flag to allow queue creation for this rule    */
DECL|method|setConfig (Boolean create)
specifier|protected
name|void
name|setConfig
parameter_list|(
name|Boolean
name|create
parameter_list|)
block|{
name|createQueue
operator|=
name|create
expr_stmt|;
block|}
comment|/**    * Standard initialisation for {@link FairScheduler} rules, shared by all    * rules. Each rule that extends this abstract and overrides this method must    * call<code>super.initialize()</code> to run this basic initialisation.    * @param scheduler the scheduler using the rule    * @return<code>true</code> in all cases    * @throws IOException for any errors    */
annotation|@
name|Override
DECL|method|initialize (ResourceScheduler scheduler)
specifier|public
name|boolean
name|initialize
parameter_list|(
name|ResourceScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|scheduler
operator|instanceof
name|FairScheduler
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|getName
argument_list|()
operator|+
literal|" rule can only be configured for the FairScheduler"
argument_list|)
throw|;
block|}
if|if
condition|(
name|getParentRule
argument_list|()
operator|!=
literal|null
operator|&&
name|getParentRule
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Parent rule may not be the same type as the "
operator|+
literal|"child rule: "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|FairScheduler
name|fs
init|=
operator|(
name|FairScheduler
operator|)
name|scheduler
decl_stmt|;
name|queueManager
operator|=
name|fs
operator|.
name|getQueueManager
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**    * Check if the queue exists and is part of the configuration i.e. not    * a {@link FSQueue#isDynamic()} queue.    * @param queueName name of the queue to check    * @return<code>true</code> if the queue exists and is a "configured" queue    */
DECL|method|configuredQueue (String queueName)
name|boolean
name|configuredQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
name|FSQueue
name|queue
init|=
name|queueManager
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
return|return
operator|(
name|queue
operator|!=
literal|null
operator|&&
operator|!
name|queue
operator|.
name|isDynamic
argument_list|()
operator|)
return|;
block|}
comment|/**    * Get the create flag as set during the config setup.    * @return The value of the {@link #createQueue} flag    */
DECL|method|getCreateFlag ()
specifier|public
name|boolean
name|getCreateFlag
parameter_list|()
block|{
return|return
name|createQueue
return|;
block|}
comment|/**    * Get the create flag from the xml configuration element.    * @param conf The FS configuration element for the queue    * @return<code>false</code> only if the flag is set in the configuration to    * a text that is not case ignored "true",<code>true</code> in all other    * cases    */
DECL|method|getCreateFlag (Element conf)
name|boolean
name|getCreateFlag
parameter_list|(
name|Element
name|conf
parameter_list|)
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
condition|)
block|{
name|String
name|create
init|=
name|conf
operator|.
name|getAttribute
argument_list|(
literal|"create"
argument_list|)
decl_stmt|;
return|return
name|create
operator|.
name|isEmpty
argument_list|()
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|create
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

