begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|AttributeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeAttributeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeAttributesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeLabelUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|RMNodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|StringAttributeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AttributeMappingOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeToAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAttributesUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_comment
comment|/**  * Manager holding the attributes to Labels.  */
end_comment

begin_class
DECL|class|NodeAttributesManagerImpl
specifier|public
class|class
name|NodeAttributesManagerImpl
extends|extends
name|NodeAttributesManager
block|{
DECL|field|LOG
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|NodeAttributesManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * If a user doesn't specify value for a label, then empty string is    * considered as default.    */
DECL|field|EMPTY_ATTRIBUTE_VALUE
specifier|public
specifier|static
specifier|final
name|String
name|EMPTY_ATTRIBUTE_VALUE
init|=
literal|""
decl_stmt|;
DECL|field|dispatcher
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|store
name|NodeAttributeStore
name|store
decl_stmt|;
comment|// TODO may be we can have a better collection here.
comment|// this will be updated to get the attributeName to NM mapping
DECL|field|clusterAttributes
specifier|private
name|ConcurrentHashMap
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
name|clusterAttributes
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// hostname -> (Map (attributeName -> NodeAttribute))
comment|// Instead of NodeAttribute, plan to have it in future as AttributeValue
comment|// AttributeValue
comment|// / \
comment|// StringNodeAttributeValue LongAttributeValue
comment|// and convert the configured value to the specific type so that the
comment|// expression evaluations are faster
DECL|field|nodeCollections
specifier|private
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Host
argument_list|>
name|nodeCollections
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|readLock
specifier|private
specifier|final
name|ReadLock
name|readLock
decl_stmt|;
DECL|field|writeLock
specifier|private
specifier|final
name|WriteLock
name|writeLock
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
init|=
literal|null
decl_stmt|;
DECL|method|NodeAttributesManagerImpl ()
specifier|public
name|NodeAttributesManagerImpl
parameter_list|()
block|{
name|super
argument_list|(
literal|"NodeAttributesManagerImpl"
argument_list|)
expr_stmt|;
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|readLock
operator|=
name|lock
operator|.
name|readLock
argument_list|()
expr_stmt|;
name|writeLock
operator|=
name|lock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
block|}
DECL|method|initDispatcher (Configuration conf)
specifier|protected
name|void
name|initDispatcher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// create async handler
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|(
literal|"AttributeNodeLabelsManager dispatcher"
argument_list|)
expr_stmt|;
name|AsyncDispatcher
name|asyncDispatcher
init|=
operator|(
name|AsyncDispatcher
operator|)
name|dispatcher
decl_stmt|;
name|asyncDispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|asyncDispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
block|}
DECL|method|startDispatcher ()
specifier|protected
name|void
name|startDispatcher
parameter_list|()
block|{
comment|// start dispatcher
name|AsyncDispatcher
name|asyncDispatcher
init|=
operator|(
name|AsyncDispatcher
operator|)
name|dispatcher
decl_stmt|;
name|asyncDispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
name|initNodeAttributeStore
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
comment|// init dispatcher only when service start, because recover will happen in
comment|// service init, we don't want to trigger any event handling at that time.
name|initDispatcher
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|dispatcher
condition|)
block|{
name|dispatcher
operator|.
name|register
argument_list|(
name|NodeAttributesStoreEventType
operator|.
name|class
argument_list|,
operator|new
name|ForwardingEventHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|startDispatcher
argument_list|()
expr_stmt|;
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
block|}
DECL|method|initNodeAttributeStore (Configuration conf)
specifier|protected
name|void
name|initNodeAttributeStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|store
operator|=
name|getAttributeStoreClass
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|recover
argument_list|()
expr_stmt|;
block|}
DECL|method|getAttributeStoreClass (Configuration conf)
specifier|private
name|NodeAttributeStore
name|getAttributeStoreClass
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClass
argument_list|(
name|YarnConfiguration
operator|.
name|FS_NODE_ATTRIBUTE_STORE_IMPL_CLASS
argument_list|,
name|FileSystemNodeAttributeStore
operator|.
name|class
argument_list|,
name|NodeAttributeStore
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
literal|"Could not instantiate Node Attribute Store "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|internalUpdateAttributesOnNodes ( Map<String, Map<NodeAttribute, AttributeValue>> nodeAttributeMapping, AttributeMappingOperationType op, Map<NodeAttributeKey, RMNodeAttribute> newAttributesToBeAdded, String attributePrefix)
specifier|protected
name|void
name|internalUpdateAttributesOnNodes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|nodeAttributeMapping
parameter_list|,
name|AttributeMappingOperationType
name|op
parameter_list|,
name|Map
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
name|newAttributesToBeAdded
parameter_list|,
name|String
name|attributePrefix
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
comment|// shows node->attributes Mapped as part of this operation.
name|StringBuilder
name|logMsg
init|=
operator|new
name|StringBuilder
argument_list|(
name|op
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|logMsg
operator|.
name|append
argument_list|(
literal|" attributes on nodes:"
argument_list|)
expr_stmt|;
comment|// do update labels from nodes
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|entry
range|:
name|nodeAttributeMapping
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|nodeHost
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributes
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Host
name|node
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeHost
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
operator|new
name|Host
argument_list|(
name|nodeHost
argument_list|)
expr_stmt|;
name|nodeCollections
operator|.
name|put
argument_list|(
name|nodeHost
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|op
condition|)
block|{
case|case
name|REMOVE
case|:
name|removeNodeFromAttributes
argument_list|(
name|nodeHost
argument_list|,
name|attributes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|removeAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADD
case|:
name|clusterAttributes
operator|.
name|putAll
argument_list|(
name|newAttributesToBeAdded
argument_list|)
expr_stmt|;
name|addNodeToAttribute
argument_list|(
name|nodeHost
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|node
operator|.
name|addAttributes
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPLACE
case|:
name|clusterAttributes
operator|.
name|putAll
argument_list|(
name|newAttributesToBeAdded
argument_list|)
expr_stmt|;
name|replaceNodeToAttribute
argument_list|(
name|nodeHost
argument_list|,
name|attributePrefix
argument_list|,
name|node
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|node
operator|.
name|replaceAttributes
argument_list|(
name|attributes
argument_list|,
name|attributePrefix
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|logMsg
operator|.
name|append
argument_list|(
literal|" NM = "
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", attributes=[ "
argument_list|)
operator|.
name|append
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"] ,"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|logMsg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|dispatcher
operator|&&
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
operator|.
name|equals
argument_list|(
name|attributePrefix
argument_list|)
condition|)
block|{
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAttributesStoreEvent
argument_list|(
name|nodeAttributeMapping
argument_list|,
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Map used to notify RM
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|newNodeToAttributesMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|nodeAttributeMapping
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|Host
name|node
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|newNodeToAttributesMap
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|node
operator|.
name|attributes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// Notify RM
if|if
condition|(
name|rmContext
operator|!=
literal|null
operator|&&
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated NodeAttribute event to RM:"
operator|+
name|newNodeToAttributesMap
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAttributesUpdateSchedulerEvent
argument_list|(
name|newNodeToAttributesMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|removeNodeFromAttributes (String nodeHost, Set<NodeAttribute> attributeMappings)
specifier|private
name|void
name|removeNodeFromAttributes
parameter_list|(
name|String
name|nodeHost
parameter_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|attributeMappings
parameter_list|)
block|{
for|for
control|(
name|NodeAttribute
name|rmAttribute
range|:
name|attributeMappings
control|)
block|{
name|RMNodeAttribute
name|host
init|=
name|clusterAttributes
operator|.
name|get
argument_list|(
name|rmAttribute
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|host
operator|.
name|removeNode
argument_list|(
name|nodeHost
argument_list|)
expr_stmt|;
comment|// If there is no other host has such attribute,
comment|// remove it from the global mapping.
if|if
condition|(
name|host
operator|.
name|getAssociatedNodeIds
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterAttributes
operator|.
name|remove
argument_list|(
name|rmAttribute
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addNodeToAttribute (String nodeHost, Map<NodeAttribute, AttributeValue> attributeMappings)
specifier|private
name|void
name|addNodeToAttribute
parameter_list|(
name|String
name|nodeHost
parameter_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributeMappings
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributeEntry
range|:
name|attributeMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RMNodeAttribute
name|rmNodeAttribute
init|=
name|clusterAttributes
operator|.
name|get
argument_list|(
name|attributeEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmNodeAttribute
operator|!=
literal|null
condition|)
block|{
name|rmNodeAttribute
operator|.
name|addNode
argument_list|(
name|nodeHost
argument_list|,
name|attributeEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clusterAttributes
operator|.
name|put
argument_list|(
name|attributeEntry
operator|.
name|getKey
argument_list|()
operator|.
name|getAttributeKey
argument_list|()
argument_list|,
operator|new
name|RMNodeAttribute
argument_list|(
name|attributeEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|replaceNodeToAttribute (String nodeHost, String prefix, Map<NodeAttribute, AttributeValue> oldAttributeMappings, Map<NodeAttribute, AttributeValue> newAttributeMappings)
specifier|private
name|void
name|replaceNodeToAttribute
parameter_list|(
name|String
name|nodeHost
parameter_list|,
name|String
name|prefix
parameter_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|oldAttributeMappings
parameter_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|newAttributeMappings
parameter_list|)
block|{
if|if
condition|(
name|oldAttributeMappings
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|toRemoveAttributes
init|=
name|NodeLabelUtil
operator|.
name|filterAttributesByPrefix
argument_list|(
name|oldAttributeMappings
operator|.
name|keySet
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|removeNodeFromAttributes
argument_list|(
name|nodeHost
argument_list|,
name|toRemoveAttributes
argument_list|)
expr_stmt|;
block|}
name|addNodeToAttribute
argument_list|(
name|nodeHost
argument_list|,
name|newAttributeMappings
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param nodeAttributeMapping    * @param newAttributesToBeAdded    * @param isRemoveOperation : to indicate whether its a remove operation.    * @return Map of String to Map of NodeAttribute to AttributeValue    * @throws IOException : on invalid mapping in the current request or against    *           already existing NodeAttributes.    */
DECL|method|validate ( Map<String, Set<NodeAttribute>> nodeAttributeMapping, Map<NodeAttributeKey, RMNodeAttribute> newAttributesToBeAdded, boolean isRemoveOperation)
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|validate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeAttributeMapping
parameter_list|,
name|Map
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
name|newAttributesToBeAdded
parameter_list|,
name|boolean
name|isRemoveOperation
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|nodeToAttributesMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributesValues
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
argument_list|>
name|entrySet
init|=
name|nodeAttributeMapping
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeToAttrMappingEntry
range|:
name|entrySet
control|)
block|{
name|attributesValues
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|node
init|=
name|nodeToAttrMappingEntry
operator|.
name|getKey
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeToAttrMappingEntry
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// no attributes to map mostly remove operation
continue|continue;
block|}
comment|// validate for attributes
for|for
control|(
name|NodeAttribute
name|attribute
range|:
name|nodeToAttrMappingEntry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|NodeAttributeKey
name|attributeKey
init|=
name|attribute
operator|.
name|getAttributeKey
argument_list|()
decl_stmt|;
name|String
name|attributeName
init|=
name|attributeKey
operator|.
name|getAttributeName
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|NodeLabelUtil
operator|.
name|checkAndThrowAttributeName
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|NodeLabelUtil
operator|.
name|checkAndThrowAttributePrefix
argument_list|(
name|attributeKey
operator|.
name|getAttributePrefix
argument_list|()
argument_list|)
expr_stmt|;
name|NodeLabelUtil
operator|.
name|checkAndThrowAttributeValue
argument_list|(
name|attribute
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// ensure trimmed values are set back
name|attributeKey
operator|.
name|setAttributeName
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
name|attributeKey
operator|.
name|setAttributePrefix
argument_list|(
name|attributeKey
operator|.
name|getAttributePrefix
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify for type against prefix/attributeName
if|if
condition|(
name|validateForAttributeTypeMismatch
argument_list|(
name|isRemoveOperation
argument_list|,
name|attribute
argument_list|,
name|newAttributesToBeAdded
argument_list|)
condition|)
block|{
name|newAttributesToBeAdded
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getAttributeKey
argument_list|()
argument_list|,
operator|new
name|RMNodeAttribute
argument_list|(
name|attribute
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO type based value setting needs to be done using a factory
name|StringAttributeValue
name|value
init|=
operator|new
name|StringAttributeValue
argument_list|()
decl_stmt|;
name|value
operator|.
name|validateAndInitializeValue
argument_list|(
name|normalizeAttributeValue
argument_list|(
name|attribute
operator|.
name|getAttributeValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attributesValues
operator|.
name|put
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|nodeToAttributesMap
operator|.
name|put
argument_list|(
name|node
argument_list|,
name|attributesValues
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeToAttributesMap
return|;
block|}
comment|/**    *    * @param isRemoveOperation    * @param attribute    * @param newAttributes    * @return Whether its a new Attribute added    * @throws IOException    */
DECL|method|validateForAttributeTypeMismatch (boolean isRemoveOperation, NodeAttribute attribute, Map<NodeAttributeKey, RMNodeAttribute> newAttributes)
specifier|private
name|boolean
name|validateForAttributeTypeMismatch
parameter_list|(
name|boolean
name|isRemoveOperation
parameter_list|,
name|NodeAttribute
name|attribute
parameter_list|,
name|Map
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
name|newAttributes
parameter_list|)
throws|throws
name|IOException
block|{
name|NodeAttributeKey
name|attributeKey
init|=
name|attribute
operator|.
name|getAttributeKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|isRemoveOperation
operator|&&
operator|!
name|clusterAttributes
operator|.
name|containsKey
argument_list|(
name|attributeKey
argument_list|)
condition|)
block|{
comment|// no need to validate anything as its remove operation and attribute
comment|// doesn't exist.
return|return
literal|false
return|;
comment|// no need to add as its remove operation
block|}
else|else
block|{
comment|// already existing or attribute is mapped to another Node in the
comment|// current command, then check whether the attribute type is matching
name|NodeAttribute
name|existingAttribute
init|=
operator|(
name|clusterAttributes
operator|.
name|containsKey
argument_list|(
name|attributeKey
argument_list|)
condition|?
name|clusterAttributes
operator|.
name|get
argument_list|(
name|attributeKey
argument_list|)
operator|.
name|getAttribute
argument_list|()
else|:
operator|(
name|newAttributes
operator|.
name|containsKey
argument_list|(
name|attributeKey
argument_list|)
condition|?
name|newAttributes
operator|.
name|get
argument_list|(
name|attributeKey
argument_list|)
operator|.
name|getAttribute
argument_list|()
else|:
literal|null
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|existingAttribute
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|existingAttribute
operator|.
name|getAttributeType
argument_list|()
operator|!=
name|attribute
operator|.
name|getAttributeType
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attribute name - type is not matching with "
operator|+
literal|"already configured mapping for the attribute "
operator|+
name|attributeKey
operator|+
literal|" existing : "
operator|+
name|existingAttribute
operator|.
name|getAttributeType
argument_list|()
operator|+
literal|", new :"
operator|+
name|attribute
operator|.
name|getAttributeType
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|method|normalizeAttributeValue (String value)
specifier|protected
name|String
name|normalizeAttributeValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
operator|.
name|trim
argument_list|()
return|;
block|}
return|return
name|EMPTY_ATTRIBUTE_VALUE
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterNodeAttributes ( Set<String> prefix)
specifier|public
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|getClusterNodeAttributes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|prefix
parameter_list|)
block|{
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
name|attributes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
argument_list|>
name|allAttributes
init|=
name|clusterAttributes
operator|.
name|entrySet
argument_list|()
decl_stmt|;
comment|// Return all if prefix is not given.
name|boolean
name|forAllPrefix
init|=
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// Try search attributes by prefix and return valid ones.
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
argument_list|>
name|iterator
init|=
name|allAttributes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
name|current
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeAttributeKey
name|attrID
init|=
name|current
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RMNodeAttribute
name|rmAttr
init|=
name|current
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|forAllPrefix
operator|||
name|prefix
operator|.
name|contains
argument_list|(
name|attrID
operator|.
name|getAttributePrefix
argument_list|()
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|add
argument_list|(
name|rmAttr
operator|.
name|getAttribute
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|NodeAttributeKey
argument_list|,
DECL|method|getAttributesToNodes ( Set<NodeAttributeKey> attributes)
name|Map
argument_list|<
name|String
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|getAttributesToNodes
parameter_list|(
name|Set
argument_list|<
name|NodeAttributeKey
argument_list|>
name|attributes
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|fetchAllAttributes
init|=
operator|(
name|attributes
operator|==
literal|null
operator|||
name|attributes
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|Map
argument_list|<
name|NodeAttributeKey
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|attributesToNodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
name|attributeEntry
range|:
name|clusterAttributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|fetchAllAttributes
operator|||
name|attributes
operator|.
name|contains
argument_list|(
name|attributeEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|attributesToNodes
operator|.
name|put
argument_list|(
name|attributeEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|attributeEntry
operator|.
name|getValue
argument_list|()
operator|.
name|getAssociatedNodeIds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributesToNodes
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getResourceByAttribute (NodeAttribute attribute)
specifier|public
name|Resource
name|getResourceByAttribute
parameter_list|(
name|NodeAttribute
name|attribute
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|clusterAttributes
operator|.
name|containsKey
argument_list|(
name|attribute
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
condition|?
name|clusterAttributes
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
operator|.
name|getResource
argument_list|()
else|:
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getAttributesForNode ( String hostName)
specifier|public
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|getAttributesForNode
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
return|return
name|nodeCollections
operator|.
name|containsKey
argument_list|(
name|hostName
argument_list|)
condition|?
name|nodeCollections
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
operator|.
name|getAttributes
argument_list|()
else|:
operator|new
name|HashMap
argument_list|<>
argument_list|()
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeToAttributes (Set<String> prefix)
specifier|public
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|getNodeToAttributes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|prefix
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|nodeToAttributes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeCollections
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|List
argument_list|<
name|NodeAttribute
argument_list|>
name|attrs
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attrs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|v
operator|.
name|getAttributes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attrs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|nodeAttr
range|:
name|v
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|prefix
operator|.
name|contains
argument_list|(
name|nodeAttr
operator|.
name|getKey
argument_list|()
operator|.
name|getAttributeKey
argument_list|()
operator|.
name|getAttributePrefix
argument_list|()
argument_list|)
condition|)
block|{
name|attrs
operator|.
name|add
argument_list|(
name|nodeAttr
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|nodeToAttributes
operator|.
name|add
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
name|k
argument_list|,
name|attrs
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|nodeToAttributes
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getNodesToAttributes ( Set<String> hostNames)
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|getNodesToAttributes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|hostNames
parameter_list|)
block|{
try|try
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|boolean
name|fetchAllNodes
init|=
operator|(
name|hostNames
operator|==
literal|null
operator|||
name|hostNames
operator|.
name|isEmpty
argument_list|()
operator|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeToAttrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fetchAllNodes
condition|)
block|{
name|nodeCollections
operator|.
name|forEach
argument_list|(
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
name|nodeToAttrs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
operator|.
name|getAttributes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|String
name|hostName
range|:
name|hostNames
control|)
block|{
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|nodeToAttrs
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|host
operator|.
name|getAttributes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodeToAttrs
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|activateNode (NodeId nodeId, Resource resource)
specifier|public
name|void
name|activateNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|String
name|hostName
init|=
name|nodeId
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
name|host
operator|=
operator|new
name|Host
argument_list|(
name|hostName
argument_list|)
expr_stmt|;
name|nodeCollections
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|host
argument_list|)
expr_stmt|;
block|}
name|host
operator|.
name|activateNode
argument_list|(
name|resource
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeAttribute
name|attribute
range|:
name|host
operator|.
name|getAttributes
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|clusterAttributes
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
operator|.
name|removeNode
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|deactivateNode (NodeId nodeId)
specifier|public
name|void
name|deactivateNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
try|try
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|nodeId
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeAttribute
name|attribute
range|:
name|host
operator|.
name|getAttributes
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|clusterAttributes
operator|.
name|get
argument_list|(
name|attribute
operator|.
name|getAttributeKey
argument_list|()
argument_list|)
operator|.
name|removeNode
argument_list|(
name|host
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|host
operator|.
name|deactivateNode
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateNodeResource (NodeId node, Resource newResource)
specifier|public
name|void
name|updateNodeResource
parameter_list|(
name|NodeId
name|node
parameter_list|,
name|Resource
name|newResource
parameter_list|)
block|{
name|deactivateNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|activateNode
argument_list|(
name|node
argument_list|,
name|newResource
argument_list|)
expr_stmt|;
block|}
comment|/**    * A<code>Host</code> can have multiple<code>Node</code>s.    */
DECL|class|Host
specifier|public
specifier|static
class|class
name|Host
block|{
DECL|field|hostName
specifier|private
name|String
name|hostName
decl_stmt|;
DECL|field|attributes
specifier|private
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributes
decl_stmt|;
DECL|field|resource
specifier|private
name|Resource
name|resource
decl_stmt|;
DECL|field|isActive
specifier|private
name|boolean
name|isActive
decl_stmt|;
DECL|method|getAttributes ()
specifier|private
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|getAttributes
parameter_list|()
block|{
return|return
name|attributes
return|;
block|}
DECL|method|setAttributes (Map<NodeAttribute, AttributeValue> attributes)
specifier|public
name|void
name|setAttributes
parameter_list|(
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
block|}
DECL|method|removeAttributes ( Map<NodeAttribute, AttributeValue> attributesMapping)
specifier|public
name|void
name|removeAttributes
parameter_list|(
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributesMapping
parameter_list|)
block|{
for|for
control|(
name|NodeAttribute
name|attribute
range|:
name|attributesMapping
operator|.
name|keySet
argument_list|()
control|)
block|{
name|this
operator|.
name|attributes
operator|.
name|remove
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|replaceAttributes ( Map<NodeAttribute, AttributeValue> attributesMapping, String prefix)
specifier|public
name|void
name|replaceAttributes
parameter_list|(
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributesMapping
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|this
operator|.
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|it
init|=
name|this
operator|.
name|attributes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|current
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getKey
argument_list|()
operator|.
name|getAttributeKey
argument_list|()
operator|.
name|getAttributePrefix
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|attributes
operator|.
name|putAll
argument_list|(
name|attributesMapping
argument_list|)
expr_stmt|;
block|}
DECL|method|addAttributes ( Map<NodeAttribute, AttributeValue> attributesMapping)
specifier|public
name|void
name|addAttributes
parameter_list|(
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributesMapping
parameter_list|)
block|{
name|this
operator|.
name|attributes
operator|.
name|putAll
argument_list|(
name|attributesMapping
argument_list|)
expr_stmt|;
block|}
DECL|method|getResource ()
specifier|public
name|Resource
name|getResource
parameter_list|()
block|{
return|return
name|resource
return|;
block|}
DECL|method|setResource (Resource resourceParam)
specifier|public
name|void
name|setResource
parameter_list|(
name|Resource
name|resourceParam
parameter_list|)
block|{
name|this
operator|.
name|resource
operator|=
name|resourceParam
expr_stmt|;
block|}
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|isActive
return|;
block|}
DECL|method|deactivateNode ()
specifier|public
name|void
name|deactivateNode
parameter_list|()
block|{
name|this
operator|.
name|isActive
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|activateNode (Resource r)
specifier|public
name|void
name|activateNode
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|this
operator|.
name|isActive
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|r
expr_stmt|;
block|}
DECL|method|getHostName ()
specifier|public
name|String
name|getHostName
parameter_list|()
block|{
return|return
name|hostName
return|;
block|}
DECL|method|setHostName (String hostName)
specifier|public
name|void
name|setHostName
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
block|}
DECL|method|Host (String hostName)
specifier|public
name|Host
parameter_list|(
name|String
name|hostName
parameter_list|)
block|{
name|this
argument_list|(
name|hostName
argument_list|,
operator|new
name|HashMap
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|Host (String hostName, Map<NodeAttribute, AttributeValue> attributes)
specifier|public
name|Host
parameter_list|(
name|String
name|hostName
parameter_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|(
name|hostName
argument_list|,
name|attributes
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|Host (String hostName, Map<NodeAttribute, AttributeValue> attributes, Resource resource, boolean isActive)
specifier|public
name|Host
parameter_list|(
name|String
name|hostName
parameter_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
name|attributes
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|boolean
name|isActive
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|attributes
expr_stmt|;
name|this
operator|.
name|resource
operator|=
name|resource
expr_stmt|;
name|this
operator|.
name|isActive
operator|=
name|isActive
expr_stmt|;
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
block|}
block|}
DECL|class|ForwardingEventHandler
specifier|private
specifier|final
class|class
name|ForwardingEventHandler
implements|implements
name|EventHandler
argument_list|<
name|NodeAttributesStoreEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (NodeAttributesStoreEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|NodeAttributesStoreEvent
name|event
parameter_list|)
block|{
name|handleStoreEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Dispatcher related code
DECL|method|handleStoreEvent (NodeAttributesStoreEvent event)
specifier|protected
name|void
name|handleStoreEvent
parameter_list|(
name|NodeAttributesStoreEvent
name|event
parameter_list|)
block|{
name|List
argument_list|<
name|NodeToAttributes
argument_list|>
name|mappingList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|nodeToAttr
init|=
name|event
operator|.
name|getNodeAttributeMappingList
argument_list|()
decl_stmt|;
name|nodeToAttr
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|mappingList
operator|.
name|add
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
name|k
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|v
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
name|event
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|REPLACE
case|:
name|store
operator|.
name|replaceNodeAttributes
argument_list|(
name|mappingList
argument_list|)
expr_stmt|;
break|break;
case|case
name|ADD
case|:
name|store
operator|.
name|addNodeAttributes
argument_list|(
name|mappingList
argument_list|)
expr_stmt|;
break|break;
case|case
name|REMOVE
case|:
name|store
operator|.
name|removeNodeAttributes
argument_list|(
name|mappingList
argument_list|)
expr_stmt|;
break|break;
default|default:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unsupported operation"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to store attribute modification to storage"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|YarnRuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|replaceNodeAttributes (String prefix, Map<String, Set<NodeAttribute>> nodeAttributeMapping)
specifier|public
name|void
name|replaceNodeAttributes
parameter_list|(
name|String
name|prefix
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeAttributeMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|processMapping
argument_list|(
name|nodeAttributeMapping
argument_list|,
name|AttributeMappingOperationType
operator|.
name|REPLACE
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addNodeAttributes ( Map<String, Set<NodeAttribute>> nodeAttributeMapping)
specifier|public
name|void
name|addNodeAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeAttributeMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|processMapping
argument_list|(
name|nodeAttributeMapping
argument_list|,
name|AttributeMappingOperationType
operator|.
name|ADD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeNodeAttributes ( Map<String, Set<NodeAttribute>> nodeAttributeMapping)
specifier|public
name|void
name|removeNodeAttributes
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeAttributeMapping
parameter_list|)
throws|throws
name|IOException
block|{
name|processMapping
argument_list|(
name|nodeAttributeMapping
argument_list|,
name|AttributeMappingOperationType
operator|.
name|REMOVE
argument_list|)
expr_stmt|;
block|}
DECL|method|processMapping ( Map<String, Set<NodeAttribute>> nodeAttributeMapping, AttributeMappingOperationType mappingType)
specifier|private
name|void
name|processMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeAttributeMapping
parameter_list|,
name|AttributeMappingOperationType
name|mappingType
parameter_list|)
throws|throws
name|IOException
block|{
name|processMapping
argument_list|(
name|nodeAttributeMapping
argument_list|,
name|mappingType
argument_list|,
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|)
expr_stmt|;
block|}
DECL|method|processMapping ( Map<String, Set<NodeAttribute>> nodeAttributeMapping, AttributeMappingOperationType mappingType, String attributePrefix)
specifier|private
name|void
name|processMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|nodeAttributeMapping
parameter_list|,
name|AttributeMappingOperationType
name|mappingType
parameter_list|,
name|String
name|attributePrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|NodeAttributeKey
argument_list|,
name|RMNodeAttribute
argument_list|>
name|newAttributesToBeAdded
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|NodeAttribute
argument_list|,
name|AttributeValue
argument_list|>
argument_list|>
name|validMapping
init|=
name|validate
argument_list|(
name|nodeAttributeMapping
argument_list|,
name|newAttributesToBeAdded
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|validMapping
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|internalUpdateAttributesOnNodes
argument_list|(
name|validMapping
argument_list|,
name|mappingType
argument_list|,
name|newAttributesToBeAdded
argument_list|,
name|attributePrefix
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopDispatcher ()
specifier|protected
name|void
name|stopDispatcher
parameter_list|()
block|{
name|AsyncDispatcher
name|asyncDispatcher
init|=
operator|(
name|AsyncDispatcher
operator|)
name|dispatcher
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|asyncDispatcher
condition|)
block|{
name|asyncDispatcher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// finalize store
name|stopDispatcher
argument_list|()
expr_stmt|;
comment|// only close store when we enabled store persistent
if|if
condition|(
literal|null
operator|!=
name|store
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setRMContext (RMContext context)
specifier|public
name|void
name|setRMContext
parameter_list|(
name|RMContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|context
expr_stmt|;
block|}
comment|/**    * Refresh node attributes on a given node during RM recovery.    * @param nodeId Node Id    */
DECL|method|refreshNodeAttributesToScheduler (NodeId nodeId)
specifier|public
name|void
name|refreshNodeAttributesToScheduler
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|String
name|hostName
init|=
name|nodeId
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeAttribute
argument_list|>
argument_list|>
name|newNodeToAttributesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Host
name|host
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
operator|||
name|host
operator|.
name|attributes
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|newNodeToAttributesMap
operator|.
name|put
argument_list|(
name|hostName
argument_list|,
name|host
operator|.
name|attributes
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Notify RM
if|if
condition|(
name|rmContext
operator|!=
literal|null
operator|&&
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updated NodeAttribute event to RM:"
operator|+
name|newNodeToAttributesMap
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeAttributesUpdateSchedulerEvent
argument_list|(
name|newNodeToAttributesMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

