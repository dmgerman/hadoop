begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery.records
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|EpochProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * The epoch information of RM for work-preserving restart.  * Epoch is incremented each time RM restart. It's used for assuring  * uniqueness of<code>ContainerId</code>.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|Epoch
specifier|public
specifier|abstract
class|class
name|Epoch
block|{
DECL|method|newInstance (int sequenceNumber)
specifier|public
specifier|static
name|Epoch
name|newInstance
parameter_list|(
name|int
name|sequenceNumber
parameter_list|)
block|{
name|Epoch
name|epoch
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Epoch
operator|.
name|class
argument_list|)
decl_stmt|;
name|epoch
operator|.
name|setEpoch
argument_list|(
name|sequenceNumber
argument_list|)
expr_stmt|;
return|return
name|epoch
return|;
block|}
DECL|method|getEpoch ()
specifier|public
specifier|abstract
name|int
name|getEpoch
parameter_list|()
function_decl|;
DECL|method|setEpoch (int sequenceNumber)
specifier|public
specifier|abstract
name|void
name|setEpoch
parameter_list|(
name|int
name|sequenceNumber
parameter_list|)
function_decl|;
DECL|method|getProto ()
specifier|public
specifier|abstract
name|EpochProto
name|getProto
parameter_list|()
function_decl|;
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|getEpoch
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getEpoch
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Epoch
name|other
init|=
operator|(
name|Epoch
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getEpoch
argument_list|()
operator|==
name|other
operator|.
name|getEpoch
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

