begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ApplicationSchedulingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|AppPlacementAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_comment
comment|/**  * Factory class to build various application placement policies.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
DECL|class|ApplicationPlacementAllocatorFactory
specifier|public
class|class
name|ApplicationPlacementAllocatorFactory
block|{
comment|/**    * Get AppPlacementAllocator related to the placement type requested.    *    * @param appPlacementAllocatorName    *          allocator class name.    * @return Specific AppPlacementAllocator instance based on type    */
DECL|method|getAppPlacementAllocator ( String appPlacementAllocatorName, AppSchedulingInfo appSchedulingInfo, SchedulerRequestKey schedulerRequestKey, RMContext rmContext)
specifier|public
specifier|static
name|AppPlacementAllocator
argument_list|<
name|SchedulerNode
argument_list|>
name|getAppPlacementAllocator
parameter_list|(
name|String
name|appPlacementAllocatorName
parameter_list|,
name|AppSchedulingInfo
name|appSchedulingInfo
parameter_list|,
name|SchedulerRequestKey
name|schedulerRequestKey
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|policyClass
decl_stmt|;
try|try
block|{
if|if
condition|(
name|appPlacementAllocatorName
operator|==
literal|null
condition|)
block|{
name|policyClass
operator|=
name|ApplicationSchedulingConfig
operator|.
name|DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS
expr_stmt|;
block|}
else|else
block|{
name|policyClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|appPlacementAllocatorName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|policyClass
operator|=
name|ApplicationSchedulingConfig
operator|.
name|DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|AppPlacementAllocator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|policyClass
argument_list|)
condition|)
block|{
name|policyClass
operator|=
name|ApplicationSchedulingConfig
operator|.
name|DEFAULT_APPLICATION_PLACEMENT_TYPE_CLASS
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AppPlacementAllocator
argument_list|<
name|SchedulerNode
argument_list|>
name|placementAllocatorInstance
init|=
operator|(
name|AppPlacementAllocator
argument_list|<
name|SchedulerNode
argument_list|>
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|policyClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|placementAllocatorInstance
operator|.
name|initialize
argument_list|(
name|appSchedulingInfo
argument_list|,
name|schedulerRequestKey
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
return|return
name|placementAllocatorInstance
return|;
block|}
block|}
end_class

end_unit

