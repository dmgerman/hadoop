begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation.planning
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UTCClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * This (re)planner scan a period of time from now to a maximum time window (or  * the end of the last session, whichever comes first) checking the overall  * capacity is not violated.  *   * It greedily removes sessions in reversed order of acceptance (latest accepted  * is the first removed).  */
end_comment

begin_class
DECL|class|SimpleCapacityReplanner
specifier|public
class|class
name|SimpleCapacityReplanner
implements|implements
name|Planner
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SimpleCapacityReplanner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZERO_RESOURCE
specifier|private
specifier|static
specifier|final
name|Resource
name|ZERO_RESOURCE
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|clock
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
comment|// this allows to control to time-span of this replanning
comment|// far into the future time instants might be worth replanning for
comment|// later on
DECL|field|lengthOfCheckZone
specifier|private
name|long
name|lengthOfCheckZone
decl_stmt|;
DECL|method|SimpleCapacityReplanner ()
specifier|public
name|SimpleCapacityReplanner
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|UTCClock
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|SimpleCapacityReplanner (Clock clock)
name|SimpleCapacityReplanner
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (String planQueueName, ReservationSchedulerConfiguration conf)
specifier|public
name|void
name|init
parameter_list|(
name|String
name|planQueueName
parameter_list|,
name|ReservationSchedulerConfiguration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|lengthOfCheckZone
operator|=
name|conf
operator|.
name|getEnforcementWindow
argument_list|(
name|planQueueName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|plan (Plan plan, List<ReservationDefinition> contracts)
specifier|public
name|void
name|plan
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|List
argument_list|<
name|ReservationDefinition
argument_list|>
name|contracts
parameter_list|)
throws|throws
name|PlanningException
block|{
if|if
condition|(
name|contracts
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SimpleCapacityReplanner cannot handle new reservation contracts"
argument_list|)
throw|;
block|}
name|ResourceCalculator
name|resCalc
init|=
name|plan
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|totCap
init|=
name|plan
operator|.
name|getTotalCapacity
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
comment|// loop on all moment in time from now to the end of the check Zone
comment|// or the end of the planned sessions whichever comes first
for|for
control|(
name|long
name|t
init|=
name|now
init|;
operator|(
name|t
operator|<
name|plan
operator|.
name|getLastEndTime
argument_list|()
operator|&&
name|t
operator|<
operator|(
name|now
operator|+
name|lengthOfCheckZone
operator|)
operator|)
condition|;
name|t
operator|+=
name|plan
operator|.
name|getStep
argument_list|()
control|)
block|{
name|Resource
name|excessCap
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|plan
operator|.
name|getTotalCommittedResources
argument_list|(
name|t
argument_list|)
argument_list|,
name|totCap
argument_list|)
decl_stmt|;
comment|// if we are violating
if|if
condition|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resCalc
argument_list|,
name|totCap
argument_list|,
name|excessCap
argument_list|,
name|ZERO_RESOURCE
argument_list|)
condition|)
block|{
comment|// sorted on reverse order of acceptance, so newest reservations first
name|Set
argument_list|<
name|ReservationAllocation
argument_list|>
name|curReservations
init|=
operator|new
name|TreeSet
argument_list|<
name|ReservationAllocation
argument_list|>
argument_list|(
name|plan
operator|.
name|getReservationsAtTime
argument_list|(
name|t
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ReservationAllocation
argument_list|>
name|resIter
init|=
name|curReservations
operator|.
name|iterator
argument_list|()
init|;
name|resIter
operator|.
name|hasNext
argument_list|()
operator|&&
name|Resources
operator|.
name|greaterThan
argument_list|(
name|resCalc
argument_list|,
name|totCap
argument_list|,
name|excessCap
argument_list|,
name|ZERO_RESOURCE
argument_list|)
condition|;
control|)
block|{
name|ReservationAllocation
name|reservation
init|=
name|resIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|plan
operator|.
name|deleteReservation
argument_list|(
name|reservation
operator|.
name|getReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|excessCap
operator|=
name|Resources
operator|.
name|subtract
argument_list|(
name|excessCap
argument_list|,
name|reservation
operator|.
name|getResourcesAtTime
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing reservation "
operator|+
name|reservation
operator|.
name|getReservationId
argument_list|()
operator|+
literal|" to repair physical-resource constraints in the plan: "
operator|+
name|plan
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

