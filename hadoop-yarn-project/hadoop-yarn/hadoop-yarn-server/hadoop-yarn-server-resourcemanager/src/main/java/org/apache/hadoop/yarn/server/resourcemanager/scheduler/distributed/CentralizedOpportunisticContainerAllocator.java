begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.distributed
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|distributed
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoteNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|OpportunisticSchedulerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|OpportunisticContainerAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|OpportunisticContainerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  *<p>  * The CentralizedOpportunisticContainerAllocator allocates opportunistic  * containers by considering all the nodes present in the cluster, after  * modifying the container sizes to respect the limits set by the  * ResourceManager. It tries to distribute the containers as evenly as  * possible.  *</p>  */
end_comment

begin_class
DECL|class|CentralizedOpportunisticContainerAllocator
specifier|public
class|class
name|CentralizedOpportunisticContainerAllocator
extends|extends
name|OpportunisticContainerAllocator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CentralizedOpportunisticContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|nodeQueueLoadMonitor
specifier|private
name|NodeQueueLoadMonitor
name|nodeQueueLoadMonitor
decl_stmt|;
DECL|field|metrics
specifier|private
name|OpportunisticSchedulerMetrics
name|metrics
init|=
name|OpportunisticSchedulerMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
comment|/**    * Create a new Centralized Opportunistic Container Allocator.    * @param tokenSecretManager TokenSecretManager    */
DECL|method|CentralizedOpportunisticContainerAllocator ( BaseContainerTokenSecretManager tokenSecretManager)
specifier|public
name|CentralizedOpportunisticContainerAllocator
parameter_list|(
name|BaseContainerTokenSecretManager
name|tokenSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|tokenSecretManager
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Centralized Opportunistic Container Allocator.    * @param tokenSecretManager TokenSecretManager    * @param maxAllocationsPerAMHeartbeat max number of containers to be    *                                     allocated in one AM heartbeat    */
DECL|method|CentralizedOpportunisticContainerAllocator ( BaseContainerTokenSecretManager tokenSecretManager, int maxAllocationsPerAMHeartbeat, NodeQueueLoadMonitor nodeQueueLoadMonitor)
specifier|public
name|CentralizedOpportunisticContainerAllocator
parameter_list|(
name|BaseContainerTokenSecretManager
name|tokenSecretManager
parameter_list|,
name|int
name|maxAllocationsPerAMHeartbeat
parameter_list|,
name|NodeQueueLoadMonitor
name|nodeQueueLoadMonitor
parameter_list|)
block|{
name|super
argument_list|(
name|tokenSecretManager
argument_list|,
name|maxAllocationsPerAMHeartbeat
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeQueueLoadMonitor
operator|=
name|nodeQueueLoadMonitor
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|setNodeQueueLoadMonitor (NodeQueueLoadMonitor nodeQueueLoadMonitor)
name|void
name|setNodeQueueLoadMonitor
parameter_list|(
name|NodeQueueLoadMonitor
name|nodeQueueLoadMonitor
parameter_list|)
block|{
name|this
operator|.
name|nodeQueueLoadMonitor
operator|=
name|nodeQueueLoadMonitor
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocateContainers ( ResourceBlacklistRequest blackList, List<ResourceRequest> oppResourceReqs, ApplicationAttemptId applicationAttemptId, OpportunisticContainerContext opportContext, long rmIdentifier, String appSubmitter)
specifier|public
name|List
argument_list|<
name|Container
argument_list|>
name|allocateContainers
parameter_list|(
name|ResourceBlacklistRequest
name|blackList
parameter_list|,
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|oppResourceReqs
parameter_list|,
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|,
name|OpportunisticContainerContext
name|opportContext
parameter_list|,
name|long
name|rmIdentifier
parameter_list|,
name|String
name|appSubmitter
parameter_list|)
throws|throws
name|YarnException
block|{
name|updateBlacklist
argument_list|(
name|blackList
argument_list|,
name|opportContext
argument_list|)
expr_stmt|;
comment|// Add OPPORTUNISTIC requests to the outstanding ones.
name|opportContext
operator|.
name|addToOutstandingReqs
argument_list|(
name|oppResourceReqs
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodeBlackList
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|opportContext
operator|.
name|getBlacklist
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|maxAllocationsPerAMHeartbeat
init|=
name|getMaxAllocationsPerAMHeartbeat
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
argument_list|>
name|allocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulerRequestKey
name|schedulerKey
range|:
name|opportContext
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|descendingKeySet
argument_list|()
control|)
block|{
comment|// Allocated containers :
comment|//  Key = Requested Capability,
comment|//  Value = List of Containers of given cap (the actual container size
comment|//          might be different than what is requested, which is why
comment|//          we need the requested capability (key) to match against
comment|//          the outstanding reqs)
name|int
name|remAllocs
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|maxAllocationsPerAMHeartbeat
operator|>
literal|0
condition|)
block|{
name|remAllocs
operator|=
name|maxAllocationsPerAMHeartbeat
operator|-
name|getTotalAllocations
argument_list|(
name|allocations
argument_list|)
expr_stmt|;
if|if
condition|(
name|remAllocs
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not allocating more containers as we have reached max "
operator|+
literal|"allocations per AM heartbeat {}"
argument_list|,
name|maxAllocationsPerAMHeartbeat
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocation
init|=
name|allocatePerSchedulerKey
argument_list|(
name|rmIdentifier
argument_list|,
name|opportContext
argument_list|,
name|schedulerKey
argument_list|,
name|applicationAttemptId
argument_list|,
name|appSubmitter
argument_list|,
name|nodeBlackList
argument_list|,
name|remAllocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocation
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|allocations
operator|.
name|add
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
block|}
block|}
name|matchAllocation
argument_list|(
name|allocations
argument_list|,
name|allocatedContainers
argument_list|,
name|opportContext
argument_list|)
expr_stmt|;
return|return
name|allocatedContainers
return|;
block|}
DECL|method|allocatePerSchedulerKey ( long rmIdentifier, OpportunisticContainerContext appContext, SchedulerRequestKey schedKey, ApplicationAttemptId appAttId, String userName, Set<String> blackList, int maxAllocations)
specifier|private
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocatePerSchedulerKey
parameter_list|(
name|long
name|rmIdentifier
parameter_list|,
name|OpportunisticContainerContext
name|appContext
parameter_list|,
name|SchedulerRequestKey
name|schedKey
parameter_list|,
name|ApplicationAttemptId
name|appAttId
parameter_list|,
name|String
name|userName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blackList
parameter_list|,
name|int
name|maxAllocations
parameter_list|)
throws|throws
name|YarnException
block|{
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|totalAllocated
init|=
literal|0
decl_stmt|;
for|for
control|(
name|EnrichedResourceRequest
name|enrichedAsk
range|:
name|appContext
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|get
argument_list|(
name|schedKey
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|remainingAllocs
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|maxAllocations
operator|>
literal|0
condition|)
block|{
name|remainingAllocs
operator|=
name|maxAllocations
operator|-
name|totalAllocated
expr_stmt|;
if|if
condition|(
name|remainingAllocs
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not allocating more containers as max allocations per AM "
operator|+
literal|"heartbeat {} has reached"
argument_list|,
name|getMaxAllocationsPerAMHeartbeat
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|totalAllocated
operator|+=
name|allocateContainersPerRequest
argument_list|(
name|rmIdentifier
argument_list|,
name|appContext
operator|.
name|getAppParams
argument_list|()
argument_list|,
name|appContext
operator|.
name|getContainerIdGenerator
argument_list|()
argument_list|,
name|blackList
argument_list|,
name|appAttId
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|,
name|enrichedAsk
argument_list|,
name|remainingAllocs
argument_list|)
expr_stmt|;
name|ResourceRequest
name|anyAsk
init|=
name|enrichedAsk
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|allocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opportunistic allocation requested for [priority={}, "
operator|+
literal|"allocationRequestId={}, num_containers={}, capability={}] "
operator|+
literal|"allocated = {}"
argument_list|,
name|anyAsk
operator|.
name|getPriority
argument_list|()
argument_list|,
name|anyAsk
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|,
name|anyAsk
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|anyAsk
operator|.
name|getCapability
argument_list|()
argument_list|,
name|allocations
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|allocations
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|allocateContainersPerRequest (long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, Set<String> blacklist, ApplicationAttemptId id, String userName, Map<Resource, List<Allocation>> allocations, EnrichedResourceRequest enrichedAsk, int maxAllocations)
specifier|private
name|int
name|allocateContainersPerRequest
parameter_list|(
name|long
name|rmIdentifier
parameter_list|,
name|AllocationParams
name|appParams
parameter_list|,
name|ContainerIdGenerator
name|idCounter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|ApplicationAttemptId
name|id
parameter_list|,
name|String
name|userName
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocations
parameter_list|,
name|EnrichedResourceRequest
name|enrichedAsk
parameter_list|,
name|int
name|maxAllocations
parameter_list|)
throws|throws
name|YarnException
block|{
name|ResourceRequest
name|anyAsk
init|=
name|enrichedAsk
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|int
name|totalAllocated
init|=
literal|0
decl_stmt|;
name|int
name|maxToAllocate
init|=
name|anyAsk
operator|.
name|getNumContainers
argument_list|()
operator|-
operator|(
name|allocations
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|allocations
operator|.
name|get
argument_list|(
name|anyAsk
operator|.
name|getCapability
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|maxAllocations
operator|>=
literal|0
condition|)
block|{
name|maxToAllocate
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxAllocations
argument_list|,
name|maxToAllocate
argument_list|)
expr_stmt|;
block|}
comment|// allocate node local
if|if
condition|(
name|maxToAllocate
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|nodeLocations
init|=
name|enrichedAsk
operator|.
name|getNodeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|nodeLocation
range|:
name|nodeLocations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|numContainers
init|=
name|nodeLocation
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|numContainers
operator|=
name|Math
operator|.
name|min
argument_list|(
name|numContainers
argument_list|,
name|maxToAllocate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateNodeLocal
argument_list|(
name|enrichedAsk
argument_list|,
name|nodeLocation
operator|.
name|getKey
argument_list|()
argument_list|,
name|numContainers
argument_list|,
name|rmIdentifier
argument_list|,
name|appParams
argument_list|,
name|idCounter
argument_list|,
name|blacklist
argument_list|,
name|id
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|)
decl_stmt|;
name|totalAllocated
operator|+=
name|allocatedContainers
operator|.
name|size
argument_list|()
expr_stmt|;
name|maxToAllocate
operator|-=
name|allocatedContainers
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// no more containers to allocate
if|if
condition|(
name|maxToAllocate
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// if still left, allocate rack local
if|if
condition|(
name|maxToAllocate
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|rackLocations
init|=
name|enrichedAsk
operator|.
name|getRackMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|rack
range|:
name|rackLocations
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|numContainers
init|=
name|rack
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|numContainers
operator|=
name|Math
operator|.
name|min
argument_list|(
name|numContainers
argument_list|,
name|maxToAllocate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateRackLocal
argument_list|(
name|enrichedAsk
argument_list|,
name|rack
operator|.
name|getKey
argument_list|()
argument_list|,
name|numContainers
argument_list|,
name|rmIdentifier
argument_list|,
name|appParams
argument_list|,
name|idCounter
argument_list|,
name|blacklist
argument_list|,
name|id
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|)
decl_stmt|;
name|totalAllocated
operator|+=
name|allocatedContainers
operator|.
name|size
argument_list|()
expr_stmt|;
name|maxToAllocate
operator|-=
name|allocatedContainers
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// no more containers to allocate
if|if
condition|(
name|maxToAllocate
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|// if still left, try on ANY
if|if
condition|(
name|maxToAllocate
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateAny
argument_list|(
name|enrichedAsk
argument_list|,
name|maxToAllocate
argument_list|,
name|rmIdentifier
argument_list|,
name|appParams
argument_list|,
name|idCounter
argument_list|,
name|blacklist
argument_list|,
name|id
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|)
decl_stmt|;
name|totalAllocated
operator|+=
name|allocatedContainers
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|totalAllocated
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|allocateNodeLocal ( EnrichedResourceRequest enrichedAsk, String nodeLocation, int toAllocate, long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, Set<String> blacklist, ApplicationAttemptId id, String userName, Map<Resource, List<Allocation>> allocations)
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|allocateNodeLocal
parameter_list|(
name|EnrichedResourceRequest
name|enrichedAsk
parameter_list|,
name|String
name|nodeLocation
parameter_list|,
name|int
name|toAllocate
parameter_list|,
name|long
name|rmIdentifier
parameter_list|,
name|AllocationParams
name|appParams
parameter_list|,
name|ContainerIdGenerator
name|idCounter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|ApplicationAttemptId
name|id
parameter_list|,
name|String
name|userName
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocations
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|toAllocate
operator|>
literal|0
condition|)
block|{
name|RMNode
name|node
init|=
name|nodeQueueLoadMonitor
operator|.
name|selectLocalNode
argument_list|(
name|nodeLocation
argument_list|,
name|blacklist
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|toAllocate
operator|--
expr_stmt|;
name|Container
name|container
init|=
name|createContainer
argument_list|(
name|rmIdentifier
argument_list|,
name|appParams
argument_list|,
name|idCounter
argument_list|,
name|id
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|,
name|nodeLocation
argument_list|,
name|enrichedAsk
operator|.
name|getRequest
argument_list|()
argument_list|,
name|convertToRemoteNode
argument_list|(
name|node
argument_list|)
argument_list|)
decl_stmt|;
name|allocatedContainers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated [{}] as opportunistic at location [{}]"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|nodeLocation
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrNodeLocalOppContainers
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// we couldn't allocate any - break the loop.
break|break;
block|}
block|}
return|return
name|allocatedContainers
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|allocateRackLocal (EnrichedResourceRequest enrichedAsk, String rackLocation, int toAllocate, long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, Set<String> blacklist, ApplicationAttemptId id, String userName, Map<Resource, List<Allocation>> allocations)
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|allocateRackLocal
parameter_list|(
name|EnrichedResourceRequest
name|enrichedAsk
parameter_list|,
name|String
name|rackLocation
parameter_list|,
name|int
name|toAllocate
parameter_list|,
name|long
name|rmIdentifier
parameter_list|,
name|AllocationParams
name|appParams
parameter_list|,
name|ContainerIdGenerator
name|idCounter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|ApplicationAttemptId
name|id
parameter_list|,
name|String
name|userName
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocations
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|toAllocate
operator|>
literal|0
condition|)
block|{
name|RMNode
name|node
init|=
name|nodeQueueLoadMonitor
operator|.
name|selectRackLocalNode
argument_list|(
name|rackLocation
argument_list|,
name|blacklist
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|toAllocate
operator|--
expr_stmt|;
name|Container
name|container
init|=
name|createContainer
argument_list|(
name|rmIdentifier
argument_list|,
name|appParams
argument_list|,
name|idCounter
argument_list|,
name|id
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|,
name|rackLocation
argument_list|,
name|enrichedAsk
operator|.
name|getRequest
argument_list|()
argument_list|,
name|convertToRemoteNode
argument_list|(
name|node
argument_list|)
argument_list|)
decl_stmt|;
name|allocatedContainers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrRackLocalOppContainers
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated [{}] as opportunistic at location [{}]"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|rackLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we couldn't allocate any - break the loop.
break|break;
block|}
block|}
return|return
name|allocatedContainers
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:parameternumber"
argument_list|)
DECL|method|allocateAny (EnrichedResourceRequest enrichedAsk, int toAllocate, long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, Set<String> blacklist, ApplicationAttemptId id, String userName, Map<Resource, List<Allocation>> allocations)
specifier|private
name|List
argument_list|<
name|Container
argument_list|>
name|allocateAny
parameter_list|(
name|EnrichedResourceRequest
name|enrichedAsk
parameter_list|,
name|int
name|toAllocate
parameter_list|,
name|long
name|rmIdentifier
parameter_list|,
name|AllocationParams
name|appParams
parameter_list|,
name|ContainerIdGenerator
name|idCounter
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|blacklist
parameter_list|,
name|ApplicationAttemptId
name|id
parameter_list|,
name|String
name|userName
parameter_list|,
name|Map
argument_list|<
name|Resource
argument_list|,
name|List
argument_list|<
name|Allocation
argument_list|>
argument_list|>
name|allocations
parameter_list|)
throws|throws
name|YarnException
block|{
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|toAllocate
operator|>
literal|0
condition|)
block|{
name|RMNode
name|node
init|=
name|nodeQueueLoadMonitor
operator|.
name|selectAnyNode
argument_list|(
name|blacklist
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|toAllocate
operator|--
expr_stmt|;
name|Container
name|container
init|=
name|createContainer
argument_list|(
name|rmIdentifier
argument_list|,
name|appParams
argument_list|,
name|idCounter
argument_list|,
name|id
argument_list|,
name|userName
argument_list|,
name|allocations
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|enrichedAsk
operator|.
name|getRequest
argument_list|()
argument_list|,
name|convertToRemoteNode
argument_list|(
name|node
argument_list|)
argument_list|)
decl_stmt|;
name|allocatedContainers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|metrics
operator|.
name|incrOffSwitchOppContainers
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Allocated [{}] as opportunistic at location [{}]"
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we couldn't allocate any - break the loop.
break|break;
block|}
block|}
return|return
name|allocatedContainers
return|;
block|}
DECL|method|convertToRemoteNode (RMNode rmNode)
specifier|private
name|RemoteNode
name|convertToRemoteNode
parameter_list|(
name|RMNode
name|rmNode
parameter_list|)
block|{
if|if
condition|(
name|rmNode
operator|!=
literal|null
condition|)
block|{
name|RemoteNode
name|rNode
init|=
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|rmNode
operator|.
name|getHttpAddress
argument_list|()
argument_list|)
decl_stmt|;
name|rNode
operator|.
name|setRackName
argument_list|(
name|rmNode
operator|.
name|getRackName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rNode
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

