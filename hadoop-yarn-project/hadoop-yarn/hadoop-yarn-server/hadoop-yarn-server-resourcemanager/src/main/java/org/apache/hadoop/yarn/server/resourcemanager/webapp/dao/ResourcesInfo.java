begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.dao
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlAccessorType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceUsage
import|;
end_import

begin_comment
comment|/**  * DAO which wraps PartitionResourceUsageInfo applicable for a queue/user  */
end_comment

begin_class
annotation|@
name|XmlRootElement
annotation|@
name|XmlAccessorType
argument_list|(
name|XmlAccessType
operator|.
name|FIELD
argument_list|)
DECL|class|ResourcesInfo
specifier|public
class|class
name|ResourcesInfo
block|{
DECL|field|resourceUsagesByPartition
name|List
argument_list|<
name|PartitionResourcesInfo
argument_list|>
name|resourceUsagesByPartition
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ResourcesInfo ()
specifier|public
name|ResourcesInfo
parameter_list|()
block|{   }
DECL|method|ResourcesInfo (ResourceUsage resourceUsage, boolean considerAMUsage)
specifier|public
name|ResourcesInfo
parameter_list|(
name|ResourceUsage
name|resourceUsage
parameter_list|,
name|boolean
name|considerAMUsage
parameter_list|)
block|{
if|if
condition|(
name|resourceUsage
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|partitionName
range|:
name|resourceUsage
operator|.
name|getNodePartitionsSet
argument_list|()
control|)
block|{
name|resourceUsagesByPartition
operator|.
name|add
argument_list|(
operator|new
name|PartitionResourcesInfo
argument_list|(
name|partitionName
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|resourceUsage
operator|.
name|getUsed
argument_list|(
name|partitionName
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|resourceUsage
operator|.
name|getReserved
argument_list|(
name|partitionName
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ResourceInfo
argument_list|(
name|resourceUsage
operator|.
name|getPending
argument_list|(
name|partitionName
argument_list|)
argument_list|)
argument_list|,
name|considerAMUsage
condition|?
operator|new
name|ResourceInfo
argument_list|(
name|resourceUsage
operator|.
name|getAMUsed
argument_list|(
name|partitionName
argument_list|)
argument_list|)
else|:
literal|null
argument_list|,
name|considerAMUsage
condition|?
operator|new
name|ResourceInfo
argument_list|(
name|resourceUsage
operator|.
name|getAMLimit
argument_list|(
name|partitionName
argument_list|)
argument_list|)
else|:
literal|null
argument_list|,
name|considerAMUsage
condition|?
operator|new
name|ResourceInfo
argument_list|(
name|resourceUsage
operator|.
name|getUserAMLimit
argument_list|(
name|partitionName
argument_list|)
argument_list|)
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ResourcesInfo (ResourceUsage resourceUsage)
specifier|public
name|ResourcesInfo
parameter_list|(
name|ResourceUsage
name|resourceUsage
parameter_list|)
block|{
name|this
argument_list|(
name|resourceUsage
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getPartitionResourceUsages ()
specifier|public
name|List
argument_list|<
name|PartitionResourcesInfo
argument_list|>
name|getPartitionResourceUsages
parameter_list|()
block|{
return|return
name|resourceUsagesByPartition
return|;
block|}
DECL|method|setPartitionResourceUsages ( List<PartitionResourcesInfo> resources)
specifier|public
name|void
name|setPartitionResourceUsages
parameter_list|(
name|List
argument_list|<
name|PartitionResourcesInfo
argument_list|>
name|resources
parameter_list|)
block|{
name|this
operator|.
name|resourceUsagesByPartition
operator|=
name|resources
expr_stmt|;
block|}
DECL|method|getPartitionResourceUsageInfo ( String partitionName)
specifier|public
name|PartitionResourcesInfo
name|getPartitionResourceUsageInfo
parameter_list|(
name|String
name|partitionName
parameter_list|)
block|{
for|for
control|(
name|PartitionResourcesInfo
name|partitionResourceUsageInfo
range|:
name|resourceUsagesByPartition
control|)
block|{
if|if
condition|(
name|partitionResourceUsageInfo
operator|.
name|getPartitionName
argument_list|()
operator|.
name|equals
argument_list|(
name|partitionName
argument_list|)
condition|)
block|{
return|return
name|partitionResourceUsageInfo
return|;
block|}
block|}
return|return
operator|new
name|PartitionResourcesInfo
argument_list|()
return|;
block|}
block|}
end_class

end_unit

