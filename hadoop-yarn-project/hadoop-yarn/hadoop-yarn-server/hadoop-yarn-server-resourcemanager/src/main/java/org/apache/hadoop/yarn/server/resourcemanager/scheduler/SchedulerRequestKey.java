begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_comment
comment|/**  * Composite key for outstanding scheduler requests for any schedulable entity.  * Currently it includes {@link Priority}.  */
end_comment

begin_class
DECL|class|SchedulerRequestKey
specifier|public
specifier|final
class|class
name|SchedulerRequestKey
implements|implements
name|Comparable
argument_list|<
name|SchedulerRequestKey
argument_list|>
block|{
DECL|field|priority
specifier|private
specifier|final
name|Priority
name|priority
decl_stmt|;
DECL|field|UNDEFINED
specifier|public
specifier|static
specifier|final
name|SchedulerRequestKey
name|UNDEFINED
init|=
operator|new
name|SchedulerRequestKey
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|)
decl_stmt|;
comment|/**    * Factory method to generate a SchedulerRequestKey from a ResourceRequest.    * @param req ResourceRequest    * @return SchedulerRequestKey    */
DECL|method|create (ResourceRequest req)
specifier|public
specifier|static
name|SchedulerRequestKey
name|create
parameter_list|(
name|ResourceRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|SchedulerRequestKey
argument_list|(
name|req
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Convenience method to extract the SchedulerRequestKey used to schedule the    * Container.    * @param container Container    * @return SchedulerRequestKey    */
DECL|method|extractFrom (Container container)
specifier|public
specifier|static
name|SchedulerRequestKey
name|extractFrom
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
return|return
operator|new
name|SchedulerRequestKey
argument_list|(
name|container
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
DECL|method|SchedulerRequestKey (Priority priority)
specifier|private
name|SchedulerRequestKey
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
block|}
comment|/**    * Get the {@link Priority} of the request.    *    * @return the {@link Priority} of the request    */
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo (SchedulerRequestKey o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|SchedulerRequestKey
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|priority
operator|!=
literal|null
operator|)
condition|?
operator|-
literal|1
else|:
literal|0
return|;
block|}
else|else
block|{
if|if
condition|(
name|priority
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
block|}
return|return
name|o
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|priority
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SchedulerRequestKey
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SchedulerRequestKey
name|that
init|=
operator|(
name|SchedulerRequestKey
operator|)
name|o
decl_stmt|;
return|return
name|getPriority
argument_list|()
operator|.
name|equals
argument_list|(
name|that
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getPriority
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

