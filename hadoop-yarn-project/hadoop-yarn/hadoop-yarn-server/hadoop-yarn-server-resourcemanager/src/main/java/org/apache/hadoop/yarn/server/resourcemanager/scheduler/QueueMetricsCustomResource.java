begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_comment
comment|/**  * Class that holds metrics values for custom resources in a map keyed with  * the name of the custom resource.  * There are different kinds of values like allocated, available and others.  */
end_comment

begin_class
DECL|class|QueueMetricsCustomResource
specifier|public
class|class
name|QueueMetricsCustomResource
block|{
DECL|field|values
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|values
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
DECL|method|increase (Resource res)
specifier|protected
name|void
name|increase
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
name|update
argument_list|(
name|res
argument_list|,
name|Long
operator|::
name|sum
argument_list|)
expr_stmt|;
block|}
DECL|method|increaseWithMultiplier (Resource res, long multiplier)
name|void
name|increaseWithMultiplier
parameter_list|(
name|Resource
name|res
parameter_list|,
name|long
name|multiplier
parameter_list|)
block|{
name|update
argument_list|(
name|res
argument_list|,
parameter_list|(
name|v1
parameter_list|,
name|v2
parameter_list|)
lambda|->
name|v1
operator|+
name|v2
operator|*
name|multiplier
argument_list|)
expr_stmt|;
block|}
DECL|method|decrease (Resource res)
specifier|protected
name|void
name|decrease
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
name|update
argument_list|(
name|res
argument_list|,
parameter_list|(
name|v1
parameter_list|,
name|v2
parameter_list|)
lambda|->
name|v1
operator|-
name|v2
argument_list|)
expr_stmt|;
block|}
DECL|method|decreaseWithMultiplier (Resource res, int containers)
name|void
name|decreaseWithMultiplier
parameter_list|(
name|Resource
name|res
parameter_list|,
name|int
name|containers
parameter_list|)
block|{
name|update
argument_list|(
name|res
argument_list|,
parameter_list|(
name|v1
parameter_list|,
name|v2
parameter_list|)
lambda|->
name|v1
operator|-
name|v2
operator|*
name|containers
argument_list|)
expr_stmt|;
block|}
DECL|method|set (Resource res)
specifier|protected
name|void
name|set
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
name|update
argument_list|(
name|res
argument_list|,
parameter_list|(
name|v1
parameter_list|,
name|v2
parameter_list|)
lambda|->
name|v2
argument_list|)
expr_stmt|;
block|}
DECL|method|update (Resource res, BiFunction<Long, Long, Long> operation)
specifier|private
name|void
name|update
parameter_list|(
name|Resource
name|res
parameter_list|,
name|BiFunction
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|Long
argument_list|>
name|operation
parameter_list|)
block|{
if|if
condition|(
name|ResourceUtils
operator|.
name|getNumberOfKnownResourceTypes
argument_list|()
operator|>
literal|2
condition|)
block|{
name|ResourceInformation
index|[]
name|resources
init|=
name|res
operator|.
name|getResources
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ResourceInformation
name|resource
init|=
name|resources
index|[
name|i
index|]
decl_stmt|;
comment|// Map.merge only applies operation if there is
comment|// a value for the key in the map
if|if
condition|(
operator|!
name|values
operator|.
name|containsKey
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|values
operator|.
name|put
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|merge
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|,
name|resource
operator|.
name|getValue
argument_list|()
argument_list|,
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getValues ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

