begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSLeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|FairSchedulerPlanFollower
specifier|public
class|class
name|FairSchedulerPlanFollower
extends|extends
name|AbstractSchedulerPlanFollower
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FairSchedulerPlanFollower
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|fs
specifier|private
name|FairScheduler
name|fs
decl_stmt|;
annotation|@
name|Override
DECL|method|init (Clock clock, ResourceScheduler sched, Collection<Plan> plans)
specifier|public
name|void
name|init
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|ResourceScheduler
name|sched
parameter_list|,
name|Collection
argument_list|<
name|Plan
argument_list|>
name|plans
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|clock
argument_list|,
name|sched
argument_list|,
name|plans
argument_list|)
expr_stmt|;
name|fs
operator|=
operator|(
name|FairScheduler
operator|)
name|sched
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Initializing Plan Follower Policy:"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPlanQueue (String planQueueName)
specifier|protected
name|Queue
name|getPlanQueue
parameter_list|(
name|String
name|planQueueName
parameter_list|)
block|{
name|Queue
name|planQueue
init|=
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getParentQueue
argument_list|(
name|planQueueName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|planQueue
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The queue "
operator|+
name|planQueueName
operator|+
literal|" cannot be found or is not a "
operator|+
literal|"ParentQueue"
argument_list|)
expr_stmt|;
block|}
return|return
name|planQueue
return|;
block|}
annotation|@
name|Override
DECL|method|calculateReservationToPlanRatio (Resource clusterResources, Resource planResources, Resource capToAssign)
specifier|protected
name|float
name|calculateReservationToPlanRatio
parameter_list|(
name|Resource
name|clusterResources
parameter_list|,
name|Resource
name|planResources
parameter_list|,
name|Resource
name|capToAssign
parameter_list|)
block|{
return|return
name|Resources
operator|.
name|divide
argument_list|(
name|fs
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|clusterResources
argument_list|,
name|capToAssign
argument_list|,
name|planResources
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|arePlanResourcesLessThanReservations (Resource clusterResources, Resource planResources, Resource reservedResources)
specifier|protected
name|boolean
name|arePlanResourcesLessThanReservations
parameter_list|(
name|Resource
name|clusterResources
parameter_list|,
name|Resource
name|planResources
parameter_list|,
name|Resource
name|reservedResources
parameter_list|)
block|{
return|return
name|Resources
operator|.
name|greaterThan
argument_list|(
name|fs
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|clusterResources
argument_list|,
name|reservedResources
argument_list|,
name|planResources
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getChildReservationQueues (Queue queue)
specifier|protected
name|List
argument_list|<
name|?
extends|extends
name|Queue
argument_list|>
name|getChildReservationQueues
parameter_list|(
name|Queue
name|queue
parameter_list|)
block|{
name|FSQueue
name|planQueue
init|=
operator|(
name|FSQueue
operator|)
name|queue
decl_stmt|;
name|List
argument_list|<
name|FSQueue
argument_list|>
name|childQueues
init|=
name|planQueue
operator|.
name|getChildQueues
argument_list|()
decl_stmt|;
return|return
name|childQueues
return|;
block|}
annotation|@
name|Override
DECL|method|addReservationQueue (String planQueueName, Queue queue, String currResId)
specifier|protected
name|void
name|addReservationQueue
parameter_list|(
name|String
name|planQueueName
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|String
name|currResId
parameter_list|)
block|{
name|String
name|leafQueueName
init|=
name|getReservationQueueName
argument_list|(
name|planQueueName
argument_list|,
name|currResId
argument_list|)
decl_stmt|;
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|leafQueueName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createDefaultReservationQueue (String planQueueName, Queue queue, String defReservationId)
specifier|protected
name|void
name|createDefaultReservationQueue
parameter_list|(
name|String
name|planQueueName
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|String
name|defReservationId
parameter_list|)
block|{
name|String
name|defReservationQueueName
init|=
name|getReservationQueueName
argument_list|(
name|planQueueName
argument_list|,
name|defReservationId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|exists
argument_list|(
name|defReservationQueueName
argument_list|)
condition|)
block|{
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|defReservationQueueName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPlanResources (Plan plan, Queue queue, Resource clusterResources)
specifier|protected
name|Resource
name|getPlanResources
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|Queue
name|queue
parameter_list|,
name|Resource
name|clusterResources
parameter_list|)
block|{
name|FSParentQueue
name|planQueue
init|=
operator|(
name|FSParentQueue
operator|)
name|queue
decl_stmt|;
name|Resource
name|planResources
init|=
name|planQueue
operator|.
name|getSteadyFairShare
argument_list|()
decl_stmt|;
return|return
name|planResources
return|;
block|}
annotation|@
name|Override
DECL|method|getReservationQueueResourceIfExists (Plan plan, ReservationId reservationId)
specifier|protected
name|Resource
name|getReservationQueueResourceIfExists
parameter_list|(
name|Plan
name|plan
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|)
block|{
name|String
name|reservationQueueName
init|=
name|getReservationQueueName
argument_list|(
name|plan
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|reservationId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|reservationQueue
init|=
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|reservationQueueName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Resource
name|reservationResource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservationQueue
operator|!=
literal|null
condition|)
block|{
name|reservationResource
operator|=
name|reservationQueue
operator|.
name|getSteadyFairShare
argument_list|()
expr_stmt|;
block|}
return|return
name|reservationResource
return|;
block|}
annotation|@
name|Override
DECL|method|getReservationQueueName (String planQueueName, String reservationQueueName)
specifier|protected
name|String
name|getReservationQueueName
parameter_list|(
name|String
name|planQueueName
parameter_list|,
name|String
name|reservationQueueName
parameter_list|)
block|{
name|String
name|planQueueNameFullPath
init|=
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
name|planQueueName
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reservationQueueName
operator|.
name|startsWith
argument_list|(
name|planQueueNameFullPath
argument_list|)
condition|)
block|{
comment|// If name is not a path we need full path for FairScheduler. See
comment|// YARN-2773 for the root cause
return|return
name|planQueueNameFullPath
operator|+
literal|"."
operator|+
name|reservationQueueName
return|;
block|}
return|return
name|reservationQueueName
return|;
block|}
annotation|@
name|Override
DECL|method|getReservationIdFromQueueName (String resQueueName)
specifier|protected
name|String
name|getReservationIdFromQueueName
parameter_list|(
name|String
name|resQueueName
parameter_list|)
block|{
return|return
name|resQueueName
operator|.
name|substring
argument_list|(
name|resQueueName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

