begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_comment
comment|/**  * A filesystem implementation of {@link YarnConfigurationStore}. Offer  * configuration storage in FileSystem  */
end_comment

begin_class
DECL|class|FSSchedulerConfigurationStore
specifier|public
class|class
name|FSSchedulerConfigurationStore
extends|extends
name|YarnConfigurationStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FSSchedulerConfigurationStore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|VisibleForTesting
DECL|field|CURRENT_VERSION_INFO
specifier|protected
specifier|static
specifier|final
name|Version
name|CURRENT_VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|TMP
specifier|private
specifier|static
specifier|final
name|String
name|TMP
init|=
literal|".tmp"
decl_stmt|;
DECL|field|maxVersion
specifier|private
name|int
name|maxVersion
decl_stmt|;
DECL|field|schedulerConfDir
specifier|private
name|Path
name|schedulerConfDir
decl_stmt|;
DECL|field|fileSystem
specifier|private
name|FileSystem
name|fileSystem
decl_stmt|;
DECL|field|pendingMutation
specifier|private
name|LogMutation
name|pendingMutation
decl_stmt|;
DECL|field|configFilePathFilter
specifier|private
name|PathFilter
name|configFilePathFilter
decl_stmt|;
DECL|field|schedConf
specifier|private
specifier|volatile
name|Configuration
name|schedConf
decl_stmt|;
DECL|field|oldConf
specifier|private
specifier|volatile
name|Configuration
name|oldConf
decl_stmt|;
DECL|field|tempConfigPath
specifier|private
name|Path
name|tempConfigPath
decl_stmt|;
annotation|@
name|Override
DECL|method|initialize (Configuration conf, Configuration vSchedConf, RMContext rmContext)
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Configuration
name|vSchedConf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|configFilePathFilter
operator|=
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|pathName
init|=
name|path
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|pathName
operator|.
name|startsWith
argument_list|(
name|YarnConfiguration
operator|.
name|CS_CONFIGURATION_FILE
argument_list|)
operator|&&
operator|!
name|pathName
operator|.
name|endsWith
argument_list|(
name|TMP
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|String
name|schedulerConfPathStr
init|=
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_FS_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerConfPathStr
operator|==
literal|null
operator|||
name|schedulerConfPathStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_FS_PATH
operator|+
literal|" must be set"
argument_list|)
throw|;
block|}
name|this
operator|.
name|schedulerConfDir
operator|=
operator|new
name|Path
argument_list|(
name|schedulerConfPathStr
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileSystem
operator|=
name|this
operator|.
name|schedulerConfDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxVersion
operator|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_FS_MAX_VERSION
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"schedulerConfDir="
operator|+
name|schedulerConfPathStr
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"capacity scheduler file max version = "
operator|+
name|maxVersion
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|exists
argument_list|(
name|schedulerConfDir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|fileSystem
operator|.
name|mkdirs
argument_list|(
name|schedulerConfDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"mkdir "
operator|+
name|schedulerConfPathStr
operator|+
literal|" failed"
argument_list|)
throw|;
block|}
block|}
comment|// create capacity-schedule.xml.ts file if not existing
if|if
condition|(
name|this
operator|.
name|getConfigFileInputStream
argument_list|()
operator|==
literal|null
condition|)
block|{
name|writeConfigurationToFileSystem
argument_list|(
name|vSchedConf
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|schedConf
operator|=
name|this
operator|.
name|getConfigurationFromFileSystem
argument_list|()
expr_stmt|;
block|}
comment|/**    * Update and persist latest configuration in temp file.    * @param logMutation configuration change to be persisted in write ahead log    * @throws IOException throw IOE when write temp configuration file fail    */
annotation|@
name|Override
DECL|method|logMutation (LogMutation logMutation)
specifier|public
name|void
name|logMutation
parameter_list|(
name|LogMutation
name|logMutation
parameter_list|)
throws|throws
name|IOException
block|{
name|pendingMutation
operator|=
name|logMutation
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|serializeNulls
argument_list|()
operator|.
name|create
argument_list|()
operator|.
name|toJson
argument_list|(
name|logMutation
argument_list|)
argument_list|)
expr_stmt|;
name|oldConf
operator|=
operator|new
name|Configuration
argument_list|(
name|schedConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mutations
init|=
name|pendingMutation
operator|.
name|getUpdates
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kv
range|:
name|mutations
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|kv
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|schedConf
operator|.
name|unset
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|schedConf
operator|.
name|set
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|kv
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|tempConfigPath
operator|=
name|writeTmpConfig
argument_list|(
name|schedConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param isValid if true, finalize temp configuration file    *                if false, remove temp configuration file and rollback    * @throws Exception throw IOE when write temp configuration file fail    */
annotation|@
name|Override
DECL|method|confirmMutation (boolean isValid)
specifier|public
name|void
name|confirmMutation
parameter_list|(
name|boolean
name|isValid
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|pendingMutation
operator|==
literal|null
operator|||
name|tempConfigPath
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"pendingMutation or tempConfigPath is null, do nothing"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|isValid
condition|)
block|{
name|finalizeFileSystemFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|schedConf
operator|=
name|oldConf
expr_stmt|;
name|removeTmpConfigFile
argument_list|()
expr_stmt|;
block|}
name|tempConfigPath
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|finalizeFileSystemFile ()
specifier|private
name|void
name|finalizeFileSystemFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// call confirmMutation() make sure tempConfigPath is not null
name|Path
name|finalConfigPath
init|=
name|getFinalConfigPath
argument_list|(
name|tempConfigPath
argument_list|)
decl_stmt|;
name|fileSystem
operator|.
name|rename
argument_list|(
name|tempConfigPath
argument_list|,
name|finalConfigPath
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finalize temp configuration file successfully, finalConfigPath="
operator|+
name|finalConfigPath
argument_list|)
expr_stmt|;
block|}
DECL|method|getFinalConfigPath (Path tempPath)
specifier|private
name|Path
name|getFinalConfigPath
parameter_list|(
name|Path
name|tempPath
parameter_list|)
block|{
name|String
name|tempConfigPathStr
init|=
name|tempPath
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tempConfigPathStr
operator|.
name|endsWith
argument_list|(
name|TMP
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|tempPath
operator|+
literal|" does not end with '"
operator|+
name|TMP
operator|+
literal|"' return null"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|finalConfigPathStr
init|=
name|tempConfigPathStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
name|tempConfigPathStr
operator|.
name|length
argument_list|()
operator|-
name|TMP
operator|.
name|length
argument_list|()
operator|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
name|tempPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|finalConfigPathStr
argument_list|)
return|;
block|}
DECL|method|removeTmpConfigFile ()
specifier|private
name|void
name|removeTmpConfigFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// call confirmMutation() make sure tempConfigPath is not null
name|fileSystem
operator|.
name|delete
argument_list|(
name|tempConfigPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"delete temp configuration file: "
operator|+
name|tempConfigPath
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigurationFromFileSystem ()
specifier|private
name|Configuration
name|getConfigurationFromFileSystem
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|InputStream
name|configInputStream
init|=
name|getConfigFileInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|configInputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"no capacity scheduler file in "
operator|+
name|this
operator|.
name|schedulerConfDir
argument_list|)
throw|;
block|}
name|conf
operator|.
name|addResource
argument_list|(
name|configInputStream
argument_list|)
expr_stmt|;
name|Configuration
name|result
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|conf
control|)
block|{
name|result
operator|.
name|set
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"upload conf from fileSystem took "
operator|+
operator|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
comment|//for ha transition, local schedConf may be old one.
name|this
operator|.
name|schedConf
operator|=
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|getConfigFileInputStream ()
specifier|private
name|InputStream
name|getConfigFileInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|lastestConfigPath
init|=
name|getLatestConfigPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastestConfigPath
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|fileSystem
operator|.
name|open
argument_list|(
name|lastestConfigPath
argument_list|)
return|;
block|}
DECL|method|getLatestConfigPath ()
specifier|private
name|Path
name|getLatestConfigPath
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|this
operator|.
name|schedulerConfDir
argument_list|,
name|this
operator|.
name|configFilePathFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatuses
operator|==
literal|null
operator|||
name|fileStatuses
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|fileStatuses
argument_list|)
expr_stmt|;
return|return
name|fileStatuses
index|[
name|fileStatuses
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getPath
argument_list|()
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|writeTmpConfig (Configuration vSchedConf)
specifier|private
name|Path
name|writeTmpConfig
parameter_list|(
name|Configuration
name|vSchedConf
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|Time
operator|.
name|monotonicNow
argument_list|()
decl_stmt|;
name|String
name|tempSchedulerConfigFile
init|=
name|YarnConfiguration
operator|.
name|CS_CONFIGURATION_FILE
operator|+
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TMP
decl_stmt|;
name|Path
name|tempSchedulerConfigPath
init|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|schedulerConfDir
argument_list|,
name|tempSchedulerConfigFile
argument_list|)
decl_stmt|;
try|try
init|(
name|FSDataOutputStream
name|outputStream
init|=
name|fileSystem
operator|.
name|create
argument_list|(
name|tempSchedulerConfigPath
argument_list|)
init|)
block|{
comment|//clean configuration file when num exceed maxVersion
name|cleanConfigurationFile
argument_list|()
expr_stmt|;
name|vSchedConf
operator|.
name|writeXml
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"write temp capacity configuration successfully, schedulerConfigFile="
operator|+
name|tempSchedulerConfigPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"write temp capacity configuration fail, schedulerConfigFile="
operator|+
name|tempSchedulerConfigPath
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"write temp configuration to fileSystem took "
operator|+
operator|(
name|Time
operator|.
name|monotonicNow
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
return|return
name|tempSchedulerConfigPath
return|;
block|}
annotation|@
name|VisibleForTesting
DECL|method|writeConfigurationToFileSystem (Configuration vSchedConf)
name|void
name|writeConfigurationToFileSystem
parameter_list|(
name|Configuration
name|vSchedConf
parameter_list|)
throws|throws
name|IOException
block|{
name|tempConfigPath
operator|=
name|writeTmpConfig
argument_list|(
name|vSchedConf
argument_list|)
expr_stmt|;
name|finalizeFileSystemFile
argument_list|()
expr_stmt|;
block|}
DECL|method|cleanConfigurationFile ()
specifier|private
name|void
name|cleanConfigurationFile
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|fileStatuses
init|=
name|fileSystem
operator|.
name|listStatus
argument_list|(
name|this
operator|.
name|schedulerConfDir
argument_list|,
name|this
operator|.
name|configFilePathFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileStatuses
operator|==
literal|null
operator|||
name|fileStatuses
operator|.
name|length
operator|<=
name|this
operator|.
name|maxVersion
condition|)
block|{
return|return;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|fileStatuses
argument_list|)
expr_stmt|;
name|int
name|configFileNum
init|=
name|fileStatuses
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|fileStatuses
operator|.
name|length
operator|>
name|this
operator|.
name|maxVersion
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|configFileNum
operator|-
name|this
operator|.
name|maxVersion
condition|;
name|i
operator|++
control|)
block|{
name|fileSystem
operator|.
name|delete
argument_list|(
name|fileStatuses
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"delete config file "
operator|+
name|fileStatuses
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|retrieve ()
specifier|public
name|Configuration
name|retrieve
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getConfigurationFromFileSystem
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getConfirmedConfHistory (long fromId)
specifier|public
name|List
argument_list|<
name|LogMutation
argument_list|>
name|getConfirmedConfHistory
parameter_list|(
name|long
name|fromId
parameter_list|)
block|{
comment|// Unimplemented.
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getConfStoreVersion ()
specifier|protected
name|Version
name|getConfStoreVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|storeVersion ()
specifier|protected
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{    }
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|protected
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileSystem
operator|!=
literal|null
condition|)
block|{
name|fileSystem
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

