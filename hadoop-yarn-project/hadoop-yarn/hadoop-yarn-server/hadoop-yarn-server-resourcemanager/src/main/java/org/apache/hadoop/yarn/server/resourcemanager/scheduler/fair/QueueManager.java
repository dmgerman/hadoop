begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Private
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Maintains a list of queues as well as scheduling parameters for each queue,  * such as guaranteed share allocations, from the fair scheduler config file.  */
end_comment

begin_class
annotation|@
name|Private
annotation|@
name|Unstable
DECL|class|QueueManager
specifier|public
class|class
name|QueueManager
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|QueueManager
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** Time to wait between checks of the allocation file */
DECL|field|ALLOC_RELOAD_INTERVAL
specifier|public
specifier|static
specifier|final
name|long
name|ALLOC_RELOAD_INTERVAL
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|/**    * Time to wait after the allocation has been modified before reloading it    * (this is done to prevent loading a file that hasn't been fully written).    */
DECL|field|ALLOC_RELOAD_WAIT
specifier|public
specifier|static
specifier|final
name|long
name|ALLOC_RELOAD_WAIT
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|FairScheduler
name|scheduler
decl_stmt|;
comment|// Minimum resource allocation for each queue
DECL|field|minQueueResources
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|minQueueResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Maximum amount of resources per queue
DECL|field|maxQueueResources
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|maxQueueResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Sharing weights for each queue
DECL|field|queueWeights
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|queueWeights
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
comment|// Max concurrent running applications for each queue and for each user; in addition,
comment|// for users that have no max specified, we use the userMaxJobsDefault.
DECL|field|queueMaxApps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|queueMaxApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|userMaxApps
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userMaxApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|userMaxAppsDefault
specifier|private
name|int
name|userMaxAppsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|queueMaxAppsDefault
specifier|private
name|int
name|queueMaxAppsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// ACL's for each queue. Only specifies non-default ACL's from configuration.
DECL|field|queueAcls
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
name|queueAcls
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// Min share preemption timeout for each queue in seconds. If a job in the queue
comment|// waits this long without receiving its guaranteed share, it is allowed to
comment|// preempt other jobs' tasks.
DECL|field|minSharePreemptionTimeouts
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|minSharePreemptionTimeouts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Default min share preemption timeout for queues where it is not set
comment|// explicitly.
DECL|field|defaultMinSharePreemptionTimeout
specifier|private
name|long
name|defaultMinSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// Preemption timeout for jobs below fair share in seconds. If a job remains
comment|// below half its fair share for this long, it is allowed to preempt tasks.
DECL|field|fairSharePreemptionTimeout
specifier|private
name|long
name|fairSharePreemptionTimeout
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|defaultSchedulingMode
name|SchedulingMode
name|defaultSchedulingMode
init|=
name|SchedulingMode
operator|.
name|FAIR
decl_stmt|;
DECL|field|allocFile
specifier|private
name|Object
name|allocFile
decl_stmt|;
comment|// Path to XML file containing allocations. This
comment|// is either a URL to specify a classpath resource
comment|// (if the fair-scheduler.xml on the classpath is
comment|// used) or a String to specify an absolute path (if
comment|// mapred.fairscheduler.allocation.file is used).
DECL|field|queues
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|FSQueue
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|lastReloadAttempt
specifier|private
name|long
name|lastReloadAttempt
decl_stmt|;
comment|// Last time we tried to reload the queues file
DECL|field|lastSuccessfulReload
specifier|private
name|long
name|lastSuccessfulReload
decl_stmt|;
comment|// Last time we successfully reloaded queues
DECL|field|lastReloadAttemptFailed
specifier|private
name|boolean
name|lastReloadAttemptFailed
init|=
literal|false
decl_stmt|;
comment|// Monitor object for minQueueResources
DECL|field|minQueueResourcesMO
specifier|private
name|Object
name|minQueueResourcesMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for maxQueueResources
DECL|field|maxQueueResourcesMO
specifier|private
name|Object
name|maxQueueResourcesMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for queueMaxApps
DECL|field|queueMaxAppsMO
specifier|private
name|Object
name|queueMaxAppsMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for userMaxApps
DECL|field|userMaxAppsMO
specifier|private
name|Object
name|userMaxAppsMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for queueWeights
DECL|field|queueWeightsMO
specifier|private
name|Object
name|queueWeightsMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for minSharePreemptionTimeouts
DECL|field|minSharePreemptionTimeoutsMO
specifier|private
name|Object
name|minSharePreemptionTimeoutsMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for queueAcls
DECL|field|queueAclsMO
specifier|private
name|Object
name|queueAclsMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for userMaxAppsDefault
DECL|field|userMaxAppsDefaultMO
specifier|private
name|Object
name|userMaxAppsDefaultMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for queueMaxAppsDefault
DECL|field|queueMaxAppsDefaultMO
specifier|private
name|Object
name|queueMaxAppsDefaultMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|//Monitor object for defaultSchedulingMode
DECL|field|defaultSchedulingModeMO
specifier|private
name|Object
name|defaultSchedulingModeMO
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|method|QueueManager (FairScheduler scheduler)
specifier|public
name|QueueManager
parameter_list|(
name|FairScheduler
name|scheduler
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
block|}
DECL|method|initialize ()
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
throws|,
name|ParserConfigurationException
block|{
name|FairSchedulerConfiguration
name|conf
init|=
name|scheduler
operator|.
name|getConf
argument_list|()
decl_stmt|;
name|this
operator|.
name|allocFile
operator|=
name|conf
operator|.
name|getAllocationFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
block|{
comment|// No allocation file specified in jobconf. Use the default allocation
comment|// file, fair-scheduler.xml, looking for it on the classpath.
name|allocFile
operator|=
operator|new
name|Configuration
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"fair-scheduler.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"The fair scheduler allocation file fair-scheduler.xml was "
operator|+
literal|"not found on the classpath, and no other config file is given "
operator|+
literal|"through mapred.fairscheduler.allocation.file."
argument_list|)
expr_stmt|;
block|}
block|}
name|reloadAllocs
argument_list|()
expr_stmt|;
name|lastSuccessfulReload
operator|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|lastReloadAttempt
operator|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|// Create the default queue
name|getQueue
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a queue by name, creating it if necessary    */
DECL|method|getQueue (String name)
specifier|public
name|FSQueue
name|getQueue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queues
init|)
block|{
name|FSQueue
name|queue
init|=
name|queues
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|==
literal|null
condition|)
block|{
name|queue
operator|=
operator|new
name|FSQueue
argument_list|(
name|scheduler
argument_list|,
name|name
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|defaultSchedulingModeMO
init|)
block|{
name|queue
operator|.
name|setSchedulingMode
argument_list|(
name|defaultSchedulingMode
argument_list|)
expr_stmt|;
block|}
name|queues
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
return|return
name|queue
return|;
block|}
block|}
comment|/**    * Return whether a queue exists already.    */
DECL|method|exists (String name)
specifier|public
name|boolean
name|exists
parameter_list|(
name|String
name|name
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queues
init|)
block|{
return|return
name|queues
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
comment|/**    * Get the queue for a given AppSchedulable.    */
DECL|method|getQueueForApp (AppSchedulable app)
specifier|public
name|FSQueue
name|getQueueForApp
parameter_list|(
name|AppSchedulable
name|app
parameter_list|)
block|{
return|return
name|this
operator|.
name|getQueue
argument_list|(
name|app
operator|.
name|getApp
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Reload allocations file if it hasn't been loaded in a while    */
DECL|method|reloadAllocsIfNecessary ()
specifier|public
name|void
name|reloadAllocsIfNecessary
parameter_list|()
block|{
name|long
name|time
init|=
name|scheduler
operator|.
name|getClock
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|>
name|lastReloadAttempt
operator|+
name|ALLOC_RELOAD_INTERVAL
condition|)
block|{
name|lastReloadAttempt
operator|=
name|time
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|allocFile
condition|)
block|{
return|return;
block|}
try|try
block|{
comment|// Get last modified time of alloc file depending whether it's a String
comment|// (for a path name) or an URL (for a classloader resource)
name|long
name|lastModified
decl_stmt|;
if|if
condition|(
name|allocFile
operator|instanceof
name|String
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|allocFile
argument_list|)
decl_stmt|;
name|lastModified
operator|=
name|file
operator|.
name|lastModified
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// allocFile is an URL
name|URLConnection
name|conn
init|=
operator|(
operator|(
name|URL
operator|)
name|allocFile
operator|)
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|lastModified
operator|=
name|conn
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastModified
operator|>
name|lastSuccessfulReload
operator|&&
name|time
operator|>
name|lastModified
operator|+
name|ALLOC_RELOAD_WAIT
condition|)
block|{
name|reloadAllocs
argument_list|()
expr_stmt|;
name|lastSuccessfulReload
operator|=
name|time
expr_stmt|;
name|lastReloadAttemptFailed
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Throwing the error further out here won't help - the RPC thread
comment|// will catch it and report it in a loop. Instead, just log it and
comment|// hope somebody will notice from the log.
comment|// We log the error only on the first failure so we don't fill up the
comment|// JobTracker's log with these messages.
if|if
condition|(
operator|!
name|lastReloadAttemptFailed
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to reload fair scheduler config file - "
operator|+
literal|"will use existing allocations."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|lastReloadAttemptFailed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Updates the allocation list from the allocation config file. This file is    * expected to be in the XML format specified in the design doc.    *    * @throws IOException if the config file cannot be read.    * @throws AllocationConfigurationException if allocations are invalid.    * @throws ParserConfigurationException if XML parser is misconfigured.    * @throws SAXException if config file is malformed.    */
DECL|method|reloadAllocs ()
specifier|public
name|void
name|reloadAllocs
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
block|{
if|if
condition|(
name|allocFile
operator|==
literal|null
condition|)
return|return;
comment|// Create some temporary hashmaps to hold the new allocs, and we only save
comment|// them in our fields if we have parsed the entire allocs file successfully.
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|minQueueResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|maxQueueResources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|queueMaxApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userMaxApps
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|queueWeights
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SchedulingMode
argument_list|>
name|queueModes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchedulingMode
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|minSharePreemptionTimeouts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
name|queueAcls
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|userMaxAppsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|queueMaxAppsDefault
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|SchedulingMode
name|defaultSchedulingMode
init|=
name|SchedulingMode
operator|.
name|FAIR
decl_stmt|;
comment|// Remember all queue names so we can display them on web UI, etc.
name|List
argument_list|<
name|String
argument_list|>
name|queueNamesInAllocFile
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Read and parse the allocations file.
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
decl_stmt|;
if|if
condition|(
name|allocFile
operator|instanceof
name|String
condition|)
block|{
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|allocFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|allocFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"allocations"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Bad fair scheduler config "
operator|+
literal|"file: top-level element not<allocations>"
argument_list|)
throw|;
name|NodeList
name|elements
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|elements
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
if|if
condition|(
literal|"queue"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
operator|||
literal|"pool"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|queueName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
name|queueNamesInAllocFile
operator|.
name|add
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
literal|"minResources"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|minQueueResources
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxResources"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|maxQueueResources
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"maxRunningApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|queueMaxApps
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"weight"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|double
name|val
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|queueWeights
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"minSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|minSharePreemptionTimeouts
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"schedulingMode"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|queueModes
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|parseSchedulingMode
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"aclSubmitApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"aclAdministerApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
operator|new
name|AccessControlList
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|queueAcls
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|acls
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxQueueResources
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
operator|&&
name|minQueueResources
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
operator|&&
name|Resources
operator|.
name|lessThan
argument_list|(
name|maxQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|,
name|minQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Queue %s has max resources %d less than min resources %d"
argument_list|,
name|queueName
argument_list|,
name|maxQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|,
name|minQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"user"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|userName
init|=
name|element
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|NodeList
name|fields
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|fields
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|fieldNode
init|=
name|fields
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fieldNode
operator|instanceof
name|Element
operator|)
condition|)
continue|continue;
name|Element
name|field
init|=
operator|(
name|Element
operator|)
name|fieldNode
decl_stmt|;
if|if
condition|(
literal|"maxRunningApps"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|field
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|userMaxApps
operator|.
name|put
argument_list|(
name|userName
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
literal|"userMaxAppsDefault"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|userMaxAppsDefault
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"fairSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|fairSharePreemptionTimeout
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"defaultMinSharePreemptionTimeout"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|long
name|val
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|text
argument_list|)
operator|*
literal|1000L
decl_stmt|;
name|defaultMinSharePreemptionTimeout
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"queueMaxAppsDefault"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|val
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|queueMaxAppsDefault
operator|=
name|val
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"defaultQueueSchedulingMode"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|Text
operator|)
name|element
operator|.
name|getFirstChild
argument_list|()
operator|)
operator|.
name|getData
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|defaultSchedulingMode
operator|=
name|parseSchedulingMode
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Bad element in allocations file: "
operator|+
name|element
operator|.
name|getTagName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Commit the reload; also create any queue defined in the alloc file
comment|// if it does not already exist, so it can be displayed on the web UI.
synchronized|synchronized
init|(
name|this
init|)
block|{
name|setMinResources
argument_list|(
name|minQueueResources
argument_list|)
expr_stmt|;
name|setMaxResources
argument_list|(
name|maxQueueResources
argument_list|)
expr_stmt|;
name|setQueueMaxApps
argument_list|(
name|queueMaxApps
argument_list|)
expr_stmt|;
name|setUserMaxApps
argument_list|(
name|userMaxApps
argument_list|)
expr_stmt|;
name|setQueueWeights
argument_list|(
name|queueWeights
argument_list|)
expr_stmt|;
name|setUserMaxAppsDefault
argument_list|(
name|userMaxAppsDefault
argument_list|)
expr_stmt|;
name|setQueueMaxAppsDefault
argument_list|(
name|queueMaxAppsDefault
argument_list|)
expr_stmt|;
name|setDefaultSchedulingMode
argument_list|(
name|defaultSchedulingMode
argument_list|)
expr_stmt|;
name|setMinSharePreemptionTimeouts
argument_list|(
name|minSharePreemptionTimeouts
argument_list|)
expr_stmt|;
name|setQueueAcls
argument_list|(
name|queueAcls
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|queueNamesInAllocFile
control|)
block|{
name|FSQueue
name|queue
init|=
name|getQueue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueModes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|queue
operator|.
name|setSchedulingMode
argument_list|(
name|queueModes
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queue
operator|.
name|setSchedulingMode
argument_list|(
name|defaultSchedulingMode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|parseSchedulingMode (String text)
specifier|private
name|SchedulingMode
name|parseSchedulingMode
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
name|text
operator|=
name|text
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"fair"
argument_list|)
condition|)
block|{
return|return
name|SchedulingMode
operator|.
name|FAIR
return|;
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"fifo"
argument_list|)
condition|)
block|{
return|return
name|SchedulingMode
operator|.
name|FIFO
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|AllocationConfigurationException
argument_list|(
literal|"Unknown scheduling mode : "
operator|+
name|text
operator|+
literal|"; expected 'fifo' or 'fair'"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the minimum resource allocation for the given queue.    * @return the cap set on this queue, or 0 if not set.    */
DECL|method|getMinResources (String queue)
specifier|public
name|Resource
name|getMinResources
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|minQueueResourcesMO
init|)
block|{
if|if
condition|(
name|minQueueResources
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|)
block|{
return|return
name|minQueueResources
operator|.
name|get
argument_list|(
name|queue
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|setMinResources (Map<String, Resource> resources)
specifier|private
name|void
name|setMinResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resources
parameter_list|)
block|{
synchronized|synchronized
init|(
name|minQueueResourcesMO
init|)
block|{
name|minQueueResources
operator|=
name|resources
expr_stmt|;
block|}
block|}
comment|/**    * Get the maximum resource allocation for the given queue.    * @return the cap set on this queue, or Integer.MAX_VALUE if not set.    */
DECL|method|getMaxResources (String queueName)
specifier|public
name|Resource
name|getMaxResources
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|maxQueueResourcesMO
init|)
block|{
if|if
condition|(
name|maxQueueResources
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
return|return
name|maxQueueResources
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Resources
operator|.
name|createResource
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|setMaxResources (Map<String, Resource> resources)
specifier|private
name|void
name|setMaxResources
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|resources
parameter_list|)
block|{
synchronized|synchronized
init|(
name|maxQueueResourcesMO
init|)
block|{
name|maxQueueResources
operator|=
name|resources
expr_stmt|;
block|}
block|}
comment|/**    * Add an app in the appropriate queue    */
DECL|method|addApp (FSSchedulerApp app)
specifier|public
specifier|synchronized
name|void
name|addApp
parameter_list|(
name|FSSchedulerApp
name|app
parameter_list|)
block|{
name|getQueue
argument_list|(
name|app
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|addApp
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
comment|/**    * Remove an app    */
DECL|method|removeJob (FSSchedulerApp app)
specifier|public
specifier|synchronized
name|void
name|removeJob
parameter_list|(
name|FSSchedulerApp
name|app
parameter_list|)
block|{
name|getQueue
argument_list|(
name|app
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|removeJob
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a collection of all queues    */
DECL|method|getQueues ()
specifier|public
name|Collection
argument_list|<
name|FSQueue
argument_list|>
name|getQueues
parameter_list|()
block|{
synchronized|synchronized
init|(
name|queues
init|)
block|{
return|return
name|queues
operator|.
name|values
argument_list|()
return|;
block|}
block|}
comment|/**    * Get all queue names that have been seen either in the allocation file or in    * a submitted app.    */
DECL|method|getQueueNames ()
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|String
argument_list|>
name|getQueueNames
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FSQueue
name|queue
range|:
name|getQueues
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|method|getUserMaxApps (String user)
specifier|public
name|int
name|getUserMaxApps
parameter_list|(
name|String
name|user
parameter_list|)
block|{
synchronized|synchronized
init|(
name|userMaxAppsMO
init|)
block|{
if|if
condition|(
name|userMaxApps
operator|.
name|containsKey
argument_list|(
name|user
argument_list|)
condition|)
block|{
return|return
name|userMaxApps
operator|.
name|get
argument_list|(
name|user
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getUserMaxAppsDefault
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|setUserMaxApps (Map<String, Integer> userApps)
specifier|private
name|void
name|setUserMaxApps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|userApps
parameter_list|)
block|{
synchronized|synchronized
init|(
name|userMaxAppsMO
init|)
block|{
name|userMaxApps
operator|=
name|userApps
expr_stmt|;
block|}
block|}
DECL|method|getUserMaxAppsDefault ()
specifier|private
name|int
name|getUserMaxAppsDefault
parameter_list|()
block|{
synchronized|synchronized
init|(
name|userMaxAppsDefaultMO
init|)
block|{
return|return
name|userMaxAppsDefault
return|;
block|}
block|}
DECL|method|setUserMaxAppsDefault (int userMaxApps)
specifier|private
name|void
name|setUserMaxAppsDefault
parameter_list|(
name|int
name|userMaxApps
parameter_list|)
block|{
synchronized|synchronized
init|(
name|userMaxAppsDefaultMO
init|)
block|{
name|userMaxAppsDefault
operator|=
name|userMaxApps
expr_stmt|;
block|}
block|}
DECL|method|getQueueMaxApps (String queue)
specifier|public
name|int
name|getQueueMaxApps
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queueMaxAppsMO
init|)
block|{
if|if
condition|(
name|queueMaxApps
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|)
block|{
return|return
name|queueMaxApps
operator|.
name|get
argument_list|(
name|queue
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getQueueMaxAppsDefault
argument_list|()
return|;
block|}
block|}
block|}
DECL|method|setQueueMaxApps (Map<String, Integer> queueApps)
specifier|private
name|void
name|setQueueMaxApps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|queueApps
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queueMaxAppsMO
init|)
block|{
name|queueMaxApps
operator|=
name|queueApps
expr_stmt|;
block|}
block|}
DECL|method|getQueueMaxAppsDefault ()
specifier|private
name|int
name|getQueueMaxAppsDefault
parameter_list|()
block|{
synchronized|synchronized
init|(
name|queueMaxAppsDefaultMO
init|)
block|{
return|return
name|queueMaxAppsDefault
return|;
block|}
block|}
DECL|method|setQueueMaxAppsDefault (int queueMaxApps)
specifier|private
name|void
name|setQueueMaxAppsDefault
parameter_list|(
name|int
name|queueMaxApps
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queueMaxAppsDefaultMO
init|)
block|{
name|queueMaxAppsDefault
operator|=
name|queueMaxApps
expr_stmt|;
block|}
block|}
DECL|method|setDefaultSchedulingMode (SchedulingMode schedulingMode)
specifier|private
name|void
name|setDefaultSchedulingMode
parameter_list|(
name|SchedulingMode
name|schedulingMode
parameter_list|)
block|{
synchronized|synchronized
init|(
name|defaultSchedulingModeMO
init|)
block|{
name|defaultSchedulingMode
operator|=
name|schedulingMode
expr_stmt|;
block|}
block|}
DECL|method|getQueueWeight (String queue)
specifier|public
name|double
name|getQueueWeight
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queueWeightsMO
init|)
block|{
if|if
condition|(
name|queueWeights
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|)
block|{
return|return
name|queueWeights
operator|.
name|get
argument_list|(
name|queue
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|1.0
return|;
block|}
block|}
block|}
DECL|method|setQueueWeights (Map<String, Double> weights)
specifier|private
name|void
name|setQueueWeights
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|weights
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queueWeightsMO
init|)
block|{
name|queueWeights
operator|=
name|weights
expr_stmt|;
block|}
block|}
comment|/**   * Get a queue's min share preemption timeout, in milliseconds. This is the   * time after which jobs in the queue may kill other queues' tasks if they   * are below their min share.   */
DECL|method|getMinSharePreemptionTimeout (String queueName)
specifier|public
name|long
name|getMinSharePreemptionTimeout
parameter_list|(
name|String
name|queueName
parameter_list|)
block|{
synchronized|synchronized
init|(
name|minSharePreemptionTimeoutsMO
init|)
block|{
if|if
condition|(
name|minSharePreemptionTimeouts
operator|.
name|containsKey
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
return|return
name|minSharePreemptionTimeouts
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
return|;
block|}
block|}
return|return
name|defaultMinSharePreemptionTimeout
return|;
block|}
DECL|method|setMinSharePreemptionTimeouts ( Map<String, Long> sharePreemptionTimeouts)
specifier|private
name|void
name|setMinSharePreemptionTimeouts
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|sharePreemptionTimeouts
parameter_list|)
block|{
synchronized|synchronized
init|(
name|minSharePreemptionTimeoutsMO
init|)
block|{
name|minSharePreemptionTimeouts
operator|=
name|sharePreemptionTimeouts
expr_stmt|;
block|}
block|}
comment|/**    * Get the fair share preemption, in milliseconds. This is the time    * after which any job may kill other jobs' tasks if it is below half    * its fair share.    */
DECL|method|getFairSharePreemptionTimeout ()
specifier|public
name|long
name|getFairSharePreemptionTimeout
parameter_list|()
block|{
return|return
name|fairSharePreemptionTimeout
return|;
block|}
comment|/**    * Get the ACLs associated with this queue. If a given ACL is not explicitly    * configured, include the default value for that ACL.    */
DECL|method|getQueueAcls (String queue)
specifier|public
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|getQueueAcls
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|out
init|=
operator|new
name|HashMap
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|queueAclsMO
init|)
block|{
if|if
condition|(
name|queueAcls
operator|.
name|containsKey
argument_list|(
name|queue
argument_list|)
condition|)
block|{
name|out
operator|.
name|putAll
argument_list|(
name|queueAcls
operator|.
name|get
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|out
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|out
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
condition|)
block|{
name|out
operator|.
name|put
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
operator|new
name|AccessControlList
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|setQueueAcls (Map<String, Map<QueueACL, AccessControlList>> queue)
specifier|private
name|void
name|setQueueAcls
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
argument_list|>
name|queue
parameter_list|)
block|{
synchronized|synchronized
init|(
name|queueAclsMO
init|)
block|{
name|queueAcls
operator|=
name|queue
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

