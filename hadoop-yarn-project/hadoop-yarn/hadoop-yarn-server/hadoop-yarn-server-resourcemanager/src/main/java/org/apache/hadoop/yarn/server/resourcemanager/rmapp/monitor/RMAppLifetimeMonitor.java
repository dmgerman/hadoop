begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp.monitor
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|monitor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|AbstractLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_comment
comment|/**  * This service will monitor the applications against the lifetime value given.  * The applications will be killed if it running beyond the given time.  */
end_comment

begin_class
DECL|class|RMAppLifetimeMonitor
specifier|public
class|class
name|RMAppLifetimeMonitor
extends|extends
name|AbstractLivelinessMonitor
argument_list|<
name|RMAppToMonitor
argument_list|>
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMAppLifetimeMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|RMAppLifetimeMonitor (RMContext rmContext)
specifier|public
name|RMAppLifetimeMonitor
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|RMAppLifetimeMonitor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|SystemClock
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceInit (Configuration conf)
specifier|protected
name|void
name|serviceInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|monitorInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_APPLICATION_MONITOR_INTERVAL_MS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_APPLICATION_MONITOR_INTERVAL_MS
argument_list|)
decl_stmt|;
if|if
condition|(
name|monitorInterval
operator|<=
literal|0
condition|)
block|{
name|monitorInterval
operator|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_APPLICATION_MONITOR_INTERVAL_MS
expr_stmt|;
block|}
name|setMonitorInterval
argument_list|(
name|monitorInterval
argument_list|)
expr_stmt|;
name|setExpireInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// No need of expire interval for App.
name|setResetTimeOnStart
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// do not reset expire time on restart
name|LOG
operator|.
name|info
argument_list|(
literal|"Application lifelime monitor interval set to "
operator|+
name|monitorInterval
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
name|super
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|expire (RMAppToMonitor monitoredAppKey)
specifier|protected
specifier|synchronized
name|void
name|expire
parameter_list|(
name|RMAppToMonitor
name|monitoredAppKey
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|monitoredAppKey
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|app
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|diagnostics
init|=
literal|"Application killed due to exceeding its lifetime period"
decl_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|appId
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|registerApp (ApplicationId appId, ApplicationTimeoutType timeoutType, long expireTime)
specifier|public
name|void
name|registerApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationTimeoutType
name|timeoutType
parameter_list|,
name|long
name|expireTime
parameter_list|)
block|{
name|RMAppToMonitor
name|appToMonitor
init|=
operator|new
name|RMAppToMonitor
argument_list|(
name|appId
argument_list|,
name|timeoutType
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|appToMonitor
argument_list|,
name|expireTime
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterApp (ApplicationId appId, ApplicationTimeoutType timeoutType)
specifier|public
name|void
name|unregisterApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationTimeoutType
name|timeoutType
parameter_list|)
block|{
name|RMAppToMonitor
name|remove
init|=
operator|new
name|RMAppToMonitor
argument_list|(
name|appId
argument_list|,
name|timeoutType
argument_list|)
decl_stmt|;
name|unregister
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterApp (ApplicationId appId, Set<ApplicationTimeoutType> timeoutTypes)
specifier|public
name|void
name|unregisterApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Set
argument_list|<
name|ApplicationTimeoutType
argument_list|>
name|timeoutTypes
parameter_list|)
block|{
for|for
control|(
name|ApplicationTimeoutType
name|timeoutType
range|:
name|timeoutTypes
control|)
block|{
name|unregisterApp
argument_list|(
name|appId
argument_list|,
name|timeoutType
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateApplicationTimeouts (ApplicationId appId, Map<ApplicationTimeoutType, Long> timeouts)
specifier|public
name|void
name|updateApplicationTimeouts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeouts
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|timeouts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApplicationTimeoutType
name|timeoutType
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RMAppToMonitor
name|update
init|=
operator|new
name|RMAppToMonitor
argument_list|(
name|appId
argument_list|,
name|timeoutType
argument_list|)
decl_stmt|;
name|register
argument_list|(
name|update
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

