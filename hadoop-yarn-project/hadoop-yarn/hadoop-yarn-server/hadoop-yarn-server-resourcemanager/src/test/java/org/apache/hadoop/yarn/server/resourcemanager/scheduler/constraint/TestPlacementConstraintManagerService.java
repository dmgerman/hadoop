begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|RACK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetCardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetIn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetNotIn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodeAttribute
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
operator|.
name|SimpleEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link PlacementConstraintManagerService}.  */
end_comment

begin_class
DECL|class|TestPlacementConstraintManagerService
specifier|public
class|class
name|TestPlacementConstraintManagerService
block|{
DECL|field|pcm
specifier|private
name|PlacementConstraintManagerService
name|pcm
decl_stmt|;
DECL|method|createPCM ()
specifier|protected
name|PlacementConstraintManagerService
name|createPCM
parameter_list|()
block|{
return|return
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
return|;
block|}
DECL|field|appId1
DECL|field|appId2
specifier|private
name|ApplicationId
name|appId1
decl_stmt|,
name|appId2
decl_stmt|;
DECL|field|c1
DECL|field|c2
DECL|field|c3
DECL|field|c4
specifier|private
name|PlacementConstraint
name|c1
decl_stmt|,
name|c2
decl_stmt|,
name|c3
decl_stmt|,
name|c4
decl_stmt|;
DECL|field|sourceTag1
DECL|field|sourceTag2
DECL|field|sourceTag3
DECL|field|sourceTag4
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTag1
decl_stmt|,
name|sourceTag2
decl_stmt|,
name|sourceTag3
decl_stmt|,
name|sourceTag4
decl_stmt|;
DECL|field|constraintMap1
DECL|field|constraintMap2
specifier|private
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap1
decl_stmt|,
name|constraintMap2
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|this
operator|.
name|pcm
operator|=
name|createPCM
argument_list|()
expr_stmt|;
comment|// Build appIDs, constraints, source tags, and constraint map.
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|appId1
operator|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|appId2
operator|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|234
argument_list|)
expr_stmt|;
name|c1
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c2
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetIn
argument_list|(
name|RACK
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c3
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|nodeAttribute
argument_list|(
literal|"java"
argument_list|,
literal|"1.8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c4
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetCardinality
argument_list|(
name|RACK
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
name|allocationTag
argument_list|(
literal|"zk"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sourceTag1
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"spark"
argument_list|)
argument_list|)
expr_stmt|;
name|sourceTag2
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"zk"
argument_list|)
argument_list|)
expr_stmt|;
name|sourceTag3
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"storm"
argument_list|)
argument_list|)
expr_stmt|;
name|sourceTag4
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hbase-m"
argument_list|,
literal|"hbase-sec"
argument_list|)
argument_list|)
expr_stmt|;
name|constraintMap1
operator|=
name|Stream
operator|.
name|of
argument_list|(
operator|new
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag1
argument_list|,
name|c1
argument_list|)
argument_list|,
operator|new
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag2
argument_list|,
name|c2
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|SimpleEntry
operator|::
name|getKey
argument_list|,
name|SimpleEntry
operator|::
name|getValue
argument_list|)
argument_list|)
expr_stmt|;
name|constraintMap2
operator|=
name|Stream
operator|.
name|of
argument_list|(
operator|new
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag3
argument_list|,
name|c4
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|SimpleEntry
operator|::
name|getKey
argument_list|,
name|SimpleEntry
operator|::
name|getValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegisterUnregisterApps ()
specifier|public
name|void
name|testRegisterUnregisterApps
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register two applications.
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constrMap
init|=
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|constrMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|constrMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|constrMap
operator|.
name|get
argument_list|(
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|constrMap
operator|.
name|get
argument_list|(
name|sourceTag2
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId2
argument_list|,
name|constraintMap2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
name|constrMap
operator|=
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|constrMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|constrMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|constrMap
operator|.
name|get
argument_list|(
name|sourceTag3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|constrMap
operator|.
name|get
argument_list|(
name|sourceTag2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to register the same app again.
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId2
argument_list|,
name|constraintMap1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
comment|// Unregister appId1.
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|appId1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddConstraint ()
specifier|public
name|void
name|testAddConstraint
parameter_list|()
block|{
comment|// Cannot add constraint to unregistered app.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|addConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag1
argument_list|,
name|c1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register application.
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pcm
operator|.
name|getNumRegisteredApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add two constraints.
name|pcm
operator|.
name|addConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag1
argument_list|,
name|c1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|addConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag2
argument_list|,
name|c3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Constraint for sourceTag1 should not be replaced.
name|pcm
operator|.
name|addConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag1
argument_list|,
name|c2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|pcm
operator|.
name|getConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|c2
argument_list|,
name|pcm
operator|.
name|getConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now c2 should replace c1 for sourceTag1.
name|pcm
operator|.
name|addConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag1
argument_list|,
name|c2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pcm
operator|.
name|getConstraints
argument_list|(
name|appId1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|pcm
operator|.
name|getConstraint
argument_list|(
name|appId1
argument_list|,
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobalConstraints ()
specifier|public
name|void
name|testGlobalConstraints
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pcm
operator|.
name|getNumGlobalConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|addGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|,
name|c1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pcm
operator|.
name|getNumGlobalConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|pcm
operator|.
name|getGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Constraint for sourceTag1 should not be replaced.
name|pcm
operator|.
name|addGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|,
name|c2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pcm
operator|.
name|getNumGlobalConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c1
argument_list|,
name|pcm
operator|.
name|getGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|c2
argument_list|,
name|pcm
operator|.
name|getGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now c2 should replace c1 for sourceTag1.
name|pcm
operator|.
name|addGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|,
name|c2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pcm
operator|.
name|getNumGlobalConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|pcm
operator|.
name|getGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|removeGlobalConstraint
argument_list|(
name|sourceTag1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pcm
operator|.
name|getNumGlobalConstraints
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidateConstraint ()
specifier|public
name|void
name|testValidateConstraint
parameter_list|()
block|{
comment|// At the moment we only disallow multiple source tags to be associated with
comment|// a constraint. TODO: More tests to be added for YARN-6621.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pcm
operator|.
name|validateConstraint
argument_list|(
name|sourceTag1
argument_list|,
name|c1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pcm
operator|.
name|validateConstraint
argument_list|(
name|sourceTag4
argument_list|,
name|c1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

