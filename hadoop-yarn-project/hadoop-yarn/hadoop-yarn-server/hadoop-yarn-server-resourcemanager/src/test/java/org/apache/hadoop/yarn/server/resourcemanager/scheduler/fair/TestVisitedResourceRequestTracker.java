begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at*  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ClusterNodeTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TestVisitedResourceRequestTracker
specifier|public
class|class
name|TestVisitedResourceRequestTracker
block|{
specifier|private
specifier|final
name|ClusterNodeTracker
argument_list|<
name|FSSchedulerNode
argument_list|>
DECL|field|nodeTracker
name|nodeTracker
init|=
operator|new
name|ClusterNodeTracker
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ResourceRequest
DECL|field|anyRequest
DECL|field|rackRequest
DECL|field|node1Request
DECL|field|node2Request
name|anyRequest
decl_stmt|,
name|rackRequest
decl_stmt|,
name|node1Request
decl_stmt|,
name|node2Request
decl_stmt|;
DECL|field|NODE_VISITED
specifier|private
specifier|final
name|String
name|NODE_VISITED
init|=
literal|"The node is already visited. "
decl_stmt|;
DECL|field|RACK_VISITED
specifier|private
specifier|final
name|String
name|RACK_VISITED
init|=
literal|"The rack is already visited. "
decl_stmt|;
DECL|field|ANY_VISITED
specifier|private
specifier|final
name|String
name|ANY_VISITED
init|=
literal|"ANY is already visited. "
decl_stmt|;
DECL|field|NODE_FAILURE
specifier|private
specifier|final
name|String
name|NODE_FAILURE
init|=
literal|"The node is visited again."
decl_stmt|;
DECL|field|RACK_FAILURE
specifier|private
specifier|final
name|String
name|RACK_FAILURE
init|=
literal|"The rack is visited again."
decl_stmt|;
DECL|field|ANY_FAILURE
specifier|private
specifier|final
name|String
name|ANY_FAILURE
init|=
literal|"ANY is visited again."
decl_stmt|;
DECL|field|FIRST_CALL_FAILURE
specifier|private
specifier|final
name|String
name|FIRST_CALL_FAILURE
init|=
literal|"First call to visit failed."
decl_stmt|;
DECL|method|TestVisitedResourceRequestTracker ()
specifier|public
name|TestVisitedResourceRequestTracker
parameter_list|()
block|{
name|List
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
init|=
name|MockNodes
operator|.
name|newNodes
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|FSSchedulerNode
name|node1
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|node1
argument_list|)
expr_stmt|;
name|node1Request
operator|=
name|createRR
argument_list|(
name|node1
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FSSchedulerNode
name|node2
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|node2Request
operator|=
name|createRR
argument_list|(
name|node2
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|anyRequest
operator|=
name|createRR
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rackRequest
operator|=
name|createRR
argument_list|(
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|createRR (String resourceName, int count)
specifier|private
name|ResourceRequest
name|createRR
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
name|resourceName
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|count
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testVisitAnyRequestFirst ()
specifier|public
name|void
name|testVisitAnyRequestFirst
parameter_list|()
block|{
name|VisitedResourceRequestTracker
name|tracker
init|=
operator|new
name|VisitedResourceRequestTracker
argument_list|(
name|nodeTracker
argument_list|)
decl_stmt|;
comment|// Visit ANY request first
name|assertTrue
argument_list|(
name|FIRST_CALL_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|anyRequest
argument_list|)
argument_list|)
expr_stmt|;
comment|// All other requests should return false
name|assertFalse
argument_list|(
name|ANY_VISITED
operator|+
name|RACK_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|rackRequest
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ANY_VISITED
operator|+
name|NODE_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|node1Request
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ANY_VISITED
operator|+
name|NODE_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|node2Request
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVisitRackRequestFirst ()
specifier|public
name|void
name|testVisitRackRequestFirst
parameter_list|()
block|{
name|VisitedResourceRequestTracker
name|tracker
init|=
operator|new
name|VisitedResourceRequestTracker
argument_list|(
name|nodeTracker
argument_list|)
decl_stmt|;
comment|// Visit rack request first
name|assertTrue
argument_list|(
name|FIRST_CALL_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|rackRequest
argument_list|)
argument_list|)
expr_stmt|;
comment|// All other requests should return false
name|assertFalse
argument_list|(
name|RACK_VISITED
operator|+
name|ANY_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|anyRequest
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|RACK_VISITED
operator|+
name|NODE_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|node1Request
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|RACK_VISITED
operator|+
name|NODE_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|node2Request
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVisitNodeRequestFirst ()
specifier|public
name|void
name|testVisitNodeRequestFirst
parameter_list|()
block|{
name|VisitedResourceRequestTracker
name|tracker
init|=
operator|new
name|VisitedResourceRequestTracker
argument_list|(
name|nodeTracker
argument_list|)
decl_stmt|;
comment|// Visit node1 first
name|assertTrue
argument_list|(
name|FIRST_CALL_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|node1Request
argument_list|)
argument_list|)
expr_stmt|;
comment|// Rack and ANY should return false
name|assertFalse
argument_list|(
name|NODE_VISITED
operator|+
name|ANY_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|anyRequest
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|NODE_VISITED
operator|+
name|RACK_FAILURE
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|rackRequest
argument_list|)
argument_list|)
expr_stmt|;
comment|// The other node should return true
name|assertTrue
argument_list|(
name|NODE_VISITED
operator|+
literal|"Different node visit failed"
argument_list|,
name|tracker
operator|.
name|visit
argument_list|(
name|node2Request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

