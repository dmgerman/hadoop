begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationDeleteRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationSubmissionRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ReservationUpdateRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONJAXBContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONUnmarshaller
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRMWebServicesReservation
specifier|public
class|class
name|TestRMWebServicesReservation
extends|extends
name|JerseyTestBase
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|injector
specifier|private
specifier|static
name|Injector
name|injector
decl_stmt|;
DECL|field|webserviceUserName
specifier|private
name|String
name|webserviceUserName
init|=
literal|"testuser"
decl_stmt|;
DECL|field|setAuthFilter
specifier|private
name|boolean
name|setAuthFilter
init|=
literal|false
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|FS_ALLOC_FILE
specifier|private
specifier|static
specifier|final
name|String
name|FS_ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-fs-queues.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
specifier|static
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
comment|/*    * Helper class to allow testing of RM web services which require    * authorization Add this class as a filter in the Guice injector for the    * MockRM    */
annotation|@
name|Singleton
DECL|class|TestRMCustomAuthFilter
specifier|public
specifier|static
class|class
name|TestRMCustomAuthFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|filterConfig
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|configPrefix
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|configPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|props
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|ANONYMOUS_ALLOWED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
DECL|class|TestServletModule
specifier|private
specifier|abstract
class|class
name|TestServletModule
extends|extends
name|ServletModule
block|{
DECL|field|conf
specifier|public
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|method|configureScheduler ()
specifier|public
specifier|abstract
name|void
name|configureScheduler
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|configureScheduler
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|queues
init|=
block|{
literal|"default"
block|,
literal|"dedicated"
block|}
decl_stmt|;
name|csconf
operator|.
name|setQueues
argument_list|(
literal|"root"
argument_list|,
name|queues
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.default"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.dedicated"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setReservable
argument_list|(
literal|"root.dedicated"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|csconf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
if|if
condition|(
name|setAuthFilter
condition|)
block|{
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|TestRMCustomAuthFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CapTestServletModule
specifier|private
class|class
name|CapTestServletModule
extends|extends
name|TestServletModule
block|{
annotation|@
name|Override
DECL|method|configureScheduler ()
specifier|public
name|void
name|configureScheduler
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.scheduler.class"
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FairTestServletModule
specifier|private
class|class
name|FairTestServletModule
extends|extends
name|TestServletModule
block|{
annotation|@
name|Override
DECL|method|configureScheduler ()
specifier|public
name|void
name|configureScheduler
parameter_list|()
block|{
try|try
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|FS_ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>someuser</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>someuser</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"dedicated\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>someuser</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|FS_ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.scheduler.class"
argument_list|,
name|FairScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNoAuthInjectorCap ()
specifier|private
name|Injector
name|getNoAuthInjectorCap
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|CapTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSimpleAuthInjectorCap ()
specifier|private
name|Injector
name|getSimpleAuthInjectorCap
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|CapTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the admin acls otherwise all users are considered admins
comment|// and we can't test authorization
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"testuser1"
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getNoAuthInjectorFair ()
specifier|private
name|Injector
name|getNoAuthInjectorFair
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|FairTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSimpleAuthInjectorFair ()
specifier|private
name|Injector
name|getSimpleAuthInjectorFair
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|FairTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the admin acls otherwise all users are considered admins
comment|// and we can't test authorization
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"testuser1"
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameters
DECL|method|guiceConfigs ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|guiceConfigs
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|2
block|}
block|,
block|{
literal|3
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestRMWebServicesReservation (int run)
specifier|public
name|TestRMWebServicesReservation
parameter_list|(
name|int
name|run
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|clientConfig
argument_list|(
operator|new
name|DefaultClientConfig
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|run
condition|)
block|{
case|case
literal|0
case|:
default|default:
comment|// No Auth Capacity Scheduler
name|injector
operator|=
name|getNoAuthInjectorCap
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// Simple Auth Capacity Scheduler
name|injector
operator|=
name|getSimpleAuthInjectorCap
argument_list|()
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// No Auth Fair Scheduler
name|injector
operator|=
name|getNoAuthInjectorFair
argument_list|()
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// Simple Auth Fair Scheduler
name|injector
operator|=
name|getSimpleAuthInjectorFair
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|method|isAuthenticationEnabled ()
specifier|private
name|boolean
name|isAuthenticationEnabled
parameter_list|()
block|{
return|return
name|setAuthFilter
return|;
block|}
DECL|method|constructWebResource (WebResource r, String... paths)
specifier|private
name|WebResource
name|constructWebResource
parameter_list|(
name|WebResource
name|r
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|WebResource
name|rt
init|=
name|r
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|rt
operator|=
name|rt
operator|.
name|path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|rt
operator|=
name|rt
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|webserviceUserName
argument_list|)
expr_stmt|;
block|}
return|return
name|rt
return|;
block|}
DECL|method|constructWebResource (String... paths)
specifier|private
name|WebResource
name|constructWebResource
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|WebResource
name|ws
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|constructWebResource
argument_list|(
name|ws
argument_list|,
name|paths
argument_list|)
return|;
block|}
annotation|@
name|After
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitReservation ()
specifier|public
name|void
name|testSubmitReservation
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|100
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ReservationId
name|rid
init|=
name|testSubmissionReservationHelper
argument_list|(
literal|"reservation/submit"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
name|rid
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedSubmitReservation ()
specifier|public
name|void
name|testFailedSubmitReservation
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// setup a cluster too small to accept the reservation
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|100
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ReservationId
name|rid
init|=
name|testSubmissionReservationHelper
argument_list|(
literal|"reservation/submit"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|rid
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateReservation ()
specifier|public
name|void
name|testUpdateReservation
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|100
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ReservationId
name|rid
init|=
name|testSubmissionReservationHelper
argument_list|(
literal|"reservation/submit"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
name|rid
argument_list|)
expr_stmt|;
block|}
name|testUpdateReservationHelper
argument_list|(
literal|"reservation/update"
argument_list|,
name|rid
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteReservation ()
specifier|public
name|void
name|testDeleteReservation
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|100
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ReservationId
name|rid
init|=
name|testSubmissionReservationHelper
argument_list|(
literal|"reservation/submit"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
name|rid
argument_list|)
expr_stmt|;
block|}
name|testDeleteReservationHelper
argument_list|(
literal|"reservation/delete"
argument_list|,
name|rid
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testSubmissionReservationHelper (String path, String media)
specifier|private
name|ReservationId
name|testSubmissionReservationHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|reservationJson
init|=
name|loadJsonFile
argument_list|(
literal|"submit-reservation.json"
argument_list|)
decl_stmt|;
name|JSONJAXBContext
name|jc
init|=
operator|new
name|JSONJAXBContext
argument_list|(
name|JSONConfiguration
operator|.
name|mapped
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|ReservationSubmissionRequestInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONUnmarshaller
name|unmarshaller
init|=
name|jc
operator|.
name|createJSONUnmarshaller
argument_list|()
decl_stmt|;
name|ReservationSubmissionRequestInfo
name|rsci
init|=
name|unmarshaller
operator|.
name|unmarshalFromJSON
argument_list|(
operator|new
name|StringReader
argument_list|(
name|reservationJson
argument_list|)
argument_list|,
name|ReservationSubmissionRequestInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|constructWebResource
argument_list|(
name|path
argument_list|)
operator|.
name|entity
argument_list|(
name|rsci
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RESPONSE:"
operator|+
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ReservationId
name|rid
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rid
operator|=
name|ReservationId
operator|.
name|parseReservationId
argument_list|(
name|json
operator|.
name|getString
argument_list|(
literal|"reservation-id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect return value"
argument_list|,
name|rid
operator|.
name|getId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|j
parameter_list|)
block|{
comment|// failure is possible and is checked outside
block|}
return|return
name|rid
return|;
block|}
DECL|method|testUpdateReservationHelper (String path, ReservationId reservationId, String media)
specifier|private
name|void
name|testUpdateReservationHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|reservationJson
init|=
name|loadJsonFile
argument_list|(
literal|"update-reservation.json"
argument_list|)
decl_stmt|;
name|JSONJAXBContext
name|jc
init|=
operator|new
name|JSONJAXBContext
argument_list|(
name|JSONConfiguration
operator|.
name|mapped
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|ReservationUpdateRequestInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONUnmarshaller
name|unmarshaller
init|=
name|jc
operator|.
name|createJSONUnmarshaller
argument_list|()
decl_stmt|;
name|ReservationUpdateRequestInfo
name|rsci
init|=
name|unmarshaller
operator|.
name|unmarshalFromJSON
argument_list|(
operator|new
name|StringReader
argument_list|(
name|reservationJson
argument_list|)
argument_list|,
name|ReservationUpdateRequestInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
comment|// only works when previous submit worked
if|if
condition|(
name|rsci
operator|.
name|getReservationId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrectly parsed the reservatinId"
argument_list|)
throw|;
block|}
name|rsci
operator|.
name|setReservationId
argument_list|(
name|reservationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|constructWebResource
argument_list|(
name|path
argument_list|)
operator|.
name|entity
argument_list|(
name|rsci
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RESPONSE:"
operator|+
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|loadJsonFile (String filename)
specifier|private
name|String
name|loadJsonFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassLoader
name|cL
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cL
operator|==
literal|null
condition|)
block|{
name|cL
operator|=
name|Configuration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
name|URL
name|submitURI
init|=
name|cL
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|String
name|reservationJson
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|submitURI
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|reservationJson
return|;
block|}
DECL|method|testDeleteReservationHelper (String path, ReservationId reservationId, String media)
specifier|private
name|void
name|testDeleteReservationHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|String
name|reservationJson
init|=
name|loadJsonFile
argument_list|(
literal|"delete-reservation.json"
argument_list|)
decl_stmt|;
name|JSONJAXBContext
name|jc
init|=
operator|new
name|JSONJAXBContext
argument_list|(
name|JSONConfiguration
operator|.
name|mapped
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|ReservationDeleteRequestInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONUnmarshaller
name|unmarshaller
init|=
name|jc
operator|.
name|createJSONUnmarshaller
argument_list|()
decl_stmt|;
name|ReservationDeleteRequestInfo
name|rsci
init|=
name|unmarshaller
operator|.
name|unmarshalFromJSON
argument_list|(
operator|new
name|StringReader
argument_list|(
name|reservationJson
argument_list|)
argument_list|,
name|ReservationDeleteRequestInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
comment|// only works when previous submit worked
if|if
condition|(
name|rsci
operator|.
name|getReservationId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Incorrectly parsed the reservatinId"
argument_list|)
throw|;
block|}
name|rsci
operator|.
name|setReservationId
argument_list|(
name|reservationId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|constructWebResource
argument_list|(
name|path
argument_list|)
operator|.
name|entity
argument_list|(
name|rsci
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"RESPONSE:"
operator|+
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

