begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Unit tests for {@link ApplicationMasterService}  * with {@link CapacityScheduler}.  */
end_comment

begin_class
DECL|class|TestApplicationMasterServiceCapacity
specifier|public
class|class
name|TestApplicationMasterServiceCapacity
extends|extends
name|ApplicationMasterServiceTestBase
block|{
DECL|field|DEFAULT_QUEUE
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_QUEUE
init|=
literal|"default"
decl_stmt|;
annotation|@
name|Override
DECL|method|createYarnConfig ()
specifier|protected
name|YarnConfiguration
name|createYarnConfig
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|setResourceComparator
argument_list|(
name|DominantResourceCalculator
operator|.
name|class
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|yarnConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|yarnConf
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceUsageForQueue (ResourceManager rm, String queue)
specifier|protected
name|Resource
name|getResourceUsageForQueue
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|DEFAULT_QUEUE
argument_list|)
decl_stmt|;
return|return
name|leafQueue
operator|.
name|getUsedResources
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDefaultQueueName ()
specifier|protected
name|String
name|getDefaultQueueName
parameter_list|()
block|{
return|return
name|DEFAULT_QUEUE
return|;
block|}
DECL|method|sentRMContainerLaunched (MockRM rm, ContainerId containerId)
specifier|private
name|void
name|sentRMContainerLaunched
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|cs
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|containerId
argument_list|,
name|RMContainerEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Cannot find RMContainer"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testInvalidIncreaseDecreaseRequest ()
specifier|public
name|void
name|testInvalidIncreaseDecreaseRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
init|(
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|am1
operator|.
name|registerAppAttempt
argument_list|()
decl_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ask for a normal increase should be successful
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Target resource is negative, should fail
name|AllocateResponse
name|response
init|=
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"RESOURCE_OUTSIDE_ALLOWED_RANGE"
argument_list|,
name|response
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
comment|// Target resource is more than maxAllocation, should fail
name|response
operator|=
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|registerResponse
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"RESOURCE_OUTSIDE_ALLOWED_RANGE"
argument_list|,
name|response
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
comment|// Contains multiple increase/decrease requests for same containerId
name|response
operator|=
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|,
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UPDATE_OUTSTANDING_ERROR"
argument_list|,
name|response
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPriorityInAllocatedResponse ()
specifier|public
name|void
name|testPriorityInAllocatedResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
name|DEFAULT_HOST
operator|+
literal|":"
operator|+
name|DEFAULT_PORT
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|AllocateRequestPBImpl
name|allocateRequest
init|=
operator|new
name|AllocateRequestPBImpl
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allocateRequest
operator|.
name|setReleaseList
argument_list|(
name|release
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setAskList
argument_list|(
name|ask
argument_list|)
expr_stmt|;
name|AllocateResponse
name|response1
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority1
argument_list|,
name|response1
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the priority of App1 to 8
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|app1
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getRMAppManager
argument_list|()
operator|.
name|updateApplicationPriority
argument_list|(
name|ugi
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appPriority2
argument_list|)
expr_stmt|;
name|AllocateResponse
name|response2
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority2
argument_list|,
name|response2
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

