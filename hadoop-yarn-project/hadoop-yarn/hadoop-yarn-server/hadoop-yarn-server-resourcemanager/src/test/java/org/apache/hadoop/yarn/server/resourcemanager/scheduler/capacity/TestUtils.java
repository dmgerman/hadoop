begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ahs
operator|.
name|RMApplicationHistoryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestUtils
specifier|public
class|class
name|TestUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Get a mock {@link RMContext} for use in test cases.    * @return a mock {@link RMContext} for use in test cases    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|getMockRMContext ()
specifier|public
specifier|static
name|RMContext
name|getMockRMContext
parameter_list|()
block|{
comment|// Null dispatcher
name|Dispatcher
name|nullDispatcher
init|=
operator|new
name|Dispatcher
argument_list|()
block|{
specifier|private
specifier|final
name|EventHandler
name|handler
init|=
operator|new
name|EventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{             }
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{       }
annotation|@
name|Override
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
block|}
decl_stmt|;
comment|// No op
name|ContainerAllocationExpirer
name|cae
init|=
operator|new
name|ContainerAllocationExpirer
argument_list|(
name|nullDispatcher
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|RMApplicationHistoryWriter
name|writer
init|=
name|mock
argument_list|(
name|RMApplicationHistoryWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
name|nullDispatcher
argument_list|,
name|cae
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|AMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|nlm
init|=
name|mock
argument_list|(
name|RMNodeLabelsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nlm
operator|.
name|getQueueResource
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Set
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Resource
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resource
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
return|return
operator|(
name|Resource
operator|)
name|args
index|[
literal|2
index|]
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nlm
operator|.
name|getResourceByLabel
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Resource
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resource
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
return|return
operator|(
name|Resource
operator|)
name|args
index|[
literal|1
index|]
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nlm
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setSystemMetricsPublisher
argument_list|(
name|mock
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMApplicationHistoryWriter
argument_list|(
name|mock
argument_list|(
name|RMApplicationHistoryWriter
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|mockScheduler
init|=
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockScheduler
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setScheduler
argument_list|(
name|mockScheduler
argument_list|)
expr_stmt|;
return|return
name|rmContext
return|;
block|}
comment|/**    * Hook to spy on queues.    */
DECL|class|SpyHook
specifier|static
class|class
name|SpyHook
extends|extends
name|CapacityScheduler
operator|.
name|QueueHook
block|{
annotation|@
name|Override
DECL|method|hook (CSQueue queue)
specifier|public
name|CSQueue
name|hook
parameter_list|(
name|CSQueue
name|queue
parameter_list|)
block|{
return|return
name|spy
argument_list|(
name|queue
argument_list|)
return|;
block|}
block|}
DECL|field|spyHook
specifier|public
specifier|static
name|SpyHook
name|spyHook
init|=
operator|new
name|SpyHook
argument_list|()
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|createMockPriority ( int priority)
specifier|public
specifier|static
name|Priority
name|createMockPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
comment|//    Priority p = mock(Priority.class);
comment|//    when(p.getPriority()).thenReturn(priority);
name|Priority
name|p
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|createResourceRequest ( String resourceName, int memory, int numContainers, boolean relaxLocality, Priority priority, RecordFactory recordFactory)
specifier|public
specifier|static
name|ResourceRequest
name|createResourceRequest
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|RecordFactory
name|recordFactory
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|memory
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNumContainers
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|request
operator|.
name|setResourceName
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCapability
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRelaxLocality
argument_list|(
name|relaxLocality
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeLabelExpression
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|getMockApplicationId (int appId)
specifier|public
specifier|static
name|ApplicationId
name|getMockApplicationId
parameter_list|(
name|int
name|appId
parameter_list|)
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
name|appId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ApplicationAttemptId
DECL|method|getMockApplicationAttemptId (int appId, int attemptId)
name|getMockApplicationAttemptId
parameter_list|(
name|int
name|appId
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0l
argument_list|,
name|appId
argument_list|)
decl_stmt|;
return|return
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|attemptId
argument_list|)
return|;
block|}
DECL|method|getMockNode ( String host, String rack, int port, int capability)
specifier|public
specifier|static
name|FiCaSchedulerNode
name|getMockNode
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|rack
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|capability
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|mock
argument_list|(
name|RMNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|capability
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmNode
operator|.
name|getNodeAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|host
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmNode
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmNode
operator|.
name|getRackName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rack
argument_list|)
expr_stmt|;
name|FiCaSchedulerNode
name|node
init|=
name|spy
argument_list|(
operator|new
name|FiCaSchedulerNode
argument_list|(
name|rmNode
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"node = "
operator|+
name|host
operator|+
literal|" avail="
operator|+
name|node
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|getMockContainerId (FiCaSchedulerApp application)
specifier|public
specifier|static
name|ContainerId
name|getMockContainerId
parameter_list|(
name|FiCaSchedulerApp
name|application
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|application
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|containerId
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|long
name|id
init|=
name|application
operator|.
name|getNewContainerId
argument_list|()
decl_stmt|;
name|doReturn
argument_list|(
operator|(
name|int
operator|)
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|containerId
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|id
argument_list|)
operator|.
name|when
argument_list|(
name|containerId
argument_list|)
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
return|return
name|containerId
return|;
block|}
DECL|method|getMockContainer ( ContainerId containerId, NodeId nodeId, Resource resource, Priority priority)
specifier|public
specifier|static
name|Container
name|getMockContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|Priority
name|priority
parameter_list|)
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|priority
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toSet (E... elements)
specifier|private
specifier|static
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|toSet
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
name|set
return|;
block|}
comment|/**    * Get a queue structure:    *<pre>    *             Root    *            /  |  \    *           a   b   c    *           |   |   |    *           a1  b1  c1    *          (x)  (y)    *</pre>      */
DECL|method|getConfigurationWithQueueLabels (Configuration config)
specifier|public
specifier|static
name|Configuration
name|getConfigurationWithQueueLabels
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|C
argument_list|,
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B1
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumApplicationMasterResourcePerQueuePercent
argument_list|(
name|B1
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C1
init|=
name|C
operator|+
literal|".c1"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|C
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getComplexConfigurationWithQueueLabels ( Configuration config)
specifier|public
specifier|static
name|Configuration
name|getComplexConfigurationWithQueueLabels
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"y"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"y"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A1
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B1
argument_list|,
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B2
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B2
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B2
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getConfigurationWithDefaultQueueLabels ( Configuration config)
specifier|public
specifier|static
name|Configuration
name|getConfigurationWithDefaultQueueLabels
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|(
name|CapacitySchedulerConfiguration
operator|)
name|getConfigurationWithQueueLabels
argument_list|(
name|config
argument_list|)
decl_stmt|;
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|B
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

