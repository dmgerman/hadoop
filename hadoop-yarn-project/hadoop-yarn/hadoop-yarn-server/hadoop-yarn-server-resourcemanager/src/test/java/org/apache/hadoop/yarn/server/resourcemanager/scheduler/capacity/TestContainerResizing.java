begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|PlacementSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|SimplePlacementSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerResizing
specifier|public
class|class
name|TestContainerResizing
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerResizing
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|mgr
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
DECL|class|MyScheduler
class|class
name|MyScheduler
extends|extends
name|CapacityScheduler
block|{
comment|/*      * A Mock Scheduler to simulate the potential effect of deadlock between:      * 1. The AbstractYarnScheduler.decreaseContainers() call (from      *    ApplicationMasterService thread)      * 2. The CapacityScheduler.allocateContainersToNode() call (from the      *    scheduler thread)      */
DECL|method|MyScheduler ()
name|MyScheduler
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|allocateContainersToNode ( PlacementSet<FiCaSchedulerNode> ps, boolean withNodeHeartbeat)
specifier|public
name|CSAssignment
name|allocateContainersToNode
parameter_list|(
name|PlacementSet
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|ps
parameter_list|,
name|boolean
name|withNodeHeartbeat
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Thread interrupted."
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|allocateContainersToNode
argument_list|(
name|ps
argument_list|,
name|withNodeHeartbeat
argument_list|)
return|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleIncreaseContainer ()
specifier|public
name|void
name|testSimpleIncreaseContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Application has a container running, and the node has enough available      * resource. Add a increase request to see if container will be increased      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId1
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 1GB to 3GB
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 1 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pending resource should be deducted
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|verifyContainerIncreased
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|containerId1
argument_list|,
literal|3
operator|*
name|GB
argument_list|)
expr_stmt|;
name|verifyAvailableResourceOfSchedulerNode
argument_list|(
name|rm1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|17
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleDecreaseContainer ()
specifier|public
name|void
name|testSimpleDecreaseContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Application has a container running, try to decrease the container and      * check queue's usage and container resource will be updated.      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId1
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 1GB to 3GB
name|AllocateResponse
name|response
init|=
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|verifyContainerDecreased
argument_list|(
name|response
argument_list|,
name|containerId1
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if decreased containers added to RMNode
name|RMNodeImpl
name|rmNode
init|=
operator|(
name|RMNodeImpl
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Container
argument_list|>
name|decreasedContainers
init|=
name|rmNode
operator|.
name|getToBeDecreasedContainers
argument_list|()
decl_stmt|;
name|boolean
name|rmNodeReceivedDecreaseContainer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|decreasedContainers
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId1
argument_list|)
operator|&&
name|c
operator|.
name|getResource
argument_list|()
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
condition|)
block|{
name|rmNodeReceivedDecreaseContainer
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmNodeReceivedDecreaseContainer
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleIncreaseRequestReservation ()
specifier|public
name|void
name|testSimpleIncreaseRequestReservation
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Application has two containers running, try to increase one of then, node      * doesn't have enough resource, so the increase request will be reserved.      * Check resource usage after container reserved, finish a container, the      * reserved container should be allocated.      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allocate two more containers
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId2
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId1
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 1GB to 3GB
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|7
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 1 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check reservation statuses */
comment|// Increase request should be reserved
name|Assert
operator|.
name|assertFalse
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will not be changed since it's not satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Complete one container and do another allocation
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|containerId2
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now container should be increased
name|verifyContainerIncreased
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|containerId1
argument_list|,
literal|7
operator|*
name|GB
argument_list|)
expr_stmt|;
comment|/* Check statuses after reservation satisfied */
comment|// Increase request should be unreserved
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will be changed since it's satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|7
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAvailableResourceOfSchedulerNode
argument_list|(
name|rm1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncreaseRequestWithNoHeadroomLeft ()
specifier|public
name|void
name|testIncreaseRequestWithNoHeadroomLeft
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Application has two containers running, try to increase one of them, the      * requested amount exceeds user's headroom for the queue.      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allocate 1 container
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId2
argument_list|)
expr_stmt|;
comment|// am1 asks to change container2 from 2GB to 8GB, which will exceed user
comment|// limit
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId2
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 1 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check reservation statuses */
comment|// Increase request should *NOT* be reserved as it exceeds user limit
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will not be changed since it's not satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will *NOT* be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExcessiveReservationWhenCancelIncreaseRequest ()
specifier|public
name|void
name|testExcessiveReservationWhenCancelIncreaseRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Application has two containers running, try to increase one of then, node      * doesn't have enough resource, so the increase request will be reserved.      * Check resource usage after container reserved, finish a container&      * cancel the increase request, reservation should be cancelled      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allocate two more containers
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId2
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId1
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 1GB to 7GB
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|7
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 1 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check reservation statuses */
comment|// Increase request should be reserved
name|Assert
operator|.
name|assertFalse
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will not be changed since it's not satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Complete one container and cancel increase request (via send a increase
comment|// request, make target_capacity=existing_capacity)
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|containerId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 1G to 1G (cancel the increase
comment|// request actually)
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a node heartbeat..
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check statuses after reservation satisfied */
comment|// Increase request should be unreserved
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will be changed since it's satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExcessiveReservationWhenDecreaseSameContainer ()
specifier|public
name|void
name|testExcessiveReservationWhenDecreaseSameContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Very similar to testExcessiveReservationWhenCancelIncreaseRequest, after      * the increase request reserved, it decreases the reserved container,      * container should be decreased and reservation will be cancelled      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allocate two more containers
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId2
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId1
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 2GB to 8GB
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 1 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check reservation statuses */
comment|// Increase request should be reserved
name|Assert
operator|.
name|assertFalse
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will not be changed since it's not satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Complete one container and cancel increase request (via send a increase
comment|// request, make target_capacity=existing_capacity)
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|containerId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 2G to 1G (decrease)
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a node heartbeat..
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check statuses after reservation satisfied */
comment|// Increase request should be unreserved
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will be changed since it's satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncreaseContainerUnreservedWhenContainerCompleted ()
specifier|public
name|void
name|testIncreaseContainerUnreservedWhenContainerCompleted
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * App has two containers on the same node (node.resource = 8G), container1      * = 2G, container2 = 2G. App asks to increase container2 to 8G.      *      * So increase container request will be reserved. When app releases      * container2, reserved part should be released as well.      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allocate two more containers
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId2
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nm1
argument_list|,
name|nm2
argument_list|)
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 2GB to 8GB
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId2
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 1 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check reservation statuses */
comment|// Increase request should be reserved
name|Assert
operator|.
name|assertFalse
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will not be changed since it's not satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Complete container2, container will be unreserved and completed
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|containerId2
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|/* Check statuses after reservation satisfied */
comment|// Increase request should be unreserved
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will be changed since it's satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncreaseContainerUnreservedWhenApplicationCompleted ()
specifier|public
name|void
name|testIncreaseContainerUnreservedWhenApplicationCompleted
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Similar to testIncreaseContainerUnreservedWhenContainerCompleted, when      * application finishes, reserved increase container should be cancelled      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allocate two more containers
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm1
argument_list|,
name|containerId2
argument_list|)
expr_stmt|;
comment|// am1 asks to change its AM container from 2GB to 8GB
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId2
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 1 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check reservation statuses */
comment|// Increase request should be reserved
name|Assert
operator|.
name|assertFalse
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will not be changed since it's not satisfied
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Kill the application
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Check statuses after reservation satisfied */
comment|// Increase request should be unreserved
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Pending resource will be changed since it's satisfied
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// User will be removed
name|Assert
operator|.
name|assertNull
argument_list|(
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|allocateAndLaunchContainers (MockAM am, MockNM nm, MockRM rm, int nContainer, int mem, int priority, int startContainerId)
specifier|private
name|void
name|allocateAndLaunchContainers
parameter_list|(
name|MockAM
name|am
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|int
name|nContainer
parameter_list|,
name|int
name|mem
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|startContainerId
parameter_list|)
throws|throws
name|Exception
block|{
name|am
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|mem
argument_list|)
argument_list|,
name|nContainer
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|lastContainerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|startContainerId
operator|+
name|nContainer
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|lastContainerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|cId
init|=
name|startContainerId
init|;
name|cId
operator|<
name|startContainerId
operator|+
name|nContainer
condition|;
name|cId
operator|++
control|)
block|{
name|sentRMContainerLaunched
argument_list|(
name|rm
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cId
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cId
argument_list|)
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOrderOfIncreaseContainerRequestAllocation ()
specifier|public
name|void
name|testOrderOfIncreaseContainerRequestAllocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * There're multiple containers need to be increased, check container will      * be increase sorted by priority, if priority is same, smaller containerId      * container will get preferred      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm1
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// Container 2, 3 (priority=3)
name|allocateAndLaunchContainers
argument_list|(
name|am1
argument_list|,
name|nm1
argument_list|,
name|rm1
argument_list|,
literal|2
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Container 4, 5 (priority=2)
name|allocateAndLaunchContainers
argument_list|(
name|am1
argument_list|,
name|nm1
argument_list|,
name|rm1
argument_list|,
literal|2
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Container 6, 7 (priority=4)
name|allocateAndLaunchContainers
argument_list|(
name|am1
argument_list|,
name|nm1
argument_list|,
name|rm1
argument_list|,
literal|2
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// am1 asks to change its container[2-7] from 1G to 2G
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|increaseRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cId
init|=
literal|2
init|;
name|cId
operator|<=
literal|7
condition|;
name|cId
operator|++
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cId
argument_list|)
decl_stmt|;
name|increaseRequests
operator|.
name|add
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|increaseRequests
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get rmNode1
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// assignContainer, container-4/5/2 increased (which has highest priority OR
comment|// earlier allocated)
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyContainerIncreased
argument_list|(
name|allocateResponse
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|verifyContainerIncreased
argument_list|(
name|allocateResponse
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|verifyContainerIncreased
argument_list|(
name|allocateResponse
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
comment|/* Check statuses after allocation */
comment|// There're still 3 pending increase requests
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue/user/application's usage will be updated
name|checkUsedResource
argument_list|(
name|rm1
argument_list|,
literal|"default"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|)
operator|.
name|getUser
argument_list|(
literal|"user"
argument_list|)
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDecreaseContainerWillNotDeadlockContainerAllocation ()
specifier|public
name|void
name|testDecreaseContainerWillNotDeadlockContainerAllocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create and start MockRM with our MyScheduler
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ResourceScheduler
name|createScheduler
parameter_list|()
block|{
name|CapacityScheduler
name|cs
init|=
operator|new
name|MyScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|cs
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// register a node
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// submit an application -> app1
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|)
decl_stmt|;
comment|// making sure resource is allocated
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"default"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|TestUtils
operator|.
name|getFiCaSchedulerApp
argument_list|(
name|rm
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// making sure container is launched
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sentRMContainerLaunched
argument_list|(
name|rm
argument_list|,
name|containerId1
argument_list|)
expr_stmt|;
comment|// submit allocation request for a new container
name|am1
operator|.
name|allocate
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// nm reports status update and triggers container allocation
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// *In the mean time*, am1 asks to decrease its AM container resource from
comment|// 3GB to 1GB
name|AllocateResponse
name|response
init|=
name|am1
operator|.
name|sendContainerResizingRequest
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|containerId1
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// verify that the containe resource is decreased
name|verifyContainerDecreased
argument_list|(
name|response
argument_list|,
name|containerId1
argument_list|,
name|GB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkPendingResource (MockRM rm, String queueName, int memory, String label)
specifier|private
name|void
name|checkPendingResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|(
name|label
operator|==
literal|null
condition|?
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
else|:
name|label
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkUsedResource (MockRM rm, String queueName, int memory, String label)
specifier|private
name|void
name|checkUsedResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
name|label
operator|==
literal|null
condition|?
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
else|:
name|label
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyContainerIncreased (AllocateResponse response, ContainerId containerId, int mem)
specifier|private
name|void
name|verifyContainerIncreased
parameter_list|(
name|AllocateResponse
name|response
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|int
name|mem
parameter_list|)
block|{
name|List
argument_list|<
name|UpdatedContainer
argument_list|>
name|increasedContainers
init|=
name|response
operator|.
name|getUpdatedContainers
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|UpdatedContainer
name|c
range|:
name|increasedContainers
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|c
operator|.
name|getUpdateType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mem
argument_list|,
name|c
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Container not increased: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyContainerDecreased (AllocateResponse response, ContainerId containerId, int mem)
specifier|private
name|void
name|verifyContainerDecreased
parameter_list|(
name|AllocateResponse
name|response
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|int
name|mem
parameter_list|)
block|{
name|List
argument_list|<
name|UpdatedContainer
argument_list|>
name|decreasedContainers
init|=
name|response
operator|.
name|getUpdatedContainers
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|UpdatedContainer
name|c
range|:
name|decreasedContainers
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|c
operator|.
name|getUpdateType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mem
argument_list|,
name|c
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Container not decreased: containerId="
operator|+
name|containerId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|sentRMContainerLaunched (MockRM rm, ContainerId containerId)
specifier|private
name|void
name|sentRMContainerLaunched
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|cs
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|containerId
argument_list|,
name|RMContainerEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot find RMContainer"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAvailableResourceOfSchedulerNode (MockRM rm, NodeId nodeId, int expectedMemory)
specifier|private
name|void
name|verifyAvailableResourceOfSchedulerNode
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|int
name|expectedMemory
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerNode
name|node
init|=
name|cs
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMemory
argument_list|,
name|node
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

