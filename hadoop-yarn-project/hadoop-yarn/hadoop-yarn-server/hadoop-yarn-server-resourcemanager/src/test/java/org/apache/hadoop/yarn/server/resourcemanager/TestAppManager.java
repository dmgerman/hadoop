begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|MockRMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_comment
comment|/**  * Testing applications being retired from RM.  *  */
end_comment

begin_class
DECL|class|TestAppManager
specifier|public
class|class
name|TestAppManager
block|{
DECL|field|appEventType
specifier|private
specifier|static
name|RMAppEventType
name|appEventType
init|=
name|RMAppEventType
operator|.
name|KILL
decl_stmt|;
DECL|method|getAppEventType ()
specifier|public
specifier|synchronized
name|RMAppEventType
name|getAppEventType
parameter_list|()
block|{
return|return
name|appEventType
return|;
block|}
DECL|method|setAppEventType (RMAppEventType newType)
specifier|public
specifier|synchronized
name|void
name|setAppEventType
parameter_list|(
name|RMAppEventType
name|newType
parameter_list|)
block|{
name|appEventType
operator|=
name|newType
expr_stmt|;
block|}
DECL|method|newRMApps (int n, long time, RMAppState state)
specifier|public
specifier|static
name|List
argument_list|<
name|RMApp
argument_list|>
name|newRMApps
parameter_list|(
name|int
name|n
parameter_list|,
name|long
name|time
parameter_list|,
name|RMAppState
name|state
parameter_list|)
block|{
name|List
argument_list|<
name|RMApp
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|MockRMApp
argument_list|(
name|i
argument_list|,
name|time
argument_list|,
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|mockRMContext (int n, long time)
specifier|public
specifier|static
name|RMContext
name|mockRMContext
parameter_list|(
name|int
name|n
parameter_list|,
name|long
name|time
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|RMApp
argument_list|>
name|apps
init|=
name|newRMApps
argument_list|(
name|n
argument_list|,
name|time
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
for|for
control|(
name|RMApp
name|app
range|:
name|apps
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
block|}
name|Dispatcher
name|rmDispatcher
init|=
operator|new
name|AsyncDispatcher
argument_list|()
decl_stmt|;
name|ContainerAllocationExpirer
name|containerAllocationExpirer
init|=
operator|new
name|ContainerAllocationExpirer
argument_list|(
name|rmDispatcher
argument_list|)
decl_stmt|;
name|AMLivelinessMonitor
name|amLivelinessMonitor
init|=
operator|new
name|AMLivelinessMonitor
argument_list|(
name|rmDispatcher
argument_list|)
decl_stmt|;
name|AMLivelinessMonitor
name|amFinishingMonitor
init|=
operator|new
name|AMLivelinessMonitor
argument_list|(
name|rmDispatcher
argument_list|)
decl_stmt|;
return|return
operator|new
name|RMContextImpl
argument_list|(
operator|new
name|MemStore
argument_list|()
argument_list|,
name|rmDispatcher
argument_list|,
name|containerAllocationExpirer
argument_list|,
name|amLivelinessMonitor
argument_list|,
name|amFinishingMonitor
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|getRMApps
parameter_list|()
block|{
return|return
name|map
return|;
block|}
block|}
return|;
block|}
DECL|class|TestAppManagerDispatcher
specifier|public
class|class
name|TestAppManagerDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppManagerEvent
argument_list|>
block|{
DECL|method|TestAppManagerDispatcher ()
specifier|public
name|TestAppManagerDispatcher
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|handle (RMAppManagerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppManagerEvent
name|event
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
DECL|class|TestDispatcher
specifier|public
class|class
name|TestDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppEvent
argument_list|>
block|{
DECL|method|TestDispatcher ()
specifier|public
name|TestDispatcher
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|handle (RMAppEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
comment|//RMApp rmApp = this.rmContext.getRMApps().get(appID);
name|setAppEventType
argument_list|(
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"in handle routine "
operator|+
name|getAppEventType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Extend and make the functions we want to test public
DECL|class|TestRMAppManager
specifier|public
class|class
name|TestRMAppManager
extends|extends
name|RMAppManager
block|{
DECL|method|TestRMAppManager (RMContext context, Configuration conf)
specifier|public
name|TestRMAppManager
parameter_list|(
name|RMContext
name|context
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setCompletedAppsMax
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_MAX_COMPLETED_APPLICATIONS
argument_list|)
expr_stmt|;
block|}
DECL|method|TestRMAppManager (RMContext context, ClientToAMTokenSecretManagerInRM clientToAMSecretManager, YarnScheduler scheduler, ApplicationMasterService masterService, ApplicationACLsManager applicationACLsManager, Configuration conf)
specifier|public
name|TestRMAppManager
parameter_list|(
name|RMContext
name|context
parameter_list|,
name|ClientToAMTokenSecretManagerInRM
name|clientToAMSecretManager
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|ApplicationACLsManager
name|applicationACLsManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|clientToAMSecretManager
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|applicationACLsManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|setCompletedAppsMax
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_MAX_COMPLETED_APPLICATIONS
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAppNumCompletedLimit ()
specifier|public
name|void
name|checkAppNumCompletedLimit
parameter_list|()
block|{
name|super
operator|.
name|checkAppNumCompletedLimit
argument_list|()
expr_stmt|;
block|}
DECL|method|finishApplication (ApplicationId appId)
specifier|public
name|void
name|finishApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|super
operator|.
name|finishApplication
argument_list|(
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|method|getCompletedAppsListSize ()
specifier|public
name|int
name|getCompletedAppsListSize
parameter_list|()
block|{
return|return
name|super
operator|.
name|getCompletedAppsListSize
argument_list|()
return|;
block|}
DECL|method|setCompletedAppsMax (int max)
specifier|public
name|void
name|setCompletedAppsMax
parameter_list|(
name|int
name|max
parameter_list|)
block|{
name|super
operator|.
name|setCompletedAppsMax
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
DECL|method|submitApplication ( ApplicationSubmissionContext submissionContext)
specifier|public
name|void
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
block|{
name|super
operator|.
name|submitApplication
argument_list|(
name|submissionContext
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addToCompletedApps (TestRMAppManager appMonitor, RMContext rmContext)
specifier|protected
name|void
name|addToCompletedApps
parameter_list|(
name|TestRMAppManager
name|appMonitor
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
for|for
control|(
name|RMApp
name|app
range|:
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getState
argument_list|()
operator|==
name|RMAppState
operator|.
name|FINISHED
operator|||
name|app
operator|.
name|getState
argument_list|()
operator|==
name|RMAppState
operator|.
name|KILLED
operator|||
name|app
operator|.
name|getState
argument_list|()
operator|==
name|RMAppState
operator|.
name|FAILED
condition|)
block|{
name|appMonitor
operator|.
name|finishApplication
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testRMAppRetireNone ()
specifier|public
name|void
name|testRMAppRetireNone
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Create such that none of the applications will retire since
comment|// haven't hit max #
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|10
argument_list|,
name|now
operator|-
literal|10
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|appMonitor
operator|.
name|setCompletedAppsMax
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect before checkAppTimeLimit"
argument_list|,
literal|10
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add them to completed apps list
name|addToCompletedApps
argument_list|(
name|appMonitor
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// shouldn't  have to many apps
name|appMonitor
operator|.
name|checkAppNumCompletedLimit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect after # completed check"
argument_list|,
literal|10
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of completed apps incorrect after check"
argument_list|,
literal|10
argument_list|,
name|appMonitor
operator|.
name|getCompletedAppsListSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMAppRetireSome ()
specifier|public
name|void
name|testRMAppRetireSome
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|10
argument_list|,
name|now
operator|-
literal|20000
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|appMonitor
operator|.
name|setCompletedAppsMax
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect before"
argument_list|,
literal|10
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add them to completed apps list
name|addToCompletedApps
argument_list|(
name|appMonitor
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// shouldn't  have to many apps
name|appMonitor
operator|.
name|checkAppNumCompletedLimit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect after # completed check"
argument_list|,
literal|3
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of completed apps incorrect after check"
argument_list|,
literal|3
argument_list|,
name|appMonitor
operator|.
name|getCompletedAppsListSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMAppRetireSomeDifferentStates ()
specifier|public
name|void
name|testRMAppRetireSomeDifferentStates
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// these parameters don't matter, override applications below
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|10
argument_list|,
name|now
operator|-
literal|20000
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|appMonitor
operator|.
name|setCompletedAppsMax
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// clear out applications map
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"map isn't empty"
argument_list|,
literal|0
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// / set with various finished states
name|RMApp
name|app
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
name|now
operator|-
literal|20000
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|1
argument_list|,
name|now
operator|-
literal|200000
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|2
argument_list|,
name|now
operator|-
literal|30000
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|3
argument_list|,
name|now
operator|-
literal|20000
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|4
argument_list|,
name|now
operator|-
literal|20000
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
comment|// make sure it doesn't expire these since still running
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|5
argument_list|,
name|now
operator|-
literal|10001
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|6
argument_list|,
name|now
operator|-
literal|30000
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|7
argument_list|,
name|now
operator|-
literal|20000
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|8
argument_list|,
name|now
operator|-
literal|10001
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|MockRMApp
argument_list|(
literal|9
argument_list|,
name|now
operator|-
literal|20000
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect before"
argument_list|,
literal|10
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add them to completed apps list
name|addToCompletedApps
argument_list|(
name|appMonitor
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// shouldn't  have to many apps
name|appMonitor
operator|.
name|checkAppNumCompletedLimit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect after # completed check"
argument_list|,
literal|6
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of completed apps incorrect after check"
argument_list|,
literal|2
argument_list|,
name|appMonitor
operator|.
name|getCompletedAppsListSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMAppRetireNullApp ()
specifier|public
name|void
name|testRMAppRetireNullApp
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|10
argument_list|,
name|now
operator|-
literal|20000
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect before"
argument_list|,
literal|10
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appMonitor
operator|.
name|finishApplication
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of completed apps incorrect after check"
argument_list|,
literal|0
argument_list|,
name|appMonitor
operator|.
name|getCompletedAppsListSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMAppRetireZeroSetting ()
specifier|public
name|void
name|testRMAppRetireZeroSetting
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|10
argument_list|,
name|now
operator|-
literal|20000
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect before"
argument_list|,
literal|10
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test with 0
name|appMonitor
operator|.
name|setCompletedAppsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addToCompletedApps
argument_list|(
name|appMonitor
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of completed apps incorrect"
argument_list|,
literal|10
argument_list|,
name|appMonitor
operator|.
name|getCompletedAppsListSize
argument_list|()
argument_list|)
expr_stmt|;
name|appMonitor
operator|.
name|checkAppNumCompletedLimit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of apps incorrect after # completed check"
argument_list|,
literal|0
argument_list|,
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of completed apps incorrect after check"
argument_list|,
literal|0
argument_list|,
name|appMonitor
operator|.
name|getCompletedAppsListSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupDispatcher (RMContext rmContext, Configuration conf)
specifier|protected
name|void
name|setupDispatcher
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|TestDispatcher
name|testDispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|TestAppManagerDispatcher
name|testAppManagerDispatcher
init|=
operator|new
name|TestAppManagerDispatcher
argument_list|()
decl_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|register
argument_list|(
name|RMAppEventType
operator|.
name|class
argument_list|,
name|testDispatcher
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|register
argument_list|(
name|RMAppManagerEventType
operator|.
name|class
argument_list|,
name|testAppManagerDispatcher
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app event type is wrong before"
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|,
name|appEventType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMAppSubmit ()
specifier|public
name|void
name|testRMAppSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|0
argument_list|,
name|now
operator|-
literal|10
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ApplicationId
name|appID
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|amContainer
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|amContainer
operator|.
name|setApplicationACLs
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|setupDispatcher
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|appMonitor
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app is null"
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app id doesn't match"
argument_list|,
name|appID
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app name doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_NAME
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app queue doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app state doesn't match"
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app store is null"
argument_list|,
name|app
operator|.
name|getApplicationStore
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for event to be processed
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|getAppEventType
argument_list|()
operator|==
name|RMAppEventType
operator|.
name|KILL
operator|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app event type sent is wrong"
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|,
name|getAppEventType
argument_list|()
argument_list|)
expr_stmt|;
name|setAppEventType
argument_list|(
name|RMAppEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMAppSubmitWithQueueAndName ()
specifier|public
name|void
name|testRMAppSubmitWithQueueAndName
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|1
argument_list|,
name|now
operator|-
literal|10
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ApplicationId
name|appID
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationName
argument_list|(
literal|"testApp1"
argument_list|)
expr_stmt|;
name|context
operator|.
name|setQueue
argument_list|(
literal|"testQueue"
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|amContainer
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|amContainer
operator|.
name|setApplicationACLs
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|setupDispatcher
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|appMonitor
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app is null"
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app id doesn't match"
argument_list|,
name|appID
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app name doesn't match"
argument_list|,
literal|"testApp1"
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app queue doesn't match"
argument_list|,
literal|"testQueue"
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app state doesn't match"
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app store is null"
argument_list|,
name|app
operator|.
name|getApplicationStore
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for event to be processed
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|getAppEventType
argument_list|()
operator|==
name|RMAppEventType
operator|.
name|KILL
operator|)
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|20
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app event type sent is wrong"
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|,
name|getAppEventType
argument_list|()
argument_list|)
expr_stmt|;
name|setAppEventType
argument_list|(
name|RMAppEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMAppSubmitError ()
specifier|public
name|void
name|testRMAppSubmitError
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// specify 1 here and use same appId below so it gets duplicate entry
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
literal|1
argument_list|,
name|now
operator|-
literal|10
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|appMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|rmContext
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ApplicationId
name|appID
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appID
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationName
argument_list|(
literal|"testApp1"
argument_list|)
expr_stmt|;
name|context
operator|.
name|setQueue
argument_list|(
literal|"testQueue"
argument_list|)
expr_stmt|;
name|setupDispatcher
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|RMApp
name|appOrig
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"app name matches but shouldn't"
argument_list|,
literal|"testApp1"
operator|!=
name|appOrig
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// our testApp1 should be rejected and original app with same id should be left in place
name|appMonitor
operator|.
name|submitApplication
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// make sure original app didn't get removed
name|RMApp
name|app
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app is null"
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app id doesn't match"
argument_list|,
name|appID
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app name doesn't matches"
argument_list|,
name|appOrig
operator|.
name|getName
argument_list|()
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

