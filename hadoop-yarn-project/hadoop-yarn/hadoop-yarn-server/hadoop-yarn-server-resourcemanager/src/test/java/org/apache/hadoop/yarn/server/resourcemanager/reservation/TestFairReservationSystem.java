begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_class
DECL|class|TestFairReservationSystem
specifier|public
class|class
name|TestFairReservationSystem
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|FairSchedulerTestBase
operator|.
name|TEST_DIR
argument_list|,
name|TestFairReservationSystem
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|testHelper
specifier|private
name|FairSchedulerTestBase
name|testHelper
init|=
operator|new
name|FairSchedulerTestBase
argument_list|()
decl_stmt|;
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|testHelper
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|conf
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairReservationSystemInitialize ()
specifier|public
name|void
name|testFairReservationSystemInitialize
parameter_list|()
throws|throws
name|IOException
block|{
name|ReservationSystemTestUtil
operator|.
name|setupFSAllocationFile
argument_list|(
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ReservationSystemTestUtil
name|testUtil
init|=
operator|new
name|ReservationSystemTestUtil
argument_list|()
decl_stmt|;
comment|// Setup
name|RMContext
name|mockRMContext
init|=
name|testUtil
operator|.
name|createRMContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|scheduler
operator|=
name|ReservationSystemTestUtil
operator|.
name|setupFairScheduler
argument_list|(
name|testUtil
argument_list|,
name|mockRMContext
argument_list|,
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|FairReservationSystem
name|reservationSystem
init|=
operator|new
name|FairReservationSystem
argument_list|()
decl_stmt|;
name|reservationSystem
operator|.
name|setRMContext
argument_list|(
name|mockRMContext
argument_list|)
expr_stmt|;
try|try
block|{
name|reservationSystem
operator|.
name|reinitialize
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|,
name|mockRMContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReservationSystemTestUtil
operator|.
name|validateReservationQueue
argument_list|(
name|reservationSystem
argument_list|,
name|testUtil
operator|.
name|getFullReservationQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairReservationSystemReinitialize ()
specifier|public
name|void
name|testFairReservationSystemReinitialize
parameter_list|()
throws|throws
name|IOException
block|{
name|ReservationSystemTestUtil
operator|.
name|setupFSAllocationFile
argument_list|(
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ReservationSystemTestUtil
name|testUtil
init|=
operator|new
name|ReservationSystemTestUtil
argument_list|()
decl_stmt|;
comment|// Setup
name|RMContext
name|mockRMContext
init|=
name|testUtil
operator|.
name|createRMContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|scheduler
operator|=
name|ReservationSystemTestUtil
operator|.
name|setupFairScheduler
argument_list|(
name|testUtil
argument_list|,
name|mockRMContext
argument_list|,
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|FairReservationSystem
name|reservationSystem
init|=
operator|new
name|FairReservationSystem
argument_list|()
decl_stmt|;
name|reservationSystem
operator|.
name|setRMContext
argument_list|(
name|mockRMContext
argument_list|)
expr_stmt|;
try|try
block|{
name|reservationSystem
operator|.
name|reinitialize
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|,
name|mockRMContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Assert queue in original config
specifier|final
name|String
name|planQNam
init|=
name|testUtil
operator|.
name|getFullReservationQueueName
argument_list|()
decl_stmt|;
name|ReservationSystemTestUtil
operator|.
name|validateReservationQueue
argument_list|(
name|reservationSystem
argument_list|,
name|planQNam
argument_list|)
expr_stmt|;
comment|// Dynamically add a plan
name|ReservationSystemTestUtil
operator|.
name|updateFSAllocationFile
argument_list|(
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockRMContext
argument_list|)
expr_stmt|;
try|try
block|{
name|reservationSystem
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockRMContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|newQueue
init|=
literal|"root.reservation"
decl_stmt|;
name|ReservationSystemTestUtil
operator|.
name|validateNewReservationQueue
argument_list|(
name|reservationSystem
argument_list|,
name|newQueue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

