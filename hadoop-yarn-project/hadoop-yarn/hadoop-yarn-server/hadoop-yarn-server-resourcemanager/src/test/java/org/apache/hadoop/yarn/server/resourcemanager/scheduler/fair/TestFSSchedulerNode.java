begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test scheduler node, especially preemption reservations.  */
end_comment

begin_class
DECL|class|TestFSSchedulerNode
specifier|public
class|class
name|TestFSSchedulerNode
block|{
DECL|field|containers
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|createNode ()
specifier|private
name|RMNode
name|createNode
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|mock
argument_list|(
name|RMNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"host.domain.com"
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|createDefaultContainer ()
specifier|private
name|void
name|createDefaultContainer
parameter_list|()
block|{
name|createContainer
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createContainer ( Resource request, ApplicationAttemptId appAttemptId)
specifier|private
name|RMContainer
name|createContainer
parameter_list|(
name|Resource
name|request
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|RMContainer
name|container
init|=
name|mock
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|containerInner
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerId
name|id
init|=
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|id
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|long
operator|)
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerInner
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|clone
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerInner
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerInner
operator|.
name|getExecutionType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerInner
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getExecutionType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|clone
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|compareTo
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|Integer
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
operator|(
operator|(
name|RMContainer
operator|)
name|invocation
operator|.
name|getMock
argument_list|()
operator|)
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|,
operator|(
operator|(
name|RMContainer
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|saturateCluster (FSSchedulerNode schedulerNode)
specifier|private
name|void
name|saturateCluster
parameter_list|(
name|FSSchedulerNode
name|schedulerNode
parameter_list|)
block|{
while|while
condition|(
operator|!
name|Resources
operator|.
name|isNone
argument_list|(
name|schedulerNode
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
condition|)
block|{
name|createDefaultContainer
argument_list|()
expr_stmt|;
name|schedulerNode
operator|.
name|allocateContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|containerStarted
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createStarvingApp (FSSchedulerNode schedulerNode, Resource request)
specifier|private
name|FSAppAttempt
name|createStarvingApp
parameter_list|(
name|FSSchedulerNode
name|schedulerNode
parameter_list|,
name|Resource
name|request
parameter_list|)
block|{
name|FSAppAttempt
name|starvingApp
init|=
name|mock
argument_list|(
name|FSAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|mock
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|starvingApp
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|starvingApp
operator|.
name|assignContainer
argument_list|(
name|schedulerNode
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Resource
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Resource
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|Resource
name|response
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|Resources
operator|.
name|isNone
argument_list|(
name|request
argument_list|)
operator|&&
operator|!
name|Resources
operator|.
name|isNone
argument_list|(
name|schedulerNode
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
condition|)
block|{
name|RMContainer
name|container
init|=
name|createContainer
argument_list|(
name|request
argument_list|,
name|appAttemptId
argument_list|)
decl_stmt|;
name|schedulerNode
operator|.
name|allocateContainer
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|response
argument_list|,
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|request
argument_list|,
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|starvingApp
operator|.
name|isStarved
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|!
name|Resources
operator|.
name|isNone
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|starvingApp
operator|.
name|getPendingDemand
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
name|starvingApp
return|;
block|}
DECL|method|finalValidation (FSSchedulerNode schedulerNode)
specifier|private
name|void
name|finalValidation
parameter_list|(
name|FSSchedulerNode
name|schedulerNode
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Everything should have been released"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No containers should be reserved for preemption"
argument_list|,
name|schedulerNode
operator|.
name|containersForPreemption
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No resources should be reserved for preemptors"
argument_list|,
name|schedulerNode
operator|.
name|resourcesPreemptedForApp
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No amount of resource should be reserved for preemptees"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getTotalReserved
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|allocateContainers (FSSchedulerNode schedulerNode)
specifier|private
name|void
name|allocateContainers
parameter_list|(
name|FSSchedulerNode
name|schedulerNode
parameter_list|)
block|{
name|FairScheduler
operator|.
name|assignPreemptedContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allocate and release a single container.    */
annotation|@
name|Test
DECL|method|testSimpleAllocation ()
specifier|public
name|void
name|testSimpleAllocation
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createDefaultContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nothing should have been allocated, yet"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|allocateContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Everything should have been released"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that we are error prone
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allocate and release three containers with launch.    */
annotation|@
name|Test
DECL|method|testMultipleAllocations ()
specifier|public
name|void
name|testMultipleAllocations
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createDefaultContainer
argument_list|()
expr_stmt|;
name|createDefaultContainer
argument_list|()
expr_stmt|;
name|createDefaultContainer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Nothing should have been allocated, yet"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|allocateContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|containerStarted
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|allocateContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|containerStarted
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|allocateContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
literal|3.0
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allocate and release a single container.    */
annotation|@
name|Test
DECL|method|testSimplePreemption ()
specifier|public
name|void
name|testSimplePreemption
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Launch containers and saturate the cluster
name|saturateCluster
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request preemption
name|FSAppAttempt
name|starvingApp
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|starvingApp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No resource amount should be reserved for preemptees"
argument_list|,
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getTotalReserved
argument_list|()
argument_list|)
expr_stmt|;
comment|// Preemption occurs release one container
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocateContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|schedulerNode
operator|.
name|getTotalResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all remaining containers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allocate a single container twice and release.    */
annotation|@
name|Test
DECL|method|testDuplicatePreemption ()
specifier|public
name|void
name|testDuplicatePreemption
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Launch containers and saturate the cluster
name|saturateCluster
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request preemption twice
name|FSAppAttempt
name|starvingApp
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|starvingApp
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|starvingApp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No resource amount should be reserved for preemptees"
argument_list|,
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAllocatedResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getTotalReserved
argument_list|()
argument_list|)
expr_stmt|;
comment|// Preemption occurs release one container
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocateContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|schedulerNode
operator|.
name|getTotalResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all remaining containers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allocate and release three containers requested by two apps.    */
annotation|@
name|Test
DECL|method|testComplexPreemption ()
specifier|public
name|void
name|testComplexPreemption
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Launch containers and saturate the cluster
name|saturateCluster
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Preempt a container
name|FSAppAttempt
name|starvingApp1
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|starvingApp2
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Preemption thread kicks in
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|starvingApp1
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|starvingApp1
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|starvingApp2
argument_list|)
expr_stmt|;
comment|// Preemption happens
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocateContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|schedulerNode
operator|.
name|getTotalResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all containers
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allocate and release three containers requested by two apps in two rounds.    */
annotation|@
name|Test
DECL|method|testMultiplePreemptionEvents ()
specifier|public
name|void
name|testMultiplePreemptionEvents
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Launch containers and saturate the cluster
name|saturateCluster
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Preempt a container
name|FSAppAttempt
name|starvingApp1
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|starvingApp2
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Preemption thread kicks in
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|starvingApp1
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|starvingApp1
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|starvingApp2
argument_list|)
expr_stmt|;
comment|// Preemption happens
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocateContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|allocateContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|schedulerNode
operator|.
name|getTotalResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all containers
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Allocate and release a single container and delete the app in between.    */
annotation|@
name|Test
DECL|method|testPreemptionToCompletedApp ()
specifier|public
name|void
name|testPreemptionToCompletedApp
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Launch containers and saturate the cluster
name|saturateCluster
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Preempt a container
name|FSAppAttempt
name|starvingApp
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|starvingApp
argument_list|)
expr_stmt|;
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Stop the application then try to satisfy the reservation
comment|// and observe that there are still free resources not allocated to
comment|// the deleted app
name|when
argument_list|(
name|starvingApp
operator|.
name|isStopped
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allocateContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|schedulerNode
operator|.
name|getTotalResource
argument_list|()
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release all containers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Preempt a bigger container than the preemption request.    */
annotation|@
name|Test
DECL|method|testPartialReservedPreemption ()
specifier|public
name|void
name|testPartialReservedPreemption
parameter_list|()
block|{
name|RMNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|FSSchedulerNode
name|schedulerNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|node
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Launch containers and saturate the cluster
name|saturateCluster
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Preempt a container
name|Resource
name|originalStarvingAppDemand
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|starvingApp
init|=
name|createStarvingApp
argument_list|(
name|schedulerNode
argument_list|,
name|originalStarvingAppDemand
argument_list|)
decl_stmt|;
name|schedulerNode
operator|.
name|addContainersForPreemption
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|starvingApp
argument_list|)
expr_stmt|;
comment|// Preemption occurs
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Container partially reassigned
name|allocateContainers
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Container should be allocated"
argument_list|,
name|Resources
operator|.
name|subtract
argument_list|(
name|schedulerNode
operator|.
name|getTotalResource
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup simulating node update
name|schedulerNode
operator|.
name|getPreemptionList
argument_list|()
expr_stmt|;
comment|// Release all containers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|containers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|schedulerNode
operator|.
name|releaseContainer
argument_list|(
name|containers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|finalValidation
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

