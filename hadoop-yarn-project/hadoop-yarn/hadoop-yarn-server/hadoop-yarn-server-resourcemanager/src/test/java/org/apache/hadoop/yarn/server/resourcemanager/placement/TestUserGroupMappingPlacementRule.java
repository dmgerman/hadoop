begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
operator|.
name|MappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerQueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|PrimaryGroupMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|SimpleGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestUserGroupMappingPlacementRule
specifier|public
class|class
name|TestUserGroupMappingPlacementRule
block|{
DECL|field|conf
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueMapping (QueueMapping queueMapping, String inputUser, String expectedQueue)
specifier|private
name|void
name|verifyQueueMapping
parameter_list|(
name|QueueMapping
name|queueMapping
parameter_list|,
name|String
name|inputUser
parameter_list|,
name|String
name|expectedQueue
parameter_list|)
throws|throws
name|YarnException
block|{
name|verifyQueueMapping
argument_list|(
name|queueMapping
argument_list|,
name|inputUser
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|,
name|expectedQueue
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueMapping (QueueMapping queueMapping, String inputUser, String inputQueue, String expectedQueue, boolean overwrite)
specifier|private
name|void
name|verifyQueueMapping
parameter_list|(
name|QueueMapping
name|queueMapping
parameter_list|,
name|String
name|inputUser
parameter_list|,
name|String
name|inputQueue
parameter_list|,
name|String
name|expectedQueue
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|YarnException
block|{
name|Groups
name|groups
init|=
operator|new
name|Groups
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupMappingPlacementRule
name|rule
init|=
operator|new
name|UserGroupMappingPlacementRule
argument_list|(
name|overwrite
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|queueMapping
argument_list|)
argument_list|,
name|groups
argument_list|)
decl_stmt|;
name|CapacitySchedulerQueueManager
name|queueManager
init|=
name|mock
argument_list|(
name|CapacitySchedulerQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queueManager
operator|.
name|getQueue
argument_list|(
literal|"asubgroup2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|CSQueue
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|rule
operator|.
name|setQueueManager
argument_list|(
name|queueManager
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|asc
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|asc
operator|.
name|setQueue
argument_list|(
name|inputQueue
argument_list|)
expr_stmt|;
name|ApplicationPlacementContext
name|ctx
init|=
name|rule
operator|.
name|getPlacementForApp
argument_list|(
name|asc
argument_list|,
name|inputUser
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedQueue
argument_list|,
name|ctx
operator|!=
literal|null
condition|?
name|ctx
operator|.
name|getQueue
argument_list|()
else|:
name|inputQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSecondaryGroupMapping ()
specifier|public
name|void
name|testSecondaryGroupMapping
parameter_list|()
throws|throws
name|YarnException
block|{
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"%user"
argument_list|,
literal|"%secondary_group"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"asubgroup2"
argument_list|)
expr_stmt|;
comment|// PrimaryGroupMapping.class returns only primary group, no secondary groups
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|PrimaryGroupMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"%user"
argument_list|,
literal|"%secondary_group"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapping ()
specifier|public
name|void
name|testMapping
parameter_list|()
throws|throws
name|YarnException
block|{
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"a"
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|GROUP
argument_list|,
literal|"agroup"
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"%user"
argument_list|,
literal|"q2"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"%user"
argument_list|,
literal|"%user"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"%user"
argument_list|,
literal|"%primary_group"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"agroup"
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|GROUP
argument_list|,
literal|"asubgroup1"
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
comment|// specify overwritten, and see if user specified a queue, and it will be
comment|// overridden
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"user"
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"q2"
argument_list|,
literal|"q1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// if overwritten not specified, it should be which user specified
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|USER
argument_list|,
literal|"user"
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"q2"
argument_list|,
literal|"q2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// if overwritten not specified, it should be which user specified
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|GROUP
argument_list|,
literal|"usergroup"
argument_list|,
literal|"%user"
argument_list|,
literal|"usergroup"
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"default"
argument_list|,
literal|"user"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// if overwritten not specified, it should be which user specified
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|GROUP
argument_list|,
literal|"usergroup"
argument_list|,
literal|"%user"
argument_list|,
literal|"usergroup"
argument_list|)
argument_list|,
literal|"user"
argument_list|,
literal|"agroup"
argument_list|,
literal|"user"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//If user specific queue is enabled for a specified group under a given
comment|// parent queue
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|GROUP
argument_list|,
literal|"agroup"
argument_list|,
literal|"%user"
argument_list|,
literal|"parent1"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
comment|//If user specific queue is enabled for a specified group without parent
comment|// queue
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMapping
argument_list|(
name|MappingType
operator|.
name|GROUP
argument_list|,
literal|"agroup"
argument_list|,
literal|"%user"
argument_list|)
argument_list|,
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

