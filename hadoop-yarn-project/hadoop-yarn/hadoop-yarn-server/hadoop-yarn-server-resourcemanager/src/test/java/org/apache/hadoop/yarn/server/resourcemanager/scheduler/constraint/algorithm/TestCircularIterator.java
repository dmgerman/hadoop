begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint.algorithm
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|algorithm
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Simple test case to test the Circular Iterator.  */
end_comment

begin_class
DECL|class|TestCircularIterator
specifier|public
class|class
name|TestCircularIterator
block|{
annotation|@
name|Test
DECL|method|testIteration ()
specifier|public
name|void
name|testIteration
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|CircularIterator
argument_list|<
name|String
argument_list|>
name|ci
init|=
operator|new
name|CircularIterator
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|list
operator|.
name|iterator
argument_list|()
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
decl_stmt|;
while|while
condition|(
name|ci
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"abcd"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|lIter
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|lIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|lIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ci
operator|=
operator|new
name|CircularIterator
argument_list|<>
argument_list|(
literal|null
argument_list|,
name|lIter
argument_list|,
name|list
argument_list|)
expr_stmt|;
while|while
condition|(
name|ci
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"cdab"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|lIter
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|lIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|lIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|lIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ci
operator|=
operator|new
name|CircularIterator
argument_list|<>
argument_list|(
literal|"x"
argument_list|,
name|lIter
argument_list|,
name|list
argument_list|)
expr_stmt|;
while|while
condition|(
name|ci
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xdabc"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|list
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|lIter
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|lIter
operator|.
name|next
argument_list|()
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ci
operator|=
operator|new
name|CircularIterator
argument_list|<>
argument_list|(
literal|"y"
argument_list|,
name|lIter
argument_list|,
name|list
argument_list|)
expr_stmt|;
while|while
condition|(
name|ci
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ci
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ya"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|lIter
operator|=
name|list
operator|.
name|iterator
argument_list|()
expr_stmt|;
operator|new
name|CircularIterator
argument_list|<>
argument_list|(
literal|"y"
argument_list|,
name|lIter
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should fail.."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// foo bar
block|}
block|}
block|}
end_class

end_unit

