begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_comment
comment|/**  * Dummy implementation of Schedulable for unit testing.  */
end_comment

begin_class
DECL|class|FakeSchedulable
specifier|public
class|class
name|FakeSchedulable
implements|implements
name|Schedulable
block|{
DECL|field|usage
specifier|private
name|Resource
name|usage
decl_stmt|;
DECL|field|minShare
specifier|private
name|Resource
name|minShare
decl_stmt|;
DECL|field|maxShare
specifier|private
name|Resource
name|maxShare
decl_stmt|;
DECL|field|fairShare
specifier|private
name|Resource
name|fairShare
decl_stmt|;
DECL|field|weights
specifier|private
name|ResourceWeights
name|weights
decl_stmt|;
DECL|field|priority
specifier|private
name|Priority
name|priority
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|method|FakeSchedulable ()
specifier|public
name|FakeSchedulable
parameter_list|()
block|{
name|this
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int minShare)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|minShare
parameter_list|)
block|{
name|this
argument_list|(
name|minShare
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int minShare, int maxShare)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|minShare
parameter_list|,
name|int
name|maxShare
parameter_list|)
block|{
name|this
argument_list|(
name|minShare
argument_list|,
name|maxShare
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int minShare, double memoryWeight)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|minShare
parameter_list|,
name|double
name|memoryWeight
parameter_list|)
block|{
name|this
argument_list|(
name|minShare
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|memoryWeight
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int minShare, int maxShare, double memoryWeight)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|minShare
parameter_list|,
name|int
name|maxShare
parameter_list|,
name|double
name|memoryWeight
parameter_list|)
block|{
name|this
argument_list|(
name|minShare
argument_list|,
name|maxShare
argument_list|,
name|memoryWeight
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (int minShare, int maxShare, double weight, int fairShare, int usage, long startTime)
specifier|public
name|FakeSchedulable
parameter_list|(
name|int
name|minShare
parameter_list|,
name|int
name|maxShare
parameter_list|,
name|double
name|weight
parameter_list|,
name|int
name|fairShare
parameter_list|,
name|int
name|usage
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|minShare
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|maxShare
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|ResourceWeights
argument_list|(
operator|(
name|float
operator|)
name|weight
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|fairShare
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|usage
argument_list|,
literal|0
argument_list|)
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (Resource minShare, ResourceWeights weights)
specifier|public
name|FakeSchedulable
parameter_list|(
name|Resource
name|minShare
parameter_list|,
name|ResourceWeights
name|weights
parameter_list|)
block|{
name|this
argument_list|(
name|minShare
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|weights
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|FakeSchedulable (Resource minShare, Resource maxShare, ResourceWeights weight, Resource fairShare, Resource usage, long startTime)
specifier|public
name|FakeSchedulable
parameter_list|(
name|Resource
name|minShare
parameter_list|,
name|Resource
name|maxShare
parameter_list|,
name|ResourceWeights
name|weight
parameter_list|,
name|Resource
name|fairShare
parameter_list|,
name|Resource
name|usage
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|this
operator|.
name|minShare
operator|=
name|minShare
expr_stmt|;
name|this
operator|.
name|maxShare
operator|=
name|maxShare
expr_stmt|;
name|this
operator|.
name|weights
operator|=
name|weight
expr_stmt|;
name|setFairShare
argument_list|(
name|fairShare
argument_list|)
expr_stmt|;
name|this
operator|.
name|usage
operator|=
name|usage
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assignContainer (FSSchedulerNode node)
specifier|public
name|Resource
name|assignContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|preemptContainer ()
specifier|public
name|RMContainer
name|preemptContainer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getFairShare ()
specifier|public
name|Resource
name|getFairShare
parameter_list|()
block|{
return|return
name|this
operator|.
name|fairShare
return|;
block|}
annotation|@
name|Override
DECL|method|setFairShare (Resource fairShare)
specifier|public
name|void
name|setFairShare
parameter_list|(
name|Resource
name|fairShare
parameter_list|)
block|{
name|this
operator|.
name|fairShare
operator|=
name|fairShare
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isActive ()
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|Resource
name|getDemand
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"FakeSchedulable"
operator|+
name|this
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceUsage ()
specifier|public
name|Resource
name|getResourceUsage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getWeights ()
specifier|public
name|ResourceWeights
name|getWeights
parameter_list|()
block|{
return|return
name|weights
return|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|Resource
name|getMinShare
parameter_list|()
block|{
return|return
name|minShare
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxShare ()
specifier|public
name|Resource
name|getMaxShare
parameter_list|()
block|{
return|return
name|maxShare
return|;
block|}
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{}
block|}
end_class

end_unit

