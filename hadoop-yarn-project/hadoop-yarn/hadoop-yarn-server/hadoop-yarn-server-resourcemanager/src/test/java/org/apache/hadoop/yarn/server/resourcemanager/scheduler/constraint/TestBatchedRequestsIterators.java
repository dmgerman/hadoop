begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|TestPlacementProcessor
operator|.
name|schedulingRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|processor
operator|.
name|BatchedRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Request Iterator.  */
end_comment

begin_class
DECL|class|TestBatchedRequestsIterators
specifier|public
class|class
name|TestBatchedRequestsIterators
block|{
annotation|@
name|Test
DECL|method|testSerialIterator ()
specifier|public
name|void
name|testSerialIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequestList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|BatchedRequests
name|batchedRequests
init|=
operator|new
name|BatchedRequests
argument_list|(
name|BatchedRequests
operator|.
name|IteratorType
operator|.
name|SERIAL
argument_list|,
literal|null
argument_list|,
name|schedulingRequestList
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|SchedulingRequest
argument_list|>
name|requestIterator
init|=
name|batchedRequests
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|prevAllocId
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|requestIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchedulingRequest
name|request
init|=
name|requestIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getAllocationRequestId
argument_list|()
operator|>
name|prevAllocId
argument_list|)
expr_stmt|;
name|prevAllocId
operator|=
name|request
operator|.
name|getAllocationRequestId
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPopularTagsIterator ()
specifier|public
name|void
name|testPopularTagsIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|SchedulingRequest
argument_list|>
name|schedulingRequestList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"pri"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"bar"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|,
literal|"pri"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"test"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"pri"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|BatchedRequests
name|batchedRequests
init|=
operator|new
name|BatchedRequests
argument_list|(
name|BatchedRequests
operator|.
name|IteratorType
operator|.
name|POPULAR_TAGS
argument_list|,
literal|null
argument_list|,
name|schedulingRequestList
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|SchedulingRequest
argument_list|>
name|requestIterator
init|=
name|batchedRequests
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|long
name|recCcount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|requestIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SchedulingRequest
name|request
init|=
name|requestIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|recCcount
operator|<
literal|3
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"pri"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|request
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"bar"
argument_list|)
operator|||
name|request
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|recCcount
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

