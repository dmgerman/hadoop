begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedConfUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|iq80
operator|.
name|leveldb
operator|.
name|DBIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Tests {@link LeveldbConfigurationStore}.  */
end_comment

begin_class
DECL|class|TestLeveldbConfigurationStore
specifier|public
class|class
name|TestLeveldbConfigurationStore
extends|extends
name|ConfigurationStoreBaseTest
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestLeveldbConfigurationStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestLeveldbConfigurationStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|rm
specifier|private
name|ResourceManager
name|rm
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_STORE_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|LEVELDB_CONFIGURATION_STORE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDCONF_STORE_PATH
argument_list|,
name|TEST_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioning ()
specifier|public
name|void
name|testVersioning
parameter_list|()
throws|throws
name|Exception
block|{
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confStore
operator|.
name|getConfStoreVersion
argument_list|()
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|LeveldbConfigurationStore
operator|.
name|CURRENT_VERSION_INFO
argument_list|,
name|confStore
operator|.
name|getConfStoreVersion
argument_list|()
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPersistConfiguration ()
specifier|public
name|void
name|testPersistConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|schedConf
operator|.
name|set
argument_list|(
literal|"key"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create a new configuration store, and check for old configuration
name|confStore
operator|=
name|createConfStore
argument_list|()
expr_stmt|;
name|schedConf
operator|.
name|set
argument_list|(
literal|"key"
argument_list|,
literal|"badVal"
argument_list|)
expr_stmt|;
comment|// Should ignore passed-in scheduler configuration.
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPersistUpdatedConfiguration ()
specifier|public
name|void
name|testPersistUpdatedConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create a new configuration store, and check for updated configuration
name|confStore
operator|=
name|createConfStore
argument_list|()
expr_stmt|;
name|schedConf
operator|.
name|set
argument_list|(
literal|"key"
argument_list|,
literal|"badVal"
argument_list|)
expr_stmt|;
comment|// Should ignore passed-in scheduler configuration.
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDisableAuditLogs ()
specifier|public
name|void
name|testDisableAuditLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDCONF_MAX_LOGS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|boolean
name|logKeyPresent
init|=
literal|false
decl_stmt|;
name|DB
name|db
init|=
operator|(
operator|(
name|LeveldbConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getDB
argument_list|()
decl_stmt|;
name|DBIterator
name|itr
init|=
name|db
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|itr
operator|.
name|seekToFirst
argument_list|()
expr_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|new
name|String
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
literal|"log"
argument_list|)
condition|)
block|{
name|logKeyPresent
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertFalse
argument_list|(
literal|"Audit Log is not disabled"
argument_list|,
name|logKeyPresent
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxLogs ()
specifier|public
name|void
name|testMaxLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDCONF_MAX_LOGS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|>
name|logs
init|=
operator|(
operator|(
name|LeveldbConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update1
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|logs
operator|=
operator|(
operator|(
name|LeveldbConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"val2"
argument_list|)
expr_stmt|;
name|mutation
operator|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update2
argument_list|,
name|TEST_USER
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|logs
operator|=
operator|(
operator|(
name|LeveldbConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next update should purge first update from logs.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update3
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update3
operator|.
name|put
argument_list|(
literal|"key3"
argument_list|,
literal|"val3"
argument_list|)
expr_stmt|;
name|mutation
operator|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update3
argument_list|,
name|TEST_USER
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|logs
operator|=
operator|(
operator|(
name|LeveldbConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val3"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key3"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val3"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key3"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * When restarting, RM should read from current state of store, including    * any updates from the previous RM instance.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRestartReadsFromUpdatedStore ()
specifier|public
name|void
name|testRestartReadsFromUpdatedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceManager
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update configuration on RM
name|SchedConfUpdateInfo
name|schedConfUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|schedConfUpdateInfo
operator|.
name|getGlobalParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|MutableConfigurationProvider
name|confProvider
init|=
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getMutableConfProvider
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|TEST_USER
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|confProvider
operator|.
name|logAndApplyMutation
argument_list|(
name|user
argument_list|,
name|schedConfUpdateInfo
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|confirmPendingMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
operator|(
name|MutableCSConfigurationProvider
operator|)
name|confProvider
operator|)
operator|.
name|getConfStore
argument_list|()
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next update is not persisted, it should not be recovered
name|schedConfUpdateInfo
operator|.
name|getGlobalParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"badVal"
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|logAndApplyMutation
argument_list|(
name|user
argument_list|,
name|schedConfUpdateInfo
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start RM2 and verifies it starts with updated configuration
name|ResourceManager
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
call|(
name|MutableCSConfigurationProvider
call|)
argument_list|(
operator|(
name|CapacityScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
argument_list|)
operator|.
name|getMutableConfProvider
argument_list|()
operator|)
operator|.
name|getConfStore
argument_list|()
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfStore ()
specifier|public
name|YarnConfigurationStore
name|createConfStore
parameter_list|()
block|{
return|return
operator|new
name|LeveldbConfigurationStore
argument_list|()
return|;
block|}
block|}
end_class

end_unit

