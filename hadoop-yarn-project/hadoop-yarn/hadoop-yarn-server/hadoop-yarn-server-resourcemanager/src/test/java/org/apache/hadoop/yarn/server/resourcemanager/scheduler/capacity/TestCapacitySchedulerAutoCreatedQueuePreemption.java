begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|C
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|D
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|E
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|USER0
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|USER1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|USER2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|USER3
import|;
end_import

begin_comment
comment|/**  * Tests various preemption cases on auto-created leaf queues. All  * auto-created leaf queues will end up having same priority since they are set  * from template. Priority on ManagedParent Queues can be set however and  * priority based premption cases are based on that.  */
end_comment

begin_class
DECL|class|TestCapacitySchedulerAutoCreatedQueuePreemption
specifier|public
class|class
name|TestCapacitySchedulerAutoCreatedQueuePreemption
extends|extends
name|TestCapacitySchedulerSurgicalPreemption
block|{
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|CapacitySchedulerConfiguration
DECL|method|setupQueueConfigurationForSimpleSurgicalPreemption ( CapacitySchedulerConfiguration conf)
name|setupQueueConfigurationForSimpleSurgicalPreemption
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|//set up auto created queue configs
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|setupQueueMappings
argument_list|(
name|conf
argument_list|,
literal|"c"
argument_list|,
literal|true
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
comment|//setup new queues with one of them auto enabled
comment|// Define top-level queues
comment|// Set childQueue for root
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|100f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Setup leaf queue template configs
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|C
argument_list|,
literal|30.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|C
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimit
argument_list|(
name|C
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|protected
name|CapacitySchedulerConfiguration
DECL|method|setupQueueConfigurationForPriorityBasedPreemption ( CapacitySchedulerConfiguration conf)
name|setupQueueConfigurationForPriorityBasedPreemption
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|//set up auto created queue configs
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|setupQueueMappings
argument_list|(
name|conf
argument_list|,
literal|"c"
argument_list|,
literal|true
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|setupQueueMappings
argument_list|(
name|conf
argument_list|,
literal|"d"
argument_list|,
literal|true
argument_list|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|4
block|}
argument_list|)
expr_stmt|;
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|setupQueueMappings
argument_list|(
name|conf
argument_list|,
literal|"e"
argument_list|,
literal|true
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
comment|//setup new queues with one of them auto enabled
comment|// Define top-level queues
comment|// Set childQueue for root
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|45f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|D
argument_list|,
literal|45f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|E
argument_list|,
literal|10f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|E
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|D
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|D
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|E
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Setup leaf queue template configs
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|C
argument_list|,
literal|100f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|C
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimit
argument_list|(
name|C
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|D
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|D
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimit
argument_list|(
name|D
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimitFactor
argument_list|(
name|D
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|E
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|E
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimit
argument_list|(
name|E
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimitFactor
argument_list|(
name|E
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".d"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSimpleSurgicalPreemptionOnAutoCreatedLeafQueues ()
specifier|public
name|void
name|testSimpleSurgicalPreemptionOnAutoCreatedLeafQueues
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *                    C      *            /       |     \      *           USER1   USER2   USER3      *          30      30        30      *</pre>      *      * 1) Two nodes (n1/n2) in the cluster, each of them has 20G.      *      * 2) app1 submit to queue-USER1 first, it asked 32 * 1G containers      * We will allocate 16 on n1 and 16 on n2.      *      * 3) app2 submit to queue-USER2, ask for one 1G container (for AM)      *      * 4) app2 asks for another 6G container, it will be reserved on n1      *      * Now: we have:      * n1: 17 from app1, 1 from app2, and 1 reserved from app2      * n2: 16 from app1.      *      * After preemption, we should expect:      * Preempt 4 containers from app1 on n1.      */
name|setupQueueConfigurationForSimpleSurgicalPreemption
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testSimpleSurgicalPreemption
argument_list|(
name|USER1
argument_list|,
name|USER2
argument_list|,
name|USER1
argument_list|,
name|USER2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
specifier|public
name|void
DECL|method|testPreemptionFromHighestPriorityManagedParentQueueAndOldestContainer ()
name|testPreemptionFromHighestPriorityManagedParentQueueAndOldestContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *             Root      *            /  |  \      *           c   d   e      *          45  45  10      *</pre>      *      * Priority of queue_c = 1      * Priority of queue_d = 2      *      * 1) 5 nodes (n0-n4) in the cluster, each of them has 4G.      *      * 2) app1 submit to queue-e first (AM=1G), it asked 4 * 1G containers      *    We will allocate 1 container on each of n0-n4. AM on n4.      *      * 3) app2 submit to queue-c, AM container=0.5G, allocated on n0      *    Ask for 2 * 3.5G containers. (Reserved on n0/n1)      *      * 4) app2 submit to queue-d, AM container=0.5G, allocated on n2      *    Ask for 2 * 3.5G containers. (Reserved on n2/n3)      *      * First we will preempt container on n2 since it is the oldest container of      * Highest priority queue (d)      */
comment|// Total preemption = 1G per round, which is 5% of cluster resource (20G)
name|setupQueueConfigurationForPriorityBasedPreemption
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|testPriorityPreemptionFromHighestPriorityQueueAndOldestContainer
argument_list|(
operator|new
name|String
index|[]
block|{
name|USER1
block|,
name|USER3
block|,
name|USER0
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|USER1
block|,
name|USER3
block|,
name|USER0
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

