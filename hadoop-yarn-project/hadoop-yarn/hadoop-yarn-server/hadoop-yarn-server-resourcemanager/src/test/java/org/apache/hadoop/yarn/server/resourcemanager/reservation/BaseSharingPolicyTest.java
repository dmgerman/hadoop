begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
operator|.
name|ReservationAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_comment
comment|/**  * This class is a base test for {@code SharingPolicy} implementors.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|NotThreadSafe
annotation|@
name|SuppressWarnings
argument_list|(
literal|"VisibilityModifier"
argument_list|)
DECL|class|BaseSharingPolicyTest
specifier|public
specifier|abstract
class|class
name|BaseSharingPolicyTest
block|{
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|0
argument_list|)
DECL|field|duration
specifier|public
name|long
name|duration
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
DECL|field|height
specifier|public
name|double
name|height
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|2
argument_list|)
DECL|field|numSubmissions
specifier|public
name|int
name|numSubmissions
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|3
argument_list|)
DECL|field|recurrenceExpression
specifier|public
name|String
name|recurrenceExpression
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|4
argument_list|)
DECL|field|expectedError
specifier|public
name|Class
name|expectedError
decl_stmt|;
DECL|field|step
specifier|private
name|long
name|step
decl_stmt|;
DECL|field|initTime
specifier|private
name|long
name|initTime
decl_stmt|;
DECL|field|plan
specifier|private
name|InMemoryPlan
name|plan
decl_stmt|;
DECL|field|mAgent
specifier|private
name|ReservationAgent
name|mAgent
decl_stmt|;
DECL|field|minAlloc
specifier|private
name|Resource
name|minAlloc
decl_stmt|;
DECL|field|res
specifier|private
name|ResourceCalculator
name|res
decl_stmt|;
DECL|field|maxAlloc
specifier|private
name|Resource
name|maxAlloc
decl_stmt|;
DECL|field|totCont
specifier|private
name|int
name|totCont
init|=
literal|1000
decl_stmt|;
DECL|field|conf
specifier|protected
name|ReservationSchedulerConfiguration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|// 1 sec step
name|step
operator|=
literal|1000L
expr_stmt|;
name|initTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|minAlloc
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|res
operator|=
operator|new
name|DefaultResourceCalculator
argument_list|()
expr_stmt|;
name|maxAlloc
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
literal|8
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|mAgent
operator|=
name|mock
argument_list|(
name|ReservationAgent
operator|.
name|class
argument_list|)
expr_stmt|;
name|QueueMetrics
name|rootQueueMetrics
init|=
name|mock
argument_list|(
name|QueueMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|ReservationSystemTestUtil
operator|.
name|calculateClusterResource
argument_list|(
name|totCont
argument_list|)
decl_stmt|;
comment|// invoke implementors initialization of policy
name|SharingPolicy
name|policy
init|=
name|getInitializedPolicy
argument_list|()
decl_stmt|;
name|RMContext
name|context
init|=
name|ReservationSystemTestUtil
operator|.
name|createMockRMContext
argument_list|()
decl_stmt|;
name|plan
operator|=
operator|new
name|InMemoryPlan
argument_list|(
name|rootQueueMetrics
argument_list|,
name|policy
argument_list|,
name|mAgent
argument_list|,
name|clusterResource
argument_list|,
name|step
argument_list|,
name|res
argument_list|,
name|minAlloc
argument_list|,
name|maxAlloc
argument_list|,
literal|"dedicated"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|runTest ()
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|IOException
throws|,
name|PlanningException
block|{
name|long
name|period
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|recurrenceExpression
operator|!=
literal|null
condition|)
block|{
name|period
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|recurrenceExpression
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|RLESparseResourceAllocation
name|rle
init|=
name|generateRLEAlloc
argument_list|(
name|period
argument_list|)
decl_stmt|;
comment|// Generate the intervalMap (trimming out-of-period entries)
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|reservationIntervalResourceMap
decl_stmt|;
if|if
condition|(
name|period
operator|>
literal|1
condition|)
block|{
name|rle
operator|=
operator|new
name|PeriodicRLESparseResourceAllocation
argument_list|(
name|rle
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|reservationIntervalResourceMap
operator|=
name|ReservationSystemTestUtil
operator|.
name|toAllocation
argument_list|(
name|rle
argument_list|,
literal|0
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reservationIntervalResourceMap
operator|=
name|ReservationSystemTestUtil
operator|.
name|toAllocation
argument_list|(
name|rle
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
name|ReservationDefinition
name|rDef
init|=
name|ReservationSystemTestUtil
operator|.
name|createSimpleReservationDefinition
argument_list|(
name|initTime
operator|%
name|period
argument_list|,
name|initTime
operator|%
name|period
operator|+
name|duration
operator|+
literal|1
argument_list|,
name|duration
argument_list|,
literal|1
argument_list|,
name|recurrenceExpression
argument_list|)
decl_stmt|;
comment|// perform multiple submissions where required
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSubmissions
condition|;
name|i
operator|++
control|)
block|{
name|long
name|rstart
init|=
name|rle
operator|.
name|getEarliestStartTime
argument_list|()
decl_stmt|;
name|long
name|rend
init|=
name|rle
operator|.
name|getLatestNonNullTime
argument_list|()
decl_stmt|;
name|InMemoryReservationAllocation
name|resAlloc
init|=
operator|new
name|InMemoryReservationAllocation
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|,
name|rDef
argument_list|,
literal|"u1"
argument_list|,
literal|"dedicated"
argument_list|,
name|rstart
argument_list|,
name|rend
argument_list|,
name|reservationIntervalResourceMap
argument_list|,
name|res
argument_list|,
name|minAlloc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|plan
operator|.
name|toString
argument_list|()
argument_list|,
name|plan
operator|.
name|addReservation
argument_list|(
name|resAlloc
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// fail if error was expected
if|if
condition|(
name|expectedError
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedError
operator|==
literal|null
operator|||
operator|!
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|.
name|equals
argument_list|(
name|expectedError
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
condition|)
block|{
comment|// fail on unexpected errors
throw|throw
name|e
throw|;
block|}
block|}
block|}
DECL|method|generateRLEAlloc (long period)
specifier|private
name|RLESparseResourceAllocation
name|generateRLEAlloc
parameter_list|(
name|long
name|period
parameter_list|)
block|{
name|RLESparseResourceAllocation
name|rle
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|alloc
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|minAlloc
argument_list|,
name|height
operator|*
name|totCont
argument_list|)
decl_stmt|;
comment|// loop in case the periodicity of the reservation is smaller than LCM
name|long
name|rStart
init|=
name|initTime
operator|%
name|period
decl_stmt|;
name|long
name|rEnd
init|=
name|initTime
operator|%
name|period
operator|+
name|duration
decl_stmt|;
comment|// handle wrap-around
if|if
condition|(
name|period
operator|>
literal|1
operator|&&
name|rEnd
operator|>
name|period
condition|)
block|{
name|long
name|diff
init|=
name|rEnd
operator|-
name|period
decl_stmt|;
name|rEnd
operator|=
name|period
expr_stmt|;
comment|// handle multiple wrap-arounds (e.g., 5h duration on a 2h periodicity)
if|if
condition|(
name|duration
operator|>
name|period
condition|)
block|{
name|rle
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
name|period
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|alloc
argument_list|,
name|duration
operator|/
name|period
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rle
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
name|diff
operator|%
name|period
argument_list|)
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rle
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
name|diff
argument_list|)
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rStart
operator|>
name|rEnd
condition|)
block|{
name|rle
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
name|rStart
argument_list|,
name|period
argument_list|)
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
name|rle
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|0
argument_list|,
name|rEnd
argument_list|)
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rle
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
name|rStart
argument_list|,
name|rEnd
argument_list|)
argument_list|,
name|alloc
argument_list|)
expr_stmt|;
block|}
return|return
name|rle
return|;
block|}
DECL|method|getInitializedPolicy ()
specifier|public
specifier|abstract
name|SharingPolicy
name|getInitializedPolicy
parameter_list|()
function_decl|;
block|}
end_class

end_unit

