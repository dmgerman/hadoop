begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnSecurityTestClientAMTokenProtos
operator|.
name|RMDelegationTokenIdentifierForTestProto
import|;
end_import

begin_class
DECL|class|RMDelegationTokenIdentifierForTest
specifier|public
class|class
name|RMDelegationTokenIdentifierForTest
extends|extends
name|RMDelegationTokenIdentifier
block|{
DECL|field|proto
specifier|private
name|RMDelegationTokenIdentifierForTestProto
name|proto
decl_stmt|;
DECL|field|builder
specifier|private
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|Builder
name|builder
decl_stmt|;
DECL|method|RMDelegationTokenIdentifierForTest ()
specifier|public
name|RMDelegationTokenIdentifierForTest
parameter_list|()
block|{   }
DECL|method|RMDelegationTokenIdentifierForTest ( RMDelegationTokenIdentifier token, String message)
specifier|public
name|RMDelegationTokenIdentifierForTest
parameter_list|(
name|RMDelegationTokenIdentifier
name|token
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|builder
operator|=
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOwner
argument_list|(
name|token
operator|.
name|getOwner
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getRenewer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRenewer
argument_list|(
name|token
operator|.
name|getRenewer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|token
operator|.
name|getRealUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setRealUser
argument_list|(
name|token
operator|.
name|getRealUser
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setIssueDate
argument_list|(
name|token
operator|.
name|getIssueDate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMaxDate
argument_list|(
name|token
operator|.
name|getMaxDate
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setSequenceNumber
argument_list|(
name|token
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMasterKeyId
argument_list|(
name|token
operator|.
name|getMasterKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write (DataOutput out)
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|write
argument_list|(
name|proto
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|readFields (DataInput in)
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|dis
init|=
operator|(
name|DataInputStream
operator|)
name|in
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|proto
operator|=
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|parseFrom
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the username encoded in the token identifier    *     * @return the username or owner    */
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|UserGroupInformation
name|getUser
parameter_list|()
block|{
name|String
name|owner
init|=
name|getOwner
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|realUser
init|=
name|getRealUser
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|owner
operator|==
literal|null
operator|)
operator|||
operator|(
name|owner
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|UserGroupInformation
name|realUgi
decl_stmt|;
specifier|final
name|UserGroupInformation
name|ugi
decl_stmt|;
if|if
condition|(
operator|(
name|realUser
operator|==
literal|null
operator|)
operator|||
operator|(
name|realUser
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|realUser
operator|.
name|equals
argument_list|(
name|owner
argument_list|)
condition|)
block|{
name|ugi
operator|=
name|realUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|owner
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|realUgi
operator|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|realUser
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ugi
operator|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|owner
operator|.
name|toString
argument_list|()
argument_list|,
name|realUgi
argument_list|)
expr_stmt|;
block|}
name|realUgi
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
return|return
name|ugi
return|;
block|}
DECL|method|getOwner ()
specifier|public
name|Text
name|getOwner
parameter_list|()
block|{
name|String
name|owner
init|=
name|proto
operator|.
name|getOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|Text
argument_list|(
name|owner
argument_list|)
return|;
block|}
block|}
DECL|method|getRenewer ()
specifier|public
name|Text
name|getRenewer
parameter_list|()
block|{
name|String
name|renewer
init|=
name|proto
operator|.
name|getRenewer
argument_list|()
decl_stmt|;
if|if
condition|(
name|renewer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
return|;
block|}
block|}
DECL|method|getRealUser ()
specifier|public
name|Text
name|getRealUser
parameter_list|()
block|{
name|String
name|realUser
init|=
name|proto
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|realUser
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|Text
argument_list|(
name|realUser
argument_list|)
return|;
block|}
block|}
DECL|method|setIssueDate (long issueDate)
specifier|public
name|void
name|setIssueDate
parameter_list|(
name|long
name|issueDate
parameter_list|)
block|{
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|Builder
name|builder
init|=
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setIssueDate
argument_list|(
name|issueDate
argument_list|)
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getIssueDate ()
specifier|public
name|long
name|getIssueDate
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getIssueDate
argument_list|()
return|;
block|}
DECL|method|setMaxDate (long maxDate)
specifier|public
name|void
name|setMaxDate
parameter_list|(
name|long
name|maxDate
parameter_list|)
block|{
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|Builder
name|builder
init|=
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setMaxDate
argument_list|(
name|maxDate
argument_list|)
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getMaxDate ()
specifier|public
name|long
name|getMaxDate
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getMaxDate
argument_list|()
return|;
block|}
DECL|method|setSequenceNumber (int seqNum)
specifier|public
name|void
name|setSequenceNumber
parameter_list|(
name|int
name|seqNum
parameter_list|)
block|{
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|Builder
name|builder
init|=
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setSequenceNumber
argument_list|(
name|seqNum
argument_list|)
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getSequenceNumber ()
specifier|public
name|int
name|getSequenceNumber
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getSequenceNumber
argument_list|()
return|;
block|}
DECL|method|setMasterKeyId (int newId)
specifier|public
name|void
name|setMasterKeyId
parameter_list|(
name|int
name|newId
parameter_list|)
block|{
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|Builder
name|builder
init|=
name|RMDelegationTokenIdentifierForTestProto
operator|.
name|newBuilder
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setMasterKeyId
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|proto
operator|=
name|builder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|getMasterKeyId ()
specifier|public
name|int
name|getMasterKeyId
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getMasterKeyId
argument_list|()
return|;
block|}
DECL|method|getMessage ()
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|proto
operator|.
name|getMessage
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals (Object obj)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|RMDelegationTokenIdentifierForTest
condition|)
block|{
name|RMDelegationTokenIdentifierForTest
name|that
init|=
operator|(
name|RMDelegationTokenIdentifierForTest
operator|)
name|obj
decl_stmt|;
return|return
name|this
operator|.
name|getSequenceNumber
argument_list|()
operator|==
name|that
operator|.
name|getSequenceNumber
argument_list|()
operator|&&
name|this
operator|.
name|getIssueDate
argument_list|()
operator|==
name|that
operator|.
name|getIssueDate
argument_list|()
operator|&&
name|this
operator|.
name|getMaxDate
argument_list|()
operator|==
name|that
operator|.
name|getMaxDate
argument_list|()
operator|&&
name|this
operator|.
name|getMasterKeyId
argument_list|()
operator|==
name|that
operator|.
name|getMasterKeyId
argument_list|()
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|getOwner
argument_list|()
argument_list|,
name|that
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|getRenewer
argument_list|()
argument_list|,
name|that
operator|.
name|getRenewer
argument_list|()
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|getRealUser
argument_list|()
argument_list|,
name|that
operator|.
name|getRealUser
argument_list|()
argument_list|)
operator|&&
name|isEqual
argument_list|(
name|this
operator|.
name|getMessage
argument_list|()
argument_list|,
name|that
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|getSequenceNumber
argument_list|()
return|;
block|}
block|}
end_class

end_unit

