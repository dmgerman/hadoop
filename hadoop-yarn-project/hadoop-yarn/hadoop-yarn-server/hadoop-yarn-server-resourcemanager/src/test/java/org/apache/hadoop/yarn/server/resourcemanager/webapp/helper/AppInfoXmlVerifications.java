begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.helper
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|helper
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|checkStringMatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|getXmlBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|getXmlFloat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|getXmlInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|getXmlLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|getXmlString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Contains all value verifications that are needed to verify {@link AppInfo}  * XML documents.  */
end_comment

begin_class
DECL|class|AppInfoXmlVerifications
specifier|public
specifier|final
class|class
name|AppInfoXmlVerifications
block|{
DECL|method|AppInfoXmlVerifications ()
specifier|private
name|AppInfoXmlVerifications
parameter_list|()
block|{
comment|//utility class
block|}
comment|/**    * Tests whether {@link AppInfo} representation object contains the required    * values as per defined in the specified app parameter.    * @param info    * @param  app  an RMApp instance that contains the required values    */
DECL|method|verify (Element info, RMApp app)
specifier|public
specifier|static
name|void
name|verify
parameter_list|(
name|Element
name|info
parameter_list|,
name|RMApp
name|app
parameter_list|)
block|{
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"user"
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"name"
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"applicationType"
argument_list|,
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"applicationType"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"queue"
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"queue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"priority doesn't match"
argument_list|,
literal|0
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"priority"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"state"
argument_list|,
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"finalStatus"
argument_list|,
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"finalStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"progress doesn't match"
argument_list|,
literal|0
argument_list|,
name|getXmlFloat
argument_list|(
name|info
argument_list|,
literal|"progress"
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"UNASSIGNED"
operator|.
name|equals
argument_list|(
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"trackingUI"
argument_list|)
argument_list|)
condition|)
block|{
name|checkStringMatch
argument_list|(
literal|"trackingUI"
argument_list|,
literal|"UNASSIGNED"
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"trackingUI"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"diagnostics"
argument_list|,
name|app
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"diagnostics"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"clusterId doesn't match"
argument_list|,
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|,
name|getXmlLong
argument_list|(
name|info
argument_list|,
literal|"clusterId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"startedTime doesn't match"
argument_list|,
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|getXmlLong
argument_list|(
name|info
argument_list|,
literal|"startedTime"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"finishedTime doesn't match"
argument_list|,
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|getXmlLong
argument_list|(
name|info
argument_list|,
literal|"finishedTime"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"elapsed time not greater than 0"
argument_list|,
name|getXmlLong
argument_list|(
name|info
argument_list|,
literal|"elapsedTime"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|checkStringMatch
argument_list|(
literal|"amHostHttpAddress"
argument_list|,
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"amHostHttpAddress"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"amContainerLogs doesn't match"
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"amContainerLogs"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"amContainerLogs doesn't contain user info"
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"amContainerLogs"
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocatedMB doesn't match"
argument_list|,
literal|1024
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"allocatedMB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocatedVCores doesn't match"
argument_list|,
literal|1
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"allocatedVCores"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queueUsagePerc doesn't match"
argument_list|,
literal|50.0f
argument_list|,
name|getXmlFloat
argument_list|(
name|info
argument_list|,
literal|"queueUsagePercentage"
argument_list|)
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"clusterUsagePerc doesn't match"
argument_list|,
literal|50.0f
argument_list|,
name|getXmlFloat
argument_list|(
name|info
argument_list|,
literal|"clusterUsagePercentage"
argument_list|)
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numContainers doesn't match"
argument_list|,
literal|1
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"runningContainers"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"preemptedResourceSecondsMap should not be null"
argument_list|,
name|info
operator|.
name|getElementsByTagName
argument_list|(
literal|"preemptedResourceSecondsMap"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptedResourceMB doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getResourcePreempted
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"preemptedResourceMB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptedResourceVCores doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getResourcePreempted
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"preemptedResourceVCores"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numNonAMContainerPreempted doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getNumNonAMContainersPreempted
argument_list|()
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"numNonAMContainerPreempted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numAMContainerPreempted doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getNumAMContainersPreempted
argument_list|()
argument_list|,
name|getXmlInt
argument_list|(
name|info
argument_list|,
literal|"numAMContainerPreempted"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Log aggregation Status doesn't match"
argument_list|,
name|app
operator|.
name|getLogAggregationStatusForAppReport
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"logAggregationStatus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unmanagedApplication doesn't match"
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|,
name|getXmlBoolean
argument_list|(
name|info
argument_list|,
literal|"unmanagedApplication"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unmanagedApplication doesn't match"
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"appNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unmanagedApplication doesn't match"
argument_list|,
name|app
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"amNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"amRPCAddress"
argument_list|,
name|AppInfo
operator|.
name|getAmRPCAddressFromRMAppAttempt
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
argument_list|,
name|getXmlString
argument_list|(
name|info
argument_list|,
literal|"amRPCAddress"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

