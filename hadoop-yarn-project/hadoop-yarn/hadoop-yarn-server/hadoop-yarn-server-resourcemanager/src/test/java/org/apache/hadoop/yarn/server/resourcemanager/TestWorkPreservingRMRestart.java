begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestRMRestart
operator|.
name|TestSecurityMockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|ParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|DelegationTokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestWorkPreservingRMRestart
specifier|public
class|class
name|TestWorkPreservingRMRestart
extends|extends
name|ParameterizedSchedulerTestBase
block|{
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|rm1
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|;
DECL|field|rm2
name|MockRM
name|rm2
init|=
literal|null
decl_stmt|;
DECL|method|TestWorkPreservingRMRestart (SchedulerType type)
specifier|public
name|TestWorkPreservingRMRestart
parameter_list|(
name|SchedulerType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|conf
operator|=
name|getConf
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rm2
operator|!=
literal|null
condition|)
block|{
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test common scheduler state including SchedulerAttempt, SchedulerNode,
comment|// AppSchedulingInfo can be reconstructed via the container recovery reports
comment|// on NM re-registration.
comment|// Also test scheduler specific changes: i.e. Queue recovery-
comment|// CSQueue/FSQueue/FifoQueue recovery respectively.
comment|// Test Strategy: send 3 container recovery reports(AMContainer, running
comment|// container, completed container) on NM re-registration, check the states of
comment|// SchedulerAttempt, SchedulerNode etc. are updated accordingly.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testSchedulerRecovery ()
specifier|public
name|void
name|testSchedulerRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ENABLE_USER_METRICS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|RESOURCE_CALCULATOR_CLASS
argument_list|,
name|DominantResourceCalculator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|containerMemory
init|=
literal|1024
decl_stmt|;
name|Resource
name|containerResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|containerMemory
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// clear queue metrics
name|rm1
operator|.
name|clearQueueMetrics
argument_list|(
name|app1
argument_list|)
expr_stmt|;
comment|// Re-start RM
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// recover app
name|RMApp
name|recoveredApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|loadedAttempt1
init|=
name|recoveredApp1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|NMContainerStatus
name|amContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|runningContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|completedContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|amContainer
argument_list|,
name|runningContainer
argument_list|,
name|completedContainer
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Wait for RM to settle down on recovering containers;
name|waitForNumContainersToRecover
argument_list|(
literal|2
argument_list|,
name|rm2
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|launchedContainers
init|=
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|)
operator|.
name|getLaunchedContainers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|launchedContainers
operator|.
name|contains
argument_list|(
name|amContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|launchedContainers
operator|.
name|contains
argument_list|(
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check RMContainers are re-recreated and the container state is correct.
name|rm2
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|amContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForContainerToComplete
argument_list|(
name|loadedAttempt1
argument_list|,
name|completedContainer
argument_list|)
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"SchedulerNode#toString is not in expected format"
argument_list|,
name|schedulerNode1
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|schedulerNode1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"SchedulerNode#toString is not in expected format"
argument_list|,
name|schedulerNode1
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|schedulerNode1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// ********* check scheduler node state.*******
comment|// 2 running containers.
name|Resource
name|usedResources
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|containerResource
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|nmResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|nm1
operator|.
name|getMemory
argument_list|()
argument_list|,
name|nm1
operator|.
name|getvCores
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|schedulerNode1
operator|.
name|isValidContainer
argument_list|(
name|amContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|schedulerNode1
operator|.
name|isValidContainer
argument_list|(
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|schedulerNode1
operator|.
name|isValidContainer
argument_list|(
name|completedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 launched containers, 1 completed container
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerNode1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|nmResource
argument_list|,
name|usedResources
argument_list|)
argument_list|,
name|schedulerNode1
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|usedResources
argument_list|,
name|schedulerNode1
operator|.
name|getUsedResource
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|availableResources
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|nmResource
argument_list|,
name|usedResources
argument_list|)
decl_stmt|;
comment|// ***** check queue state based on the underlying scheduler ********
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|>
name|schedulerApps
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulerApplications
argument_list|()
decl_stmt|;
name|SchedulerApplication
name|schedulerApp
init|=
name|schedulerApps
operator|.
name|get
argument_list|(
name|recoveredApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|==
name|SchedulerType
operator|.
name|CAPACITY
condition|)
block|{
name|checkCSQueue
argument_list|(
name|rm2
argument_list|,
name|schedulerApp
argument_list|,
name|nmResource
argument_list|,
name|nmResource
argument_list|,
name|usedResources
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkFSQueue
argument_list|(
name|rm2
argument_list|,
name|schedulerApp
argument_list|,
name|usedResources
argument_list|,
name|availableResources
argument_list|)
expr_stmt|;
block|}
comment|// *********** check scheduler attempt state.********
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
name|schedulerApp
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|schedulerAttempt
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|contains
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|amContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|schedulerAttempt
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|contains
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schedulerAttempt
operator|.
name|getCurrentConsumption
argument_list|()
argument_list|,
name|usedResources
argument_list|)
expr_stmt|;
comment|// *********** check appSchedulingInfo state ***********
name|assertEquals
argument_list|(
operator|(
literal|1L
operator|<<
literal|40
operator|)
operator|+
literal|1L
argument_list|,
name|schedulerAttempt
operator|.
name|getNewContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCSQueue (MockRM rm, SchedulerApplication<SchedulerApplicationAttempt> app, Resource clusterResource, Resource queueResource, Resource usedResource, int numContainers)
specifier|private
name|void
name|checkCSQueue
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|SchedulerApplication
argument_list|<
name|SchedulerApplicationAttempt
argument_list|>
name|app
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|queueResource
parameter_list|,
name|Resource
name|usedResource
parameter_list|,
name|int
name|numContainers
parameter_list|)
throws|throws
name|Exception
block|{
name|checkCSLeafQueue
argument_list|(
name|rm
argument_list|,
name|app
argument_list|,
name|clusterResource
argument_list|,
name|queueResource
argument_list|,
name|usedResource
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
name|LeafQueue
name|queue
init|=
operator|(
name|LeafQueue
operator|)
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|Resource
name|availableResources
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|queueResource
argument_list|,
name|usedResource
argument_list|)
decl_stmt|;
comment|// ************ check app headroom ****************
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|availableResources
argument_list|,
name|schedulerAttempt
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
comment|// ************* check Queue metrics ************
name|QueueMetrics
name|queueMetrics
init|=
name|queue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertMetrics
argument_list|(
name|queueMetrics
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|availableResources
operator|.
name|getMemory
argument_list|()
argument_list|,
name|availableResources
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|usedResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|usedResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// ************ check user metrics ***********
name|QueueMetrics
name|userMetrics
init|=
name|queueMetrics
operator|.
name|getUserMetrics
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|assertMetrics
argument_list|(
name|userMetrics
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|availableResources
operator|.
name|getMemory
argument_list|()
argument_list|,
name|availableResources
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|usedResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|usedResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCSLeafQueue (MockRM rm, SchedulerApplication<SchedulerApplicationAttempt> app, Resource clusterResource, Resource queueResource, Resource usedResource, int numContainers)
specifier|private
name|void
name|checkCSLeafQueue
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|SchedulerApplication
argument_list|<
name|SchedulerApplicationAttempt
argument_list|>
name|app
parameter_list|,
name|Resource
name|clusterResource
parameter_list|,
name|Resource
name|queueResource
parameter_list|,
name|Resource
name|usedResource
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
comment|// assert queue used resources.
name|assertEquals
argument_list|(
name|usedResource
argument_list|,
name|leafQueue
operator|.
name|getUsedResources
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numContainers
argument_list|,
name|leafQueue
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceCalculator
name|calc
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|float
name|usedCapacity
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|calc
argument_list|,
name|clusterResource
argument_list|,
name|usedResource
argument_list|,
name|queueResource
argument_list|)
decl_stmt|;
comment|// assert queue used capacity
name|assertEquals
argument_list|(
name|usedCapacity
argument_list|,
name|leafQueue
operator|.
name|getUsedCapacity
argument_list|()
argument_list|,
literal|1e-8
argument_list|)
expr_stmt|;
name|float
name|absoluteUsedCapacity
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|calc
argument_list|,
name|clusterResource
argument_list|,
name|usedResource
argument_list|,
name|clusterResource
argument_list|)
decl_stmt|;
comment|// assert queue absolute capacity
name|assertEquals
argument_list|(
name|absoluteUsedCapacity
argument_list|,
name|leafQueue
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
argument_list|,
literal|1e-8
argument_list|)
expr_stmt|;
comment|// assert user consumed resources.
name|assertEquals
argument_list|(
name|usedResource
argument_list|,
name|leafQueue
operator|.
name|getUser
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|getUsed
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFSQueue (ResourceManager rm, SchedulerApplication schedulerApp, Resource usedResources, Resource availableResources)
specifier|private
name|void
name|checkFSQueue
parameter_list|(
name|ResourceManager
name|rm
parameter_list|,
name|SchedulerApplication
name|schedulerApp
parameter_list|,
name|Resource
name|usedResources
parameter_list|,
name|Resource
name|availableResources
parameter_list|)
throws|throws
name|Exception
block|{
comment|// waiting for RM's scheduling apps
name|int
name|retry
init|=
literal|0
decl_stmt|;
name|Resource
name|assumedFairShare
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|assumedFairShare
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|FairScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getFairShare
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|retry
operator|++
expr_stmt|;
if|if
condition|(
name|retry
operator|>
literal|30
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Apps are not scheduled within assumed timeout"
argument_list|)
expr_stmt|;
block|}
block|}
name|FairScheduler
name|scheduler
init|=
operator|(
name|FairScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|FSParentQueue
name|root
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
comment|// ************ check cluster used Resources ********
name|assertTrue
argument_list|(
name|root
operator|.
name|getPolicy
argument_list|()
operator|instanceof
name|DominantResourceFairnessPolicy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|usedResources
argument_list|,
name|root
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// ************ check app headroom ****************
name|FSAppAttempt
name|schedulerAttempt
init|=
operator|(
name|FSAppAttempt
operator|)
name|schedulerApp
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|availableResources
argument_list|,
name|schedulerAttempt
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
comment|// ************ check queue metrics ****************
name|QueueMetrics
name|queueMetrics
init|=
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
name|assertMetrics
argument_list|(
name|queueMetrics
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|availableResources
operator|.
name|getMemory
argument_list|()
argument_list|,
name|availableResources
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|usedResources
operator|.
name|getMemory
argument_list|()
argument_list|,
name|usedResources
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// create 3 container reports for AM
specifier|public
specifier|static
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
DECL|method|createNMContainerStatusForApp (MockAM am)
name|createNMContainerStatusForApp
parameter_list|(
name|MockAM
name|am
parameter_list|)
block|{
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|NMContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|NMContainerStatus
name|amContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|runningContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|completedContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|runningContainer
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|completedContainer
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
DECL|field|R
specifier|private
specifier|static
specifier|final
name|String
name|R
init|=
literal|"Default"
decl_stmt|;
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
literal|"QueueA"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
literal|"QueueB"
decl_stmt|;
comment|//don't ever create the below queue ;-)
DECL|field|QUEUE_DOESNT_EXIST
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_DOESNT_EXIST
init|=
literal|"NoSuchQueue"
decl_stmt|;
DECL|field|USER_1
specifier|private
specifier|static
specifier|final
name|String
name|USER_1
init|=
literal|"user1"
decl_stmt|;
DECL|field|USER_2
specifier|private
specifier|static
specifier|final
name|String
name|USER_2
init|=
literal|"user2"
decl_stmt|;
DECL|method|setupQueueConfiguration (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|R
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_R
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|R
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_R
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|Q_R
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|Q_R
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_R
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueueConfigurationOnlyA ( CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfigurationOnlyA
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|R
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_R
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|R
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_R
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|Q_R
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_R
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
comment|// Test CS recovery with multi-level queues and multi-users:
comment|// 1. setup 2 NMs each with 8GB memory;
comment|// 2. setup 2 level queues: Default -> (QueueA, QueueB)
comment|// 3. User1 submits 2 apps on QueueA
comment|// 4. User2 submits 1 app  on QueueB
comment|// 5. AM and each container has 1GB memory
comment|// 6. Restart RM.
comment|// 7. nm1 re-syncs back containers belong to user1
comment|// 8. nm2 re-syncs back containers belong to user2.
comment|// 9. Assert the parent queue and 2 leaf queues state and the metrics.
comment|// 10. Assert each user's consumption inside the queue.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCapacitySchedulerRecovery ()
specifier|public
name|void
name|testCapacitySchedulerRecovery
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|!=
name|SchedulerType
operator|.
name|CAPACITY
condition|)
block|{
return|return;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ENABLE_USER_METRICS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|RESOURCE_CALCULATOR_CLASS
argument_list|,
name|DominantResourceCalculator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.1.1.1:4321"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1_1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app1_1"
argument_list|,
name|USER_1
argument_list|,
literal|null
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|MockAM
name|am1_1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1_1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMApp
name|app1_2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app1_2"
argument_list|,
name|USER_1
argument_list|,
literal|null
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|MockAM
name|am1_2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1_2
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app2"
argument_list|,
name|USER_2
argument_list|,
literal|null
argument_list|,
name|B
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// clear queue metrics
name|rm1
operator|.
name|clearQueueMetrics
argument_list|(
name|app1_1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|clearQueueMetrics
argument_list|(
name|app1_2
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|clearQueueMetrics
argument_list|(
name|app2
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.root.Default.QueueB.state"
argument_list|,
literal|"STOPPED"
argument_list|)
expr_stmt|;
comment|// Re-start RM
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|am1_1Containers
init|=
name|createNMContainerStatusForApp
argument_list|(
name|am1_1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|am1_2Containers
init|=
name|createNMContainerStatusForApp
argument_list|(
name|am1_2
argument_list|)
decl_stmt|;
name|am1_1Containers
operator|.
name|addAll
argument_list|(
name|am1_2Containers
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|am1_1Containers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|am2Containers
init|=
name|createNMContainerStatusForApp
argument_list|(
name|am2
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|(
name|am2Containers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Wait for RM to settle down on recovering containers;
name|waitForNumContainersToRecover
argument_list|(
literal|2
argument_list|,
name|rm2
argument_list|,
name|am1_1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|waitForNumContainersToRecover
argument_list|(
literal|2
argument_list|,
name|rm2
argument_list|,
name|am1_2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|waitForNumContainersToRecover
argument_list|(
literal|2
argument_list|,
name|rm2
argument_list|,
name|am1_2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Calculate each queue's resource usage.
name|Resource
name|containerResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|nmResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|nm1
operator|.
name|getMemory
argument_list|()
argument_list|,
name|nm1
operator|.
name|getvCores
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|nmResource
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|q1Resource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.5
argument_list|)
decl_stmt|;
name|Resource
name|q2Resource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.5
argument_list|)
decl_stmt|;
name|Resource
name|q1UsedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|containerResource
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Resource
name|q2UsedResource
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|containerResource
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|totalUsedResource
init|=
name|Resources
operator|.
name|add
argument_list|(
name|q1UsedResource
argument_list|,
name|q2UsedResource
argument_list|)
decl_stmt|;
name|Resource
name|q1availableResources
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|q1Resource
argument_list|,
name|q1UsedResource
argument_list|)
decl_stmt|;
name|Resource
name|q2availableResources
init|=
name|Resources
operator|.
name|subtract
argument_list|(
name|q2Resource
argument_list|,
name|q2UsedResource
argument_list|)
decl_stmt|;
name|Resource
name|totalAvailableResource
init|=
name|Resources
operator|.
name|add
argument_list|(
name|q1availableResources
argument_list|,
name|q2availableResources
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|>
name|schedulerApps
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulerApplications
argument_list|()
decl_stmt|;
name|SchedulerApplication
name|schedulerApp1_1
init|=
name|schedulerApps
operator|.
name|get
argument_list|(
name|app1_1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// assert queue A state.
name|checkCSLeafQueue
argument_list|(
name|rm2
argument_list|,
name|schedulerApp1_1
argument_list|,
name|clusterResource
argument_list|,
name|q1Resource
argument_list|,
name|q1UsedResource
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QueueMetrics
name|queue1Metrics
init|=
name|schedulerApp1_1
operator|.
name|getQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertMetrics
argument_list|(
name|queue1Metrics
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|q1availableResources
operator|.
name|getMemory
argument_list|()
argument_list|,
name|q1availableResources
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|q1UsedResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|q1UsedResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert queue B state.
name|SchedulerApplication
name|schedulerApp2
init|=
name|schedulerApps
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|checkCSLeafQueue
argument_list|(
name|rm2
argument_list|,
name|schedulerApp2
argument_list|,
name|clusterResource
argument_list|,
name|q2Resource
argument_list|,
name|q2UsedResource
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QueueMetrics
name|queue2Metrics
init|=
name|schedulerApp2
operator|.
name|getQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertMetrics
argument_list|(
name|queue2Metrics
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|q2availableResources
operator|.
name|getMemory
argument_list|()
argument_list|,
name|q2availableResources
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|q2UsedResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|q2UsedResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert parent queue state.
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|schedulerApp2
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|ParentQueue
name|parentQueue
init|=
operator|(
name|ParentQueue
operator|)
name|leafQueue
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|checkParentQueue
argument_list|(
name|parentQueue
argument_list|,
literal|6
argument_list|,
name|totalUsedResource
argument_list|,
operator|(
name|float
operator|)
literal|6
operator|/
literal|16
argument_list|,
operator|(
name|float
operator|)
literal|6
operator|/
literal|16
argument_list|)
expr_stmt|;
name|assertMetrics
argument_list|(
name|parentQueue
operator|.
name|getMetrics
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
name|totalAvailableResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|totalAvailableResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|totalUsedResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|totalUsedResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Test that we receive a meaningful exit-causing exception if a queue
comment|//is removed during recovery
comment|//1. Add some apps to two queues, attempt to add an app to a non-existant
comment|//   queue to verify that the new logic is not in effect during normal app
comment|//   submission
comment|//2. Remove one of the queues, restart the RM
comment|//3. Verify that the expected exception was thrown
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|,
name|expected
operator|=
name|QueueNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testCapacitySchedulerQueueRemovedRecovery ()
specifier|public
name|void
name|testCapacitySchedulerQueueRemovedRecovery
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|!=
name|SchedulerType
operator|.
name|CAPACITY
condition|)
block|{
throw|throw
operator|new
name|QueueNotFoundException
argument_list|(
literal|"Dummy"
argument_list|)
throw|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ENABLE_USER_METRICS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|RESOURCE_CALCULATOR_CLASS
argument_list|,
name|DominantResourceCalculator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.1.1.1:4321"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1_1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app1_1"
argument_list|,
name|USER_1
argument_list|,
literal|null
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|MockAM
name|am1_1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1_1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMApp
name|app1_2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app1_2"
argument_list|,
name|USER_1
argument_list|,
literal|null
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|MockAM
name|am1_2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1_2
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app2"
argument_list|,
name|USER_2
argument_list|,
literal|null
argument_list|,
name|B
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|//Submit an app with a non existant queue to make sure it does not
comment|//cause a fatal failure in the non-recovery case
name|RMApp
name|appNA
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app1_2"
argument_list|,
name|USER_1
argument_list|,
literal|null
argument_list|,
name|QUEUE_DOESNT_EXIST
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// clear queue metrics
name|rm1
operator|.
name|clearQueueMetrics
argument_list|(
name|app1_1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|clearQueueMetrics
argument_list|(
name|app1_2
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|clearQueueMetrics
argument_list|(
name|app2
argument_list|)
expr_stmt|;
comment|// Re-start RM
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setupQueueConfigurationOnlyA
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|checkParentQueue (ParentQueue parentQueue, int numContainers, Resource usedResource, float UsedCapacity, float absoluteUsedCapacity)
specifier|private
name|void
name|checkParentQueue
parameter_list|(
name|ParentQueue
name|parentQueue
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|Resource
name|usedResource
parameter_list|,
name|float
name|UsedCapacity
parameter_list|,
name|float
name|absoluteUsedCapacity
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|numContainers
argument_list|,
name|parentQueue
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|usedResource
argument_list|,
name|parentQueue
operator|.
name|getUsedResources
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UsedCapacity
argument_list|,
name|parentQueue
operator|.
name|getUsedCapacity
argument_list|()
argument_list|,
literal|1e-8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|absoluteUsedCapacity
argument_list|,
name|parentQueue
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
argument_list|,
literal|1e-8
argument_list|)
expr_stmt|;
block|}
comment|// Test RM shuts down, in the meanwhile, AM fails. Restarted RM scheduler
comment|// should not recover the containers that belong to the failed AM.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAMfailedBetweenRMRestart ()
specifier|public
name|void
name|testAMfailedBetweenRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|amContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|runningContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|completedContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|amContainer
argument_list|,
name|runningContainer
argument_list|,
name|completedContainer
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// Wait for RM to settle down on recovering containers;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Previous AM failed, The failed AM should once again release the
comment|// just-recovered containers.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|completedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.1.1.1:4321"
argument_list|,
literal|8192
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|previousAttemptContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|4
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|previousAttemptContainer
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Wait for RM to settle down on recovering containers;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|// check containers from previous failed attempt should not be recovered.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|previousAttemptContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Apps already completed before RM restart. Restarted RM scheduler should not
comment|// recover containers for completed apps.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testContainersNotRecoveredForCompletedApps ()
specifier|public
name|void
name|testContainersNotRecoveredForCompletedApps
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|)
expr_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|runningContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|completedContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|runningContainer
argument_list|,
name|completedContainer
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RMApp
name|recoveredApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|recoveredApp1
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for RM to settle down on recovering containers;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// scheduler should not recover containers for finished apps.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|completedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testAppReregisterOnRMWorkPreservingRestart ()
specifier|public
name|void
name|testAppReregisterOnRMWorkPreservingRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start RM
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Issuing registerAppAttempt() before and after RM restart to confirm
comment|// registerApplicationMaster() is idempotent.
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// start new RM
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|am0
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// retry registerApplicationMaster() after RM restart.
name|am0
operator|.
name|registerAppAttempt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAMContainerStatusWithRMRestart ()
specifier|public
name|void
name|testAMContainerStatusWithRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1_1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|MockAM
name|am1_1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1_1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt0
init|=
name|app1_1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|attempt0
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isAMContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Re-start RM
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|am1_1Containers
init|=
name|createNMContainerStatusForApp
argument_list|(
name|am1_1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|am1_1Containers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Wait for RM to settle down on recovering containers;
name|waitForNumContainersToRecover
argument_list|(
literal|2
argument_list|,
name|rm2
argument_list|,
name|am1_1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|attempt0
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|isAMContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRecoverSchedulerAppAndAttemptSynchronously ()
specifier|public
name|void
name|testRecoverSchedulerAppAndAttemptSynchronously
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start RM
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// scheduler app/attempt is immediately available after RM is re-started.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getSchedulerAppInfo
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// getTransferredContainers should not throw NPE.
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getTransferredContainers
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containers
init|=
name|createNMContainerStatusForApp
argument_list|(
name|am0
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|containers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|waitForNumContainersToRecover
argument_list|(
literal|2
argument_list|,
name|rm2
argument_list|,
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test if RM on recovery receives the container release request from AM
comment|// before it receives the container status reported by NM for recovery. this
comment|// container should not be recovered.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testReleasedContainerNotRecovered ()
specifier|public
name|void
name|testReleasedContainerNotRecovered
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
specifier|final
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Re-start RM
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
literal|8000
argument_list|)
expr_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|am1
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// try to release a container before the container is actually recovered.
specifier|final
name|ContainerId
name|runningContainer
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|runningContainer
argument_list|)
argument_list|)
expr_stmt|;
comment|// send container statuses to recover the containers
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerStatuses
init|=
name|createNMContainerStatusForApp
argument_list|(
name|am1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|containerStatuses
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// only the am container should be recovered.
name|waitForNumContainersToRecover
argument_list|(
literal|1
argument_list|,
name|rm2
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// cached release request is cleaned.
comment|// assertFalse(scheduler.getPendingRelease().contains(runningContainer));
name|AllocateResponse
name|response
init|=
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// AM gets notified of the completed container.
name|boolean
name|receivedCompletedContainer
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|runningContainer
argument_list|)
condition|)
block|{
name|receivedCompletedContainer
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|receivedCompletedContainer
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
comment|// release cache is cleaned up and previous running container is not
comment|// recovered
return|return
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|runningContainer
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMetrics (QueueMetrics qm, int appsSubmitted, int appsPending, int appsRunning, int appsCompleted, int allocatedContainers, int availableMB, int availableVirtualCores, int allocatedMB, int allocatedVirtualCores)
specifier|private
name|void
name|assertMetrics
parameter_list|(
name|QueueMetrics
name|qm
parameter_list|,
name|int
name|appsSubmitted
parameter_list|,
name|int
name|appsPending
parameter_list|,
name|int
name|appsRunning
parameter_list|,
name|int
name|appsCompleted
parameter_list|,
name|int
name|allocatedContainers
parameter_list|,
name|int
name|availableMB
parameter_list|,
name|int
name|availableVirtualCores
parameter_list|,
name|int
name|allocatedMB
parameter_list|,
name|int
name|allocatedVirtualCores
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|appsSubmitted
argument_list|,
name|qm
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appsPending
argument_list|,
name|qm
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appsRunning
argument_list|,
name|qm
operator|.
name|getAppsRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appsCompleted
argument_list|,
name|qm
operator|.
name|getAppsCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocatedContainers
argument_list|,
name|qm
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|availableMB
argument_list|,
name|qm
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|availableVirtualCores
argument_list|,
name|qm
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocatedMB
argument_list|,
name|qm
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocatedVirtualCores
argument_list|,
name|qm
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumContainersToRecover (int num, MockRM rm, ApplicationAttemptId attemptId)
specifier|public
specifier|static
name|void
name|waitForNumContainersToRecover
parameter_list|(
name|int
name|num
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|Exception
block|{
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerApplicationAttempt
name|attempt
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
while|while
condition|(
name|attempt
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wait for scheduler attempt "
operator|+
name|attemptId
operator|+
literal|" to be created"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|attempt
operator|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|attempt
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|num
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wait for "
operator|+
name|num
operator|+
literal|" containers to recover. currently: "
operator|+
name|attempt
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testNewContainersNotAllocatedDuringSchedulerRecovery ()
specifier|public
name|void
name|testNewContainersNotAllocatedDuringSchedulerRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Restart RM
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|(
operator|new
name|SystemClock
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
operator|(
operator|(
name|RMContextImpl
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|)
operator|.
name|setSystemClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|am1
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// AM request for new containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|startTime
operator|+
literal|2000
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// sleep some time as allocation happens asynchronously.
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// container is not allocated during scheduling recovery.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
name|startTime
operator|+
literal|8000
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Container is created after recovery is done.
while|while
condition|(
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|containers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Testing to confirm that retried finishApplicationMaster() doesn't throw    * InvalidApplicationMasterRequest before and after RM restart.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRetriedFinishApplicationMasterRequest ()
specifier|public
name|void
name|testRetriedFinishApplicationMasterRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start RM
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// Emulating following a scenario:
comment|// RM1 saves the app in RMStateStore and then crashes,
comment|// FinishApplicationMasterResponse#isRegistered still return false,
comment|// so AM still retry the 2nd RM
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|)
expr_stmt|;
comment|// start new RM
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|am0
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|am0
operator|.
name|unregisterAppAttempt
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppFailedToRenewTokenOnRecovery ()
specifier|public
name|void
name|testAppFailedToRenewTokenOnRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
block|{
specifier|protected
name|DelegationTokenRenewer
name|createDelegationTokenRenewer
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenRenewer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addApplicationSync
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Token renew failed !!"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|NMContainerStatus
name|containerStatus
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|containerStatus
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// am re-register
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|am1
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Because the token expired, am could crash.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

