begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|ResourceOverCommitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * This clas tests {@code NoOverCommitPolicy} sharing policy.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|NotThreadSafe
annotation|@
name|SuppressWarnings
argument_list|(
literal|"VisibilityModifier"
argument_list|)
DECL|class|TestNoOverCommitPolicy
specifier|public
class|class
name|TestNoOverCommitPolicy
extends|extends
name|BaseSharingPolicyTest
block|{
DECL|field|ONEHOUR
specifier|final
specifier|static
name|long
name|ONEHOUR
init|=
literal|3600
operator|*
literal|1000
decl_stmt|;
DECL|field|TWOHOURPERIOD
specifier|final
specifier|static
name|String
name|TWOHOURPERIOD
init|=
literal|"7200000"
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"Duration {0}, height {1},"
operator|+
literal|" submissions {2}, periodic {3})"
argument_list|)
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// easy fit
block|{
name|ONEHOUR
block|,
literal|0.25
block|,
literal|1
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
name|ONEHOUR
block|,
literal|0.25
block|,
literal|1
block|,
name|TWOHOURPERIOD
block|,
literal|null
block|}
block|,
comment|// barely fit
block|{
name|ONEHOUR
block|,
literal|1
block|,
literal|1
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
name|ONEHOUR
block|,
literal|1
block|,
literal|1
block|,
name|TWOHOURPERIOD
block|,
literal|null
block|}
block|,
comment|// overcommit with single reservation
block|{
name|ONEHOUR
block|,
literal|1.1
block|,
literal|1
block|,
literal|null
block|,
name|ResourceOverCommitException
operator|.
name|class
block|}
block|,
block|{
name|ONEHOUR
block|,
literal|1.1
block|,
literal|1
block|,
name|TWOHOURPERIOD
block|,
name|ResourceOverCommitException
operator|.
name|class
block|}
block|,
comment|// barely fit with multiple reservations
block|{
name|ONEHOUR
block|,
literal|0.25
block|,
literal|4
block|,
literal|null
block|,
literal|null
block|}
block|,
block|{
name|ONEHOUR
block|,
literal|0.25
block|,
literal|4
block|,
name|TWOHOURPERIOD
block|,
literal|null
block|}
block|,
comment|// overcommit with multiple reservations
block|{
name|ONEHOUR
block|,
literal|0.25
block|,
literal|5
block|,
literal|null
block|,
name|ResourceOverCommitException
operator|.
name|class
block|}
block|,
block|{
name|ONEHOUR
block|,
literal|0.25
block|,
literal|5
block|,
name|TWOHOURPERIOD
block|,
name|ResourceOverCommitException
operator|.
name|class
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getInitializedPolicy ()
specifier|public
name|SharingPolicy
name|getInitializedPolicy
parameter_list|()
block|{
name|String
name|reservationQ
init|=
name|ReservationSystemTestUtil
operator|.
name|getFullReservationQueueName
argument_list|()
decl_stmt|;
name|conf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|SharingPolicy
name|policy
init|=
operator|new
name|NoOverCommitPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|reservationQ
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
annotation|@
name|Test
DECL|method|testAllocation ()
specifier|public
name|void
name|testAllocation
parameter_list|()
throws|throws
name|IOException
throws|,
name|PlanningException
block|{
name|runTest
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

