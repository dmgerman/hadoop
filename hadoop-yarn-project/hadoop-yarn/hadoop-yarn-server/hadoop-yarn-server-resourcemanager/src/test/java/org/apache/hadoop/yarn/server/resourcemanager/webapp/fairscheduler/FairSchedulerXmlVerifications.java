begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp.fairscheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|fairscheduler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|helper
operator|.
name|XmlCustomResourceTypeTestCase
operator|.
name|toXml
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|getXmlLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|getXmlString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * This test helper class is primarily used by  * {@link TestRMWebServicesFairSchedulerCustomResourceTypes}.  */
end_comment

begin_class
DECL|class|FairSchedulerXmlVerifications
specifier|public
class|class
name|FairSchedulerXmlVerifications
block|{
DECL|field|RESOURCE_FIELDS
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|RESOURCE_FIELDS
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"minResources"
argument_list|,
literal|"amUsedResources"
argument_list|,
literal|"amMaxResources"
argument_list|,
literal|"fairResources"
argument_list|,
literal|"clusterResources"
argument_list|,
literal|"reservedResources"
argument_list|,
literal|"maxResources"
argument_list|,
literal|"usedResources"
argument_list|,
literal|"steadyFairResources"
argument_list|,
literal|"demandResources"
argument_list|)
decl_stmt|;
DECL|field|customResourceTypes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|customResourceTypes
decl_stmt|;
DECL|method|FairSchedulerXmlVerifications (List<String> customResourceTypes)
name|FairSchedulerXmlVerifications
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|customResourceTypes
parameter_list|)
block|{
name|this
operator|.
name|customResourceTypes
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|customResourceTypes
argument_list|)
expr_stmt|;
block|}
DECL|method|verify (Element element)
specifier|public
name|void
name|verify
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|verifyResourcesContainDefaultResourceTypes
argument_list|(
name|element
argument_list|,
name|RESOURCE_FIELDS
argument_list|)
expr_stmt|;
name|verifyResourcesContainCustomResourceTypes
argument_list|(
name|element
argument_list|,
name|RESOURCE_FIELDS
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyResourcesContainDefaultResourceTypes (Element queue, Set<String> resourceCategories)
specifier|private
name|void
name|verifyResourcesContainDefaultResourceTypes
parameter_list|(
name|Element
name|queue
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|resourceCategories
parameter_list|)
block|{
for|for
control|(
name|String
name|resourceCategory
range|:
name|resourceCategories
control|)
block|{
name|boolean
name|hasResourceCategory
init|=
name|hasChild
argument_list|(
name|queue
argument_list|,
name|resourceCategory
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Queue "
operator|+
name|queue
operator|+
literal|" does not have resource category key: "
operator|+
name|resourceCategory
argument_list|,
name|hasResourceCategory
argument_list|)
expr_stmt|;
name|verifyResourceContainsDefaultResourceTypes
argument_list|(
operator|(
name|Element
operator|)
name|queue
operator|.
name|getElementsByTagName
argument_list|(
name|resourceCategory
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyResourceContainsDefaultResourceTypes ( Element element)
specifier|private
name|void
name|verifyResourceContainsDefaultResourceTypes
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|Object
name|memory
init|=
name|opt
argument_list|(
name|element
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
name|Object
name|vCores
init|=
name|opt
argument_list|(
name|element
argument_list|,
literal|"vCores"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Key 'memory' not found in: "
operator|+
name|element
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Key 'vCores' not found in: "
operator|+
name|element
argument_list|,
name|vCores
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyResourcesContainCustomResourceTypes (Element queue, Set<String> resourceCategories)
specifier|private
name|void
name|verifyResourcesContainCustomResourceTypes
parameter_list|(
name|Element
name|queue
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|resourceCategories
parameter_list|)
block|{
for|for
control|(
name|String
name|resourceCategory
range|:
name|resourceCategories
control|)
block|{
name|assertTrue
argument_list|(
literal|"Queue "
operator|+
name|queue
operator|+
literal|" does not have key for resourceCategory: "
operator|+
name|resourceCategory
argument_list|,
name|hasChild
argument_list|(
name|queue
argument_list|,
name|resourceCategory
argument_list|)
argument_list|)
expr_stmt|;
name|verifyResourceContainsCustomResourceTypes
argument_list|(
operator|(
name|Element
operator|)
name|queue
operator|.
name|getElementsByTagName
argument_list|(
name|resourceCategory
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyResourceContainsCustomResourceTypes ( Element resourceCategory)
specifier|private
name|void
name|verifyResourceContainsCustomResourceTypes
parameter_list|(
name|Element
name|resourceCategory
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|toXml
argument_list|(
name|resourceCategory
argument_list|)
operator|+
literal|" should have only one resourceInformations child!"
argument_list|,
literal|1
argument_list|,
name|resourceCategory
operator|.
name|getElementsByTagName
argument_list|(
literal|"resourceInformations"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|resourceInformations
init|=
operator|(
name|Element
operator|)
name|resourceCategory
operator|.
name|getElementsByTagName
argument_list|(
literal|"resourceInformations"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeList
name|customResources
init|=
name|resourceInformations
operator|.
name|getElementsByTagName
argument_list|(
literal|"resourceInformation"
argument_list|)
decl_stmt|;
comment|// customResources will include vcores / memory as well
name|assertEquals
argument_list|(
literal|"Different number of custom resource types found than expected"
argument_list|,
name|customResourceTypes
operator|.
name|size
argument_list|()
argument_list|,
name|customResources
operator|.
name|getLength
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|customResources
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|customResource
init|=
operator|(
name|Element
operator|)
name|customResources
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|getXmlString
argument_list|(
name|customResource
argument_list|,
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|unit
init|=
name|getXmlString
argument_list|(
name|customResource
argument_list|,
literal|"units"
argument_list|)
decl_stmt|;
name|String
name|resourceType
init|=
name|getXmlString
argument_list|(
name|customResource
argument_list|,
literal|"resourceType"
argument_list|)
decl_stmt|;
name|Long
name|value
init|=
name|getXmlLong
argument_list|(
name|customResource
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ResourceInformation
operator|.
name|MEMORY_URI
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|ResourceInformation
operator|.
name|VCORES_URI
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
literal|"Custom resource type "
operator|+
name|name
operator|+
literal|" not found"
argument_list|,
name|customResourceTypes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"k"
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
name|ResourceTypes
operator|.
name|valueOf
argument_list|(
name|resourceType
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Resource value should not be null for resource type "
operator|+
name|resourceType
operator|+
literal|", listing xml contents: "
operator|+
name|toXml
argument_list|(
name|customResource
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|opt (Node node, String child)
specifier|private
name|Object
name|opt
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|NodeList
name|nodes
init|=
name|getElementsByTagNameInternal
argument_list|(
name|node
argument_list|,
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|hasChild (Node node, String child)
specifier|private
name|boolean
name|hasChild
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|child
parameter_list|)
block|{
return|return
name|getElementsByTagNameInternal
argument_list|(
name|node
argument_list|,
name|child
argument_list|)
operator|.
name|getLength
argument_list|()
operator|>
literal|0
return|;
block|}
DECL|method|getElementsByTagNameInternal (Node node, String child)
specifier|private
name|NodeList
name|getElementsByTagNameInternal
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|child
parameter_list|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|Element
condition|)
block|{
return|return
operator|(
operator|(
name|Element
operator|)
name|node
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|child
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|node
operator|instanceof
name|Document
condition|)
block|{
return|return
operator|(
operator|(
name|Document
operator|)
name|node
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|child
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown type of wrappedObject: "
operator|+
name|node
operator|+
literal|", type: "
operator|+
name|node
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

