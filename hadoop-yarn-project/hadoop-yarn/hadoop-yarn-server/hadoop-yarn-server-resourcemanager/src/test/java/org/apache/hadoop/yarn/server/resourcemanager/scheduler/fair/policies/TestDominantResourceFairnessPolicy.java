begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.policies
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FakeSchedulable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|Schedulable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
operator|.
name|DominantResourceFairnessComparatorN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
operator|.
name|DominantResourceFairnessComparator2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * comparator.compare(sched1, sched2)< 0 means that sched1 should get a  * container before sched2  */
end_comment

begin_class
DECL|class|TestDominantResourceFairnessPolicy
specifier|public
class|class
name|TestDominantResourceFairnessPolicy
block|{
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|addResources
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
block|}
DECL|method|createComparator (int clusterMem, int clusterCpu)
specifier|private
name|Comparator
argument_list|<
name|Schedulable
argument_list|>
name|createComparator
parameter_list|(
name|int
name|clusterMem
parameter_list|,
name|int
name|clusterCpu
parameter_list|)
block|{
name|DominantResourceFairnessPolicy
name|policy
init|=
operator|new
name|DominantResourceFairnessPolicy
argument_list|()
decl_stmt|;
name|FSContext
name|fsContext
init|=
name|mock
argument_list|(
name|FSContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fsContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|clusterMem
argument_list|,
name|clusterCpu
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|initialize
argument_list|(
name|fsContext
argument_list|)
expr_stmt|;
return|return
name|policy
operator|.
name|getComparator
argument_list|()
return|;
block|}
DECL|method|createSchedulable (int memUsage, int cpuUsage)
specifier|private
name|Schedulable
name|createSchedulable
parameter_list|(
name|int
name|memUsage
parameter_list|,
name|int
name|cpuUsage
parameter_list|)
block|{
return|return
name|createSchedulable
argument_list|(
name|memUsage
argument_list|,
name|cpuUsage
argument_list|,
literal|1.0f
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|createSchedulable (int memUsage, int cpuUsage, int minMemShare, int minCpuShare)
specifier|private
name|Schedulable
name|createSchedulable
parameter_list|(
name|int
name|memUsage
parameter_list|,
name|int
name|cpuUsage
parameter_list|,
name|int
name|minMemShare
parameter_list|,
name|int
name|minCpuShare
parameter_list|)
block|{
return|return
name|createSchedulable
argument_list|(
name|memUsage
argument_list|,
name|cpuUsage
argument_list|,
literal|1.0f
argument_list|,
name|minMemShare
argument_list|,
name|minCpuShare
argument_list|)
return|;
block|}
DECL|method|createSchedulable (int memUsage, int cpuUsage, float weights)
specifier|private
name|Schedulable
name|createSchedulable
parameter_list|(
name|int
name|memUsage
parameter_list|,
name|int
name|cpuUsage
parameter_list|,
name|float
name|weights
parameter_list|)
block|{
return|return
name|createSchedulable
argument_list|(
name|memUsage
argument_list|,
name|cpuUsage
argument_list|,
name|weights
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|createSchedulable (int memUsage, int cpuUsage, float weights, int minMemShare, int minCpuShare)
specifier|private
name|Schedulable
name|createSchedulable
parameter_list|(
name|int
name|memUsage
parameter_list|,
name|int
name|cpuUsage
parameter_list|,
name|float
name|weights
parameter_list|,
name|int
name|minMemShare
parameter_list|,
name|int
name|minCpuShare
parameter_list|)
block|{
name|Resource
name|usage
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
name|memUsage
argument_list|,
name|cpuUsage
argument_list|)
decl_stmt|;
name|Resource
name|minShare
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
name|minMemShare
argument_list|,
name|minCpuShare
argument_list|)
decl_stmt|;
return|return
operator|new
name|FakeSchedulable
argument_list|(
name|minShare
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|weights
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|usage
argument_list|,
literal|0l
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSameDominantResource ()
specifier|public
name|void
name|testSameDominantResource
parameter_list|()
block|{
name|Comparator
name|c
init|=
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Schedulable
name|s1
init|=
name|createSchedulable
argument_list|(
literal|1000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Schedulable
name|s2
init|=
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Comparison didn't return a value less than 0"
argument_list|,
name|c
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSameDominantResource2 ()
specifier|public
name|void
name|testSameDominantResource2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|testSameDominantResource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDifferentDominantResource ()
specifier|public
name|void
name|testDifferentDominantResource
parameter_list|()
block|{
name|Comparator
name|c
init|=
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|Schedulable
name|s1
init|=
name|createSchedulable
argument_list|(
literal|4000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Schedulable
name|s2
init|=
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Comparison didn't return a value less than 0"
argument_list|,
name|c
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDifferentDominantResource2 ()
specifier|public
name|void
name|testDifferentDominantResource2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|testDifferentDominantResource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneIsNeedy ()
specifier|public
name|void
name|testOneIsNeedy
parameter_list|()
block|{
name|Comparator
name|c
init|=
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|Schedulable
name|s1
init|=
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|Schedulable
name|s2
init|=
name|createSchedulable
argument_list|(
literal|4000
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Comparison didn't return a value less than 0"
argument_list|,
name|c
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOneIsNeedy2 ()
specifier|public
name|void
name|testOneIsNeedy2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|testOneIsNeedy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBothAreNeedy ()
specifier|public
name|void
name|testBothAreNeedy
parameter_list|()
block|{
name|Comparator
name|c
init|=
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// dominant share is 2000/8000
name|Schedulable
name|s1
init|=
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// dominant share is 4000/8000
name|Schedulable
name|s2
init|=
name|createSchedulable
argument_list|(
literal|4000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Comparison didn't return a value less than 0"
argument_list|,
name|c
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// dominant min share is 2/3
name|s1
operator|=
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|5
argument_list|,
literal|3000
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// dominant min share is 4/5
name|s2
operator|=
name|createSchedulable
argument_list|(
literal|4000
argument_list|,
literal|3
argument_list|,
literal|5000
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Comparison didn't return a value less than 0"
argument_list|,
name|c
operator|.
name|compare
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBothAreNeedy2 ()
specifier|public
name|void
name|testBothAreNeedy2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|testBothAreNeedy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEvenWeightsSameDominantResource ()
specifier|public
name|void
name|testEvenWeightsSameDominantResource
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|8
argument_list|)
operator|.
name|compare
argument_list|(
name|createSchedulable
argument_list|(
literal|3000
argument_list|,
literal|1
argument_list|,
literal|2.0f
argument_list|)
argument_list|,
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|8
argument_list|)
operator|.
name|compare
argument_list|(
name|createSchedulable
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|,
literal|2.0f
argument_list|)
argument_list|,
name|createSchedulable
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEvenWeightsSameDominantResource2 ()
specifier|public
name|void
name|testEvenWeightsSameDominantResource2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|testEvenWeightsSameDominantResource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEvenWeightsDifferentDominantResource ()
specifier|public
name|void
name|testEvenWeightsDifferentDominantResource
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|8
argument_list|)
operator|.
name|compare
argument_list|(
name|createSchedulable
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|,
literal|2.0f
argument_list|)
argument_list|,
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|8
argument_list|)
operator|.
name|compare
argument_list|(
name|createSchedulable
argument_list|(
literal|3000
argument_list|,
literal|1
argument_list|,
literal|2.0f
argument_list|)
argument_list|,
name|createSchedulable
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEvenWeightsDifferentDominantResource2 ()
specifier|public
name|void
name|testEvenWeightsDifferentDominantResource2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|testEvenWeightsDifferentDominantResource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortShares ()
specifier|public
name|void
name|testSortShares
parameter_list|()
block|{
name|float
index|[]
index|[]
name|ratios1
init|=
block|{
block|{
literal|0.3f
block|,
literal|2.0f
block|}
block|,
block|{
literal|0.2f
block|,
literal|1.0f
block|}
block|,
block|{
literal|0.4f
block|,
literal|0.1f
block|}
block|}
decl_stmt|;
name|float
index|[]
index|[]
name|ratios2
init|=
block|{
block|{
literal|0.2f
block|,
literal|9.0f
block|}
block|,
block|{
literal|0.3f
block|,
literal|2.0f
block|}
block|,
block|{
literal|0.25f
block|,
literal|0.1f
block|}
block|}
decl_stmt|;
name|float
index|[]
index|[]
name|expected1
init|=
block|{
block|{
literal|0.4f
block|,
literal|0.1f
block|}
block|,
block|{
literal|0.3f
block|,
literal|2.0f
block|}
block|,
block|{
literal|0.2f
block|,
literal|1.0f
block|}
block|}
decl_stmt|;
name|float
index|[]
index|[]
name|expected2
init|=
block|{
block|{
literal|0.3f
block|,
literal|2.0f
block|}
block|,
block|{
literal|0.25f
block|,
literal|0.1f
block|}
block|,
block|{
literal|0.2f
block|,
literal|9.0f
block|}
block|}
decl_stmt|;
name|DominantResourceFairnessComparatorN
name|comparator
init|=
operator|new
name|DominantResourceFairnessComparatorN
argument_list|()
decl_stmt|;
name|comparator
operator|.
name|sortRatios
argument_list|(
name|ratios1
argument_list|,
name|ratios2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ratios1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"The shares array was not sorted into the "
operator|+
literal|"expected order: incorrect inner array encountered"
argument_list|,
name|expected1
index|[
name|i
index|]
argument_list|,
name|ratios1
index|[
name|i
index|]
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"The shares array was not sorted into the "
operator|+
literal|"expected order: incorrect inner array encountered"
argument_list|,
name|expected2
index|[
name|i
index|]
argument_list|,
name|ratios2
index|[
name|i
index|]
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCalculateClusterAndFairRatios ()
specifier|public
name|void
name|testCalculateClusterAndFairRatios
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|index
init|=
name|ResourceUtils
operator|.
name|getResourceTypeIndex
argument_list|()
decl_stmt|;
name|Resource
name|used
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|capacity
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|float
index|[]
index|[]
name|shares
init|=
operator|new
name|float
index|[
literal|3
index|]
index|[
literal|2
index|]
decl_stmt|;
name|DominantResourceFairnessComparatorN
name|comparator
init|=
operator|new
name|DominantResourceFairnessComparatorN
argument_list|()
decl_stmt|;
name|used
operator|.
name|setResourceValue
argument_list|(
literal|"test"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|capacity
operator|.
name|setResourceValue
argument_list|(
literal|"test"
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|int
name|dominant
init|=
name|comparator
operator|.
name|calculateClusterAndFairRatios
argument_list|(
name|used
argument_list|,
name|capacity
argument_list|,
name|shares
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated usage ratio for memory (10MB out of 100MB) is "
operator|+
literal|"incorrect"
argument_list|,
literal|0.1
argument_list|,
name|shares
index|[
name|index
operator|.
name|get
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
index|]
index|[
literal|0
index|]
argument_list|,
literal|.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated usage ratio for vcores (5 out of 10) is "
operator|+
literal|"incorrect"
argument_list|,
literal|0.5
argument_list|,
name|shares
index|[
name|index
operator|.
name|get
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
index|]
index|[
literal|0
index|]
argument_list|,
literal|.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated usage ratio for test resource (2 out of 5) is "
operator|+
literal|"incorrect"
argument_list|,
literal|0.4
argument_list|,
name|shares
index|[
name|index
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
index|]
index|[
literal|0
index|]
argument_list|,
literal|.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The wrong dominant resource index was returned"
argument_list|,
name|index
operator|.
name|get
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|dominant
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCalculateClusterAndFairRatios2 ()
specifier|public
name|void
name|testCalculateClusterAndFairRatios2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|used
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|capacity
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|double
index|[]
name|shares
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|DominantResourceFairnessComparator2
name|comparator
init|=
operator|new
name|DominantResourceFairnessComparator2
argument_list|()
decl_stmt|;
name|int
name|dominant
init|=
name|comparator
operator|.
name|calculateClusterAndFairRatios
argument_list|(
name|used
operator|.
name|getResources
argument_list|()
argument_list|,
literal|1.0f
argument_list|,
name|capacity
operator|.
name|getResources
argument_list|()
argument_list|,
name|shares
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated usage ratio for memory (10MB out of 100MB) is "
operator|+
literal|"incorrect"
argument_list|,
literal|0.1
argument_list|,
name|shares
index|[
name|Resource
operator|.
name|MEMORY_INDEX
index|]
argument_list|,
literal|.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated usage ratio for vcores (5 out of 10) is "
operator|+
literal|"incorrect"
argument_list|,
literal|0.5
argument_list|,
name|shares
index|[
name|Resource
operator|.
name|VCORES_INDEX
index|]
argument_list|,
literal|.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The wrong dominant resource index was returned"
argument_list|,
name|Resource
operator|.
name|VCORES_INDEX
argument_list|,
name|dominant
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCalculateMinShareRatios ()
specifier|public
name|void
name|testCalculateMinShareRatios
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|index
init|=
name|ResourceUtils
operator|.
name|getResourceTypeIndex
argument_list|()
decl_stmt|;
name|Resource
name|used
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|minShares
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|float
index|[]
index|[]
name|ratios
init|=
operator|new
name|float
index|[
literal|3
index|]
index|[
literal|3
index|]
decl_stmt|;
name|DominantResourceFairnessComparatorN
name|comparator
init|=
operator|new
name|DominantResourceFairnessComparatorN
argument_list|()
decl_stmt|;
name|used
operator|.
name|setResourceValue
argument_list|(
literal|"test"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|minShares
operator|.
name|setResourceValue
argument_list|(
literal|"test"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|calculateMinShareRatios
argument_list|(
name|used
argument_list|,
name|minShares
argument_list|,
name|ratios
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated min share ratio for memory (10MB out of 5MB) is "
operator|+
literal|"incorrect"
argument_list|,
literal|2.0
argument_list|,
name|ratios
index|[
name|index
operator|.
name|get
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|)
index|]
index|[
literal|2
index|]
argument_list|,
literal|.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated min share ratio for vcores (5 out of 10) is "
operator|+
literal|"incorrect"
argument_list|,
literal|0.5
argument_list|,
name|ratios
index|[
name|index
operator|.
name|get
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|)
index|]
index|[
literal|2
index|]
argument_list|,
literal|.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated min share ratio for test resource (0 out of 5) is "
operator|+
literal|"incorrect"
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|,
name|ratios
index|[
name|index
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
index|]
index|[
literal|2
index|]
argument_list|,
literal|0.00001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCalculateMinShareRatios2 ()
specifier|public
name|void
name|testCalculateMinShareRatios2
parameter_list|()
block|{
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|used
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|minShares
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|DominantResourceFairnessComparator2
name|comparator
init|=
operator|new
name|DominantResourceFairnessComparator2
argument_list|()
decl_stmt|;
name|double
index|[]
name|ratios
init|=
name|comparator
operator|.
name|calculateMinShareRatios
argument_list|(
name|used
operator|.
name|getResources
argument_list|()
argument_list|,
name|minShares
operator|.
name|getResources
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated min share ratio for memory (10MB out of 5MB) is "
operator|+
literal|"incorrect"
argument_list|,
literal|2.0
argument_list|,
name|ratios
index|[
name|Resource
operator|.
name|MEMORY_INDEX
index|]
argument_list|,
literal|.00001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Calculated min share ratio for vcores (5 out of 10) is "
operator|+
literal|"incorrect"
argument_list|,
literal|0.5
argument_list|,
name|ratios
index|[
name|Resource
operator|.
name|VCORES_INDEX
index|]
argument_list|,
literal|.00001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompareShares ()
specifier|public
name|void
name|testCompareShares
parameter_list|()
block|{
name|float
index|[]
index|[]
name|ratios1
init|=
block|{
block|{
literal|0.4f
block|,
literal|0.1f
block|,
literal|2.0f
block|}
block|,
block|{
literal|0.3f
block|,
literal|2.0f
block|,
literal|0.1f
block|}
block|,
block|{
literal|0.2f
block|,
literal|1.0f
block|,
literal|9.0f
block|}
block|}
decl_stmt|;
name|float
index|[]
index|[]
name|ratios2
init|=
block|{
block|{
literal|0.3f
block|,
literal|2.0f
block|,
literal|1.0f
block|}
block|,
block|{
literal|0.2f
block|,
literal|0.1f
block|,
literal|0.5f
block|}
block|,
block|{
literal|0.2f
block|,
literal|1.0f
block|,
literal|2.0f
block|}
block|}
decl_stmt|;
name|float
index|[]
index|[]
name|ratios3
init|=
block|{
block|{
literal|0.3f
block|,
literal|2.0f
block|,
literal|1.0f
block|}
block|,
block|{
literal|0.2f
block|,
literal|0.1f
block|,
literal|2.0f
block|}
block|,
block|{
literal|0.1f
block|,
literal|2.0f
block|,
literal|1.0f
block|}
block|}
decl_stmt|;
name|DominantResourceFairnessComparatorN
name|comparator
init|=
operator|new
name|DominantResourceFairnessComparatorN
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios1
argument_list|,
name|ratios2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be larger because the first "
operator|+
literal|"usage ratio element is larger"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be smaller because the first "
operator|+
literal|"usage ratio element is smaller"
argument_list|,
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios1
argument_list|,
name|ratios1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios3
argument_list|,
name|ratios3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be larger because the last "
operator|+
literal|"usage ratio element is larger, and all other elements are equal"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios1
argument_list|,
name|ratios2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be smaller because the first "
operator|+
literal|"fair share ratio element is smaller"
argument_list|,
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be larger because the first "
operator|+
literal|"fair share ratio element is larger"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios1
argument_list|,
name|ratios1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios3
argument_list|,
name|ratios3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be smaller because the last "
operator|+
literal|"usage ratio element is smaller, and all other elements are equal"
argument_list|,
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios1
argument_list|,
name|ratios2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be larger because the first "
operator|+
literal|"min share ratio element is larger"
argument_list|,
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be smaller because the first "
operator|+
literal|"min share ratio element is smaller"
argument_list|,
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios1
argument_list|,
name|ratios1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios3
argument_list|,
name|ratios3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the arrays to be equal, since they're the same "
operator|+
literal|"array"
argument_list|,
literal|0
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|comparator
operator|.
name|compareRatios
argument_list|(
name|ratios2
argument_list|,
name|ratios3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected the first array to be smaller because the second "
operator|+
literal|"min share ratio element is smaller, and all the first elements are "
operator|+
literal|"equal"
argument_list|,
operator|-
literal|1
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompareSchedulablesWithClusterResourceChanges ()
specifier|public
name|void
name|testCompareSchedulablesWithClusterResourceChanges
parameter_list|()
block|{
name|Schedulable
name|schedulable1
init|=
name|createSchedulable
argument_list|(
literal|2000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Schedulable
name|schedulable2
init|=
name|createSchedulable
argument_list|(
literal|1000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// schedulable1 has share weights [1/2, 1/5], schedulable2 has share
comment|// weights [1/4, 2/5], schedulable1> schedulable2 since 1/2> 2/5
name|assertTrue
argument_list|(
name|createComparator
argument_list|(
literal|4000
argument_list|,
literal|5
argument_list|)
operator|.
name|compare
argument_list|(
name|schedulable1
argument_list|,
name|schedulable2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// share weights have changed because of the cluster resource change.
comment|// schedulable1 has share weights [1/4, 1/6], schedulable2 has share
comment|// weights [1/8, 1/3], schedulable1< schedulable2 since 1/4< 1/3
name|assertTrue
argument_list|(
name|createComparator
argument_list|(
literal|8000
argument_list|,
literal|6
argument_list|)
operator|.
name|compare
argument_list|(
name|schedulable1
argument_list|,
name|schedulable2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|addResources (String... resources)
specifier|private
specifier|static
name|void
name|addResources
parameter_list|(
name|String
modifier|...
name|resources
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Add a third resource to the allowed set
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|resources
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModWhileSorting ()
specifier|public
name|void
name|testModWhileSorting
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|FakeSchedulable
argument_list|>
name|schedulableList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|schedulableList
operator|.
name|add
argument_list|(
operator|(
name|FakeSchedulable
operator|)
name|createSchedulable
argument_list|(
operator|(
name|i
operator|%
literal|10
operator|)
operator|*
literal|100
argument_list|,
operator|(
name|i
operator|%
literal|3
operator|)
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Comparator
name|DRFComparator
init|=
name|createComparator
argument_list|(
literal|100000
argument_list|,
literal|50000
argument_list|)
decl_stmt|;
comment|/*      * The old sort should fail, but timing it makes testing to flaky.      * TimSort which is used does not handle the concurrent modification of      * objects it is sorting. This is the test that should fail:      *  modThread.start();      *  try {      *    Collections.sort(schedulableList, DRFComparator);      *  } catch (IllegalArgumentException iae) {      *    // failed sort      *  }      */
name|TreeSet
argument_list|<
name|Schedulable
argument_list|>
name|sortedSchedulable
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|DRFComparator
argument_list|)
decl_stmt|;
name|Thread
name|modThread
init|=
name|modificationThread
argument_list|(
name|schedulableList
argument_list|)
decl_stmt|;
name|modThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|sortedSchedulable
operator|.
name|addAll
argument_list|(
name|schedulableList
argument_list|)
expr_stmt|;
try|try
block|{
name|modThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|fail
argument_list|(
literal|"ModThread join failed: "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Thread to simulate concurrent schedulable changes while sorting    */
DECL|method|modificationThread (final List<FakeSchedulable> schedulableList)
specifier|private
name|Thread
name|modificationThread
parameter_list|(
specifier|final
name|List
argument_list|<
name|FakeSchedulable
argument_list|>
name|schedulableList
parameter_list|)
block|{
name|Thread
name|modThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// This sleep is needed to make sure the sort has started before the
comment|// modifications start and finish
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Modification thread interrupted while asleep "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Resource
name|newUsage
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|FakeSchedulable
name|sched
init|=
name|schedulableList
operator|.
name|get
argument_list|(
name|j
operator|*
literal|10
argument_list|)
decl_stmt|;
name|newUsage
operator|.
name|setMemorySize
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
name|newUsage
operator|.
name|setVirtualCores
argument_list|(
name|j
operator|%
literal|10
argument_list|)
expr_stmt|;
name|sched
operator|.
name|setResourceUsage
argument_list|(
name|newUsage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|modThread
return|;
block|}
block|}
end_class

end_unit

