begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestApplicationLimits
specifier|public
class|class
name|TestApplicationLimits
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestApplicationLimits
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|queue
name|LeafQueue
name|queue
decl_stmt|;
DECL|field|resourceCalculator
specifier|private
specifier|final
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|rmContext
operator|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
expr_stmt|;
name|CapacitySchedulerContext
name|csContext
init|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|10
operator|*
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNonPartitionedQueueComparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacityScheduler
operator|.
name|nonPartitionedQueueComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|containerTokenSecretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerTokenSecretManager
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
literal|"root"
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
name|queue
operator|=
name|spy
argument_list|(
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|A
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Stub out ACL checks
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|hasAccess
argument_list|(
name|any
argument_list|(
name|QueueACL
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some default values
name|doReturn
argument_list|(
literal|100
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|getMaxApplications
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
literal|25
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|getMaxApplicationsPerUser
argument_list|()
expr_stmt|;
block|}
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
literal|"a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
literal|"b"
decl_stmt|;
DECL|method|setupQueueConfiguration (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimit
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
argument_list|,
literal|5.0f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues a and b"
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockApplication (int appId, String user, Resource amResource)
specifier|private
name|FiCaSchedulerApp
name|getMockApplication
parameter_list|(
name|int
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|Resource
name|amResource
parameter_list|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|applicationAttemptId
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|user
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|amResource
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getAMResource
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getAppAMNodePartitionName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|amResource
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getAMResource
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|compareInputOrderTo
argument_list|(
name|any
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
return|return
name|application
return|;
block|}
annotation|@
name|Test
DECL|method|testAMResourceLimit ()
specifier|public
name|void
name|testAMResourceLimit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
comment|// This uses the default 10% of cluster value for the max am resources
comment|// which are allowed, at 80GB = 8GB for AM's at the queue level.  The user
comment|// am limit is 4G initially (based on the queue absolute capacity)
comment|// when there is only 1 user, and drops to 2G (the userlimit) when there
comment|// is a second user
name|Resource
name|clusterResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|80
operator|*
name|GB
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|queue
operator|.
name|updateClusterResource
argument_list|(
name|clusterResource
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|ActiveUsersManager
name|activeUsersManager
init|=
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|activeUsersManager
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|calculateAndGetAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Two apps for user_0, both start
name|int
name|APPLICATION_ID
init|=
literal|0
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|activeUsersManager
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// AMLimits unchanged
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|getAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// One app for user_1, starts
name|FiCaSchedulerApp
name|app_2
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|activeUsersManager
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Now userAMResourceLimit drops to the queue configured 50% as there is
comment|// another user active
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|getAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second user_1 app cannot start
name|FiCaSchedulerApp
name|app_3
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_3
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now finish app so another should be activated
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLimitsComputation ()
specifier|public
name|void
name|testLimitsComputation
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerContext
name|csContext
init|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNonPartitionedQueueComparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacityScheduler
operator|.
name|nonPartitionedQueueComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
comment|// Say cluster has 100 nodes of 16G each
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
literal|"root"
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
name|LeafQueue
name|queue
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queue 'A' -"
operator|+
literal|" aMResourceLimit="
operator|+
name|queue
operator|.
name|getAMResourceLimit
argument_list|()
operator|+
literal|" UserAMResourceLimit="
operator|+
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|amResourceLimit
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|160
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|calculateAndGetAMResourceLimit
argument_list|()
argument_list|,
name|amResourceLimit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|80
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert in metrics
name|assertEquals
argument_list|(
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAMResourceLimitMB
argument_list|()
argument_list|,
name|amResourceLimit
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAMResourceLimitVCores
argument_list|()
argument_list|,
name|amResourceLimit
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|int
call|)
argument_list|(
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|*
name|queue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
argument_list|,
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add some nodes to the cluster& test new limits
name|clusterResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|120
operator|*
literal|16
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|updateClusterResource
argument_list|(
name|clusterResource
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|calculateAndGetAMResourceLimit
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|192
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|96
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|int
call|)
argument_list|(
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|*
name|queue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
argument_list|,
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// should return -1 if per queue setting not set
name|assertEquals
argument_list|(
operator|(
name|int
operator|)
name|CapacitySchedulerConfiguration
operator|.
name|UNDEFINED
argument_list|,
name|csConf
operator|.
name|getMaximumApplicationsPerQueue
argument_list|(
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedMaxApps
init|=
call|(
name|int
call|)
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|DEFAULT_MAXIMUM_SYSTEM_APPLICATIIONS
operator|*
name|queue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMaxApps
argument_list|,
name|queue
operator|.
name|getMaxApplications
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|expectedMaxAppsPerUser
init|=
call|(
name|int
call|)
argument_list|(
name|expectedMaxApps
operator|*
operator|(
name|queue
operator|.
name|getUserLimit
argument_list|()
operator|/
literal|100.0f
operator|)
operator|*
name|queue
operator|.
name|getUserLimitFactor
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedMaxAppsPerUser
argument_list|,
name|queue
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// should default to global setting if per queue setting not set
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|CapacitySchedulerConfiguration
operator|.
name|DEFAULT_MAXIMUM_APPLICATIONMASTERS_RESOURCE_PERCENT
argument_list|,
operator|(
name|long
operator|)
name|csConf
operator|.
name|getMaximumApplicationMasterResourcePerQueuePercent
argument_list|(
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the per-queue max AM resources percentage.
name|csConf
operator|.
name|setFloat
argument_list|(
literal|"yarn.scheduler.capacity."
operator|+
name|queue
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|".maximum-am-resource-percent"
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
comment|// Re-create queues to get new configs.
name|queues
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
expr_stmt|;
name|root
operator|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
literal|"root"
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
name|clusterResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
literal|0.5
argument_list|,
operator|(
name|long
operator|)
name|csConf
operator|.
name|getMaximumApplicationMasterResourcePerQueuePercent
argument_list|(
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|calculateAndGetAMResourceLimit
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|800
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|400
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the per-queue max applications.
name|csConf
operator|.
name|setInt
argument_list|(
literal|"yarn.scheduler.capacity."
operator|+
name|queue
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|".maximum-applications"
argument_list|,
literal|9999
argument_list|)
expr_stmt|;
comment|// Re-create queues to get new configs.
name|queues
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
expr_stmt|;
name|root
operator|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
literal|"root"
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999
argument_list|,
operator|(
name|int
operator|)
name|csConf
operator|.
name|getMaximumApplicationsPerQueue
argument_list|(
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9999
argument_list|,
name|queue
operator|.
name|getMaxApplications
argument_list|()
argument_list|)
expr_stmt|;
name|expectedMaxAppsPerUser
operator|=
call|(
name|int
call|)
argument_list|(
literal|9999
operator|*
operator|(
name|queue
operator|.
name|getUserLimit
argument_list|()
operator|/
literal|100.0f
operator|)
operator|*
name|queue
operator|.
name|getUserLimitFactor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMaxAppsPerUser
argument_list|,
name|queue
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testActiveApplicationLimits ()
specifier|public
name|void
name|testActiveApplicationLimits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
specifier|final
name|String
name|user_2
init|=
literal|"user_2"
decl_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|calculateAndGetAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|queue
operator|.
name|getUserAMResourceLimit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|APPLICATION_ID
init|=
literal|0
decl_stmt|;
comment|// Submit first application
name|FiCaSchedulerApp
name|app_0
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit second application
name|FiCaSchedulerApp
name|app_1
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit third application, should remain pending due to user amlimit
name|FiCaSchedulerApp
name|app_2
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish one application, app_2 should be activated
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit another one for user_0
name|FiCaSchedulerApp
name|app_3
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_3
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit first app for user_1
name|FiCaSchedulerApp
name|app_4
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_4
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit first app for user_2, should block due to queue amlimit
name|FiCaSchedulerApp
name|app_5
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_5
argument_list|,
name|user_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now finish one app of user_1 so app_5 should be activated
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|app_4
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testActiveLimitsWithKilledApps ()
specifier|public
name|void
name|testActiveLimitsWithKilledApps
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
name|int
name|APPLICATION_ID
init|=
literal|0
decl_stmt|;
comment|// Submit first application
name|FiCaSchedulerApp
name|app_0
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit second application
name|FiCaSchedulerApp
name|app_1
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit third application, should remain pending
name|FiCaSchedulerApp
name|app_2
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|getPendingApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Submit fourth application, should remain pending
name|FiCaSchedulerApp
name|app_3
init|=
name|getMockApplication
argument_list|(
name|APPLICATION_ID
operator|++
argument_list|,
name|user_0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_3
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|getPendingApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Kill 3rd pending application
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queue
operator|.
name|getPendingApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish 1st application, app_3 should become active
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queue
operator|.
name|getPendingApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish 2nd application
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish 4th application
name|queue
operator|.
name|finishApplicationAttempt
argument_list|(
name|app_3
argument_list|,
name|A
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumActiveApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getNumPendingApplications
argument_list|(
name|user_0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|contains
argument_list|(
name|app_3
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHeadroom ()
specifier|public
name|void
name|testHeadroom
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|setUserLimit
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerContext
name|csContext
init|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNonPartitionedQueueComparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacityScheduler
operator|.
name|nonPartitionedQueueComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
comment|// Say cluster has 100 nodes of 16G each
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
literal|"root"
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
comment|// Manipulate queue 'a'
name|LeafQueue
name|queue
init|=
name|TestLeafQueue
operator|.
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|updateClusterResource
argument_list|(
name|clusterResource
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|String
name|rack_0
init|=
literal|"rack_0"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|16
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
decl_stmt|;
name|RMContext
name|spyRMContext
init|=
name|spy
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|spyApps
init|=
name|spy
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceRequest
name|amResourceRequest
init|=
name|mock
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|amResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|amResourceRequest
operator|.
name|getCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|amResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getAMResourceRequest
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|amResourceRequest
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|rmApp
argument_list|)
operator|.
name|when
argument_list|(
name|spyApps
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|ApplicationId
operator|)
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|spyRMContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|spyApps
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|rmAppAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getRMAppAttempt
argument_list|(
operator|(
name|ApplicationAttemptId
operator|)
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmAppAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmAppAttempt
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|rmApp
argument_list|)
operator|.
name|when
argument_list|(
name|spyApps
argument_list|)
operator|.
name|get
argument_list|(
operator|(
name|ApplicationId
operator|)
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|spyApps
argument_list|)
operator|.
name|containsKey
argument_list|(
operator|(
name|ApplicationId
operator|)
name|Matchers
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Priority
name|priority_1
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Submit first application with some resource-requests from user_0,
comment|// and check headroom
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0_0
argument_list|,
name|user_0
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|spyRMContext
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_0_requests
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|app_0_0_requests
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_0_requests
argument_list|)
expr_stmt|;
comment|// Schedule to compute
name|queue
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|Resource
name|expectedHeadroom
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedHeadroom
argument_list|,
name|app_0_0
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit second application from user_0, check headroom
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0_1
argument_list|,
name|user_0
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|spyRMContext
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_1_requests
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|app_0_1_requests
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_1
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_1_requests
argument_list|)
expr_stmt|;
comment|// Schedule to compute
name|queue
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
comment|// Schedule to compute
name|assertEquals
argument_list|(
name|expectedHeadroom
argument_list|,
name|app_0_0
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO, need fix headroom in future patch
comment|//  assertEquals(expectedHeadroom, app_0_1.getHeadroom());// no change
comment|// Submit first application from user_1, check  for new headroom
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1_0
argument_list|,
name|user_1
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|spyRMContext
argument_list|)
decl_stmt|;
name|queue
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1_0
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_1_0_requests
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|app_1_0_requests
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_1_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_1_0_requests
argument_list|)
expr_stmt|;
comment|// Schedule to compute
name|queue
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
comment|// Schedule to compute
name|expectedHeadroom
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|16
operator|*
name|GB
operator|/
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// changes
name|assertEquals
argument_list|(
name|expectedHeadroom
argument_list|,
name|app_0_0
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO, need fix headroom in future patch
comment|//    assertEquals(expectedHeadroom, app_0_1.getHeadroom());
comment|//    assertEquals(expectedHeadroom, app_1_0.getHeadroom());
comment|// Now reduce cluster size and check for the smaller headroom
name|clusterResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|90
operator|*
literal|16
operator|*
name|GB
argument_list|)
expr_stmt|;
name|queue
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
comment|// Schedule to compute
name|expectedHeadroom
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|9
operator|*
literal|16
operator|*
name|GB
operator|/
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// changes
name|assertEquals
argument_list|(
name|expectedHeadroom
argument_list|,
name|app_0_0
operator|.
name|getHeadroom
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO, need fix headroom in future patch
comment|//    assertEquals(expectedHeadroom, app_0_1.getHeadroom());
comment|//    assertEquals(expectedHeadroom, app_1_0.getHeadroom());
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{      }
block|}
end_class

end_unit

