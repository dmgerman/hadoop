begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HealthCheckFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ServiceFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|AbstractService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|StoreFencedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_class
DECL|class|TestRMHA
specifier|public
class|class
name|TestRMHA
block|{
DECL|field|LOG
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMHA
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
init|=
literal|null
decl_stmt|;
DECL|field|app
specifier|private
name|RMApp
name|app
init|=
literal|null
decl_stmt|;
DECL|field|attempt
specifier|private
name|RMAppAttempt
name|attempt
init|=
literal|null
decl_stmt|;
DECL|field|STATE_ERR
specifier|private
specifier|static
specifier|final
name|String
name|STATE_ERR
init|=
literal|"ResourceManager is in wrong HA state"
decl_stmt|;
DECL|field|RM1_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM1_ADDRESS
init|=
literal|"1.1.1.1:1"
decl_stmt|;
DECL|field|RM1_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM1_NODE_ID
init|=
literal|"rm1"
decl_stmt|;
DECL|field|RM2_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM2_ADDRESS
init|=
literal|"0.0.0.0:0"
decl_stmt|;
DECL|field|RM2_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM2_NODE_ID
init|=
literal|"rm2"
decl_stmt|;
DECL|field|RM3_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM3_ADDRESS
init|=
literal|"2.2.2.2:2"
decl_stmt|;
DECL|field|RM3_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM3_NODE_ID
init|=
literal|"rm3"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|configuration
argument_list|)
control|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
name|RM1_ADDRESS
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
name|RM2_ADDRESS
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM3_NODE_ID
argument_list|)
argument_list|,
name|RM3_ADDRESS
argument_list|)
expr_stmt|;
block|}
comment|// Enable webapp to test web-services also
name|configuration
operator|.
name|setBoolean
argument_list|(
name|MockRM
operator|.
name|ENABLE_WEBAPP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ClusterMetrics
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|checkMonitorHealth ()
specifier|private
name|void
name|checkMonitorHealth
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|monitorHealth
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HealthCheckFailedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"The RM is in bad health: it is Active, but the active services "
operator|+
literal|"are not running"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkStandbyRMFunctionality ()
specifier|private
name|void
name|checkStandbyRMFunctionality
parameter_list|()
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|STATE_ERR
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Active RM services are started"
argument_list|,
name|rm
operator|.
name|areActiveServicesRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"RM is not ready to become active"
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|isReadyToBecomeActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkActiveRMFunctionality ()
specifier|private
name|void
name|checkActiveRMFunctionality
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
name|STATE_ERR
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Active RM services aren't started"
argument_list|,
name|rm
operator|.
name|areActiveServicesRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"RM is not ready to become active"
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|isReadyToBecomeActive
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|getNewAppId
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|app
operator|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|attempt
operator|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unable to perform Active RM functions"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"ActiveRM check failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|checkActiveRMWebServices
argument_list|()
expr_stmt|;
block|}
comment|// Do some sanity testing of the web-services after fail-over.
DECL|method|checkActiveRMWebServices ()
specifier|private
name|void
name|checkActiveRMWebServices
parameter_list|()
throws|throws
name|JSONException
block|{
comment|// Validate web-service
name|Client
name|webServiceClient
init|=
name|Client
operator|.
name|create
argument_list|(
operator|new
name|DefaultClientConfig
argument_list|()
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmWebappAddr
init|=
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|rm
operator|.
name|getWebapp
argument_list|()
operator|.
name|getListenerAddress
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|webappURL
init|=
literal|"http://"
operator|+
name|rmWebappAddr
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|rmWebappAddr
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|WebResource
name|webResource
init|=
name|webServiceClient
operator|.
name|resource
argument_list|(
name|webappURL
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|webResource
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|appJson
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ACCEPTED"
argument_list|,
name|appJson
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Other stuff is verified in the regular web-services related tests
block|}
comment|/**    * Test to verify the following RM HA transitions to the following states.    * 1. Standby: Should be a no-op    * 2. Active: Active services should start    * 3. Active: Should be a no-op.    * While active, submit a couple of jobs    * 4. Standby: Active services should stop    * 5. Active: Active services should start    * 6. Stop the RM: All services should stop and RM should not be ready to    * become Active    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFailoverAndTransitions ()
specifier|public
name|void
name|testFailoverAndTransitions
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|STATE_ERR
argument_list|,
name|HAServiceState
operator|.
name|INITIALIZING
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM is ready to become active before being started"
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|isReadyToBecomeActive
argument_list|()
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 1. Transition to Standby - must be a no-op
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 2. Transition to active
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkActiveRMFunctionality
argument_list|()
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 3. Transition to active - no-op
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkActiveRMFunctionality
argument_list|()
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// 4. Transition to standby
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 5. Transition to active to check Active->Standby->Active works
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkActiveRMFunctionality
argument_list|()
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 6. Stop the RM. All services should stop and RM should not be ready to
comment|// become active
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|STATE_ERR
argument_list|,
name|HAServiceState
operator|.
name|STOPPING
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM is ready to become active even after it is stopped"
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|isReadyToBecomeActive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Active RM services are started"
argument_list|,
name|rm
operator|.
name|areActiveServicesRunning
argument_list|()
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransitionsWhenAutomaticFailoverEnabled ()
specifier|public
name|void
name|testTransitionsWhenAutomaticFailoverEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|ERR_UNFORCED_REQUEST
init|=
literal|"User request succeeded even when "
operator|+
literal|"automatic failover is enabled"
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
comment|// Transition to standby
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERR_UNFORCED_REQUEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
comment|// Transition to active
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|ERR_UNFORCED_REQUEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
specifier|final
name|String
name|ERR_FORCED_REQUEST
init|=
literal|"Forced request by user should work "
operator|+
literal|"even if automatic failover is enabled"
decl_stmt|;
name|requestInfo
operator|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER_FORCED
argument_list|)
expr_stmt|;
comment|// Transition to standby
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|ERR_FORCED_REQUEST
argument_list|)
expr_stmt|;
block|}
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
comment|// Transition to active
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|ERR_FORCED_REQUEST
argument_list|)
expr_stmt|;
block|}
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkActiveRMFunctionality
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMDispatcherForHA ()
specifier|public
name|void
name|testRMDispatcherForHA
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|errorMessageForEventHandler
init|=
literal|"Expect to get the same number of handlers"
decl_stmt|;
name|String
name|errorMessageForService
init|=
literal|"Expect to get the same number of services"
decl_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|MyCountingDispatcher
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedEventHandlerCount
init|=
operator|(
operator|(
name|MyCountingDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|getEventHandlerCount
argument_list|()
decl_stmt|;
name|int
name|expectedServiceCount
init|=
name|rm
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|expectedEventHandlerCount
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|STATE_ERR
argument_list|,
name|HAServiceState
operator|.
name|INITIALIZING
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM is ready to become active before being started"
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|isReadyToBecomeActive
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//call transitions to standby and active a couple of times
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|MyCountingDispatcher
name|dispatcher
init|=
operator|(
name|MyCountingDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|dispatcher
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|errorMessageForEventHandler
argument_list|,
name|expectedEventHandlerCount
argument_list|,
operator|(
operator|(
name|MyCountingDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|getEventHandlerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|errorMessageForService
argument_list|,
name|expectedServiceCount
argument_list|,
name|rm
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Keep the dispatcher reference before transitioning to standby
name|dispatcher
operator|=
operator|(
name|MyCountingDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|errorMessageForEventHandler
argument_list|,
name|expectedEventHandlerCount
argument_list|,
operator|(
operator|(
name|MyCountingDispatcher
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|getEventHandlerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|errorMessageForService
argument_list|,
name|expectedServiceCount
argument_list|,
name|rm
operator|.
name|getServices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dispatcher
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHAIDLookup ()
specifier|public
name|void
name|testHAIDLookup
parameter_list|()
block|{
comment|//test implicitly lookup HA-ID
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|)
argument_list|,
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
comment|//test explicitly lookup HA-ID
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|RM1_NODE_ID
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|)
argument_list|,
name|RM1_NODE_ID
argument_list|)
expr_stmt|;
comment|//test if RM_HA_ID can not be found
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM3_NODE_ID
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|unset
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should get an exception here."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid configuration! Can not find valid RM_HA_ID."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHAWithRMHostName ()
specifier|public
name|void
name|testHAWithRMHostName
parameter_list|()
throws|throws
name|Exception
block|{
name|innerTestHAWithRMHostName
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setUp
argument_list|()
expr_stmt|;
name|innerTestHAWithRMHostName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testFailoverWhenTransitionToActiveThrowException ()
specifier|public
name|void
name|testFailoverWhenTransitionToActiveThrowException
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|startInternal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first time throw exception
if|if
condition|(
name|count
operator|++
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session Expired"
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
comment|// start RM
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|STATE_ERR
argument_list|,
name|HAServiceState
operator|.
name|INITIALIZING
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM is ready to become active before being started"
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|isReadyToBecomeActive
argument_list|()
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
comment|// 2. Try Transition to active, throw exception
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Transitioned to Active should throw exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Error when transitioning to Active mode"
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 3. Transition to active, success
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkActiveRMFunctionality
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransitionedToStandbyShouldNotHang ()
specifier|public
name|void
name|testTransitionedToStandbyShouldNotHang
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|updateApplicationState
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|)
block|{
name|notifyStoreOperationFailed
argument_list|(
operator|new
name|StoreFencedException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
name|void
name|stopActiveServices
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|super
operator|.
name|stopActiveServices
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|STATE_ERR
argument_list|,
name|HAServiceState
operator|.
name|INITIALIZING
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"RM is ready to become active before being started"
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|isReadyToBecomeActive
argument_list|()
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
comment|// 2. Transition to Active.
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
comment|// 3. Try Transition to standby
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|rm
operator|.
name|transitionToStandby
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|.
name|updateApplicationState
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// wait for thread to finish
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailoverClearsRMContext ()
specifier|public
name|void
name|testFailoverClearsRMContext
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// 1. start RM
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
comment|// 2. Transition to active
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkActiveRMFunctionality
argument_list|()
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. Create new RM
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ResourceTrackerService
name|createResourceTrackerService
parameter_list|()
block|{
return|return
operator|new
name|ResourceTrackerService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|nodesListManager
argument_list|,
name|this
operator|.
name|nmLivelinessMonitor
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"ResourceTracker service failed"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkMonitorHealth
argument_list|()
expr_stmt|;
name|checkStandbyRMFunctionality
argument_list|()
expr_stmt|;
comment|// 4. Try Transition to active, throw exception
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Transitioned to Active should throw exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Error when transitioning to Active mode"
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 5. Clears the metrics
name|verifyClusterMetrics
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|9000000
argument_list|)
DECL|method|testTransitionedToActiveRefreshFail ()
specifier|public
name|void
name|testTransitionedToActiveRefreshFail
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AdminService
name|createAdminService
parameter_list|()
block|{
return|return
operator|new
name|AdminService
argument_list|(
name|this
argument_list|,
name|getRMContext
argument_list|()
argument_list|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setConfig
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
operator|.
name|setConfig
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|refreshAll
parameter_list|()
throws|throws
name|ServiceFailedException
block|{
if|if
condition|(
name|counter
operator|==
literal|0
condition|)
block|{
name|counter
operator|++
expr_stmt|;
throw|throw
operator|new
name|ServiceFailedException
argument_list|(
literal|"Simulate RefreshFail"
argument_list|)
throw|;
block|}
else|else
block|{
name|super
operator|.
name|refreshAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|FailFastDispatcher
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|FailFastDispatcher
name|dispatcher
init|=
operator|(
operator|(
name|FailFastDispatcher
operator|)
name|rm
operator|.
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|)
decl_stmt|;
comment|// Verify transistion to transitionToStandby
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fatal Event should be 0"
argument_list|,
literal|0
argument_list|,
name|dispatcher
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"HA state should be in standBy State"
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Verify refreshAll call failure and check fail Event is dispatched
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Transistion to Active should have failed for refreshAll()"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Service fail Exception expected"
argument_list|,
name|e
operator|instanceof
name|ServiceFailedException
argument_list|)
expr_stmt|;
block|}
comment|// Since refreshAll failed we are expecting fatal event to be send
comment|// Then fatal event is send RM will shutdown
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fatal Event to be received"
argument_list|,
literal|1
argument_list|,
name|dispatcher
operator|.
name|getEventCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check of refreshAll success HA can be active
name|rm
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|innerTestHAWithRMHostName (boolean includeBindHost)
specifier|public
name|void
name|innerTestHAWithRMHostName
parameter_list|(
name|boolean
name|includeBindHost
parameter_list|)
block|{
comment|//this is run two times, with and without a bind host configured
if|if
condition|(
name|includeBindHost
condition|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_BIND_HOST
argument_list|,
literal|"9.9.9.9"
argument_list|)
expr_stmt|;
block|}
comment|//test if both RM_HOSTBANE_{rm_id} and RM_RPCADDRESS_{rm_id} are set
comment|//We should only read rpc addresses from RM_RPCADDRESS_{rm_id} configuration
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
literal|"1.1.1.1"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
name|RM3_NODE_ID
argument_list|)
argument_list|,
literal|"2.2.2.2"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|"RPC address not set for "
operator|+
name|confKey
argument_list|,
name|RM1_ADDRESS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RPC address not set for "
operator|+
name|confKey
argument_list|,
name|RM2_ADDRESS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RPC address not set for "
operator|+
name|confKey
argument_list|,
name|RM3_ADDRESS
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM3_NODE_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeBindHost
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Web address misconfigured WITH bind-host"
argument_list|,
name|rm
operator|.
name|webAppAddress
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"9.9.9.9"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//YarnConfiguration tries to figure out which rm host it's on by binding to it,
comment|//which doesn't happen for any of these fake addresses, so we end up with 0.0.0.0
name|assertEquals
argument_list|(
literal|"Web address misconfigured WITHOUT bind-host"
argument_list|,
name|rm
operator|.
name|webAppAddress
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not throw any exceptions."
argument_list|)
expr_stmt|;
block|}
comment|//test if only RM_HOSTBANE_{rm_id} is set
name|configuration
operator|.
name|clear
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
literal|"1.1.1.1"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RPC address not set for "
operator|+
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"1.1.1.1:8032"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RPC address not set for "
operator|+
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"0.0.0.0:8032"
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not throw any exceptions."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyClusterMetrics (int activeNodes, int appsSubmitted, int appsPending, int containersPending, long availableMB, int activeApplications)
specifier|private
name|void
name|verifyClusterMetrics
parameter_list|(
name|int
name|activeNodes
parameter_list|,
name|int
name|appsSubmitted
parameter_list|,
name|int
name|appsPending
parameter_list|,
name|int
name|containersPending
parameter_list|,
name|long
name|availableMB
parameter_list|,
name|int
name|activeApplications
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
name|QueueMetrics
name|metrics
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|boolean
name|isAllMetricAssertionDone
init|=
literal|false
decl_stmt|;
name|String
name|message
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|timeoutSecs
operator|++
operator|<
literal|5
condition|)
block|{
try|try
block|{
comment|// verify queue metrics
name|assertMetric
argument_list|(
literal|"appsSubmitted"
argument_list|,
name|appsSubmitted
argument_list|,
name|metrics
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
literal|"appsPending"
argument_list|,
name|appsPending
argument_list|,
name|metrics
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
literal|"containersPending"
argument_list|,
name|containersPending
argument_list|,
name|metrics
operator|.
name|getPendingContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
literal|"availableMB"
argument_list|,
name|availableMB
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertMetric
argument_list|(
literal|"activeApplications"
argument_list|,
name|activeApplications
argument_list|,
name|metrics
operator|.
name|getActiveApps
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify node metric
name|assertMetric
argument_list|(
literal|"activeNodes"
argument_list|,
name|activeNodes
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|)
expr_stmt|;
name|isAllMetricAssertionDone
operator|=
literal|true
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for metrics assertion to complete"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|message
argument_list|,
name|isAllMetricAssertionDone
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMetric (String metricName, long expected, long actual)
specifier|private
name|void
name|assertMetric
parameter_list|(
name|String
name|metricName
parameter_list|,
name|long
name|expected
parameter_list|,
name|long
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Incorrect value for metric "
operator|+
name|metricName
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|MyCountingDispatcher
class|class
name|MyCountingDispatcher
extends|extends
name|AbstractService
implements|implements
name|Dispatcher
block|{
DECL|field|eventHandlerCount
specifier|private
name|int
name|eventHandlerCount
decl_stmt|;
DECL|field|stopped
specifier|private
specifier|volatile
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
DECL|method|MyCountingDispatcher ()
specifier|public
name|MyCountingDispatcher
parameter_list|()
block|{
name|super
argument_list|(
literal|"MyCountingDispatcher"
argument_list|)
expr_stmt|;
name|this
operator|.
name|eventHandlerCount
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|register (Class<? extends Enum> eventType, EventHandler handler)
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|eventHandlerCount
operator|++
expr_stmt|;
block|}
DECL|method|getEventHandlerCount ()
specifier|public
name|int
name|getEventHandlerCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|eventHandlerCount
return|;
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
DECL|method|isStopped ()
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
block|}
DECL|class|FailFastDispatcher
class|class
name|FailFastDispatcher
extends|extends
name|DrainDispatcher
block|{
DECL|field|eventreceived
name|int
name|eventreceived
init|=
literal|0
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|dispatch (Event event)
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|RMFatalEventType
operator|.
name|TRANSITION_TO_ACTIVE_FAILED
condition|)
block|{
name|eventreceived
operator|++
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getEventCount ()
specifier|public
name|int
name|getEventCount
parameter_list|()
block|{
return|return
name|eventreceived
return|;
block|}
block|}
block|}
end_class

end_unit

