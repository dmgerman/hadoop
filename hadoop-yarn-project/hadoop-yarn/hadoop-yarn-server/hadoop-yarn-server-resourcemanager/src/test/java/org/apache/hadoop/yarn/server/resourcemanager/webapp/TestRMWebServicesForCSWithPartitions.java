begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
DECL|class|TestRMWebServicesForCSWithPartitions
specifier|public
class|class
name|TestRMWebServicesForCSWithPartitions
extends|extends
name|JerseyTestBase
block|{
DECL|field|DEFAULT_PARTITION
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PARTITION
init|=
literal|""
decl_stmt|;
DECL|field|CAPACITIES
specifier|private
specifier|static
specifier|final
name|String
name|CAPACITIES
init|=
literal|"capacities"
decl_stmt|;
DECL|field|RESOURCE_USAGES_BY_PARTITION
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_USAGES_BY_PARTITION
init|=
literal|"resourceUsagesByPartition"
decl_stmt|;
DECL|field|QUEUE_CAPACITIES_BY_PARTITION
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_CAPACITIES_BY_PARTITION
init|=
literal|"queueCapacitiesByPartition"
decl_stmt|;
DECL|field|QUEUE_C
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_C
init|=
literal|"Qc"
decl_stmt|;
DECL|field|LEAF_QUEUE_C1
specifier|private
specifier|static
specifier|final
name|String
name|LEAF_QUEUE_C1
init|=
literal|"Qc1"
decl_stmt|;
DECL|field|LEAF_QUEUE_C2
specifier|private
specifier|static
specifier|final
name|String
name|LEAF_QUEUE_C2
init|=
literal|"Qc2"
decl_stmt|;
DECL|field|QUEUE_B
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_B
init|=
literal|"Qb"
decl_stmt|;
DECL|field|QUEUE_A
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_A
init|=
literal|"Qa"
decl_stmt|;
DECL|field|LABEL_LY
specifier|private
specifier|static
specifier|final
name|String
name|LABEL_LY
init|=
literal|"Ly"
decl_stmt|;
DECL|field|LABEL_LX
specifier|private
specifier|static
specifier|final
name|String
name|LABEL_LX
init|=
literal|"Lx"
decl_stmt|;
DECL|field|CLUSTER_LABELS
specifier|private
specifier|static
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|CLUSTER_LABELS
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|,
name|LABEL_LY
argument_list|,
name|DEFAULT_PARTITION
argument_list|)
decl_stmt|;
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|csConf
specifier|private
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|ServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeLabel
argument_list|>
name|labels
init|=
operator|new
name|HashSet
argument_list|<
name|NodeLabel
argument_list|>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
name|LABEL_LX
argument_list|)
argument_list|)
expr_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
name|LABEL_LY
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|RMNodeLabelsManager
name|nodeLabelManager
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|nodeLabelManager
operator|.
name|addToCluserNodeLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
DECL|method|setupQueueConfiguration ( CapacitySchedulerConfiguration conf, ResourceManager rm)
specifier|private
specifier|static
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|,
name|ResourceManager
name|rm
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|QUEUE_A
block|,
name|QUEUE_B
block|,
name|QUEUE_C
block|}
argument_list|)
expr_stmt|;
name|String
name|interMediateQueueC
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUE_C
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|interMediateQueueC
argument_list|,
operator|new
name|String
index|[]
block|{
name|LEAF_QUEUE_C1
block|,
name|LEAF_QUEUE_C2
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|LABEL_LX
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|LABEL_LY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|String
name|leafQueueA
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUE_A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|leafQueueA
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|leafQueueA
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|String
name|leafQueueB
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUE_B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|leafQueueB
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|leafQueueB
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|interMediateQueueC
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|interMediateQueueC
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|String
name|leafQueueC1
init|=
name|interMediateQueueC
operator|+
literal|"."
operator|+
name|LEAF_QUEUE_C1
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|leafQueueC1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|leafQueueC1
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|String
name|leafQueueC2
init|=
name|interMediateQueueC
operator|+
literal|"."
operator|+
name|LEAF_QUEUE_C2
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|leafQueueC2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|leafQueueC2
argument_list|,
literal|70
argument_list|)
expr_stmt|;
comment|// Define label specific configuration
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|leafQueueA
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|DEFAULT_PARTITION
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|leafQueueB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|interMediateQueueC
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|,
name|LABEL_LY
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|leafQueueC1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|,
name|LABEL_LY
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|leafQueueC2
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|,
name|LABEL_LY
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|leafQueueB
argument_list|,
name|LABEL_LX
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|leafQueueC1
argument_list|,
name|LABEL_LX
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|leafQueueC2
argument_list|,
name|LABEL_LY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|leafQueueB
argument_list|,
name|LABEL_LX
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|interMediateQueueC
argument_list|,
name|LABEL_LX
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|leafQueueC1
argument_list|,
name|LABEL_LX
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|leafQueueC2
argument_list|,
name|LABEL_LX
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|interMediateQueueC
argument_list|,
name|LABEL_LY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|leafQueueC1
argument_list|,
name|LABEL_LY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|leafQueueC2
argument_list|,
name|LABEL_LY
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|leafQueueC1
argument_list|,
name|LABEL_LY
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|leafQueueC2
argument_list|,
name|LABEL_LY
argument_list|,
literal|75
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestRMWebServicesForCSWithPartitions ()
specifier|public
name|TestRMWebServicesForCSWithPartitions
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulerPartitions ()
specifier|public
name|void
name|testSchedulerPartitions
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifySchedulerInfoJson
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulerPartitionsSlash ()
specifier|public
name|void
name|testSchedulerPartitionsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifySchedulerInfoJson
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulerPartitionsDefault ()
specifier|public
name|void
name|testSchedulerPartitionsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifySchedulerInfoJson
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulerPartitionsXML ()
specifier|public
name|void
name|testSchedulerPartitionsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|verifySchedulerInfoXML
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySchedulerInfoXML (Document dom)
specifier|private
name|void
name|verifySchedulerInfoXML
parameter_list|(
name|Document
name|dom
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeList
name|scheduler
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"scheduler"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|scheduler
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|schedulerInfo
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"schedulerInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|schedulerInfo
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schedulerInfo
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|schedulerInfo
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NodeList
name|children
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|schedulerInfoElem
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedulerInfoElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|NodeList
name|qListInfos
init|=
name|schedulerInfoElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|qListInfos
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Element
name|qElem2
init|=
operator|(
name|Element
operator|)
name|qListInfos
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|queue
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem2
argument_list|,
literal|"queueName"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|queue
condition|)
block|{
case|case
name|QUEUE_A
case|:
name|verifyQueueAInfoXML
argument_list|(
name|qElem2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUEUE_B
case|:
name|verifyQueueBInfoXML
argument_list|(
name|qElem2
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUEUE_C
case|:
name|verifyQueueCInfoXML
argument_list|(
name|qElem2
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected queue"
operator|+
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|schedulerInfoElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|CAPACITIES
argument_list|)
condition|)
block|{
name|NodeList
name|capacitiesListInfos
init|=
name|schedulerInfoElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
literal|3
argument_list|,
name|capacitiesListInfos
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|capacitiesListInfos
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Element
name|partitionCapacitiesInfo
init|=
operator|(
name|Element
operator|)
name|capacitiesListInfos
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|"partitionName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"invalid PartitionCapacityInfo"
argument_list|,
name|CLUSTER_LABELS
operator|.
name|contains
argument_list|(
name|partitionName
argument_list|)
argument_list|)
expr_stmt|;
name|verifyPartitionCapacityInfoXML
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|verifyQueueAInfoXML (Element queueElem)
specifier|private
name|void
name|verifyQueueAInfoXML
parameter_list|(
name|Element
name|queueElem
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|queueElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|queueChildElem
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|CAPACITIES
argument_list|)
condition|)
block|{
name|NodeList
name|capacitiesListInfos
init|=
name|queueChildElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
literal|1
argument_list|,
name|capacitiesListInfos
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|partitionCapacitiesInfo
init|=
operator|(
name|Element
operator|)
name|capacitiesListInfos
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|"partitionName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"invalid PartitionCapacityInfo"
argument_list|,
name|partitionName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPartitionCapacityInfoXML
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"resources"
argument_list|)
condition|)
block|{
name|verifyResourceUsageInfoXML
argument_list|(
name|queueChildElem
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyQueueBInfoXML (Element queueElem)
specifier|private
name|void
name|verifyQueueBInfoXML
parameter_list|(
name|Element
name|queueElem
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid default Label expression"
argument_list|,
name|LABEL_LX
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|queueElem
argument_list|,
literal|"defaultNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeList
name|children
init|=
name|queueElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|queueChildElem
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|CAPACITIES
argument_list|)
condition|)
block|{
name|NodeList
name|capacitiesListInfos
init|=
name|queueChildElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
literal|2
argument_list|,
name|capacitiesListInfos
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|capacitiesListInfos
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Element
name|partitionCapacitiesInfo
init|=
operator|(
name|Element
operator|)
name|capacitiesListInfos
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|"partitionName"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|partitionName
condition|)
block|{
case|case
name|LABEL_LX
case|:
name|verifyPartitionCapacityInfoXML
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFAULT_PARTITION
case|:
name|verifyPartitionCapacityInfoXML
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected partition"
operator|+
name|partitionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|queueChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"resources"
argument_list|)
condition|)
block|{
name|verifyResourceUsageInfoXML
argument_list|(
name|queueChildElem
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Node Labels are not matching"
argument_list|,
name|LABEL_LX
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|queueElem
argument_list|,
literal|"nodeLabels"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueCInfoXML (Element queueElem)
specifier|private
name|void
name|verifyQueueCInfoXML
parameter_list|(
name|Element
name|queueElem
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|queueElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|queueChildElem
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|CAPACITIES
argument_list|)
condition|)
block|{
name|verifyQcCapacitiesInfoXML
argument_list|(
name|queueChildElem
argument_list|,
literal|70
argument_list|,
literal|100
argument_list|,
literal|70
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"resources"
argument_list|)
condition|)
block|{
name|verifyResourceUsageInfoXML
argument_list|(
name|queueChildElem
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queueChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|NodeList
name|qListInfos
init|=
name|queueChildElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|qListInfos
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Element
name|qElem2
init|=
operator|(
name|Element
operator|)
name|qListInfos
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|queue
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem2
argument_list|,
literal|"queueName"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|queue
condition|)
block|{
case|case
name|LEAF_QUEUE_C1
case|:
name|assertEquals
argument_list|(
literal|"Invalid default Label expression"
argument_list|,
name|LABEL_LX
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem2
argument_list|,
literal|"defaultNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeList
name|queuec1Children
init|=
name|qElem2
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|queuec1Children
operator|.
name|getLength
argument_list|()
condition|;
name|l
operator|++
control|)
block|{
name|Element
name|queueC1ChildElem
init|=
operator|(
name|Element
operator|)
name|queuec1Children
operator|.
name|item
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueC1ChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|CAPACITIES
argument_list|)
condition|)
block|{
name|verifyQcCapacitiesInfoXML
argument_list|(
name|queueC1ChildElem
argument_list|,
literal|40
argument_list|,
literal|100
argument_list|,
literal|28
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LEAF_QUEUE_C2
case|:
name|assertEquals
argument_list|(
literal|"Invalid default Label expression"
argument_list|,
name|LABEL_LY
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem2
argument_list|,
literal|"defaultNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeList
name|queuec2Children
init|=
name|qElem2
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|l
init|=
literal|0
init|;
name|l
operator|<
name|queuec2Children
operator|.
name|getLength
argument_list|()
condition|;
name|l
operator|++
control|)
block|{
name|Element
name|queueC2ChildElem
init|=
operator|(
name|Element
operator|)
name|queuec2Children
operator|.
name|item
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueC2ChildElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
name|CAPACITIES
argument_list|)
condition|)
block|{
name|verifyQcCapacitiesInfoXML
argument_list|(
name|queueC2ChildElem
argument_list|,
literal|60
argument_list|,
literal|100
argument_list|,
literal|42
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|70
argument_list|,
literal|20
argument_list|,
literal|35
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected queue"
operator|+
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|verifyQcCapacitiesInfoXML (Element partitionCapacitiesElem, float lxCaps, float lxMaxCaps, float lxAbsCaps, float lxAbsMaxCaps, float lyCaps, float lyMaxCaps, float lyAbsCaps, float lyAbsMaxCaps, float defCaps, float defMaxCaps, float defAbsCaps, float defAbsMaxCaps)
specifier|private
name|void
name|verifyQcCapacitiesInfoXML
parameter_list|(
name|Element
name|partitionCapacitiesElem
parameter_list|,
name|float
name|lxCaps
parameter_list|,
name|float
name|lxMaxCaps
parameter_list|,
name|float
name|lxAbsCaps
parameter_list|,
name|float
name|lxAbsMaxCaps
parameter_list|,
name|float
name|lyCaps
parameter_list|,
name|float
name|lyMaxCaps
parameter_list|,
name|float
name|lyAbsCaps
parameter_list|,
name|float
name|lyAbsMaxCaps
parameter_list|,
name|float
name|defCaps
parameter_list|,
name|float
name|defMaxCaps
parameter_list|,
name|float
name|defAbsCaps
parameter_list|,
name|float
name|defAbsMaxCaps
parameter_list|)
block|{
name|NodeList
name|capacitiesListInfos
init|=
name|partitionCapacitiesElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
literal|3
argument_list|,
name|capacitiesListInfos
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|capacitiesListInfos
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Element
name|partitionCapacitiesInfo
init|=
operator|(
name|Element
operator|)
name|capacitiesListInfos
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
literal|"partitionName"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|partitionName
condition|)
block|{
case|case
name|LABEL_LX
case|:
name|verifyPartitionCapacityInfoXML
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
name|lxCaps
argument_list|,
literal|0
argument_list|,
name|lxMaxCaps
argument_list|,
name|lxAbsCaps
argument_list|,
literal|0
argument_list|,
name|lxAbsMaxCaps
argument_list|)
expr_stmt|;
break|break;
case|case
name|LABEL_LY
case|:
name|verifyPartitionCapacityInfoXML
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
name|lyCaps
argument_list|,
literal|0
argument_list|,
name|lyMaxCaps
argument_list|,
name|lyAbsCaps
argument_list|,
literal|0
argument_list|,
name|lyAbsMaxCaps
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFAULT_PARTITION
case|:
name|verifyPartitionCapacityInfoXML
argument_list|(
name|partitionCapacitiesInfo
argument_list|,
name|defCaps
argument_list|,
literal|0
argument_list|,
name|defMaxCaps
argument_list|,
name|defAbsCaps
argument_list|,
literal|0
argument_list|,
name|defAbsMaxCaps
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected partition"
operator|+
name|partitionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyResourceUsageInfoXML (Element queueChildElem)
specifier|private
name|void
name|verifyResourceUsageInfoXML
parameter_list|(
name|Element
name|queueChildElem
parameter_list|)
block|{
name|NodeList
name|resourceUsageInfo
init|=
name|queueChildElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
literal|1
argument_list|,
name|resourceUsageInfo
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|partitionResourceUsageInfo
init|=
operator|(
name|Element
operator|)
name|resourceUsageInfo
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|partitionResourceUsageInfo
argument_list|,
literal|"partitionName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"invalid PartitionCapacityInfo"
argument_list|,
name|DEFAULT_PARTITION
operator|.
name|equals
argument_list|(
name|partitionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyPartitionCapacityInfoXML (Element partitionInfo, float capacity, float usedCapacity, float maxCapacity, float absoluteCapacity, float absoluteUsedCapacity, float absoluteMaxCapacity)
specifier|private
name|void
name|verifyPartitionCapacityInfoXML
parameter_list|(
name|Element
name|partitionInfo
parameter_list|,
name|float
name|capacity
parameter_list|,
name|float
name|usedCapacity
parameter_list|,
name|float
name|maxCapacity
parameter_list|,
name|float
name|absoluteCapacity
parameter_list|,
name|float
name|absoluteUsedCapacity
parameter_list|,
name|float
name|absoluteMaxCapacity
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|capacity
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|partitionInfo
argument_list|,
literal|"capacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|usedCapacity
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|partitionInfo
argument_list|,
literal|"usedCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|maxCapacity
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|partitionInfo
argument_list|,
literal|"maxCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|absoluteCapacity
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|partitionInfo
argument_list|,
literal|"absoluteCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|absoluteUsedCapacity
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|partitionInfo
argument_list|,
literal|"absoluteUsedCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|absoluteMaxCapacity
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|partitionInfo
argument_list|,
literal|"absoluteMaxCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySchedulerInfoJson (JSONObject json)
specifier|private
name|void
name|verifySchedulerInfoJson
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"scheduler"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"schedulerInfo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|8
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|capacitiesJsonObject
init|=
name|info
operator|.
name|getJSONObject
argument_list|(
name|CAPACITIES
argument_list|)
decl_stmt|;
name|JSONArray
name|partitionsCapsArray
init|=
name|capacitiesJsonObject
operator|.
name|getJSONArray
argument_list|(
name|QUEUE_CAPACITIES_BY_PARTITION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
name|CLUSTER_LABELS
operator|.
name|size
argument_list|()
argument_list|,
name|partitionsCapsArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partitionsCapsArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|partitionInfo
init|=
name|partitionsCapsArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|partitionInfo
operator|.
name|getString
argument_list|(
literal|"partitionName"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unknown partition received"
argument_list|,
name|CLUSTER_LABELS
operator|.
name|contains
argument_list|(
name|partitionName
argument_list|)
argument_list|)
expr_stmt|;
name|verifyPartitionCapacityInfoJson
argument_list|(
name|partitionInfo
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
name|JSONObject
name|jsonQueuesObject
init|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"queues"
argument_list|)
decl_stmt|;
name|JSONArray
name|queuesArray
init|=
name|jsonQueuesObject
operator|.
name|getJSONArray
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queuesArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|queueJson
init|=
name|queuesArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|queue
init|=
name|queueJson
operator|.
name|getString
argument_list|(
literal|"queueName"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Partition resourceInfo is wrong"
argument_list|,
literal|1
argument_list|,
name|queueJson
operator|.
name|getJSONObject
argument_list|(
literal|"resources"
argument_list|)
operator|.
name|getJSONArray
argument_list|(
name|RESOURCE_USAGES_BY_PARTITION
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|resourcesJsonObject
init|=
name|queueJson
operator|.
name|getJSONObject
argument_list|(
literal|"resources"
argument_list|)
decl_stmt|;
name|JSONArray
name|partitionsResourcesArray
init|=
name|resourcesJsonObject
operator|.
name|getJSONArray
argument_list|(
literal|"resourceUsagesByPartition"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|partitionsResourcesArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|capacitiesJsonObject
operator|=
name|queueJson
operator|.
name|getJSONObject
argument_list|(
name|CAPACITIES
argument_list|)
expr_stmt|;
name|partitionsCapsArray
operator|=
name|capacitiesJsonObject
operator|.
name|getJSONArray
argument_list|(
name|QUEUE_CAPACITIES_BY_PARTITION
argument_list|)
expr_stmt|;
name|JSONObject
name|partitionInfo
init|=
literal|null
decl_stmt|;
name|String
name|partitionName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|queue
condition|)
block|{
case|case
name|QUEUE_A
case|:
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
literal|1
argument_list|,
name|partitionsCapsArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|partitionInfo
operator|=
name|partitionsCapsArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|partitionName
operator|=
name|partitionInfo
operator|.
name|getString
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
name|verifyPartitionCapacityInfoJson
argument_list|(
name|partitionInfo
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|5
argument_list|,
name|partitionsResourcesArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QUEUE_B
case|:
name|assertEquals
argument_list|(
literal|"Invalid default Label expression"
argument_list|,
name|LABEL_LX
argument_list|,
name|queueJson
operator|.
name|getString
argument_list|(
literal|"defaultNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|5
argument_list|,
name|partitionsResourcesArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAccesibleNodeLabels
argument_list|(
name|queueJson
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
literal|2
argument_list|,
name|partitionsCapsArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|partitionsCapsArray
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|partitionInfo
operator|=
name|partitionsCapsArray
operator|.
name|getJSONObject
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|partitionName
operator|=
name|partitionInfo
operator|.
name|getString
argument_list|(
literal|"partitionName"
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|partitionName
condition|)
block|{
case|case
name|LABEL_LX
case|:
name|verifyPartitionCapacityInfoJson
argument_list|(
name|partitionInfo
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFAULT_PARTITION
case|:
name|verifyPartitionCapacityInfoJson
argument_list|(
name|partitionInfo
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected partition"
operator|+
name|partitionName
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|QUEUE_C
case|:
name|verifyAccesibleNodeLabels
argument_list|(
name|queueJson
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|,
name|LABEL_LY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|4
argument_list|,
name|partitionsResourcesArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyQcPartitionsCapacityInfoJson
argument_list|(
name|partitionsCapsArray
argument_list|,
literal|70
argument_list|,
literal|100
argument_list|,
literal|70
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|verifySubQueuesOfQc
argument_list|(
name|queueJson
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected queue"
operator|+
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyAccesibleNodeLabels (JSONObject queueJson, Set<String> accesibleNodeLabels)
specifier|private
name|void
name|verifyAccesibleNodeLabels
parameter_list|(
name|JSONObject
name|queueJson
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|accesibleNodeLabels
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONArray
name|nodeLabels
init|=
name|queueJson
operator|.
name|getJSONArray
argument_list|(
literal|"nodeLabels"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"number of accessible Node Labels not matching"
argument_list|,
name|accesibleNodeLabels
operator|.
name|size
argument_list|()
argument_list|,
name|nodeLabels
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeLabels
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"Invalid accessible node label : "
operator|+
name|nodeLabels
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|,
name|accesibleNodeLabels
operator|.
name|contains
argument_list|(
name|nodeLabels
operator|.
name|getString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifySubQueuesOfQc (JSONObject queueCJson)
specifier|private
name|void
name|verifySubQueuesOfQc
parameter_list|(
name|JSONObject
name|queueCJson
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|jsonQueuesObject
init|=
name|queueCJson
operator|.
name|getJSONObject
argument_list|(
literal|"queues"
argument_list|)
decl_stmt|;
name|JSONArray
name|queuesArray
init|=
name|jsonQueuesObject
operator|.
name|getJSONArray
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queuesArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|queueJson
init|=
name|queuesArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|queue
init|=
name|queueJson
operator|.
name|getString
argument_list|(
literal|"queueName"
argument_list|)
decl_stmt|;
name|JSONObject
name|capacitiesJsonObject
init|=
name|queueJson
operator|.
name|getJSONObject
argument_list|(
name|CAPACITIES
argument_list|)
decl_stmt|;
name|JSONArray
name|partitionsCapsArray
init|=
name|capacitiesJsonObject
operator|.
name|getJSONArray
argument_list|(
name|QUEUE_CAPACITIES_BY_PARTITION
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|queue
condition|)
block|{
case|case
name|LEAF_QUEUE_C1
case|:
name|verifyAccesibleNodeLabels
argument_list|(
name|queueJson
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|,
name|LABEL_LY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid default Label expression"
argument_list|,
name|LABEL_LX
argument_list|,
name|queueJson
operator|.
name|getString
argument_list|(
literal|"defaultNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQcPartitionsCapacityInfoJson
argument_list|(
name|partitionsCapsArray
argument_list|,
literal|40
argument_list|,
literal|100
argument_list|,
literal|28
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEAF_QUEUE_C2
case|:
name|verifyAccesibleNodeLabels
argument_list|(
name|queueJson
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|LABEL_LX
argument_list|,
name|LABEL_LY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid default Label expression"
argument_list|,
name|LABEL_LY
argument_list|,
name|queueJson
operator|.
name|getString
argument_list|(
literal|"defaultNodeLabelExpression"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQcPartitionsCapacityInfoJson
argument_list|(
name|partitionsCapsArray
argument_list|,
literal|60
argument_list|,
literal|100
argument_list|,
literal|42
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|75
argument_list|,
literal|50
argument_list|,
literal|70
argument_list|,
literal|20
argument_list|,
literal|35
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected queue"
operator|+
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyQcPartitionsCapacityInfoJson (JSONArray partitionsCapsArray, float lxCaps, float lxMaxCaps, float lxAbsCaps, float lxAbsMaxCaps, float lyCaps, float lyMaxCaps, float lyAbsCaps, float lyAbsMaxCaps, float defCaps, float defMaxCaps, float defAbsCaps, float defAbsMaxCaps)
specifier|private
name|void
name|verifyQcPartitionsCapacityInfoJson
parameter_list|(
name|JSONArray
name|partitionsCapsArray
parameter_list|,
name|float
name|lxCaps
parameter_list|,
name|float
name|lxMaxCaps
parameter_list|,
name|float
name|lxAbsCaps
parameter_list|,
name|float
name|lxAbsMaxCaps
parameter_list|,
name|float
name|lyCaps
parameter_list|,
name|float
name|lyMaxCaps
parameter_list|,
name|float
name|lyAbsCaps
parameter_list|,
name|float
name|lyAbsMaxCaps
parameter_list|,
name|float
name|defCaps
parameter_list|,
name|float
name|defMaxCaps
parameter_list|,
name|float
name|defAbsCaps
parameter_list|,
name|float
name|defAbsMaxCaps
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of partitions"
argument_list|,
name|CLUSTER_LABELS
operator|.
name|size
argument_list|()
argument_list|,
name|partitionsCapsArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|partitionsCapsArray
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|JSONObject
name|partitionInfo
init|=
name|partitionsCapsArray
operator|.
name|getJSONObject
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|partitionName
init|=
name|partitionInfo
operator|.
name|getString
argument_list|(
literal|"partitionName"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|partitionName
condition|)
block|{
case|case
name|LABEL_LX
case|:
name|verifyPartitionCapacityInfoJson
argument_list|(
name|partitionInfo
argument_list|,
name|lxCaps
argument_list|,
literal|0
argument_list|,
name|lxMaxCaps
argument_list|,
name|lxAbsCaps
argument_list|,
literal|0
argument_list|,
name|lxAbsMaxCaps
argument_list|)
expr_stmt|;
break|break;
case|case
name|LABEL_LY
case|:
name|verifyPartitionCapacityInfoJson
argument_list|(
name|partitionInfo
argument_list|,
name|lyCaps
argument_list|,
literal|0
argument_list|,
name|lyMaxCaps
argument_list|,
name|lyAbsCaps
argument_list|,
literal|0
argument_list|,
name|lyAbsMaxCaps
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEFAULT_PARTITION
case|:
name|verifyPartitionCapacityInfoJson
argument_list|(
name|partitionInfo
argument_list|,
name|defCaps
argument_list|,
literal|0
argument_list|,
name|defMaxCaps
argument_list|,
name|defAbsCaps
argument_list|,
literal|0
argument_list|,
name|defAbsMaxCaps
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected partition"
operator|+
name|partitionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyPartitionCapacityInfoJson ( JSONObject partitionCapacityInfoJson, float capacity, float usedCapacity, float maxCapacity, float absoluteCapacity, float absoluteUsedCapacity, float absoluteMaxCapacity)
specifier|private
name|void
name|verifyPartitionCapacityInfoJson
parameter_list|(
name|JSONObject
name|partitionCapacityInfoJson
parameter_list|,
name|float
name|capacity
parameter_list|,
name|float
name|usedCapacity
parameter_list|,
name|float
name|maxCapacity
parameter_list|,
name|float
name|absoluteCapacity
parameter_list|,
name|float
name|absoluteUsedCapacity
parameter_list|,
name|float
name|absoluteMaxCapacity
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|capacity
argument_list|,
operator|(
name|float
operator|)
name|partitionCapacityInfoJson
operator|.
name|getDouble
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|usedCapacity
argument_list|,
operator|(
name|float
operator|)
name|partitionCapacityInfoJson
operator|.
name|getDouble
argument_list|(
literal|"usedCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|maxCapacity
argument_list|,
operator|(
name|float
operator|)
name|partitionCapacityInfoJson
operator|.
name|getDouble
argument_list|(
literal|"maxCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|absoluteCapacity
argument_list|,
operator|(
name|float
operator|)
name|partitionCapacityInfoJson
operator|.
name|getDouble
argument_list|(
literal|"absoluteCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|absoluteUsedCapacity
argument_list|,
operator|(
name|float
operator|)
name|partitionCapacityInfoJson
operator|.
name|getDouble
argument_list|(
literal|"absoluteUsedCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|absoluteMaxCapacity
argument_list|,
operator|(
name|float
operator|)
name|partitionCapacityInfoJson
operator|.
name|getDouble
argument_list|(
literal|"absoluteMaxCapacity"
argument_list|)
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

