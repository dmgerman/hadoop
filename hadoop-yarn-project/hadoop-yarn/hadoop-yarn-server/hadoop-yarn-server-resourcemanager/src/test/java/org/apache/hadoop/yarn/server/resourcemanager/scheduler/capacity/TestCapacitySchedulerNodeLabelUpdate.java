begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeLabelsUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestCapacitySchedulerNodeLabelUpdate
specifier|public
class|class
name|TestCapacitySchedulerNodeLabelUpdate
block|{
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|mgr
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigurationWithQueueLabels (Configuration config)
specifier|private
name|Configuration
name|getConfigurationWithQueueLabels
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|getConfigurationWithSubQueueLabels ( Configuration config)
specifier|private
name|Configuration
name|getConfigurationWithSubQueueLabels
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|conf2
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|conf2
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|a
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
specifier|final
name|String
name|b
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
specifier|final
name|String
name|aa1
init|=
name|a
operator|+
literal|".a1"
decl_stmt|;
specifier|final
name|String
name|aa2
init|=
name|a
operator|+
literal|".a2"
decl_stmt|;
specifier|final
name|String
name|aa3
init|=
name|a
operator|+
literal|".a3"
decl_stmt|;
specifier|final
name|String
name|aa4
init|=
name|a
operator|+
literal|".a4"
decl_stmt|;
name|conf2
operator|.
name|setQueues
argument_list|(
name|a
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|,
literal|"a3"
block|,
literal|"a4"
block|}
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacity
argument_list|(
name|a
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacity
argument_list|(
name|b
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacity
argument_list|(
name|aa1
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacity
argument_list|(
name|aa2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacity
argument_list|(
name|aa3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacity
argument_list|(
name|aa4
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|a
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|aa1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|aa2
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|aa3
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|aa4
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|a
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|a
argument_list|,
literal|"y"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|a
argument_list|,
literal|"z"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|b
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|b
argument_list|,
literal|"y"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|b
argument_list|,
literal|"z"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa1
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa3
argument_list|,
literal|"x"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa4
argument_list|,
literal|"x"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa1
argument_list|,
literal|"y"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa2
argument_list|,
literal|"y"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa4
argument_list|,
literal|"y"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa3
argument_list|,
literal|"z"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf2
operator|.
name|setCapacityByLabel
argument_list|(
name|aa4
argument_list|,
literal|"z"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
return|return
name|conf2
return|;
block|}
DECL|method|toSet (String... elements)
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|toSet
parameter_list|(
name|String
modifier|...
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
name|set
return|;
block|}
DECL|method|checkUsedResource (MockRM rm, String queueName, int memory)
specifier|private
name|void
name|checkUsedResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|memory
parameter_list|)
block|{
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
name|queueName
argument_list|,
name|memory
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAMUsedResource (MockRM rm, String queueName, int memory)
specifier|private
name|void
name|checkAMUsedResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|memory
parameter_list|)
block|{
name|checkAMUsedResource
argument_list|(
name|rm
argument_list|,
name|queueName
argument_list|,
name|memory
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
block|}
DECL|method|checkUsedCapacity (MockRM rm, String queueName, int capacity, int total)
specifier|private
name|void
name|checkUsedCapacity
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|capacity
parameter_list|,
name|int
name|total
parameter_list|)
block|{
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
name|queueName
argument_list|,
name|capacity
argument_list|,
name|total
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
block|}
DECL|method|checkUsedResource (MockRM rm, String queueName, int memory, String label)
specifier|private
name|void
name|checkUsedResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
name|label
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkUsedCapacity (MockRM rm, String queueName, int capacity, int total, String label)
specifier|private
name|void
name|checkUsedCapacity
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|capacity
parameter_list|,
name|int
name|total
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|float
name|epsillon
init|=
literal|0.0001f
decl_stmt|;
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|float
operator|)
name|capacity
operator|/
name|total
argument_list|,
name|queue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getUsedCapacity
argument_list|(
name|label
argument_list|)
argument_list|,
name|epsillon
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAMUsedResource (MockRM rm, String queueName, int memory, String label)
specifier|private
name|void
name|checkAMUsedResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getAMUsed
argument_list|(
name|label
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkUserUsedResource (MockRM rm, String queueName, String userName, String partition, int memory)
specifier|private
name|void
name|checkUserUsedResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|userName
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|memory
parameter_list|)
block|{
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|LeafQueue
name|queue
init|=
operator|(
name|LeafQueue
operator|)
name|scheduler
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|LeafQueue
operator|.
name|User
name|user
init|=
name|queue
operator|.
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|user
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
name|partition
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRequestContainerAfterNodePartitionUpdated ()
specifier|public
name|void
name|testRequestContainerAfterNodePartitionUpdated
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set mapping:
comment|// h1 -> x
comment|// h2 -> y
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
name|ApplicationResourceUsageReport
name|appResourceUsageReport
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getAppResourceUsageReport
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|appResourceUsageReport
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appResourceUsageReport
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|appResourceUsageReport
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getAppResourceUsageReport
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|appResourceUsageReport
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|appResourceUsageReport
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|LeafQueue
name|queue
init|=
call|(
name|LeafQueue
call|)
argument_list|(
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|)
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|UserInfo
argument_list|>
name|users
init|=
name|queue
operator|.
name|getUsers
argument_list|()
decl_stmt|;
for|for
control|(
name|UserInfo
name|userInfo
range|:
name|users
control|)
block|{
if|if
condition|(
name|userInfo
operator|.
name|getUsername
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
condition|)
block|{
name|ResourceInfo
name|resourcesUsed
init|=
name|userInfo
operator|.
name|getResourcesUsed
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|resourcesUsed
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resourcesUsed
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceUsageWhenNodeUpdatesPartition ()
specifier|public
name|void
name|testResourceUsageWhenNodeUpdatesPartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set mapping:
comment|// h1 -> x
comment|// h2 -> y
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId1
decl_stmt|;
name|ContainerId
name|containerId2
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|containerId1
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|containerId2
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// check used resource:
comment|// queue-a used x=1G, ""=1G
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|8000
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|8000
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// change h1's label to z
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|toSet
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeLabelsUpdateSchedulerEvent
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|toSet
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|8000
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|8000
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|1024
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"z"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"z"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// change h1's label to y
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeLabelsUpdateSchedulerEvent
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|16000
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|8000
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|1024
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"y"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"z"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"y"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"z"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// change h1's label to no label
name|Set
argument_list|<
name|String
argument_list|>
name|emptyLabels
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|emptyLabels
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeLabelsUpdateSchedulerEvent
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|2048
argument_list|,
literal|16000
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"y"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"z"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|""
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"y"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"z"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|""
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finish the two containers, we should see used resource becomes 0
name|cs
operator|.
name|completedContainer
argument_list|(
name|cs
operator|.
name|getRMContainer
argument_list|(
name|containerId2
argument_list|)
argument_list|,
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId2
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|cs
operator|.
name|completedContainer
argument_list|(
name|cs
operator|.
name|getRMContainer
argument_list|(
name|containerId1
argument_list|)
argument_list|,
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|8000
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedCapacity
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|16000
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"y"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"z"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testMoveApplicationWithLabel ()
specifier|public
name|void
name|testMoveApplicationWithLabel
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set mapping:
comment|// h1 -> x
comment|// h2 -> y
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|getConfigurationWithSubQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
operator|*
literal|2
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
operator|*
literal|2
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|4096
operator|*
literal|2
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h4:1234"
argument_list|,
literal|4096
operator|*
literal|2
argument_list|)
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|ContainerId
name|container1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|container1
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|ContainerId
name|container2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|container2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|scheduler
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
decl_stmt|;
try|try
block|{
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw exception since target queue doesnt have "
operator|+
literal|"required labels"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Yarn Exception should be thrown"
argument_list|,
name|e
operator|instanceof
name|YarnException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Specified queue=a2 can't satisfy "
operator|+
literal|"following apps label expressions =[x] accessible "
operator|+
literal|"node labels =[y]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"a3"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"a4"
argument_list|)
expr_stmt|;
comment|// Check move to queue with accessible label ANY
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not throw exception since target queue has "
operator|+
literal|"required labels"
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testComplexResourceUsageWhenNodeUpdatesPartition ()
specifier|public
name|void
name|testComplexResourceUsageWhenNodeUpdatesPartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * This test is similar to testResourceUsageWhenNodeUpdatesPartition, this      * will include multiple applications, multiple users and multiple      * containers running on a single node, size of each container is 1G      *      * Node 1      * ------      * App1-container3      * App2-container2      * App2-Container3      *      * Node 2      * ------      * App2-container1      * App1-container1      * App1-container2      */
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set mapping:
comment|// h1 -> x
comment|// h2 -> y
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|80000
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|80000
argument_list|)
decl_stmt|;
comment|// app1
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"u1"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// c2 on n1, c3 on n2
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// app2
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"u2"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// c2/c3 on n1
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// check used resource:
comment|// queue-a used x=1G, ""=1G
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|3
operator|*
name|GB
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|application1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|application2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// change h1's label to z
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeLabelsUpdateSchedulerEvent
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|toSet
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|3
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"root"
argument_list|,
literal|3
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"u1"
argument_list|,
literal|"x"
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"u1"
argument_list|,
literal|"z"
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"u1"
argument_list|,
literal|""
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"u2"
argument_list|,
literal|"x"
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"u2"
argument_list|,
literal|"z"
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"u2"
argument_list|,
literal|""
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application1
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application1
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"z"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|application1
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|""
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application2
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|application2
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"z"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application2
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|""
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMResourceUsageWhenNodeUpdatesPartition ()
specifier|public
name|void
name|testAMResourceUsageWhenNodeUpdatesPartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set mapping:
comment|// h1 -> x
comment|// h2 -> y
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8000
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|8000
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|containerId2
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// check used resource:
comment|// queue-a used x=2G
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|2048
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkAMUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// change h1's label to z
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeLabelsUpdateSchedulerEvent
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|toSet
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now the resources also should change from x to z. Verify AM and normal
comment|// used resource are successfully changed.
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|2048
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkAMUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkAMUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"z"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getAMUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getAMUsed
argument_list|(
literal|"z"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// change h1's label to no label
name|Set
argument_list|<
name|String
argument_list|>
name|emptyLabels
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|emptyLabels
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeLabelsUpdateSchedulerEvent
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|checkAMUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|checkAMUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|checkAMUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|"z"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkUserUsedResource
argument_list|(
name|rm
argument_list|,
literal|"a"
argument_list|,
literal|"user"
argument_list|,
literal|""
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getAMUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getAMUsed
argument_list|(
literal|"z"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getAMUsed
argument_list|(
literal|""
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

