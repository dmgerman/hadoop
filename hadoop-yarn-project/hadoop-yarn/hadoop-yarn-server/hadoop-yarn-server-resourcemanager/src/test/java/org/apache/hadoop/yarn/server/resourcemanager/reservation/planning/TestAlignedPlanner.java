begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation.planning
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|CapacityOverTimePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|InMemoryPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|InMemoryReservationAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|RLESparseResourceAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystemTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|planning
operator|.
name|StageAllocatorLowCostAligned
operator|.
name|DurationInterval
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class tests the {@code AlignedPlannerWithGreedy} agent.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|NotThreadSafe
annotation|@
name|SuppressWarnings
argument_list|(
literal|"VisibilityModifier"
argument_list|)
DECL|class|TestAlignedPlanner
specifier|public
class|class
name|TestAlignedPlanner
block|{
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|0
argument_list|)
DECL|field|recurrenceExpression
specifier|public
name|String
name|recurrenceExpression
decl_stmt|;
DECL|field|NONPERIODIC
specifier|final
specifier|static
name|String
name|NONPERIODIC
init|=
literal|"0"
decl_stmt|;
DECL|field|THREEHOURPERIOD
specifier|final
specifier|static
name|String
name|THREEHOURPERIOD
init|=
literal|"10800000"
decl_stmt|;
DECL|field|ONEDAYPERIOD
specifier|final
specifier|static
name|String
name|ONEDAYPERIOD
init|=
literal|"86400000"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAlignedPlanner
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|agentRight
specifier|private
name|ReservationAgent
name|agentRight
decl_stmt|;
DECL|field|agentLeft
specifier|private
name|ReservationAgent
name|agentLeft
decl_stmt|;
DECL|field|plan
specifier|private
name|InMemoryPlan
name|plan
decl_stmt|;
DECL|field|minAlloc
specifier|private
specifier|final
name|Resource
name|minAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|res
specifier|private
specifier|final
name|ResourceCalculator
name|res
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|maxAlloc
specifier|private
specifier|final
name|Resource
name|maxAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
literal|8
argument_list|,
literal|8
argument_list|)
decl_stmt|;
DECL|field|rand
specifier|private
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
DECL|field|clusterCapacity
specifier|private
name|Resource
name|clusterCapacity
decl_stmt|;
DECL|field|step
specifier|private
name|long
name|step
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"Testing: periodicity {0})"
argument_list|)
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|NONPERIODIC
block|}
block|,
block|{
name|THREEHOURPERIOD
block|}
block|,
block|{
name|ONEDAYPERIOD
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSingleReservationAccept ()
specifier|public
name|void
name|testSingleReservationAccept
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario1
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|5
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|20
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|,
comment|// Capability
literal|10
argument_list|,
comment|// Num containers
literal|5
argument_list|,
comment|// Concurrency
literal|10
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc1
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|10
operator|*
name|step
argument_list|,
literal|20
operator|*
name|step
argument_list|,
literal|10
argument_list|,
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------AFTER AGENT----------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderNoGapImpossible ()
specifier|public
name|void
name|testOrderNoGapImpossible
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|15
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ORDER_NO_GAP
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
try|try
block|{
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
comment|// CHECK: allocation was not accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation should have failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderNoGapImpossible2 ()
specifier|public
name|void
name|testOrderNoGapImpossible2
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|13
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|10
argument_list|,
comment|// Num containers
literal|10
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ORDER_NO_GAP
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
try|try
block|{
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
comment|// CHECK: allocation was not accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation should have failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderImpossible ()
specifier|public
name|void
name|testOrderImpossible
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|15
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
try|try
block|{
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
comment|// CHECK: allocation was not accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation should have failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAnyImpossible ()
specifier|public
name|void
name|testAnyImpossible
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|15
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|3
operator|*
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ANY
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
try|try
block|{
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
comment|// CHECK: allocation was not accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation should have failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAnyAccept ()
specifier|public
name|void
name|testAnyAccept
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|15
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ANY
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc1
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|14
operator|*
name|step
argument_list|,
literal|15
operator|*
name|step
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllAccept ()
specifier|public
name|void
name|testAllAccept
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|15
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc1
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|10
operator|*
name|step
argument_list|,
literal|11
operator|*
name|step
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|14
operator|*
name|step
argument_list|,
literal|15
operator|*
name|step
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllImpossible ()
specifier|public
name|void
name|testAllImpossible
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|15
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
try|try
block|{
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
comment|// CHECK: allocation was not accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation should have failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdate ()
specifier|public
name|void
name|testUpdate
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Create flexible reservation
name|ReservationDefinition
name|rrFlex
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|14
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|100
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Create blocking reservation
name|ReservationDefinition
name|rrBlock
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|11
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|100
argument_list|,
comment|// Num containers
literal|100
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Create reservation IDs
name|ReservationId
name|flexReservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|ReservationId
name|blockReservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
comment|// Add block, add flex, remove block, update flex
name|agentRight
operator|.
name|createReservation
argument_list|(
name|blockReservationID
argument_list|,
literal|"uBlock"
argument_list|,
name|plan
argument_list|,
name|rrBlock
argument_list|)
expr_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|flexReservationID
argument_list|,
literal|"uFlex"
argument_list|,
name|plan
argument_list|,
name|rrFlex
argument_list|)
expr_stmt|;
name|agentRight
operator|.
name|deleteReservation
argument_list|(
name|blockReservationID
argument_list|,
literal|"uBlock"
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|agentRight
operator|.
name|updateReservation
argument_list|(
name|flexReservationID
argument_list|,
literal|"uFlex"
argument_list|,
name|plan
argument_list|,
name|rrFlex
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|flexReservationID
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc1
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|flexReservationID
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|10
operator|*
name|step
argument_list|,
literal|14
operator|*
name|step
argument_list|,
literal|50
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testImpossibleDuration ()
specifier|public
name|void
name|testImpossibleDuration
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|15
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|10
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
try|try
block|{
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
comment|// CHECK: allocation was not accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation should have failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadedDurationIntervals ()
specifier|public
name|void
name|testLoadedDurationIntervals
parameter_list|()
throws|throws
name|PlanningException
block|{
name|int
name|numJobsInScenario
init|=
name|initializeScenario3
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|13
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|80
argument_list|,
comment|// Num containers
literal|10
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc1
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|10
operator|*
name|step
argument_list|,
literal|11
operator|*
name|step
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|11
operator|*
name|step
argument_list|,
literal|12
operator|*
name|step
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|12
operator|*
name|step
argument_list|,
literal|13
operator|*
name|step
argument_list|,
literal|40
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCostFunction ()
specifier|public
name|void
name|testCostFunction
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Create large memory reservation
name|ReservationDefinition
name|rr7Mem1Core
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|11
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|7
operator|*
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|1
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr6Mem6Cores
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|11
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|6
argument_list|)
argument_list|,
comment|// Capability
literal|1
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u2"
argument_list|)
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|12
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|1
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u3"
argument_list|)
decl_stmt|;
comment|// Create reservation IDs
name|ReservationId
name|reservationID1
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|ReservationId
name|reservationID2
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|ReservationId
name|reservationID3
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
comment|// Add all
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID1
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr7Mem1Core
argument_list|)
expr_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID2
argument_list|,
literal|"u2"
argument_list|,
name|plan
argument_list|,
name|rr6Mem6Cores
argument_list|)
expr_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID3
argument_list|,
literal|"u3"
argument_list|,
name|plan
argument_list|,
name|rr
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc3
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|alloc3
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc3
argument_list|,
literal|10
operator|*
name|step
argument_list|,
literal|11
operator|*
name|step
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|alloc3
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc3
argument_list|,
literal|11
operator|*
name|step
argument_list|,
literal|12
operator|*
name|step
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFromCluster ()
specifier|public
name|void
name|testFromCluster
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// int numJobsInScenario = initializeScenario3();
name|List
argument_list|<
name|ReservationDefinition
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationDefinition
argument_list|>
argument_list|()
decl_stmt|;
comment|// Create reservation
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716392178L
argument_list|,
comment|// Job arrival time
literal|1425722262791L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|7
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|587000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u1"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716406178L
argument_list|,
comment|// Job arrival time
literal|1425721255841L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|6
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|485000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u2"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716399178L
argument_list|,
comment|// Job arrival time
literal|1425723780138L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|6
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|738000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u3"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716437178L
argument_list|,
comment|// Job arrival time
literal|1425722968378L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|7
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|653000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u4"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716406178L
argument_list|,
comment|// Job arrival time
literal|1425721926090L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|6
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|552000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u5"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716379178L
argument_list|,
comment|// Job arrival time
literal|1425722238553L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|6
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|586000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u6"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716407178L
argument_list|,
comment|// Job arrival time
literal|1425722908317L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|7
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|650000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u7"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716452178L
argument_list|,
comment|// Job arrival time
literal|1425722841562L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|6
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|639000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u8"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716384178L
argument_list|,
comment|// Job arrival time
literal|1425721766129L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|7
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|538000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u9"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|createReservationDefinition
argument_list|(
literal|1425716437178L
argument_list|,
comment|// Job arrival time
literal|1425722507886L
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|5
argument_list|,
comment|// Num containers
literal|1
argument_list|,
comment|// Concurrency
literal|607000
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|,
literal|"u10"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add reservation
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|ReservationDefinition
name|rr
range|:
name|list
control|)
block|{
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
name|plan
argument_list|,
name|rr
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleReservationAcceptAllocateLeft ()
specifier|public
name|void
name|testSingleReservationAcceptAllocateLeft
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|10
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|35
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|10
operator|*
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|10
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
comment|// Add reservation
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentLeft
operator|.
name|createReservation
argument_list|(
name|reservationID
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc1
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|10
operator|*
name|step
argument_list|,
literal|30
operator|*
name|step
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLeftSucceedsRightFails ()
specifier|public
name|void
name|testLeftSucceedsRightFails
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// Prepare basic plan
name|int
name|numJobsInScenario
init|=
name|initializeScenario2
argument_list|()
decl_stmt|;
comment|// Create reservation
name|ReservationDefinition
name|rr1
init|=
name|createReservationDefinition
argument_list|(
literal|7
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|16
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|,
comment|// Duration
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|20
argument_list|,
comment|// Num containers
literal|20
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
argument_list|,
literal|"u1"
argument_list|)
decl_stmt|;
name|ReservationDefinition
name|rr2
init|=
name|createReservationDefinition
argument_list|(
literal|14
operator|*
name|step
argument_list|,
comment|// Job arrival time
literal|16
operator|*
name|step
argument_list|,
comment|// Job deadline
operator|new
name|ReservationRequest
index|[]
block|{
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
comment|// Capability
literal|100
argument_list|,
comment|// Num containers
literal|100
argument_list|,
comment|// Concurrency
literal|2
operator|*
name|step
argument_list|)
block|}
argument_list|,
comment|// Duration
name|ReservationRequestInterpreter
operator|.
name|R_ORDER
argument_list|,
literal|"u2"
argument_list|)
decl_stmt|;
comment|// Add 1st reservation
name|ReservationId
name|reservationID1
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentLeft
operator|.
name|createReservation
argument_list|(
name|reservationID1
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID1
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc1
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID1
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc1
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc1
argument_list|,
literal|7
operator|*
name|step
argument_list|,
literal|11
operator|*
name|step
argument_list|,
literal|20
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add second reservation
name|ReservationId
name|reservationID2
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentLeft
operator|.
name|createReservation
argument_list|(
name|reservationID2
argument_list|,
literal|"u2"
argument_list|,
name|plan
argument_list|,
name|rr2
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Get reservation
name|ReservationAllocation
name|alloc2
init|=
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID2
argument_list|)
decl_stmt|;
comment|// Verify allocation
name|assertTrue
argument_list|(
name|alloc2
operator|.
name|toString
argument_list|()
argument_list|,
name|check
argument_list|(
name|alloc2
argument_list|,
literal|14
operator|*
name|step
argument_list|,
literal|16
operator|*
name|step
argument_list|,
literal|100
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|agentLeft
operator|.
name|deleteReservation
argument_list|(
name|reservationID1
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|agentLeft
operator|.
name|deleteReservation
argument_list|(
name|reservationID2
argument_list|,
literal|"u2"
argument_list|,
name|plan
argument_list|)
expr_stmt|;
comment|// Now try to allocate the same jobs with agentRight. The second
comment|// job should fail
comment|// Add 1st reservation
name|ReservationId
name|reservationID3
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID3
argument_list|,
literal|"u1"
argument_list|,
name|plan
argument_list|,
name|rr1
argument_list|)
expr_stmt|;
comment|// CHECK: allocation was accepted
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|reservationID3
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Agent-based allocation failed"
argument_list|,
name|plan
operator|.
name|getAllReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|numJobsInScenario
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Add 2nd reservation
try|try
block|{
name|ReservationId
name|reservationID4
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|agentRight
operator|.
name|createReservation
argument_list|(
name|reservationID4
argument_list|,
literal|"u2"
argument_list|,
name|plan
argument_list|,
name|rr2
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PlanningException
name|e
parameter_list|)
block|{
comment|// Expected failure
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateOrderNoGap ()
specifier|public
name|void
name|testValidateOrderNoGap
parameter_list|()
block|{
comment|//
comment|// Initialize allocations
comment|//
name|RLESparseResourceAllocation
name|allocation
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|allocation
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|10
operator|*
name|step
argument_list|,
literal|13
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// curAlloc
name|Map
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
name|curAlloc
init|=
operator|new
name|HashMap
argument_list|<
name|ReservationInterval
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|//
comment|// Check cases
comment|//
comment|// 1. allocateLeft = false, succeed when there is no gap
name|curAlloc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curAlloc
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|9
operator|*
name|step
argument_list|,
literal|10
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"validateOrderNoFap() should have succeeded"
argument_list|,
name|IterativePlanner
operator|.
name|validateOrderNoGap
argument_list|(
name|allocation
argument_list|,
name|curAlloc
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. allocateLeft = false, fail when curAlloc has a gap
name|curAlloc
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|7
operator|*
name|step
argument_list|,
literal|8
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"validateOrderNoGap() failed to identify a gap in curAlloc"
argument_list|,
name|IterativePlanner
operator|.
name|validateOrderNoGap
argument_list|(
name|allocation
argument_list|,
name|curAlloc
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. allocateLeft = false, fail when there is a gap between curAlloc and
comment|// allocations
name|curAlloc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curAlloc
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|8
operator|*
name|step
argument_list|,
literal|9
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"validateOrderNoGap() failed to identify a gap between "
operator|+
literal|"allocations and curAlloc"
argument_list|,
name|IterativePlanner
operator|.
name|validateOrderNoGap
argument_list|(
name|allocation
argument_list|,
name|curAlloc
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. allocateLeft = true, succeed when there is no gap
name|curAlloc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curAlloc
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|13
operator|*
name|step
argument_list|,
literal|14
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"validateOrderNoFap() should have succeeded"
argument_list|,
name|IterativePlanner
operator|.
name|validateOrderNoGap
argument_list|(
name|allocation
argument_list|,
name|curAlloc
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5. allocateLeft = true, fail when there is a gap between curAlloc and
comment|// allocations
name|curAlloc
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|15
operator|*
name|step
argument_list|,
literal|16
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"validateOrderNoGap() failed to identify a gap in curAlloc"
argument_list|,
name|IterativePlanner
operator|.
name|validateOrderNoGap
argument_list|(
name|allocation
argument_list|,
name|curAlloc
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// 6. allocateLeft = true, fail when curAlloc has a gap
name|curAlloc
operator|.
name|clear
argument_list|()
expr_stmt|;
name|curAlloc
operator|.
name|put
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|14
operator|*
name|step
argument_list|,
literal|15
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"validateOrderNoGap() failed to identify a gap between "
operator|+
literal|"allocations and curAlloc"
argument_list|,
name|IterativePlanner
operator|.
name|validateOrderNoGap
argument_list|(
name|allocation
argument_list|,
name|curAlloc
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetDurationInterval ()
specifier|public
name|void
name|testGetDurationInterval
parameter_list|()
throws|throws
name|PlanningException
block|{
name|DurationInterval
name|durationInterval
init|=
literal|null
decl_stmt|;
comment|// Create netRLERes:
comment|//    - 4GB& 4VC between [10,20) and [30,40)
comment|//    - 8GB& 8VC between [20,30)
name|RLESparseResourceAllocation
name|netRLERes
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|netRLERes
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|10
operator|*
name|step
argument_list|,
literal|40
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|netRLERes
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|20
operator|*
name|step
argument_list|,
literal|30
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create planLoads:
comment|//    - 5GB& 5VC between [20,30)
name|RLESparseResourceAllocation
name|planLoads
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|planLoads
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|20
operator|*
name|step
argument_list|,
literal|30
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5120
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create planModifications:
comment|//    - 1GB& 1VC between [25,35)
name|RLESparseResourceAllocation
name|planModifications
init|=
operator|new
name|RLESparseResourceAllocation
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|planModifications
operator|.
name|addInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|25
operator|*
name|step
argument_list|,
literal|35
operator|*
name|step
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set requested resources
name|Resource
name|requestedResources
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// 1.
comment|// currLoad: should start at 20*step, end at 30*step with a null value
comment|//   (in getTotalCost(), after the for loop we will have loadPrev == null
comment|// netAvailableResources: should start exactly at startTime (10*step),
comment|//   end exactly at endTime (30*step) with a null value
name|durationInterval
operator|=
name|StageAllocatorLowCostAligned
operator|.
name|getDurationInterval
argument_list|(
literal|10
operator|*
name|step
argument_list|,
literal|30
operator|*
name|step
argument_list|,
name|planLoads
argument_list|,
name|planModifications
argument_list|,
name|clusterCapacity
argument_list|,
name|netRLERes
argument_list|,
name|res
argument_list|,
name|step
argument_list|,
name|requestedResources
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|numCanFit
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|getTotalCost
argument_list|()
argument_list|,
literal|0.55
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
comment|// 2.
comment|// currLoad: should start at 20*step, end at 31*step with a null value
comment|//   (in getTotalCost, after the for loop we will have loadPrev == null)
comment|// netAvailableResources: should start exactly at startTime (10*step),
comment|//    end exactly at endTime (31*step) with a null value
name|durationInterval
operator|=
name|StageAllocatorLowCostAligned
operator|.
name|getDurationInterval
argument_list|(
literal|10
operator|*
name|step
argument_list|,
literal|31
operator|*
name|step
argument_list|,
name|planLoads
argument_list|,
name|planModifications
argument_list|,
name|clusterCapacity
argument_list|,
name|netRLERes
argument_list|,
name|res
argument_list|,
name|step
argument_list|,
name|requestedResources
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|durationInterval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|numCanFit
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|getTotalCost
argument_list|()
argument_list|,
literal|0.56
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
comment|// 3.
comment|// currLoad: should start at 20*step, end at 30*step with a null value
comment|//   (in getTotalCost, after the for loop we will have loadPrev == null)
comment|// netAvailableResources: should start exactly startTime (15*step),
comment|//    end exactly at endTime (30*step) with a null value
name|durationInterval
operator|=
name|StageAllocatorLowCostAligned
operator|.
name|getDurationInterval
argument_list|(
literal|15
operator|*
name|step
argument_list|,
literal|30
operator|*
name|step
argument_list|,
name|planLoads
argument_list|,
name|planModifications
argument_list|,
name|clusterCapacity
argument_list|,
name|netRLERes
argument_list|,
name|res
argument_list|,
name|step
argument_list|,
name|requestedResources
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|numCanFit
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|getTotalCost
argument_list|()
argument_list|,
literal|0.55
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
comment|// 4.
comment|// currLoad: should start at 20*step, end at 31*step with a null value
comment|//   (in getTotalCost, after the for loop we will have loadPrev == null)
comment|// netAvailableResources: should start exactly at startTime (15*step),
comment|//    end exactly at endTime (31*step) with a value other than null
name|durationInterval
operator|=
name|StageAllocatorLowCostAligned
operator|.
name|getDurationInterval
argument_list|(
literal|15
operator|*
name|step
argument_list|,
literal|31
operator|*
name|step
argument_list|,
name|planLoads
argument_list|,
name|planModifications
argument_list|,
name|clusterCapacity
argument_list|,
name|netRLERes
argument_list|,
name|res
argument_list|,
name|step
argument_list|,
name|requestedResources
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|durationInterval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|numCanFit
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|getTotalCost
argument_list|()
argument_list|,
literal|0.56
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
comment|// 5.
comment|// currLoad: should only contain one entry at startTime
comment|//    (22*step), therefore loadPrev != null and we should enter the if
comment|//    condition after the for loop in getTotalCost
comment|// netAvailableResources: should only contain one entry at startTime
comment|//    (22*step)
name|durationInterval
operator|=
name|StageAllocatorLowCostAligned
operator|.
name|getDurationInterval
argument_list|(
literal|22
operator|*
name|step
argument_list|,
literal|23
operator|*
name|step
argument_list|,
name|planLoads
argument_list|,
name|planModifications
argument_list|,
name|clusterCapacity
argument_list|,
name|netRLERes
argument_list|,
name|res
argument_list|,
name|step
argument_list|,
name|requestedResources
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|durationInterval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|numCanFit
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|getTotalCost
argument_list|()
argument_list|,
literal|0.05
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
comment|// 6.
comment|// currLoad: should start at 39*step, end at 41*step with a null value
comment|//   (in getTotalCost, after the for loop we will have loadPrev == null)
comment|// netAvailableResources: should start exactly at startTime (39*step),
comment|//    end exactly at endTime (41*step) with a null value
name|durationInterval
operator|=
name|StageAllocatorLowCostAligned
operator|.
name|getDurationInterval
argument_list|(
literal|39
operator|*
name|step
argument_list|,
literal|41
operator|*
name|step
argument_list|,
name|planLoads
argument_list|,
name|planModifications
argument_list|,
name|clusterCapacity
argument_list|,
name|netRLERes
argument_list|,
name|res
argument_list|,
name|step
argument_list|,
name|requestedResources
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|durationInterval
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|numCanFit
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|durationInterval
operator|.
name|getTotalCost
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initialize random seed
name|long
name|seed
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with seed: "
operator|+
name|seed
argument_list|)
expr_stmt|;
comment|// Set cluster parameters
name|long
name|timeWindow
init|=
literal|1000000L
decl_stmt|;
name|int
name|capacityMem
init|=
literal|100
operator|*
literal|1024
decl_stmt|;
name|int
name|capacityCores
init|=
literal|100
decl_stmt|;
name|step
operator|=
literal|60000L
expr_stmt|;
name|clusterCapacity
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|capacityMem
argument_list|,
name|capacityCores
argument_list|)
expr_stmt|;
name|String
name|reservationQ
init|=
name|ReservationSystemTestUtil
operator|.
name|getFullReservationQueueName
argument_list|()
decl_stmt|;
name|float
name|instConstraint
init|=
literal|100
decl_stmt|;
name|float
name|avgConstraint
init|=
literal|100
decl_stmt|;
name|ReservationSchedulerConfiguration
name|conf
init|=
name|ReservationSystemTestUtil
operator|.
name|createConf
argument_list|(
name|reservationQ
argument_list|,
name|timeWindow
argument_list|,
name|instConstraint
argument_list|,
name|avgConstraint
argument_list|)
decl_stmt|;
name|CapacityOverTimePolicy
name|policy
init|=
operator|new
name|CapacityOverTimePolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|reservationQ
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|QueueMetrics
name|queueMetrics
init|=
name|mock
argument_list|(
name|QueueMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContext
name|context
init|=
name|ReservationSystemTestUtil
operator|.
name|createMockRMContext
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|AlignedPlannerWithGreedy
operator|.
name|SMOOTHNESS_FACTOR
argument_list|,
name|AlignedPlannerWithGreedy
operator|.
name|DEFAULT_SMOOTHNESS_FACTOR
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ReservationAgent
operator|.
name|FAVOR_EARLY_ALLOCATION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Set planning agent
name|agentRight
operator|=
operator|new
name|AlignedPlannerWithGreedy
argument_list|()
expr_stmt|;
name|agentRight
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|ReservationAgent
operator|.
name|FAVOR_EARLY_ALLOCATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|agentLeft
operator|=
operator|new
name|AlignedPlannerWithGreedy
argument_list|()
expr_stmt|;
name|agentLeft
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Create Plan
name|plan
operator|=
operator|new
name|InMemoryPlan
argument_list|(
name|queueMetrics
argument_list|,
name|policy
argument_list|,
name|agentRight
argument_list|,
name|clusterCapacity
argument_list|,
name|step
argument_list|,
name|res
argument_list|,
name|minAlloc
argument_list|,
name|maxAlloc
argument_list|,
literal|"dedicated"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeScenario1 ()
specifier|private
name|int
name|initializeScenario1
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// insert in the reservation a couple of controlled reservations, to create
comment|// conditions for assignment that are non-empty
name|addFixedAllocation
argument_list|(
literal|0L
argument_list|,
name|step
argument_list|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|,
literal|20
block|,
literal|20
block|,
literal|20
block|,
literal|10
block|,
literal|10
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------BEFORE AGENT----------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toCumulativeString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
DECL|method|initializeScenario2 ()
specifier|private
name|int
name|initializeScenario2
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// insert in the reservation a couple of controlled reservations, to create
comment|// conditions for assignment that are non-empty
name|addFixedAllocation
argument_list|(
literal|11
operator|*
name|step
argument_list|,
name|step
argument_list|,
operator|new
name|int
index|[]
block|{
literal|90
block|,
literal|90
block|,
literal|90
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------BEFORE AGENT----------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toCumulativeString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
DECL|method|initializeScenario3 ()
specifier|private
name|int
name|initializeScenario3
parameter_list|()
throws|throws
name|PlanningException
block|{
comment|// insert in the reservation a couple of controlled reservations, to create
comment|// conditions for assignment that are non-empty
name|addFixedAllocation
argument_list|(
literal|10
operator|*
name|step
argument_list|,
name|step
argument_list|,
operator|new
name|int
index|[]
block|{
literal|70
block|,
literal|80
block|,
literal|60
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------BEFORE AGENT----------"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|plan
operator|.
name|toCumulativeString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
DECL|method|addFixedAllocation (long start, long step, int[] f)
specifier|private
name|void
name|addFixedAllocation
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|step
parameter_list|,
name|int
index|[]
name|f
parameter_list|)
throws|throws
name|PlanningException
block|{
name|ReservationDefinition
name|rDef
init|=
name|ReservationSystemTestUtil
operator|.
name|createSimpleReservationDefinition
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|f
operator|.
name|length
operator|*
name|step
argument_list|,
name|f
operator|.
name|length
operator|*
name|step
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|plan
operator|.
name|toString
argument_list|()
argument_list|,
name|plan
operator|.
name|addReservation
argument_list|(
operator|new
name|InMemoryReservationAllocation
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|,
name|rDef
argument_list|,
literal|"user_fixed"
argument_list|,
literal|"dedicated"
argument_list|,
name|start
argument_list|,
name|start
operator|+
name|f
operator|.
name|length
operator|*
name|step
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|generateAllocation
argument_list|(
name|start
argument_list|,
name|step
argument_list|,
name|f
argument_list|)
argument_list|,
name|res
argument_list|,
name|minAlloc
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createReservationDefinition (long arrival, long deadline, ReservationRequest[] reservationRequests, ReservationRequestInterpreter rType, String username)
specifier|private
name|ReservationDefinition
name|createReservationDefinition
parameter_list|(
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|ReservationRequest
index|[]
name|reservationRequests
parameter_list|,
name|ReservationRequestInterpreter
name|rType
parameter_list|,
name|String
name|username
parameter_list|)
block|{
return|return
name|ReservationDefinition
operator|.
name|newInstance
argument_list|(
name|arrival
argument_list|,
name|deadline
argument_list|,
name|ReservationRequests
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|reservationRequests
argument_list|)
argument_list|,
name|rType
argument_list|)
argument_list|,
name|username
argument_list|,
name|recurrenceExpression
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|)
return|;
block|}
DECL|method|check (ReservationAllocation alloc, long start, long end, int containers, int mem, int cores)
specifier|private
name|boolean
name|check
parameter_list|(
name|ReservationAllocation
name|alloc
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|int
name|containers
parameter_list|,
name|int
name|mem
parameter_list|,
name|int
name|cores
parameter_list|)
block|{
name|Resource
name|expectedResources
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|mem
operator|*
name|containers
argument_list|,
name|cores
operator|*
name|containers
argument_list|)
decl_stmt|;
comment|// Verify that all allocations in [start,end) equal containers * (mem,cores)
for|for
control|(
name|long
name|i
init|=
name|start
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Resources
operator|.
name|equals
argument_list|(
name|alloc
operator|.
name|getResourcesAtTime
argument_list|(
name|i
argument_list|)
argument_list|,
name|expectedResources
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

