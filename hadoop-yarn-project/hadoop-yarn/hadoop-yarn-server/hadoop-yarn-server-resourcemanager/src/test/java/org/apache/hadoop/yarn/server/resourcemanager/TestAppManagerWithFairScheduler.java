begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
operator|.
name|GREATER_THEN_MAX_ALLOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|matches
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|ApplicationPlacementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Testing applications being retired from RM with fair scheduler.  *  */
end_comment

begin_class
DECL|class|TestAppManagerWithFairScheduler
specifier|public
class|class
name|TestAppManagerWithFairScheduler
extends|extends
name|AppManagerTestBase
block|{
DECL|field|TEST_FOLDER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FOLDER
init|=
literal|"test-queues"
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|allocFile
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TEST_FOLDER
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|int
name|queueMaxAllocation
init|=
literal|512
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|allocFile
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxContainerAllocation>"
operator|+
name|queueMaxAllocation
operator|+
literal|" mb 1 vcores"
operator|+
literal|"</maxContainerAllocation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|allocFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardown ()
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
block|{
name|File
name|allocFile
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TEST_FOLDER
argument_list|)
decl_stmt|;
name|allocFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueSubmitWithHighQueueContainerSize ()
specifier|public
name|void
name|testQueueSubmitWithHighQueueContainerSize
parameter_list|()
throws|throws
name|YarnException
block|{
name|ApplicationId
name|appId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|asContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|asContext
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|asContext
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|asContext
operator|.
name|setPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|asContext
operator|.
name|setAMContainerSpec
argument_list|(
name|mockContainerLaunchContext
argument_list|(
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|asContext
operator|.
name|setQueue
argument_list|(
literal|"queueA"
argument_list|)
expr_stmt|;
name|QueueInfo
name|mockDefaultQueueInfo
init|=
name|mock
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Setup a PlacementManager returns a new queue
name|PlacementManager
name|placementMgr
init|=
name|mock
argument_list|(
name|PlacementManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|ApplicationPlacementContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationPlacementContext
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|new
name|ApplicationPlacementContext
argument_list|(
literal|"queueA"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|placementMgr
argument_list|)
operator|.
name|placeApplication
argument_list|(
name|any
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
argument_list|,
name|matches
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|ApplicationPlacementContext
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationPlacementContext
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
operator|new
name|ApplicationPlacementContext
argument_list|(
literal|"queueB"
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|placementMgr
argument_list|)
operator|.
name|placeApplication
argument_list|(
name|any
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
argument_list|,
name|matches
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|MockRM
name|newMockRM
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|RMContext
name|newMockRMContext
init|=
name|newMockRM
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|newMockRMContext
operator|.
name|setQueuePlacementManager
argument_list|(
name|placementMgr
argument_list|)
expr_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|newMockRMContext
argument_list|,
name|newMockRMContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
decl_stmt|;
name|TestRMAppManager
name|newAppMonitor
init|=
operator|new
name|TestRMAppManager
argument_list|(
name|newMockRMContext
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
name|newMockRMContext
operator|.
name|getScheduler
argument_list|()
argument_list|,
name|masterService
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// only user test has permission to submit to 'test' queue
try|try
block|{
name|newAppMonitor
operator|.
name|submitApplication
argument_list|(
name|asContext
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Test should fail on too high allocation!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|GREATER_THEN_MAX_ALLOCATION
argument_list|,
name|e
operator|.
name|getInvalidResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Should not throw exception
name|newAppMonitor
operator|.
name|submitApplication
argument_list|(
name|asContext
argument_list|,
literal|"test2"
argument_list|)
expr_stmt|;
block|}
DECL|method|mockContainerLaunchContext ( RecordFactory recordFactory)
specifier|private
specifier|static
name|ContainerLaunchContext
name|mockContainerLaunchContext
parameter_list|(
name|RecordFactory
name|recordFactory
parameter_list|)
block|{
name|ContainerLaunchContext
name|amContainer
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|amContainer
operator|.
name|setApplicationACLs
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|amContainer
return|;
block|}
block|}
end_class

end_unit

