begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|AbstractMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsCollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestSchedulingUpdate
specifier|public
class|class
name|TestSchedulingUpdate
extends|extends
name|FairSchedulerTestBase
block|{
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|public
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
comment|// Make the update loop to never finish to ensure zero update calls
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|UPDATE_INTERVAL_MS
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testSchedulingUpdateOnNodeJoinLeave ()
specifier|public
name|void
name|testSchedulingUpdateOnNodeJoinLeave
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|verifyNoCalls
argument_list|()
expr_stmt|;
comment|// Add one node
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
specifier|final
name|int
name|memory
init|=
literal|4096
decl_stmt|;
specifier|final
name|int
name|cores
init|=
literal|4
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|memory
argument_list|,
name|cores
argument_list|)
argument_list|,
literal|1
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|long
name|expectedCalls
init|=
literal|1
decl_stmt|;
name|verifyExpectedCalls
argument_list|(
name|expectedCalls
argument_list|,
name|memory
argument_list|,
name|cores
argument_list|)
expr_stmt|;
comment|// Remove the node
name|NodeRemovedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|expectedCalls
operator|=
literal|2
expr_stmt|;
name|verifyExpectedCalls
argument_list|(
name|expectedCalls
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyExpectedCalls (long expectedCalls, int memory, int vcores)
specifier|private
name|void
name|verifyExpectedCalls
parameter_list|(
name|long
name|expectedCalls
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vcores
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|verified
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
literal|100
condition|)
block|{
if|if
condition|(
name|scheduler
operator|.
name|fsOpDurations
operator|.
name|hasUpdateThreadRunChanged
argument_list|()
condition|)
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Update Thread has not run based on its metrics"
argument_list|,
name|scheduler
operator|.
name|fsOpDurations
operator|.
name|hasUpdateThreadRunChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root queue metrics memory does not have expected value"
argument_list|,
name|memory
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root queue metrics cpu does not have expected value"
argument_list|,
name|vcores
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|MetricsCollectorImpl
name|collector
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|fsOpDurations
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MetricsRecord
name|record
init|=
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|AbstractMetric
name|abstractMetric
range|:
name|record
operator|.
name|metrics
argument_list|()
control|)
block|{
if|if
condition|(
name|abstractMetric
operator|.
name|name
argument_list|()
operator|.
name|contains
argument_list|(
literal|"UpdateThreadRunNumOps"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Update Thread did not run expected number of times "
operator|+
literal|"based on metric record count"
argument_list|,
name|expectedCalls
argument_list|,
name|abstractMetric
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|verified
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find metric for UpdateThreadRunNumOps"
argument_list|,
name|verified
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNoCalls ()
specifier|private
name|void
name|verifyNoCalls
parameter_list|()
block|{
name|assertFalse
argument_list|(
literal|"Update thread should not have executed"
argument_list|,
name|scheduler
operator|.
name|fsOpDurations
operator|.
name|hasUpdateThreadRunChanged
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scheduler queue memory should not have been updated"
argument_list|,
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scheduler queue cpu should not have been updated"
argument_list|,
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

