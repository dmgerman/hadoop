begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|time
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AggregateAppResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerResourceUsage
specifier|public
class|class
name|TestContainerResourceUsage
block|{
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{   }
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUsageWithOneAttemptAndOneContainer ()
specifier|public
name|void
name|testUsageWithOneAttemptAndOneContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app0
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|RMAppMetrics
name|rmAppMetrics
init|=
name|app0
operator|.
name|getRMAppMetrics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Before app submittion, memory seconds should have been 0 but was "
operator|+
name|rmAppMetrics
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|rmAppMetrics
operator|.
name|getMemorySeconds
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Before app submission, vcore seconds should have been 0 but was "
operator|+
name|rmAppMetrics
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|,
name|rmAppMetrics
operator|.
name|getVcoreSeconds
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt0
init|=
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am0
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|RMContainer
name|rmContainer
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|attempt0
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Allow metrics to accumulate.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|rmAppMetrics
operator|=
name|app0
operator|.
name|getRMAppMetrics
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"While app is running, memory seconds should be>0 but is "
operator|+
name|rmAppMetrics
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|rmAppMetrics
operator|.
name|getMemorySeconds
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"While app is running, vcore seconds should be>0 but is "
operator|+
name|rmAppMetrics
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|,
name|rmAppMetrics
operator|.
name|getVcoreSeconds
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app0
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|,
name|am0
argument_list|)
expr_stmt|;
name|AggregateAppResourceUsage
name|ru
init|=
name|calculateContainerResourceMetrics
argument_list|(
name|rmContainer
argument_list|)
decl_stmt|;
name|rmAppMetrics
operator|=
name|app0
operator|.
name|getRMAppMetrics
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexcpected MemorySeconds value"
argument_list|,
name|ru
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|rmAppMetrics
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected VcoreSeconds value"
argument_list|,
name|ru
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|,
name|rmAppMetrics
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUsageWithMultipleContainersAndRMRestart ()
specifier|public
name|void
name|testUsageWithMultipleContainersAndRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set max attempts to 1 so that when the first attempt fails, the app
comment|// won't try to start a new one.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm0
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm0
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|65536
argument_list|,
name|rm0
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app0
init|=
name|rm0
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|rm0
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt0
init|=
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId0
init|=
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm0
operator|.
name|waitForState
argument_list|(
name|attemptId0
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm0
operator|.
name|waitForState
argument_list|(
name|attemptId0
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|MockAM
name|am0
init|=
name|rm0
operator|.
name|sendAMLaunched
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|int
name|NUM_CONTAINERS
init|=
literal|2
decl_stmt|;
name|am0
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
name|NUM_CONTAINERS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|conts
init|=
name|am0
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|conts
operator|.
name|size
argument_list|()
operator|!=
name|NUM_CONTAINERS
condition|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am0
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// launch the 2nd and 3rd containers.
for|for
control|(
name|Container
name|c
range|:
name|conts
control|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm0
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
comment|// Get the RMContainers for all of the live containers, to be used later
comment|// for metrics calculations and comparisons.
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|rmContainers
init|=
name|rm0
operator|.
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
comment|// Give the metrics time to accumulate.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Stop all non-AM containers
for|for
control|(
name|Container
name|c
range|:
name|conts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
literal|1
condition|)
continue|continue;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|c
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm0
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
expr_stmt|;
block|}
comment|// After all other containers have completed, manually complete the master
comment|// container in order to trigger a save to the state store of the resource
comment|// usage metrics. This will cause the attempt to fail, and, since the max
comment|// attempt retries is 1, the app will also fail. This is intentional so
comment|// that all containers will complete prior to saving.
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|cId
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm0
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|cId
argument_list|,
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
expr_stmt|;
comment|// Check that the container metrics match those from the app usage report.
name|long
name|memorySeconds
init|=
literal|0
decl_stmt|;
name|long
name|vcoreSeconds
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|rmContainers
control|)
block|{
name|AggregateAppResourceUsage
name|ru
init|=
name|calculateContainerResourceMetrics
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|memorySeconds
operator|+=
name|ru
operator|.
name|getMemorySeconds
argument_list|()
expr_stmt|;
name|vcoreSeconds
operator|+=
name|ru
operator|.
name|getVcoreSeconds
argument_list|()
expr_stmt|;
block|}
name|RMAppMetrics
name|metricsBefore
init|=
name|app0
operator|.
name|getRMAppMetrics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexcpected MemorySeconds value"
argument_list|,
name|memorySeconds
argument_list|,
name|metricsBefore
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected VcoreSeconds value"
argument_list|,
name|vcoreSeconds
argument_list|,
name|metricsBefore
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
comment|// create new RM to represent RM restart. Load up the state store.
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app0After
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Compare container resource usage metrics from before and after restart.
name|RMAppMetrics
name|metricsAfter
init|=
name|app0After
operator|.
name|getRMAppMetrics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Vcore seconds were not the same after RM Restart"
argument_list|,
name|metricsBefore
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|,
name|metricsAfter
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Memory seconds were not the same after RM Restart"
argument_list|,
name|metricsBefore
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|metricsAfter
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|rm0
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm0
operator|.
name|close
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUsageAfterAMRestartWithMultipleContainers ()
specifier|public
name|void
name|testUsageAfterAMRestartWithMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|amRestartTests
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUsageAfterAMRestartKeepContainers ()
specifier|public
name|void
name|testUsageAfterAMRestartKeepContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|amRestartTests
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|amRestartTests (boolean keepRunningContainers)
specifier|private
name|void
name|amRestartTests
parameter_list|(
name|boolean
name|keepRunningContainers
parameter_list|)
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|,
name|keepRunningContainers
argument_list|)
decl_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am0
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|)
decl_stmt|;
name|int
name|NUM_CONTAINERS
init|=
literal|1
decl_stmt|;
comment|// allocate NUM_CONTAINERS containers
name|am0
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
name|NUM_CONTAINERS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait for containers to be allocated.
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am0
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|!=
name|NUM_CONTAINERS
condition|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|am0
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// launch the 2nd container.
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId2
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Capture the containers here so the metrics can be calculated after the
comment|// app has completed.
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|rmContainers
init|=
name|rm
operator|.
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
comment|// fail the first app attempt by sending CONTAINER_FINISHED event without
comment|// registering.
name|ContainerId
name|amContainerId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|amContainerId
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am0
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|long
name|memorySeconds
init|=
literal|0
decl_stmt|;
name|long
name|vcoreSeconds
init|=
literal|0
decl_stmt|;
comment|// Calculate container usage metrics for first attempt.
if|if
condition|(
name|keepRunningContainers
condition|)
block|{
comment|// Only calculate the usage for the one container that has completed.
for|for
control|(
name|RMContainer
name|c
range|:
name|rmContainers
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|amContainerId
argument_list|)
condition|)
block|{
name|AggregateAppResourceUsage
name|ru
init|=
name|calculateContainerResourceMetrics
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|memorySeconds
operator|+=
name|ru
operator|.
name|getMemorySeconds
argument_list|()
expr_stmt|;
name|vcoreSeconds
operator|+=
name|ru
operator|.
name|getVcoreSeconds
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// The remaining container should be RUNNING.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"After first attempt failed, remaining container "
operator|+
literal|"should still be running. "
argument_list|,
name|c
operator|.
name|getContainerState
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerState
operator|.
name|RUNNING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If keepRunningContainers is false, all live containers should now
comment|// be completed. Calculate the resource usage metrics for all of them.
for|for
control|(
name|RMContainer
name|c
range|:
name|rmContainers
control|)
block|{
name|AggregateAppResourceUsage
name|ru
init|=
name|calculateContainerResourceMetrics
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|memorySeconds
operator|+=
name|ru
operator|.
name|getMemorySeconds
argument_list|()
expr_stmt|;
name|vcoreSeconds
operator|+=
name|ru
operator|.
name|getVcoreSeconds
argument_list|()
expr_stmt|;
block|}
block|}
comment|// wait for app to start a new attempt.
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// assert this is a new AM.
name|RMAppAttempt
name|attempt2
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// launch the new AM
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// allocate NUM_CONTAINERS containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
name|NUM_CONTAINERS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait for containers to be allocated.
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|!=
name|NUM_CONTAINERS
condition|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Capture running containers for later use by metrics calculations.
name|rmContainers
operator|=
name|rm
operator|.
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
expr_stmt|;
comment|// complete container by sending the container complete event which has
comment|// earlier attempt's attemptId
name|amContainerId
operator|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|amContainerId
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|,
name|am1
argument_list|)
expr_stmt|;
comment|// Calculate container usage metrics for second attempt.
for|for
control|(
name|RMContainer
name|c
range|:
name|rmContainers
control|)
block|{
name|AggregateAppResourceUsage
name|ru
init|=
name|calculateContainerResourceMetrics
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|memorySeconds
operator|+=
name|ru
operator|.
name|getMemorySeconds
argument_list|()
expr_stmt|;
name|vcoreSeconds
operator|+=
name|ru
operator|.
name|getVcoreSeconds
argument_list|()
expr_stmt|;
block|}
name|RMAppMetrics
name|rmAppMetrics
init|=
name|app
operator|.
name|getRMAppMetrics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexcpected MemorySeconds value"
argument_list|,
name|memorySeconds
argument_list|,
name|rmAppMetrics
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected VcoreSeconds value"
argument_list|,
name|vcoreSeconds
argument_list|,
name|rmAppMetrics
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|calculateContainerResourceMetrics ( RMContainer rmContainer)
specifier|private
name|AggregateAppResourceUsage
name|calculateContainerResourceMetrics
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|Resource
name|resource
init|=
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
decl_stmt|;
name|long
name|usedMillis
init|=
name|rmContainer
operator|.
name|getFinishTime
argument_list|()
operator|-
name|rmContainer
operator|.
name|getCreationTime
argument_list|()
decl_stmt|;
name|long
name|memorySeconds
init|=
name|resource
operator|.
name|getMemory
argument_list|()
operator|*
name|usedMillis
operator|/
name|DateUtils
operator|.
name|MILLIS_PER_SECOND
decl_stmt|;
name|long
name|vcoreSeconds
init|=
name|resource
operator|.
name|getVirtualCores
argument_list|()
operator|*
name|usedMillis
operator|/
name|DateUtils
operator|.
name|MILLIS_PER_SECOND
decl_stmt|;
return|return
operator|new
name|AggregateAppResourceUsage
argument_list|(
name|memorySeconds
argument_list|,
name|vcoreSeconds
argument_list|)
return|;
block|}
block|}
end_class

end_unit

