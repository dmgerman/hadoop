begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YARNFeatureNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Mock ResourceProfileManager for unit test.  */
end_comment

begin_class
DECL|class|MockResourceProfileManager
specifier|public
class|class
name|MockResourceProfileManager
extends|extends
name|ResourceProfilesManagerImpl
block|{
DECL|field|profiles
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|profiles
decl_stmt|;
DECL|field|featureEnabled
specifier|private
name|boolean
name|featureEnabled
decl_stmt|;
DECL|method|MockResourceProfileManager (Map<String, Resource> profiles)
specifier|public
name|MockResourceProfileManager
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|profiles
parameter_list|)
block|{
name|this
operator|.
name|profiles
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|profiles
operator|.
name|putAll
argument_list|(
name|profiles
argument_list|)
expr_stmt|;
comment|// Set minimum / maximum allocation so test doesn't need to add them
comment|// every time.
name|this
operator|.
name|profiles
operator|.
name|put
argument_list|(
name|ResourceProfilesManagerImpl
operator|.
name|MINIMUM_PROFILE
argument_list|,
name|ResourceUtils
operator|.
name|getResourceTypesMinimumAllocation
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|profiles
operator|.
name|put
argument_list|(
name|ResourceProfilesManagerImpl
operator|.
name|MAXIMUM_PROFILE
argument_list|,
name|ResourceUtils
operator|.
name|getResourceTypesMaximumAllocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration config)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|featureEnabled
operator|=
name|config
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESOURCE_PROFILES_ENABLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getProfile (String profile)
specifier|public
name|Resource
name|getProfile
parameter_list|(
name|String
name|profile
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
operator|!
name|featureEnabled
condition|)
block|{
throw|throw
operator|new
name|YARNFeatureNotEnabledException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
return|return
name|profiles
operator|.
name|get
argument_list|(
name|profile
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceProfiles ()
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|getResourceProfiles
parameter_list|()
throws|throws
name|YARNFeatureNotEnabledException
block|{
if|if
condition|(
operator|!
name|featureEnabled
condition|)
block|{
throw|throw
operator|new
name|YARNFeatureNotEnabledException
argument_list|(
literal|""
argument_list|)
throw|;
block|}
return|return
name|profiles
return|;
block|}
annotation|@
name|Override
DECL|method|reloadProfiles ()
specifier|public
name|void
name|reloadProfiles
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

