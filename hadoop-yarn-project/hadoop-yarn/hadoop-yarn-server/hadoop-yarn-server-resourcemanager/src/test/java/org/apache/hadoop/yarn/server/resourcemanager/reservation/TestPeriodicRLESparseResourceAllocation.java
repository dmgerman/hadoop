begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *  *       http://www.apache.org/licenses/LICENSE-2.0  *  *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *****************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|exceptions
operator|.
name|PlanningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Testing the class {@link PeriodicRLESparseResourceAllocation}.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:nowhitespaceafter"
argument_list|)
DECL|class|TestPeriodicRLESparseResourceAllocation
specifier|public
class|class
name|TestPeriodicRLESparseResourceAllocation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestPeriodicRLESparseResourceAllocation
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testPeriodicCapacity ()
specifier|public
name|void
name|testPeriodicCapacity
parameter_list|()
block|{
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|7
block|,
literal|5
block|,
literal|2
block|,
literal|0
block|}
decl_stmt|;
name|long
index|[]
name|timeSteps
init|=
block|{
literal|0L
block|,
literal|5L
block|,
literal|10L
block|,
literal|15L
block|,
literal|19L
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc
argument_list|,
name|timeSteps
argument_list|)
decl_stmt|;
name|PeriodicRLESparseResourceAllocation
name|periodicVector
init|=
operator|new
name|PeriodicRLESparseResourceAllocation
argument_list|(
name|rleSparseVector
argument_list|,
literal|20L
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|periodicVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|7
argument_list|,
literal|7
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|27L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|50L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxPeriodicCapacity ()
specifier|public
name|void
name|testMaxPeriodicCapacity
parameter_list|()
block|{
name|int
index|[]
name|alloc
init|=
block|{
literal|2
block|,
literal|5
block|,
literal|7
block|,
literal|10
block|,
literal|3
block|,
literal|4
block|,
literal|6
block|,
literal|8
block|}
decl_stmt|;
name|long
index|[]
name|timeSteps
init|=
block|{
literal|0L
block|,
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|4L
block|,
literal|5L
block|,
literal|6L
block|,
literal|7L
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc
argument_list|,
name|timeSteps
argument_list|)
decl_stmt|;
name|PeriodicRLESparseResourceAllocation
name|periodicVector
init|=
operator|new
name|PeriodicRLESparseResourceAllocation
argument_list|(
name|rleSparseVector
argument_list|,
literal|8L
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|periodicVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|periodicVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|periodicVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|7
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|periodicVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|16
argument_list|,
literal|3
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|periodicVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|17
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|periodicVector
operator|.
name|getMaximumPeriodicCapacity
argument_list|(
literal|32
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMixPeriodicAndNonPeriodic ()
specifier|public
name|void
name|testMixPeriodicAndNonPeriodic
parameter_list|()
throws|throws
name|PlanningException
block|{
name|int
index|[]
name|alloc
init|=
block|{
literal|2
block|,
literal|5
block|,
literal|0
block|}
decl_stmt|;
name|long
index|[]
name|timeSteps
init|=
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|tempPeriodic
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc
argument_list|,
name|timeSteps
argument_list|)
decl_stmt|;
name|PeriodicRLESparseResourceAllocation
name|periodic
init|=
operator|new
name|PeriodicRLESparseResourceAllocation
argument_list|(
name|tempPeriodic
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|int
index|[]
name|alloc2
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|0
block|}
decl_stmt|;
name|long
index|[]
name|timeSteps2
init|=
block|{
literal|12L
block|,
literal|13L
block|,
literal|14L
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|nonPeriodic
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc2
argument_list|,
name|timeSteps2
argument_list|)
decl_stmt|;
name|RLESparseResourceAllocation
name|merged
init|=
name|RLESparseResourceAllocation
operator|.
name|merge
argument_list|(
name|nonPeriodic
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
operator|*
literal|1024
argument_list|,
literal|100
argument_list|)
argument_list|,
name|periodic
argument_list|,
name|nonPeriodic
argument_list|,
name|RLESparseResourceAllocation
operator|.
name|RLEOperator
operator|.
name|add
argument_list|,
literal|2
argument_list|,
literal|25
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|11L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|15
argument_list|,
literal|15
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|12L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|13L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|14L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|21L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|22L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|merged
operator|.
name|getCapacityAtTime
argument_list|(
literal|23L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetCapacityInInterval ()
specifier|public
name|void
name|testSetCapacityInInterval
parameter_list|()
block|{
name|int
index|[]
name|alloc
init|=
block|{
literal|2
block|,
literal|5
block|,
literal|0
block|}
decl_stmt|;
name|long
index|[]
name|timeSteps
init|=
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc
argument_list|,
name|timeSteps
argument_list|)
decl_stmt|;
name|PeriodicRLESparseResourceAllocation
name|periodicVector
init|=
operator|new
name|PeriodicRLESparseResourceAllocation
argument_list|(
name|rleSparseVector
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|ReservationInterval
name|interval
init|=
operator|new
name|ReservationInterval
argument_list|(
literal|5L
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|periodicVector
operator|.
name|addInterval
argument_list|(
name|interval
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|9L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert.assertFalse(periodicVector.addInterval(
comment|// new ReservationInterval(7L, 12L), Resource.newInstance(8, 8)));
block|}
DECL|method|testRemoveInterval ()
specifier|public
name|void
name|testRemoveInterval
parameter_list|()
block|{
name|int
index|[]
name|alloc
init|=
block|{
literal|2
block|,
literal|5
block|,
literal|3
block|,
literal|4
block|,
literal|0
block|}
decl_stmt|;
name|long
index|[]
name|timeSteps
init|=
block|{
literal|1L
block|,
literal|3L
block|,
literal|5L
block|,
literal|7L
block|,
literal|9L
block|}
decl_stmt|;
name|RLESparseResourceAllocation
name|rleSparseVector
init|=
name|ReservationSystemTestUtil
operator|.
name|generateRLESparseResourceAllocation
argument_list|(
name|alloc
argument_list|,
name|timeSteps
argument_list|)
decl_stmt|;
name|PeriodicRLESparseResourceAllocation
name|periodicVector
init|=
operator|new
name|PeriodicRLESparseResourceAllocation
argument_list|(
name|rleSparseVector
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|ReservationInterval
name|interval
init|=
operator|new
name|ReservationInterval
argument_list|(
literal|3L
argument_list|,
literal|7L
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|periodicVector
operator|.
name|removeInterval
argument_list|(
name|interval
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|4L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|5L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|6L
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|periodicVector
operator|.
name|getCapacityAtTime
argument_list|(
literal|7L
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid interval
name|Assert
operator|.
name|assertFalse
argument_list|(
name|periodicVector
operator|.
name|removeInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|7L
argument_list|,
literal|12L
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid capacity
name|Assert
operator|.
name|assertFalse
argument_list|(
name|periodicVector
operator|.
name|removeInterval
argument_list|(
operator|new
name|ReservationInterval
argument_list|(
literal|2L
argument_list|,
literal|4L
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

