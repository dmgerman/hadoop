begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Unit tests for FSYarnSiteConverter.  *  */
end_comment

begin_class
DECL|class|TestFSYarnSiteConverter
specifier|public
class|class
name|TestFSYarnSiteConverter
block|{
DECL|field|yarnConfig
specifier|private
name|Configuration
name|yarnConfig
decl_stmt|;
DECL|field|converter
specifier|private
name|FSYarnSiteConverter
name|converter
decl_stmt|;
DECL|field|yarnConvertedConfig
specifier|private
name|Configuration
name|yarnConvertedConfig
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|yarnConfig
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|yarnConvertedConfig
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|converter
operator|=
operator|new
name|FSYarnSiteConverter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testSiteContinuousSchedulingConversion ()
specifier|public
name|void
name|testSiteContinuousSchedulingConversion
parameter_list|()
block|{
name|yarnConfig
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnConfig
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|,
literal|666
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertSiteProperties
argument_list|(
name|yarnConfig
argument_list|,
name|yarnConvertedConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cont. scheduling"
argument_list|,
name|yarnConvertedConfig
operator|.
name|getBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_ENABLE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scheduling interval"
argument_list|,
literal|666
argument_list|,
name|yarnConvertedConfig
operator|.
name|getInt
argument_list|(
literal|"yarn.scheduler.capacity.schedule-asynchronously"
operator|+
literal|".scheduling-interval-ms"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSiteMinimumAllocationIncrementConversion ()
specifier|public
name|void
name|testSiteMinimumAllocationIncrementConversion
parameter_list|()
block|{
name|yarnConfig
operator|.
name|setInt
argument_list|(
literal|"yarn.resource-types.memory-mb.increment-allocation"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|yarnConfig
operator|.
name|setInt
argument_list|(
literal|"yarn.resource-types.vcores.increment-allocation"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertSiteProperties
argument_list|(
name|yarnConfig
argument_list|,
name|yarnConvertedConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Memory alloc increment"
argument_list|,
literal|11
argument_list|,
name|yarnConvertedConfig
operator|.
name|getInt
argument_list|(
literal|"yarn.scheduler.minimum-allocation-mb"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Vcore increment"
argument_list|,
literal|5
argument_list|,
name|yarnConvertedConfig
operator|.
name|getInt
argument_list|(
literal|"yarn.scheduler.minimum-allocation-vcores"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSitePreemptionConversion ()
specifier|public
name|void
name|testSitePreemptionConversion
parameter_list|()
block|{
name|yarnConfig
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnConfig
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|yarnConfig
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_NEXT_STARVATION_CHECK_MS
argument_list|,
literal|321
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertSiteProperties
argument_list|(
name|yarnConfig
argument_list|,
name|yarnConvertedConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Preemption enabled"
argument_list|,
name|yarnConvertedConfig
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Wait time before kill"
argument_list|,
literal|123
argument_list|,
name|yarnConvertedConfig
operator|.
name|getInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_WAIT_TIME_BEFORE_KILL
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Starvation check wait time"
argument_list|,
literal|321
argument_list|,
name|yarnConvertedConfig
operator|.
name|getInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_MONITORING_INTERVAL
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSiteAssignMultipleConversion ()
specifier|public
name|void
name|testSiteAssignMultipleConversion
parameter_list|()
block|{
name|yarnConfig
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertSiteProperties
argument_list|(
name|yarnConfig
argument_list|,
name|yarnConvertedConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Assign multiple"
argument_list|,
name|yarnConvertedConfig
operator|.
name|getBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE_ENABLED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSiteMaxAssignConversion ()
specifier|public
name|void
name|testSiteMaxAssignConversion
parameter_list|()
block|{
name|yarnConfig
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|MAX_ASSIGN
argument_list|,
literal|111
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertSiteProperties
argument_list|(
name|yarnConfig
argument_list|,
name|yarnConvertedConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max assign"
argument_list|,
literal|111
argument_list|,
name|yarnConvertedConfig
operator|.
name|getInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAX_ASSIGN_PER_HEARTBEAT
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSiteLocalityThresholdConversion ()
specifier|public
name|void
name|testSiteLocalityThresholdConversion
parameter_list|()
block|{
name|yarnConfig
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_NODE
argument_list|,
literal|"123.123"
argument_list|)
expr_stmt|;
name|yarnConfig
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_RACK
argument_list|,
literal|"321.321"
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertSiteProperties
argument_list|(
name|yarnConfig
argument_list|,
name|yarnConvertedConfig
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Locality threshold node"
argument_list|,
literal|"123.123"
argument_list|,
name|yarnConvertedConfig
operator|.
name|get
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|NODE_LOCALITY_DELAY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Locality threshold rack"
argument_list|,
literal|"321.321"
argument_list|,
name|yarnConvertedConfig
operator|.
name|get
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|RACK_LOCALITY_ADDITIONAL_DELAY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

