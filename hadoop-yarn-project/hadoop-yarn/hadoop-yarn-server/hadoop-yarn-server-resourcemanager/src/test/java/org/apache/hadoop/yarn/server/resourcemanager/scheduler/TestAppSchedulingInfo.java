begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSLeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAppSchedulingInfo
specifier|public
class|class
name|TestAppSchedulingInfo
block|{
annotation|@
name|Test
DECL|method|testBacklistChanged ()
specifier|public
name|void
name|testBacklistChanged
parameter_list|()
block|{
name|ApplicationId
name|appIdImpl
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appIdImpl
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|"test"
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|AppSchedulingInfo
name|appSchedulingInfo
init|=
operator|new
name|AppSchedulingInfo
argument_list|(
name|appAttemptId
argument_list|,
literal|"test"
argument_list|,
name|queue
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
operator|new
name|ResourceUsage
argument_list|()
argument_list|)
decl_stmt|;
name|appSchedulingInfo
operator|.
name|updateBlacklist
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|appSchedulingInfo
operator|.
name|getAndResetBlacklistChanged
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|blacklistAdditions
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|blacklistAdditions
operator|.
name|add
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|blacklistAdditions
operator|.
name|add
argument_list|(
literal|"node2"
argument_list|)
expr_stmt|;
name|appSchedulingInfo
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appSchedulingInfo
operator|.
name|getAndResetBlacklistChanged
argument_list|()
argument_list|)
expr_stmt|;
name|blacklistAdditions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|blacklistAdditions
operator|.
name|add
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|appSchedulingInfo
operator|.
name|updateBlacklist
argument_list|(
name|blacklistAdditions
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|appSchedulingInfo
operator|.
name|getAndResetBlacklistChanged
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|blacklistRemovals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|blacklistRemovals
operator|.
name|add
argument_list|(
literal|"node1"
argument_list|)
expr_stmt|;
name|appSchedulingInfo
operator|.
name|updateBlacklist
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
name|appSchedulingInfo
operator|.
name|updateBlacklist
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appSchedulingInfo
operator|.
name|getAndResetBlacklistChanged
argument_list|()
argument_list|)
expr_stmt|;
name|appSchedulingInfo
operator|.
name|updateBlacklist
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|blacklistRemovals
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|appSchedulingInfo
operator|.
name|getAndResetBlacklistChanged
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

