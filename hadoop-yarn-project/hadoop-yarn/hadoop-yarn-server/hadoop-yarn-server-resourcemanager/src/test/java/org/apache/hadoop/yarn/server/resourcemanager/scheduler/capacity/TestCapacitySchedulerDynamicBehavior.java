begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCapacitySchedulerDynamicBehavior
specifier|public
class|class
name|TestCapacitySchedulerDynamicBehavior
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCapacitySchedulerDynamicBehavior
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
DECL|field|B1
specifier|private
specifier|static
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
DECL|field|B2
specifier|private
specifier|static
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
DECL|field|B3
specifier|private
specifier|static
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
DECL|field|A_CAPACITY
specifier|private
specifier|static
name|float
name|A_CAPACITY
init|=
literal|10.5f
decl_stmt|;
DECL|field|B_CAPACITY
specifier|private
specifier|static
name|float
name|B_CAPACITY
init|=
literal|89.5f
decl_stmt|;
DECL|field|A1_CAPACITY
specifier|private
specifier|static
name|float
name|A1_CAPACITY
init|=
literal|30
decl_stmt|;
DECL|field|A2_CAPACITY
specifier|private
specifier|static
name|float
name|A2_CAPACITY
init|=
literal|70
decl_stmt|;
DECL|field|B1_CAPACITY
specifier|private
specifier|static
name|float
name|B1_CAPACITY
init|=
literal|79.2f
decl_stmt|;
DECL|field|B2_CAPACITY
specifier|private
specifier|static
name|float
name|B2_CAPACITY
init|=
literal|0.8f
decl_stmt|;
DECL|field|B3_CAPACITY
specifier|private
specifier|static
name|float
name|B3_CAPACITY
init|=
literal|20
decl_stmt|;
DECL|field|tcs
specifier|private
specifier|final
name|TestCapacityScheduler
name|tcs
init|=
operator|new
name|TestCapacityScheduler
argument_list|()
decl_stmt|;
DECL|field|GB
specifier|private
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupPlanQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATIONS_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesWithReservations ()
specifier|public
name|void
name|testRefreshQueuesWithReservations
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Test add one reservation dynamically and manually modify capacity
name|ReservationQueue
name|a1
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
literal|"a1"
argument_list|,
operator|(
name|PlanQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|a1
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
name|A1_CAPACITY
operator|/
literal|100
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test add another reservation queue and use setEntitlement to modify
comment|// capacity
name|ReservationQueue
name|a2
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
literal|"a2"
argument_list|,
operator|(
name|PlanQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setEntitlement
argument_list|(
literal|"a2"
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
name|A2_CAPACITY
operator|/
literal|100
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify all allocations match
name|tcs
operator|.
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
comment|// Reinitialize and verify all dynamic queued survived
name|CapacitySchedulerConfiguration
name|conf
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|80f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|tcs
operator|.
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
literal|80f
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddQueueFailCases ()
specifier|public
name|void
name|testAddQueueFailCases
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Test invalid addition (adding non-zero size queue)
name|ReservationQueue
name|a1
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
literal|"a1"
argument_list|,
operator|(
name|PlanQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|a1
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
name|A1_CAPACITY
operator|/
literal|100
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// Test add one reservation dynamically and manually modify capacity
name|ReservationQueue
name|a1
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
literal|"a1"
argument_list|,
operator|(
name|PlanQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|a1
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
name|A1_CAPACITY
operator|/
literal|100
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test add another reservation queue and use setEntitlement to modify
comment|// capacity
name|ReservationQueue
name|a2
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
literal|"a2"
argument_list|,
operator|(
name|PlanQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|a2
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Test invalid entitlement (sum of queues exceed 100%)
name|cs
operator|.
name|setEntitlement
argument_list|(
literal|"a2"
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
name|A2_CAPACITY
operator|/
literal|100
operator|+
literal|0.1f
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|cs
operator|.
name|setEntitlement
argument_list|(
literal|"a2"
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
name|A2_CAPACITY
operator|/
literal|100
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify all allocations match
name|tcs
operator|.
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|cs
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveQueue ()
specifier|public
name|void
name|testRemoveQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Test add one reservation dynamically and manually modify capacity
name|ReservationQueue
name|a1
init|=
operator|new
name|ReservationQueue
argument_list|(
name|cs
argument_list|,
literal|"a1"
argument_list|,
operator|(
name|PlanQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|addQueue
argument_list|(
name|a1
argument_list|)
expr_stmt|;
name|a1
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
name|A1_CAPACITY
operator|/
literal|100
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|cs
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|removeQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerDynamicEditException
name|s
parameter_list|)
block|{
comment|// expected a1 contains applications
block|}
comment|// clear queue by killling all apps
name|cs
operator|.
name|killAllAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
comment|// wait for events of move to propagate
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|removeQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerDynamicEditException
name|s
parameter_list|)
block|{
comment|// expected a1 is not zero capacity
block|}
comment|// set capacity to zero
name|cs
operator|.
name|setEntitlement
argument_list|(
literal|"a1"
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
literal|0f
argument_list|,
literal|0f
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|removeQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveAppToPlanQueue ()
specifier|public
name|void
name|testMoveAppToPlanQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInB1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInB1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// create the default reservation queue
name|String
name|defQName
init|=
literal|"a"
operator|+
name|PlanQueue
operator|.
name|DEFAULT_QUEUE_SUFFIX
decl_stmt|;
name|ReservationQueue
name|defQ
init|=
operator|new
name|ReservationQueue
argument_list|(
name|scheduler
argument_list|,
name|defQName
argument_list|,
operator|(
name|PlanQueue
operator|)
name|scheduler
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addQueue
argument_list|(
name|defQ
argument_list|)
expr_stmt|;
name|defQ
operator|.
name|setEntitlement
argument_list|(
operator|new
name|QueueEntitlement
argument_list|(
literal|1f
argument_list|,
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInDefQ
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
name|defQName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInDefQ
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now move the app to plan queue
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
comment|// check postconditions
name|appsInDefQ
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
name|defQName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInDefQ
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInDefQ
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
name|defQName
argument_list|)
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInB1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInB
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|setupPlanQueueConfiguration (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupPlanQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
name|A_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
name|B1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
name|B2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
name|B3_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B3
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReservableQueue
argument_list|(
name|A
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setReservationWindow
argument_list|(
name|A
argument_list|,
literal|86400
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAverageCapacity
argument_list|(
name|A
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup a as a plan queue"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

