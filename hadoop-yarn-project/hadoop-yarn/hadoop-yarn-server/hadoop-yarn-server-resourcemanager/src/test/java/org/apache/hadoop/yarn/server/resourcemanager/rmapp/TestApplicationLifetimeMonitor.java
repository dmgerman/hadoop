begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationTimeoutsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestRMRestart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestWorkPreservingRMRestart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Times
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for application life time monitor feature test.  */
end_comment

begin_class
DECL|class|TestApplicationLifetimeMonitor
specifier|public
class|class
name|TestApplicationLifetimeMonitor
block|{
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_APPLICATION_MONITOR_INTERVAL_MS
argument_list|,
literal|3000L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testApplicationLifetimeMonitor ()
specifier|public
name|void
name|testApplicationLifetimeMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Priority
name|appPriority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeouts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|timeouts
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
name|appPriority
argument_list|,
name|timeouts
argument_list|)
decl_stmt|;
comment|// 20L seconds
name|timeouts
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
literal|20L
argument_list|)
expr_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
name|appPriority
argument_list|,
name|timeouts
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Send launch Event
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Application killed before lifetime value"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|app1
operator|.
name|getSubmitTime
argument_list|()
operator|)
operator|>
literal|10000
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|String
argument_list|>
name|updateTimeout
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|newLifetime
init|=
literal|10L
decl_stmt|;
comment|// update 10L seconds more to timeout
name|String
name|formatISO8601
init|=
name|Times
operator|.
name|formatISO8601
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|newLifetime
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|updateTimeout
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|formatISO8601
argument_list|)
expr_stmt|;
name|UpdateApplicationTimeoutsRequest
name|request
init|=
name|UpdateApplicationTimeoutsRequest
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|updateTimeout
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|applicationTimeouts
init|=
name|app2
operator|.
name|getApplicationTimeouts
argument_list|()
decl_stmt|;
comment|// has old timeout time
name|long
name|beforeUpdate
init|=
name|applicationTimeouts
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
decl_stmt|;
comment|// update app2 lifetime to new time i.e now + timeout
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getClientRMService
argument_list|()
operator|.
name|updateApplicationTimeouts
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|applicationTimeouts
operator|=
name|app2
operator|.
name|getApplicationTimeouts
argument_list|()
expr_stmt|;
name|long
name|afterUpdate
init|=
name|applicationTimeouts
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Application lifetime value not updated"
argument_list|,
name|afterUpdate
operator|>
name|beforeUpdate
argument_list|)
expr_stmt|;
comment|// verify for application report.
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetApplicationReportRequest
name|appRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|appRequest
operator|.
name|setApplicationId
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationTimeout
argument_list|>
name|applicationTimeoutList
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|appRequest
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
operator|.
name|getApplicationTimeouts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Application Timeout list are empty."
argument_list|,
operator|!
name|applicationTimeoutList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationTimeout
name|timeout
init|=
name|applicationTimeoutList
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Application timeout Type is incorrect."
argument_list|,
name|ApplicationTimeoutType
operator|.
name|LIFETIME
operator|.
name|toString
argument_list|()
argument_list|,
name|timeout
operator|.
name|getTimeoutType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Application timeout string is incorrect."
argument_list|,
name|formatISO8601
argument_list|,
name|timeout
operator|.
name|getExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Application remaining time is incorrect"
argument_list|,
name|timeout
operator|.
name|getRemainingTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// verify for app killed with updated lifetime
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Application killed before lifetime value"
argument_list|,
name|app2
operator|.
name|getFinishTime
argument_list|()
operator|>
name|afterUpdate
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopRM
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testApplicationLifetimeOnRMRestart ()
specifier|public
name|void
name|testApplicationLifetimeOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|appLifetime
init|=
literal|60L
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeouts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|timeouts
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|appLifetime
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|timeouts
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Re-start RM
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
comment|// make sure app has been unregistered with old RM else both will trigger
comment|// Expire event
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAppLifetimeMonitor
argument_list|()
operator|.
name|unregisterApp
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// recover app
name|RMApp
name|recoveredApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|amContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|runningContainer
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|amContainer
argument_list|,
name|runningContainer
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Wait for RM to settle down on recovering containers;
name|TestWorkPreservingRMRestart
operator|.
name|waitForNumContainersToRecover
argument_list|(
literal|2
argument_list|,
name|rm2
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ContainerId
argument_list|>
name|launchedContainers
init|=
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|)
operator|.
name|getLaunchedContainers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|launchedContainers
operator|.
name|contains
argument_list|(
name|amContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|launchedContainers
operator|.
name|contains
argument_list|(
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check RMContainers are re-recreated and the container state is correct.
name|rm2
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|amContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|runningContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// re register attempt to rm2
name|rm2
operator|.
name|waitForState
argument_list|(
name|recoveredApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|am1
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|recoveredApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// wait for app life time and application to be in killed state.
name|rm2
operator|.
name|waitForState
argument_list|(
name|recoveredApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Application killed before lifetime value"
argument_list|,
name|recoveredApp1
operator|.
name|getFinishTime
argument_list|()
operator|>
operator|(
name|recoveredApp1
operator|.
name|getSubmitTime
argument_list|()
operator|+
name|appLifetime
operator|*
literal|1000
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUpdateApplicationTimeoutForStateStoreUpdateFail ()
specifier|public
name|void
name|testUpdateApplicationTimeoutForStateStoreUpdateFail
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// fail only 1 time.
if|if
condition|(
name|count
operator|++
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"State-store update failed"
argument_list|)
throw|;
block|}
name|super
operator|.
name|updateApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|appLifetime
init|=
literal|30L
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|timeouts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|timeouts
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|appLifetime
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|timeouts
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|String
argument_list|>
name|updateTimeout
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|newLifetime
init|=
literal|10L
decl_stmt|;
comment|// update 10L seconds more to timeout i.e 30L seconds overall
name|updateTimeout
operator|.
name|put
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|,
name|Times
operator|.
name|formatISO8601
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|newLifetime
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateApplicationTimeoutsRequest
name|request
init|=
name|UpdateApplicationTimeoutsRequest
operator|.
name|newInstance
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|updateTimeout
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|applicationTimeouts
init|=
name|app1
operator|.
name|getApplicationTimeouts
argument_list|()
decl_stmt|;
comment|// has old timeout time
name|long
name|beforeUpdate
init|=
name|applicationTimeouts
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
decl_stmt|;
try|try
block|{
comment|// update app2 lifetime to new time i.e now + timeout
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getClientRMService
argument_list|()
operator|.
name|updateApplicationTimeouts
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Update application should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// expected
name|assertTrue
argument_list|(
literal|"State-store exception does not containe appId"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|applicationTimeouts
operator|=
name|app1
operator|.
name|getApplicationTimeouts
argument_list|()
expr_stmt|;
comment|// has old timeout time
name|long
name|afterUpdate
init|=
name|applicationTimeouts
operator|.
name|get
argument_list|(
name|ApplicationTimeoutType
operator|.
name|LIFETIME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Application timeout is updated"
argument_list|,
name|beforeUpdate
argument_list|,
name|afterUpdate
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// verify for app killed with updated lifetime
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Application killed before lifetime value"
argument_list|,
name|app1
operator|.
name|getFinishTime
argument_list|()
operator|>
name|afterUpdate
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopRM
argument_list|(
name|rm1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stopRM (MockRM rm)
specifier|private
name|void
name|stopRM
parameter_list|(
name|MockRM
name|rm
parameter_list|)
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

