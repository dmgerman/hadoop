begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|util
operator|.
name|KerberosName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|NullRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestTokenClientRMService
specifier|public
class|class
name|TestTokenClientRMService
block|{
DECL|field|kerberosRule
specifier|private
specifier|final
specifier|static
name|String
name|kerberosRule
init|=
literal|"RULE:[1:$1@$0](.*@EXAMPLE.COM)s/@.*//\nDEFAULT"
decl_stmt|;
DECL|field|dtsm
specifier|private
specifier|static
name|RMDelegationTokenSecretManager
name|dtsm
decl_stmt|;
static|static
block|{
name|KerberosName
operator|.
name|setRules
argument_list|(
name|kerberosRule
argument_list|)
expr_stmt|;
block|}
DECL|field|owner
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|owner
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"owner"
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
decl_stmt|;
DECL|field|other
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|other
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"other"
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
decl_stmt|;
DECL|field|tester
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|tester
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"tester"
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
decl_stmt|;
DECL|field|testerPrincipal
specifier|private
specifier|static
specifier|final
name|String
name|testerPrincipal
init|=
literal|"tester@EXAMPLE.COM"
decl_stmt|;
DECL|field|ownerPrincipal
specifier|private
specifier|static
specifier|final
name|String
name|ownerPrincipal
init|=
literal|"owner@EXAMPLE.COM"
decl_stmt|;
DECL|field|otherPrincipal
specifier|private
specifier|static
specifier|final
name|String
name|otherPrincipal
init|=
literal|"other@EXAMPLE.COM"
decl_stmt|;
DECL|field|testerKerb
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|testerKerb
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|testerPrincipal
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
decl_stmt|;
DECL|field|ownerKerb
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|ownerKerb
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|ownerPrincipal
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
decl_stmt|;
DECL|field|otherKerb
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|otherKerb
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|otherPrincipal
argument_list|,
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupSecretManager ()
specifier|public
specifier|static
name|void
name|setupSecretManager
parameter_list|()
throws|throws
name|IOException
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|NullRMStateStore
argument_list|()
argument_list|)
expr_stmt|;
name|dtsm
operator|=
operator|new
name|RMDelegationTokenSecretManager
argument_list|(
literal|60000
argument_list|,
literal|60000
argument_list|,
literal|60000
argument_list|,
literal|60000
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|dtsm
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.auth_to_local"
argument_list|,
name|kerberosRule
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownSecretManager ()
specifier|public
specifier|static
name|void
name|teardownSecretManager
parameter_list|()
block|{
if|if
condition|(
name|dtsm
operator|!=
literal|null
condition|)
block|{
name|dtsm
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTokenCancellationByOwner ()
specifier|public
name|void
name|testTokenCancellationByOwner
parameter_list|()
throws|throws
name|Exception
block|{
comment|// two tests required - one with a kerberos name
comment|// and with a short name
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|testerKerb
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenCancellation
argument_list|(
name|rmService
argument_list|,
name|testerKerb
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|owner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenCancellation
argument_list|(
name|owner
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenRenewalWrongUser ()
specifier|public
name|void
name|testTokenRenewalWrongUser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|owner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|owner
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tries to renew a token"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"with non-matching renewer "
operator|+
name|other
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"renew should have failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenRenewalByLoginUser ()
specifier|public
name|void
name|testTokenRenewalByLoginUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTokenRenewal (UserGroupInformation owner, UserGroupInformation renewer)
specifier|private
name|void
name|checkTokenRenewal
parameter_list|(
name|UserGroupInformation
name|owner
parameter_list|,
name|UserGroupInformation
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|RMDelegationTokenIdentifier
name|tokenIdentifier
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|owner
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|renewer
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenIdentifier
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|RenewDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RenewDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setDelegationToken
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|rmService
operator|.
name|renewDelegationToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenCancellationByRenewer ()
specifier|public
name|void
name|testTokenCancellationByRenewer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// two tests required - one with a kerberos name
comment|// and with a short name
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|testerKerb
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenCancellation
argument_list|(
name|rmService
argument_list|,
name|owner
argument_list|,
name|testerKerb
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|other
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenCancellation
argument_list|(
name|owner
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenCancellationByWrongUser ()
specifier|public
name|void
name|testTokenCancellationByWrongUser
parameter_list|()
block|{
comment|// two sets to test -
comment|// 1. try to cancel tokens of short and kerberos users as a kerberos UGI
comment|// 2. try to cancel tokens of short and kerberos users as a simple auth UGI
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|UserGroupInformation
index|[]
name|kerbTestOwners
init|=
block|{
name|owner
block|,
name|other
block|,
name|tester
block|,
name|ownerKerb
block|,
name|otherKerb
block|}
decl_stmt|;
name|UserGroupInformation
index|[]
name|kerbTestRenewers
init|=
block|{
name|owner
block|,
name|other
block|,
name|ownerKerb
block|,
name|otherKerb
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|UserGroupInformation
name|tokOwner
range|:
name|kerbTestOwners
control|)
block|{
for|for
control|(
specifier|final
name|UserGroupInformation
name|tokRenewer
range|:
name|kerbTestRenewers
control|)
block|{
try|try
block|{
name|testerKerb
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|checkTokenCancellation
argument_list|(
name|rmService
argument_list|,
name|tokOwner
argument_list|,
name|tokRenewer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We should not reach here; token owner = "
operator|+
name|tokOwner
operator|.
name|getUserName
argument_list|()
operator|+
literal|", renewer = "
operator|+
name|tokRenewer
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|testerKerb
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to cancel the token"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception; "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|UserGroupInformation
index|[]
name|simpleTestOwners
init|=
block|{
name|owner
block|,
name|other
block|,
name|ownerKerb
block|,
name|otherKerb
block|,
name|testerKerb
block|}
decl_stmt|;
name|UserGroupInformation
index|[]
name|simpleTestRenewers
init|=
block|{
name|owner
block|,
name|other
block|,
name|ownerKerb
block|,
name|otherKerb
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|UserGroupInformation
name|tokOwner
range|:
name|simpleTestOwners
control|)
block|{
for|for
control|(
specifier|final
name|UserGroupInformation
name|tokRenewer
range|:
name|simpleTestRenewers
control|)
block|{
try|try
block|{
name|tester
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|checkTokenCancellation
argument_list|(
name|tokOwner
argument_list|,
name|tokRenewer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We should not reach here; token owner = "
operator|+
name|tokOwner
operator|.
name|getUserName
argument_list|()
operator|+
literal|", renewer = "
operator|+
name|tokRenewer
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|tester
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to cancel the token"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception; "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkTokenCancellation (UserGroupInformation owner, UserGroupInformation renewer)
specifier|private
name|void
name|checkTokenCancellation
parameter_list|(
name|UserGroupInformation
name|owner
parameter_list|,
name|UserGroupInformation
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|checkTokenCancellation
argument_list|(
name|rmService
argument_list|,
name|owner
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTokenCancellation (ClientRMService rmService, UserGroupInformation owner, UserGroupInformation renewer)
specifier|private
name|void
name|checkTokenCancellation
parameter_list|(
name|ClientRMService
name|rmService
parameter_list|,
name|UserGroupInformation
name|owner
parameter_list|,
name|UserGroupInformation
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|RMDelegationTokenIdentifier
name|tokenIdentifier
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|owner
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|renewer
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenIdentifier
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|CancelDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|CancelDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setDelegationToken
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
name|rmService
operator|.
name|cancelDelegationToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenRenewalByOwner ()
specifier|public
name|void
name|testTokenRenewalByOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|owner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|owner
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

