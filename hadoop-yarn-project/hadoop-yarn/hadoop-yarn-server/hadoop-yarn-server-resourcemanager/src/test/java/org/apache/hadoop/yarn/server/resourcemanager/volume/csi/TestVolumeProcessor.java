begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|CsiAdaptorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|Volume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|VolumeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|processor
operator|.
name|VolumeAMSProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|CsiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|InvalidVolumeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|VolumeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|VolumeProvisioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_comment
comment|/**  * Test cases for volume processor.  */
end_comment

begin_class
DECL|class|TestVolumeProcessor
specifier|public
class|class
name|TestVolumeProcessor
block|{
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|mgr
specifier|private
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
decl_stmt|;
DECL|field|mockNMS
specifier|private
name|MockNM
index|[]
name|mockNMS
decl_stmt|;
DECL|field|rmNodes
specifier|private
name|RMNode
index|[]
name|rmNodes
decl_stmt|;
DECL|field|NUM_OF_NMS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_OF_NMS
init|=
literal|4
decl_stmt|;
comment|// resource-types.xml will be created under target/test-classes/ dir,
comment|// it must be deleted after the test is done, to avoid it from reading
comment|// by other UT classes.
DECL|field|resourceTypesFile
specifier|private
name|File
name|resourceTypesFile
init|=
literal|null
decl_stmt|;
DECL|field|VOLUME_RESOURCE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|VOLUME_RESOURCE_NAME
init|=
literal|"yarn.io/csi-volume"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|resourceTypesFile
operator|=
operator|new
name|File
argument_list|(
name|conf
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"."
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"resource-types.xml"
argument_list|)
expr_stmt|;
name|writeTmpResourceTypesFile
argument_list|(
name|resourceTypesFile
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
name|YarnConfiguration
operator|.
name|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.resource-calculator"
argument_list|,
literal|"org.apache.hadoop.yarn.util.resource.DominantResourceCalculator"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
operator|+
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".default.ordering-policy"
argument_list|,
literal|"fair"
argument_list|)
expr_stmt|;
comment|// this is required to enable volume processor
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_APPLICATION_MASTER_SERVICE_PROCESSORS
argument_list|,
name|VolumeAMSProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|mockNMS
operator|=
operator|new
name|MockNM
index|[
name|NUM_OF_NMS
index|]
expr_stmt|;
name|rmNodes
operator|=
operator|new
name|RMNode
index|[
name|NUM_OF_NMS
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|mockNMS
index|[
name|i
index|]
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|mockNMS
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|resourceTypesFile
operator|!=
literal|null
operator|&&
name|resourceTypesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|resourceTypesFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeTmpResourceTypesFile (File tmpFile)
specifier|private
name|void
name|writeTmpResourceTypesFile
parameter_list|(
name|File
name|tmpFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|VOLUME_RESOURCE_NAME
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
literal|"yarn.resource-types."
operator|+
name|VOLUME_RESOURCE_NAME
operator|+
literal|".units"
argument_list|,
literal|"Mi"
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
literal|"yarn.resource-types."
operator|+
name|VOLUME_RESOURCE_NAME
operator|+
literal|".tags"
argument_list|,
name|CsiConstants
operator|.
name|CSI_VOLUME_RESOURCE_TAG
argument_list|)
expr_stmt|;
try|try
init|(
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|tmpFile
argument_list|)
init|)
block|{
name|yarnConf
operator|.
name|writeXml
argument_list|(
name|fw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000L
argument_list|)
DECL|method|testVolumeProvisioning ()
specifier|public
name|void
name|testVolumeProvisioning
parameter_list|()
throws|throws
name|Exception
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|mockNMS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceInformation
name|volumeResource
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
literal|"Mi"
argument_list|,
literal|1024
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_RESOURCE_TAG
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|,
literal|"test-vol-000001"
argument_list|,
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|,
literal|"hostpath"
argument_list|,
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|,
literal|"/mnt/data"
argument_list|)
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResourceInformation
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
name|volumeResource
argument_list|)
expr_stmt|;
name|SchedulingRequest
name|sc
init|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|0L
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|resource
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AllocateRequest
name|ar
init|=
name|AllocateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|schedulingRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sc
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// inject adaptor client for testing
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getVolumeManager
argument_list|()
operator|.
name|registerCsiDriverAdaptor
argument_list|(
literal|"hostpath"
argument_list|,
name|mockedClient
argument_list|)
expr_stmt|;
comment|// simulate validation succeed
name|doReturn
argument_list|(
name|ValidateVolumeCapabilitiesResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|VolumeStates
name|volumeStates
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getVolumeManager
argument_list|()
operator|.
name|getVolumeStates
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|volumeStates
argument_list|)
expr_stmt|;
name|VolumeState
name|volumeState
init|=
name|VolumeState
operator|.
name|NEW
decl_stmt|;
while|while
condition|(
name|volumeState
operator|!=
name|VolumeState
operator|.
name|NODE_READY
condition|)
block|{
name|Volume
name|volume
init|=
name|volumeStates
operator|.
name|getVolume
argument_list|(
operator|new
name|VolumeId
argument_list|(
literal|"test-vol-000001"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|volume
operator|!=
literal|null
condition|)
block|{
name|volumeState
operator|=
name|volume
operator|.
name|getVolumeState
argument_list|()
expr_stmt|;
block|}
name|am1
operator|.
name|doHeartbeat
argument_list|()
expr_stmt|;
name|mockNMS
index|[
literal|0
index|]
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testInvalidRequest ()
specifier|public
name|void
name|testInvalidRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|mockNMS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceInformation
name|volumeResource
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
literal|"Mi"
argument_list|,
literal|1024
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_RESOURCE_TAG
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
comment|// volume ID is missing...
name|CsiConstants
operator|.
name|CSI_VOLUME_NAME
argument_list|,
literal|"test-vol-000001"
argument_list|,
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|,
literal|"hostpath"
argument_list|,
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|,
literal|"/mnt/data"
argument_list|)
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResourceInformation
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
name|volumeResource
argument_list|)
expr_stmt|;
name|SchedulingRequest
name|sc
init|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|0L
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|resource
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AllocateRequest
name|ar
init|=
name|AllocateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|schedulingRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sc
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|am1
operator|.
name|allocate
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"allocate should fail because invalid request received"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InvalidVolumeException
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testProvisioningFailures ()
specifier|public
name|void
name|testProvisioningFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|mockNMS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// inject adaptor client
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getVolumeManager
argument_list|()
operator|.
name|registerCsiDriverAdaptor
argument_list|(
literal|"hostpath"
argument_list|,
name|mockedClient
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|VolumeException
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceInformation
name|volumeResource
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
literal|"Mi"
argument_list|,
literal|1024
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_RESOURCE_TAG
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|,
literal|"test-vol-000001"
argument_list|,
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|,
literal|"hostpath"
argument_list|,
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|,
literal|"/mnt/data"
argument_list|)
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResourceInformation
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
name|volumeResource
argument_list|)
expr_stmt|;
name|SchedulingRequest
name|sc
init|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|0L
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|resource
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AllocateRequest
name|ar
init|=
name|AllocateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|schedulingRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sc
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|am1
operator|.
name|allocate
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"allocate should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|VolumeProvisioningException
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000L
argument_list|)
DECL|method|testVolumeResourceAllocate ()
specifier|public
name|void
name|testVolumeResourceAllocate
parameter_list|()
throws|throws
name|Exception
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|mockNMS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceInformation
name|volumeResource
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
literal|"Mi"
argument_list|,
literal|1024
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_RESOURCE_TAG
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|,
literal|"test-vol-000001"
argument_list|,
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|,
literal|"hostpath"
argument_list|,
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|,
literal|"/mnt/data"
argument_list|)
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setResourceInformation
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|,
name|volumeResource
argument_list|)
expr_stmt|;
name|SchedulingRequest
name|sc
init|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
literal|0L
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|resource
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// inject adaptor client for testing
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getVolumeManager
argument_list|()
operator|.
name|registerCsiDriverAdaptor
argument_list|(
literal|"hostpath"
argument_list|,
name|mockedClient
argument_list|)
expr_stmt|;
comment|// simulate validation succeed
name|doReturn
argument_list|(
name|ValidateVolumeCapabilitiesResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocated
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|AllocateResponse
name|response
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|mockNMS
index|[
literal|0
index|]
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allocated
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|alloc
init|=
name|allocated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|alloc
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|alloc
operator|.
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ResourceInformation
name|allocatedVolume
init|=
name|alloc
operator|.
name|getResource
argument_list|()
operator|.
name|getResourceInformation
argument_list|(
name|VOLUME_RESOURCE_NAME
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|allocatedVolume
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocatedVolume
operator|.
name|getValue
argument_list|()
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocatedVolume
operator|.
name|getUnits
argument_list|()
argument_list|,
literal|"Mi"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

