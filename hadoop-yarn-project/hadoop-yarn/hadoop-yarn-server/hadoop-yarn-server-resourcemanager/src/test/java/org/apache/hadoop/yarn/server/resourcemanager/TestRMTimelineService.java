begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|TimelineServiceV1Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|TimelineServiceV2Publisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests that the RM creates timeline services (v1/v2) as specified by the  * configuration.  */
end_comment

begin_class
DECL|class|TestRMTimelineService
specifier|public
class|class
name|TestRMTimelineService
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|method|setup (boolean v1Enabled, boolean v2Enabled, boolean systemMetricEnabled)
specifier|private
name|void
name|setup
parameter_list|(
name|boolean
name|v1Enabled
parameter_list|,
name|boolean
name|v2Enabled
parameter_list|,
name|boolean
name|systemMetricEnabled
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceEnabled
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
name|systemMetricEnabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|v1Enabled
operator|||
name|v2Enabled
condition|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v1Enabled
condition|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v2Enabled
condition|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|FileSystemTimelineWriterImpl
operator|.
name|class
argument_list|,
name|TimelineWriter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v1Enabled
operator|&&
name|v2Enabled
condition|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSIONS
argument_list|,
literal|"1.0,2.0f"
argument_list|)
expr_stmt|;
block|}
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// validate RM services exist or not as we specified
DECL|method|validate (boolean v1Enabled, boolean v2Enabled, boolean systemMetricEnabled)
specifier|private
name|void
name|validate
parameter_list|(
name|boolean
name|v1Enabled
parameter_list|,
name|boolean
name|v2Enabled
parameter_list|,
name|boolean
name|systemMetricEnabled
parameter_list|)
block|{
name|boolean
name|v1PublisherServiceFound
init|=
literal|false
decl_stmt|;
name|boolean
name|v2PublisherServiceFound
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Service
argument_list|>
name|services
init|=
name|rm
operator|.
name|getServices
argument_list|()
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|TimelineServiceV1Publisher
condition|)
block|{
name|v1PublisherServiceFound
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|service
operator|instanceof
name|TimelineServiceV2Publisher
condition|)
block|{
name|v2PublisherServiceFound
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|systemMetricEnabled
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|v1Enabled
argument_list|,
name|v1PublisherServiceFound
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|v2Enabled
argument_list|,
name|v2PublisherServiceFound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|v1PublisherServiceFound
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|v2PublisherServiceFound
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|cleanup ()
specifier|private
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// runs test to validate RM creates a timeline service publisher if and
comment|// only if the service is enabled for v1 and v2 (independently).
DECL|method|runTest (boolean v1Enabled, boolean v2Enabled, boolean systemMetricEnabled)
specifier|private
name|void
name|runTest
parameter_list|(
name|boolean
name|v1Enabled
parameter_list|,
name|boolean
name|v2Enabled
parameter_list|,
name|boolean
name|systemMetricEnabled
parameter_list|)
throws|throws
name|Exception
block|{
name|setup
argument_list|(
name|v1Enabled
argument_list|,
name|v2Enabled
argument_list|,
name|systemMetricEnabled
argument_list|)
expr_stmt|;
name|validate
argument_list|(
name|v1Enabled
argument_list|,
name|v2Enabled
argument_list|,
name|systemMetricEnabled
argument_list|)
expr_stmt|;
name|cleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceV1V2Enabled ()
specifier|public
name|void
name|testTimelineServiceV1V2Enabled
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceV1Enabled ()
specifier|public
name|void
name|testTimelineServiceV1Enabled
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceV2Enabled ()
specifier|public
name|void
name|testTimelineServiceV2Enabled
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceDisabled ()
specifier|public
name|void
name|testTimelineServiceDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceV1V2EnabledSystemMetricDisable ()
specifier|public
name|void
name|testTimelineServiceV1V2EnabledSystemMetricDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceV1EnabledSystemMetricDisable ()
specifier|public
name|void
name|testTimelineServiceV1EnabledSystemMetricDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceV2EnabledSystemMetricDisable ()
specifier|public
name|void
name|testTimelineServiceV2EnabledSystemMetricDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTimelineServiceDisabledSystemMetricDisable ()
specifier|public
name|void
name|testTimelineServiceDisabledSystemMetricDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

