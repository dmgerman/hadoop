begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSConfigKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataInputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClientRMService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestRMRestart
operator|.
name|TestSecurityMockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|DelegationTokenRenewer
operator|.
name|DelegationTokenToRenew
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * unit test -   * tests addition/deletion/cancellation of renewals of delegation tokens  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|TestDelegationTokenRenewer
specifier|public
class|class
name|TestDelegationTokenRenewer
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDelegationTokenRenewer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|KIND
specifier|private
specifier|static
specifier|final
name|Text
name|KIND
init|=
name|DelegationTokenRenewer
operator|.
name|HDFS_DELEGATION_KIND
decl_stmt|;
DECL|field|eventQueue
specifier|private
specifier|static
name|BlockingQueue
argument_list|<
name|Event
argument_list|>
name|eventQueue
decl_stmt|;
DECL|field|counter
specifier|private
specifier|static
specifier|volatile
name|AtomicInteger
name|counter
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|static
name|AsyncDispatcher
name|dispatcher
decl_stmt|;
DECL|class|Renewer
specifier|public
specifier|static
class|class
name|Renewer
extends|extends
name|TokenRenewer
block|{
DECL|field|counter
specifier|private
specifier|static
name|int
name|counter
init|=
literal|0
decl_stmt|;
DECL|field|lastRenewed
specifier|private
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|lastRenewed
init|=
literal|null
decl_stmt|;
DECL|field|tokenToRenewIn2Sec
specifier|private
specifier|static
name|Token
argument_list|<
name|?
argument_list|>
name|tokenToRenewIn2Sec
init|=
literal|null
decl_stmt|;
DECL|field|cancelled
specifier|private
specifier|static
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
DECL|method|reset ()
specifier|private
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|counter
operator|=
literal|0
expr_stmt|;
name|lastRenewed
operator|=
literal|null
expr_stmt|;
name|tokenToRenewIn2Sec
operator|=
literal|null
expr_stmt|;
name|cancelled
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleKind (Text kind)
specifier|public
name|boolean
name|handleKind
parameter_list|(
name|Text
name|kind
parameter_list|)
block|{
return|return
name|KIND
operator|.
name|equals
argument_list|(
name|kind
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isManaged (Token<?> token)
specifier|public
name|boolean
name|isManaged
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|token
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|renew (Token<?> t, Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|MyToken
operator|)
condition|)
block|{
comment|// renew in 3 seconds
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3000
return|;
block|}
name|MyToken
name|token
init|=
operator|(
name|MyToken
operator|)
name|t
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isCanceled
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"token has been canceled"
argument_list|)
throw|;
block|}
name|lastRenewed
operator|=
name|token
expr_stmt|;
name|counter
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Called MYDFS.renewdelegationtoken "
operator|+
name|token
operator|+
literal|";this dfs="
operator|+
name|this
operator|.
name|hashCode
argument_list|()
operator|+
literal|";c="
operator|+
name|counter
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenToRenewIn2Sec
operator|==
name|token
condition|)
block|{
comment|// this token first renewal in 2 seconds
name|LOG
operator|.
name|info
argument_list|(
literal|"RENEW in 2 seconds"
argument_list|)
expr_stmt|;
name|tokenToRenewIn2Sec
operator|=
literal|null
expr_stmt|;
return|return
literal|2
operator|*
literal|1000
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|86400
operator|*
literal|1000
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|cancel (Token<?> t, Configuration conf)
specifier|public
name|void
name|cancel
parameter_list|(
name|Token
argument_list|<
name|?
argument_list|>
name|t
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|MyToken
condition|)
block|{
name|MyToken
name|token
init|=
operator|(
name|MyToken
operator|)
name|t
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancel token "
operator|+
name|token
argument_list|)
expr_stmt|;
name|token
operator|.
name|cancelToken
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|conf
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
DECL|field|delegationTokenRenewer
name|DelegationTokenRenewer
name|delegationTokenRenewer
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setUpClass ()
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
comment|// create a fake FileSystem (MyFS) and assosiate it
comment|// with "hdfs" schema.
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://localhost:0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"scheme is : "
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs."
operator|+
name|uri
operator|.
name|getScheme
argument_list|()
operator|+
literal|".impl"
argument_list|,
name|MyFS
operator|.
name|class
argument_list|,
name|DistributedFileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|setDefaultUri
argument_list|(
name|conf
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"filesystem uri = "
operator|+
name|FileSystem
operator|.
name|getDefaultUri
argument_list|(
name|conf
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|counter
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|eventQueue
operator|=
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Event
argument_list|>
argument_list|()
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|AsyncDispatcher
argument_list|(
name|eventQueue
argument_list|)
expr_stmt|;
name|Renewer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|delegationTokenRenewer
operator|=
name|createNewDelegationTokenRenewer
argument_list|(
name|conf
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|RMContext
name|mockContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientRMService
name|mockClientRMService
init|=
name|mock
argument_list|(
name|ClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDelegationTokenRenewer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getClientRMService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClientRMService
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|sockAddr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockClientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sockAddr
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|setRMContext
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|delegationTokenRenewer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|MyDelegationTokenSecretManager
specifier|private
specifier|static
class|class
name|MyDelegationTokenSecretManager
extends|extends
name|DelegationTokenSecretManager
block|{
DECL|method|MyDelegationTokenSecretManager (long delegationKeyUpdateInterval, long delegationTokenMaxLifetime, long delegationTokenRenewInterval, long delegationTokenRemoverScanInterval, FSNamesystem namesystem)
specifier|public
name|MyDelegationTokenSecretManager
parameter_list|(
name|long
name|delegationKeyUpdateInterval
parameter_list|,
name|long
name|delegationTokenMaxLifetime
parameter_list|,
name|long
name|delegationTokenRenewInterval
parameter_list|,
name|long
name|delegationTokenRemoverScanInterval
parameter_list|,
name|FSNamesystem
name|namesystem
parameter_list|)
block|{
name|super
argument_list|(
name|delegationKeyUpdateInterval
argument_list|,
name|delegationTokenMaxLifetime
argument_list|,
name|delegationTokenRenewInterval
argument_list|,
name|delegationTokenRemoverScanInterval
argument_list|,
name|namesystem
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|//DelegationTokenSecretManager
DECL|method|logUpdateMasterKey (DelegationKey key)
specifier|public
name|void
name|logUpdateMasterKey
parameter_list|(
name|DelegationKey
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return;
block|}
block|}
comment|/**    * add some extra functionality for testing    * 1. toString();    * 2. cancel() and isCanceled()    */
DECL|class|MyToken
specifier|private
specifier|static
class|class
name|MyToken
extends|extends
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
block|{
DECL|field|status
specifier|public
name|String
name|status
init|=
literal|"GOOD"
decl_stmt|;
DECL|field|CANCELED
specifier|public
specifier|static
specifier|final
name|String
name|CANCELED
init|=
literal|"CANCELED"
decl_stmt|;
DECL|method|MyToken (DelegationTokenIdentifier dtId1, MyDelegationTokenSecretManager sm)
specifier|public
name|MyToken
parameter_list|(
name|DelegationTokenIdentifier
name|dtId1
parameter_list|,
name|MyDelegationTokenSecretManager
name|sm
parameter_list|)
block|{
name|super
argument_list|(
name|dtId1
argument_list|,
name|sm
argument_list|)
expr_stmt|;
name|setKind
argument_list|(
name|KIND
argument_list|)
expr_stmt|;
name|status
operator|=
literal|"GOOD"
expr_stmt|;
block|}
DECL|method|isCanceled ()
specifier|public
name|boolean
name|isCanceled
parameter_list|()
block|{
return|return
name|status
operator|.
name|equals
argument_list|(
name|CANCELED
argument_list|)
return|;
block|}
DECL|method|cancelToken ()
specifier|public
name|void
name|cancelToken
parameter_list|()
block|{
name|this
operator|.
name|status
operator|=
name|CANCELED
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|renew (Configuration conf)
specifier|public
name|long
name|renew
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|super
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
return|;
block|}
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"id="
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|StringUtils
operator|.
name|byteToHexString
argument_list|(
name|this
operator|.
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|idLen
init|=
name|id
operator|.
name|length
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|id
operator|.
name|substring
argument_list|(
name|idLen
operator|-
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";k="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getKind
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";s="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|getService
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * fake FileSystem     * overwrites three methods    * 1. getDelegationToken() - generates a token    * 2. renewDelegataionToken - counts number of calls, and remembers     * most recently renewed token.    * 3. cancelToken -cancels token (subsequent renew will cause IllegalToken     * exception    */
DECL|class|MyFS
specifier|static
class|class
name|MyFS
extends|extends
name|DistributedFileSystem
block|{
DECL|field|instanceCounter
specifier|private
specifier|static
name|AtomicInteger
name|instanceCounter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|MyFS ()
specifier|public
name|MyFS
parameter_list|()
block|{
name|instanceCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|instanceCounter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
DECL|method|getInstanceCounter ()
specifier|public
specifier|static
name|int
name|getInstanceCounter
parameter_list|()
block|{
return|return
name|instanceCounter
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|initialize (URI uri, Configuration conf)
specifier|public
name|void
name|initialize
parameter_list|(
name|URI
name|uri
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|getDelegationToken (String renewer)
specifier|public
name|MyToken
name|getDelegationToken
parameter_list|(
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|MyToken
name|result
init|=
name|createTokens
argument_list|(
operator|new
name|Text
argument_list|(
name|renewer
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Called MYDFS.getdelegationtoken "
operator|+
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|addDelegationTokens ( final String renewer, Credentials credentials)
specifier|public
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|addDelegationTokens
parameter_list|(
specifier|final
name|String
name|renewer
parameter_list|,
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Token
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
return|;
block|}
block|}
comment|/**    * Auxiliary - create token    * @param renewer    * @return    * @throws IOException    */
DECL|method|createTokens (Text renewer)
specifier|static
name|MyToken
name|createTokens
parameter_list|(
name|Text
name|renewer
parameter_list|)
throws|throws
name|IOException
block|{
name|Text
name|user1
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|MyDelegationTokenSecretManager
name|sm
init|=
operator|new
name|MyDelegationTokenSecretManager
argument_list|(
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT
argument_list|,
name|DFSConfigKeys
operator|.
name|DFS_NAMENODE_DELEGATION_TOKEN_RENEW_INTERVAL_DEFAULT
argument_list|,
literal|3600000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|sm
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|user1
argument_list|,
name|renewer
argument_list|,
name|user1
argument_list|)
decl_stmt|;
name|MyToken
name|token1
init|=
operator|new
name|MyToken
argument_list|(
name|dtId1
argument_list|,
name|sm
argument_list|)
decl_stmt|;
name|token1
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
literal|"localhost:0"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|token1
return|;
block|}
comment|/**    * Basic idea of the test:    * 1. create tokens.    * 2. Mark one of them to be renewed in 2 seconds (instead of    * 24 hours)    * 3. register them for renewal    * 4. sleep for 3 seconds    * 5. count number of renewals (should 3 initial ones + one extra)    * 6. register another token for 2 seconds     * 7. cancel it immediately    * 8. Sleep and check that the 2 seconds renew didn't happen     * (totally 5 renewals)    * 9. check cancellation    * @throws IOException    * @throws URISyntaxException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDTRenewal ()
specifier|public
name|void
name|testDTRenewal
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFS
name|dfs
init|=
operator|(
name|MyFS
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
operator|(
name|Object
operator|)
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";conf="
operator|+
name|conf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test 1. - add three tokens - make sure exactly one get's renewed
comment|// get the delegation tokens
name|MyToken
name|token1
decl_stmt|,
name|token2
decl_stmt|,
name|token3
decl_stmt|;
name|token1
operator|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|token2
operator|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user2"
argument_list|)
expr_stmt|;
name|token3
operator|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user3"
argument_list|)
expr_stmt|;
comment|//to cause this one to be set for renew in 2 secs
name|Renewer
operator|.
name|tokenToRenewIn2Sec
operator|=
name|token1
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"token="
operator|+
name|token1
operator|+
literal|" should be renewed for 2 secs"
argument_list|)
expr_stmt|;
comment|// three distinct Namenodes
name|String
name|nn1
init|=
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://host1:0"
decl_stmt|;
name|String
name|nn2
init|=
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://host2:0"
decl_stmt|;
name|String
name|nn3
init|=
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://host3:0"
decl_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// register the token for renewal
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn1
argument_list|)
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn2
argument_list|)
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn3
argument_list|)
argument_list|,
name|token3
argument_list|)
expr_stmt|;
comment|// register the tokens for renewal
name|ApplicationId
name|applicationId_0
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|delegationTokenRenewer
operator|.
name|addApplicationAsync
argument_list|(
name|applicationId_0
argument_list|,
name|ts
argument_list|,
literal|true
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
comment|// first 3 initial renewals + 1 real
name|int
name|numberOfExpectedRenewals
init|=
literal|3
operator|+
literal|1
decl_stmt|;
name|int
name|attempts
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|attempts
operator|--
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// sleep 3 seconds, so it has time to renew
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
comment|// since we cannot guarantee timely execution - let's give few chances
if|if
condition|(
name|Renewer
operator|.
name|counter
operator|==
name|numberOfExpectedRenewals
condition|)
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";Counter = "
operator|+
name|Renewer
operator|.
name|counter
operator|+
literal|";t="
operator|+
name|Renewer
operator|.
name|lastRenewed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renew wasn't called as many times as expected(4):"
argument_list|,
name|numberOfExpectedRenewals
argument_list|,
name|Renewer
operator|.
name|counter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"most recently renewed token mismatch"
argument_list|,
name|Renewer
operator|.
name|lastRenewed
argument_list|,
name|token1
argument_list|)
expr_stmt|;
comment|// Test 2.
comment|// add another token ( that expires in 2 secs). Then remove it, before
comment|// time is up.
comment|// Wait for 3 secs , and make sure no renews were called
name|ts
operator|=
operator|new
name|Credentials
argument_list|()
expr_stmt|;
name|MyToken
name|token4
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user4"
argument_list|)
decl_stmt|;
comment|//to cause this one to be set for renew in 2 secs
name|Renewer
operator|.
name|tokenToRenewIn2Sec
operator|=
name|token4
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"token="
operator|+
name|token4
operator|+
literal|" should be renewed for 2 secs"
argument_list|)
expr_stmt|;
name|String
name|nn4
init|=
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://host4:0"
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn4
argument_list|)
argument_list|,
name|token4
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId_1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|delegationTokenRenewer
operator|.
name|addApplicationAsync
argument_list|(
name|applicationId_1
argument_list|,
name|ts
argument_list|,
literal|true
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|applicationFinished
argument_list|(
name|applicationId_1
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
name|numberOfExpectedRenewals
operator|=
name|Renewer
operator|.
name|counter
expr_stmt|;
comment|// number of renewals so far
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// sleep 6 seconds, so it has time to renew
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|LOG
operator|.
name|info
argument_list|(
literal|"Counter = "
operator|+
name|Renewer
operator|.
name|counter
operator|+
literal|";t="
operator|+
name|Renewer
operator|.
name|lastRenewed
argument_list|)
expr_stmt|;
comment|// counter and the token should stil be the old ones
name|assertEquals
argument_list|(
literal|"renew wasn't called as many times as expected"
argument_list|,
name|numberOfExpectedRenewals
argument_list|,
name|Renewer
operator|.
name|counter
argument_list|)
expr_stmt|;
comment|// also renewing of the cancelled token should fail
try|try
block|{
name|token4
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Renewal of cancelled token should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|ite
parameter_list|)
block|{
comment|//expected
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppRejectionWithCancelledDelegationToken ()
specifier|public
name|void
name|testAppRejectionWithCancelledDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFS
name|dfs
init|=
operator|(
name|MyFS
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
operator|(
name|Object
operator|)
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";conf="
operator|+
name|conf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|MyToken
name|token
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|token
operator|.
name|cancelToken
argument_list|()
expr_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
comment|// register the tokens for renewal
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|delegationTokenRenewer
operator|.
name|addApplicationAsync
argument_list|(
name|appId
argument_list|,
name|ts
argument_list|,
literal|true
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|int
name|waitCnt
init|=
literal|20
decl_stmt|;
while|while
condition|(
name|waitCnt
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|eventQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Event
name|evt
init|=
name|eventQueue
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|evt
operator|.
name|getType
argument_list|()
operator|==
name|RMAppEventType
operator|.
name|APP_REJECTED
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|(
operator|(
name|RMAppEvent
operator|)
name|evt
operator|)
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"App submission with a cancelled token should have failed"
argument_list|)
expr_stmt|;
block|}
comment|// Testcase for YARN-3021, let RM skip renewing token if the renewer string
comment|// is empty
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppTokenWithNonRenewer ()
specifier|public
name|void
name|testAppTokenWithNonRenewer
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFS
name|dfs
init|=
operator|(
name|MyFS
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
operator|(
name|Object
operator|)
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";conf="
operator|+
name|conf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test would fail if using non-empty renewer string here
name|MyToken
name|token
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|token
operator|.
name|cancelToken
argument_list|()
expr_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|token
operator|.
name|getKind
argument_list|()
argument_list|,
name|token
argument_list|)
expr_stmt|;
comment|// register the tokens for renewal
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|delegationTokenRenewer
operator|.
name|addApplicationSync
argument_list|(
name|appId
argument_list|,
name|ts
argument_list|,
literal|true
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Basic idea of the test:    * 1. register a token for 2 seconds with no cancel at the end    * 2. cancel it immediately    * 3. Sleep and check that the 2 seconds renew didn't happen     * (totally 5 renewals)    * 4. check cancellation    * @throws IOException    * @throws URISyntaxException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDTRenewalWithNoCancel ()
specifier|public
name|void
name|testDTRenewalWithNoCancel
parameter_list|()
throws|throws
name|Exception
block|{
name|MyFS
name|dfs
init|=
operator|(
name|MyFS
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
operator|(
name|Object
operator|)
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";conf="
operator|+
name|conf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|MyToken
name|token1
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
comment|//to cause this one to be set for renew in 2 secs
name|Renewer
operator|.
name|tokenToRenewIn2Sec
operator|=
name|token1
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"token="
operator|+
name|token1
operator|+
literal|" should be renewed for 2 secs"
argument_list|)
expr_stmt|;
name|String
name|nn1
init|=
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://host1:0"
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn1
argument_list|)
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId_1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|delegationTokenRenewer
operator|.
name|addApplicationAsync
argument_list|(
name|applicationId_1
argument_list|,
name|ts
argument_list|,
literal|false
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|applicationFinished
argument_list|(
name|applicationId_1
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
name|int
name|numberOfExpectedRenewals
init|=
name|Renewer
operator|.
name|counter
decl_stmt|;
comment|// number of renewals so far
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// sleep 6 seconds, so it has time to renew
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|LOG
operator|.
name|info
argument_list|(
literal|"Counter = "
operator|+
name|Renewer
operator|.
name|counter
operator|+
literal|";t="
operator|+
name|Renewer
operator|.
name|lastRenewed
argument_list|)
expr_stmt|;
comment|// counter and the token should still be the old ones
name|assertEquals
argument_list|(
literal|"renew wasn't called as many times as expected"
argument_list|,
name|numberOfExpectedRenewals
argument_list|,
name|Renewer
operator|.
name|counter
argument_list|)
expr_stmt|;
comment|// also renewing of the canceled token should not fail, because it has not
comment|// been canceled
name|token1
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Basic idea of the test:    * 0. Setup token KEEP_ALIVE    * 1. create tokens.    * 2. register them for renewal - to be cancelled on app complete    * 3. Complete app.    * 4. Verify token is alive within the KEEP_ALIVE time    * 5. Verify token has been cancelled after the KEEP_ALIVE_TIME    * @throws IOException    * @throws URISyntaxException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDTKeepAlive1 ()
specifier|public
name|void
name|testDTKeepAlive1
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|lconf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|lconf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Keep tokens alive for 6 seconds.
name|lconf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
literal|6000l
argument_list|)
expr_stmt|;
comment|//Try removing tokens every second.
name|lconf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
argument_list|,
literal|1000l
argument_list|)
expr_stmt|;
name|DelegationTokenRenewer
name|localDtr
init|=
name|createNewDelegationTokenRenewer
argument_list|(
name|lconf
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|RMContext
name|mockContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|mockClientRMService
init|=
name|mock
argument_list|(
name|ClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getClientRMService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClientRMService
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDelegationTokenRenewer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localDtr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|sockAddr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockClientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sockAddr
argument_list|)
expr_stmt|;
name|localDtr
operator|.
name|setRMContext
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|localDtr
operator|.
name|init
argument_list|(
name|lconf
argument_list|)
expr_stmt|;
name|localDtr
operator|.
name|start
argument_list|()
expr_stmt|;
name|MyFS
name|dfs
init|=
operator|(
name|MyFS
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|lconf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
operator|(
name|Object
operator|)
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";conf="
operator|+
name|lconf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// get the delegation tokens
name|MyToken
name|token1
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|String
name|nn1
init|=
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://host1:0"
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn1
argument_list|)
argument_list|,
name|token1
argument_list|)
expr_stmt|;
comment|// register the tokens for renewal
name|ApplicationId
name|applicationId_0
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|localDtr
operator|.
name|addApplicationAsync
argument_list|(
name|applicationId_0
argument_list|,
name|ts
argument_list|,
literal|true
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|localDtr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|eventQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Event
name|evt
init|=
name|eventQueue
operator|.
name|take
argument_list|()
decl_stmt|;
if|if
condition|(
name|evt
operator|instanceof
name|RMAppEvent
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
operator|(
name|RMAppEvent
operator|)
name|evt
operator|)
operator|.
name|getType
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"RMAppEvent.START was expected!!"
argument_list|)
expr_stmt|;
block|}
block|}
name|localDtr
operator|.
name|applicationFinished
argument_list|(
name|applicationId_0
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|localDtr
argument_list|)
expr_stmt|;
comment|//Token should still be around. Renewal should not fail.
name|token1
operator|.
name|renew
argument_list|(
name|lconf
argument_list|)
expr_stmt|;
comment|//Allow the keepalive time to run out
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000l
argument_list|)
expr_stmt|;
comment|//The token should have been cancelled at this point. Renewal will fail.
try|try
block|{
name|token1
operator|.
name|renew
argument_list|(
name|lconf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Renewal of cancelled token should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|ite
parameter_list|)
block|{}
block|}
comment|/**    * Basic idea of the test:    * 0. Setup token KEEP_ALIVE    * 1. create tokens.    * 2. register them for renewal - to be cancelled on app complete    * 3. Complete app.    * 4. Verify token is alive within the KEEP_ALIVE time    * 5. Send an explicity KEEP_ALIVE_REQUEST    * 6. Verify token KEEP_ALIVE time is renewed.    * 7. Verify token has been cancelled after the renewed KEEP_ALIVE_TIME.    * @throws IOException    * @throws URISyntaxException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDTKeepAlive2 ()
specifier|public
name|void
name|testDTKeepAlive2
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|lconf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|lconf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|LOG_AGGREGATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Keep tokens alive for 6 seconds.
name|lconf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
literal|6000l
argument_list|)
expr_stmt|;
comment|//Try removing tokens every second.
name|lconf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_DELAYED_DELEGATION_TOKEN_REMOVAL_INTERVAL_MS
argument_list|,
literal|1000l
argument_list|)
expr_stmt|;
name|DelegationTokenRenewer
name|localDtr
init|=
name|createNewDelegationTokenRenewer
argument_list|(
name|conf
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|RMContext
name|mockContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|mockClientRMService
init|=
name|mock
argument_list|(
name|ClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getClientRMService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClientRMService
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDelegationTokenRenewer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|localDtr
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|sockAddr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockClientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sockAddr
argument_list|)
expr_stmt|;
name|localDtr
operator|.
name|setRMContext
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|localDtr
operator|.
name|init
argument_list|(
name|lconf
argument_list|)
expr_stmt|;
name|localDtr
operator|.
name|start
argument_list|()
expr_stmt|;
name|MyFS
name|dfs
init|=
operator|(
name|MyFS
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|lconf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dfs="
operator|+
operator|(
name|Object
operator|)
name|dfs
operator|.
name|hashCode
argument_list|()
operator|+
literal|";conf="
operator|+
name|lconf
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// get the delegation tokens
name|MyToken
name|token1
init|=
name|dfs
operator|.
name|getDelegationToken
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|String
name|nn1
init|=
name|DelegationTokenRenewer
operator|.
name|SCHEME
operator|+
literal|"://host1:0"
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
name|nn1
argument_list|)
argument_list|,
name|token1
argument_list|)
expr_stmt|;
comment|// register the tokens for renewal
name|ApplicationId
name|applicationId_0
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|localDtr
operator|.
name|addApplicationAsync
argument_list|(
name|applicationId_0
argument_list|,
name|ts
argument_list|,
literal|true
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|localDtr
operator|.
name|applicationFinished
argument_list|(
name|applicationId_0
argument_list|)
expr_stmt|;
name|waitForEventsToGetProcessed
argument_list|(
name|delegationTokenRenewer
argument_list|)
expr_stmt|;
comment|//Send another keep alive.
name|localDtr
operator|.
name|updateKeepAliveApplications
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|applicationId_0
argument_list|)
argument_list|)
expr_stmt|;
comment|//Renewal should not fail.
name|token1
operator|.
name|renew
argument_list|(
name|lconf
argument_list|)
expr_stmt|;
comment|//Token should be around after this.
name|Thread
operator|.
name|sleep
argument_list|(
literal|4500l
argument_list|)
expr_stmt|;
comment|//Renewal should not fail. - ~1.5 seconds for keepalive timeout.
name|token1
operator|.
name|renew
argument_list|(
name|lconf
argument_list|)
expr_stmt|;
comment|//Allow the keepalive time to run out
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000l
argument_list|)
expr_stmt|;
comment|//The token should have been cancelled at this point. Renewal will fail.
try|try
block|{
name|token1
operator|.
name|renew
argument_list|(
name|lconf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Renewal of cancelled token should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|ite
parameter_list|)
block|{}
block|}
DECL|method|createNewDelegationTokenRenewer ( Configuration conf, final AtomicInteger counter)
specifier|private
name|DelegationTokenRenewer
name|createNewDelegationTokenRenewer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|AtomicInteger
name|counter
parameter_list|)
block|{
name|DelegationTokenRenewer
name|renew
init|=
operator|new
name|DelegationTokenRenewer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ThreadPoolExecutor
name|createNewThreadPoolService
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|ThreadPoolExecutor
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|3L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|afterExecute
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|counter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|super
operator|.
name|afterExecute
argument_list|(
name|r
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|super
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|pool
return|;
block|}
block|}
decl_stmt|;
name|renew
operator|.
name|setRMContext
argument_list|(
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|renew
return|;
block|}
DECL|method|waitForEventsToGetProcessed (DelegationTokenRenewer dtr)
specifier|private
name|void
name|waitForEventsToGetProcessed
parameter_list|(
name|DelegationTokenRenewer
name|dtr
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|wait
init|=
literal|40
decl_stmt|;
while|while
condition|(
name|wait
operator|--
operator|>
literal|0
operator|&&
name|counter
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testDTRonAppSubmission ()
specifier|public
name|void
name|testDTRonAppSubmission
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
specifier|final
name|Credentials
name|credsx
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|tokenx
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tokenx
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KIND
argument_list|)
expr_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|tokenx
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
name|credsx
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token"
argument_list|)
argument_list|,
name|tokenx
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|tokenx
argument_list|)
operator|.
name|isManaged
argument_list|()
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"boom"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|tokenx
argument_list|)
operator|.
name|renew
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// fire up the renewer
specifier|final
name|DelegationTokenRenewer
name|dtr
init|=
name|createNewDelegationTokenRenewer
argument_list|(
name|conf
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|RMContext
name|mockContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|mockClientRMService
init|=
name|mock
argument_list|(
name|ClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getClientRMService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClientRMService
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|sockAddr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockClientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sockAddr
argument_list|)
expr_stmt|;
name|dtr
operator|.
name|setRMContext
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDelegationTokenRenewer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dtr
argument_list|)
expr_stmt|;
name|dtr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dtr
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|dtr
operator|.
name|addApplicationSync
argument_list|(
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|credsx
argument_list|,
literal|false
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Catch IOException on app submission"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|tokenx
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"boom"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testConcurrentAddApplication ()
specifier|public
name|void
name|testConcurrentAddApplication
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
specifier|final
name|CyclicBarrier
name|startBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|endBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// this token uses barriers to block during renew
specifier|final
name|Credentials
name|creds1
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token1
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|token1
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KIND
argument_list|)
expr_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|token1
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
name|creds1
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token"
argument_list|)
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|token1
argument_list|)
operator|.
name|isManaged
argument_list|()
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|public
name|Long
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|BrokenBarrierException
block|{
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|endBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|Long
operator|.
name|MAX_VALUE
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|token1
argument_list|)
operator|.
name|renew
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// this dummy token fakes renewing
specifier|final
name|Credentials
name|creds2
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token2
init|=
name|mock
argument_list|(
name|Token
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|token2
operator|.
name|getKind
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|KIND
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|token2
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
name|creds2
operator|.
name|addToken
argument_list|(
operator|new
name|Text
argument_list|(
literal|"token"
argument_list|)
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|token2
argument_list|)
operator|.
name|isManaged
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|when
argument_list|(
name|token2
argument_list|)
operator|.
name|renew
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// fire up the renewer
specifier|final
name|DelegationTokenRenewer
name|dtr
init|=
name|createNewDelegationTokenRenewer
argument_list|(
name|conf
argument_list|,
name|counter
argument_list|)
decl_stmt|;
name|RMContext
name|mockContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getSystemCredentialsForApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|mockClientRMService
init|=
name|mock
argument_list|(
name|ClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getClientRMService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockClientRMService
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|sockAddr
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"localhost"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockClientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sockAddr
argument_list|)
expr_stmt|;
name|dtr
operator|.
name|setRMContext
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getDelegationTokenRenewer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dtr
argument_list|)
expr_stmt|;
name|dtr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dtr
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit a job that blocks during renewal
name|Thread
name|submitThread
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|dtr
operator|.
name|addApplicationAsync
argument_list|(
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|creds1
argument_list|,
literal|false
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|submitThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait till 1st submit blocks, then submit another
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|dtr
operator|.
name|addApplicationAsync
argument_list|(
name|mock
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|,
name|creds2
argument_list|,
literal|false
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
comment|// signal 1st to complete
name|endBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|submitThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAppSubmissionWithInvalidDelegationToken ()
specifier|public
name|void
name|testAppSubmissionWithInvalidDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Skip the login.
block|}
block|}
decl_stmt|;
name|ByteBuffer
name|tokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"BOGUS"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|amContainer
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
argument_list|,
name|tokens
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|appSubContext
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234121
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"BOGUS"
argument_list|,
literal|"default"
argument_list|,
name|Priority
operator|.
name|UNDEFINED
argument_list|,
name|amContainer
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"BOGUS"
argument_list|)
decl_stmt|;
name|SubmitApplicationRequest
name|request
init|=
name|SubmitApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appSubContext
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|submitApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Error was excepted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Bad header found in token storage"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testReplaceExpiringDelegationToken ()
specifier|public
name|void
name|testReplaceExpiringDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PROXY_USER_PRIVILEGES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// create Token1:
name|Text
name|userText1
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
name|userText1
argument_list|)
decl_stmt|;
comment|// set max date to 0 to simulate an expiring token;
name|dtId1
operator|.
name|setMaxDate
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password1"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId1
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// create token2
name|Text
name|userText2
init|=
operator|new
name|Text
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId2
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer2"
argument_list|)
argument_list|,
name|userText2
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|expectedToken
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password2"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId2
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|MockRM
name|rm
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DelegationTokenRenewer
name|createDelegationTokenRenewer
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenRenewer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|obtainSystemTokensForUser
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|credentials
operator|.
name|addToken
argument_list|(
name|expectedToken
operator|.
name|getService
argument_list|()
argument_list|,
name|expectedToken
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|expectedToken
block|}
empty_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|userText1
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
comment|// wait for the initial expiring hdfs token to be removed from allTokens
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|token1
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
comment|// wait for the initial expiring hdfs token to be removed from appTokens
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|!
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|token1
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
comment|// wait for the new retrieved hdfs token.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedToken
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
comment|// check nm can retrieve the token
specifier|final
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|NodeHeartbeatResponse
name|response
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ByteBuffer
name|tokenBuffer
init|=
name|response
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tokenBuffer
argument_list|)
expr_stmt|;
name|Credentials
name|appCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputByteBuffer
name|buf
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokenBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|(
name|tokenBuffer
argument_list|)
expr_stmt|;
name|appCredentials
operator|.
name|readTokenStorageStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appCredentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 1. token is expired before app completes.
comment|// 2. RM shutdown.
comment|// 3. When RM recovers the app, token renewal will fail as token expired.
comment|//    RM should request a new token and sent it to NM for log-aggregation.
annotation|@
name|Test
DECL|method|testRMRestartWithExpiredToken ()
specifier|public
name|void
name|testRMRestartWithExpiredToken
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PROXY_USER_PRIVILEGES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
comment|// create Token1:
name|Text
name|userText1
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
name|userText1
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|originalToken
init|=
operator|new
name|Token
argument_list|<>
argument_list|(
name|dtId1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password1"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId1
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|userText1
argument_list|,
name|originalToken
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|yarnConf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
comment|// create token2
name|Text
name|userText2
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId2
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer2"
argument_list|)
argument_list|,
name|userText2
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|updatedToken
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password2"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId2
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|firstRenewInvoked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|secondRenewInvoked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|yarnConf
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DelegationTokenRenewer
name|createDelegationTokenRenewer
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenRenewer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|renewToken
parameter_list|(
specifier|final
name|DelegationTokenToRenew
name|dttr
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dttr
operator|.
name|token
operator|.
name|equals
argument_list|(
name|updatedToken
argument_list|)
condition|)
block|{
name|secondRenewInvoked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|renewToken
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dttr
operator|.
name|token
operator|.
name|equals
argument_list|(
name|originalToken
argument_list|)
condition|)
block|{
name|firstRenewInvoked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidToken
argument_list|(
literal|"Failed to renew"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|obtainSystemTokensForUser
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|credentials
operator|.
name|addToken
argument_list|(
name|updatedToken
operator|.
name|getService
argument_list|()
argument_list|,
name|updatedToken
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|updatedToken
block|}
empty_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
comment|// simulating restart the rm
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// check nm can retrieve the token
specifier|final
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|NodeHeartbeatResponse
name|response
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ByteBuffer
name|tokenBuffer
init|=
name|response
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tokenBuffer
argument_list|)
expr_stmt|;
name|Credentials
name|appCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputByteBuffer
name|buf
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokenBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|(
name|tokenBuffer
argument_list|)
expr_stmt|;
name|appCredentials
operator|.
name|readTokenStorageStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|firstRenewInvoked
operator|.
name|get
argument_list|()
operator|&&
name|secondRenewInvoked
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appCredentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|updatedToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// YARN will get the token for the app submitted without the delegation token.
annotation|@
name|Test
DECL|method|testAppSubmissionWithoutDelegationToken ()
specifier|public
name|void
name|testAppSubmissionWithoutDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PROXY_USER_PRIVILEGES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// create token2
name|Text
name|userText2
init|=
operator|new
name|Text
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId2
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"user2"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer2"
argument_list|)
argument_list|,
name|userText2
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId2
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password2"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId2
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service2"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|MockRM
name|rm
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|DelegationTokenRenewer
name|createDelegationTokenRenewer
parameter_list|()
block|{
return|return
operator|new
name|DelegationTokenRenewer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Token
argument_list|<
name|?
argument_list|>
index|[]
name|obtainSystemTokensForUser
parameter_list|(
name|String
name|user
parameter_list|,
specifier|final
name|Credentials
name|credentials
parameter_list|)
throws|throws
name|IOException
block|{
name|credentials
operator|.
name|addToken
argument_list|(
name|token2
operator|.
name|getService
argument_list|()
argument_list|,
name|token2
argument_list|)
expr_stmt|;
return|return
operator|new
name|Token
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|token2
block|}
empty_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit an app without delegationToken
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// wait for the new retrieved hdfs token.
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|token2
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|1000
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
comment|// check nm can retrieve the token
specifier|final
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|NodeHeartbeatResponse
name|response
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|ByteBuffer
name|tokenBuffer
init|=
name|response
operator|.
name|getSystemCredentialsForApps
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|tokenBuffer
argument_list|)
expr_stmt|;
name|Credentials
name|appCredentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataInputByteBuffer
name|buf
init|=
operator|new
name|DataInputByteBuffer
argument_list|()
decl_stmt|;
name|tokenBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|buf
operator|.
name|reset
argument_list|(
name|tokenBuffer
argument_list|)
expr_stmt|;
name|appCredentials
operator|.
name|readTokenStorageStream
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appCredentials
operator|.
name|getAllTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|token2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test submitting an application with the token obtained by a previously
comment|// submitted application.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppSubmissionWithPreviousToken ()
specifier|public
name|void
name|testAppSubmissionWithPreviousToken
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create Token1:
name|Text
name|userText1
init|=
operator|new
name|Text
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
name|userText1
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password1"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId1
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|userText1
argument_list|,
name|token1
argument_list|)
expr_stmt|;
comment|// submit app1 with a token, set cancelTokenWhenComplete to false;
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|credentials
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|DelegationTokenRenewer
name|renewer
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
decl_stmt|;
name|DelegationTokenToRenew
name|dttr
init|=
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|token1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
comment|// submit app2 with the same token, set cancelTokenWhenComplete to true;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|credentials
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|finishAMAndWaitForComplete
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am2
argument_list|,
name|dttr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
name|finishAMAndWaitForComplete
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|,
name|dttr
argument_list|)
expr_stmt|;
comment|// app2 completes, app1 is still running, check the token is not cancelled
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Renewer
operator|.
name|cancelled
argument_list|)
expr_stmt|;
block|}
comment|// Test FileSystem memory leak in obtainSystemTokensForUser.
annotation|@
name|Test
DECL|method|testFSLeakInObtainSystemTokensForUser ()
specifier|public
name|void
name|testFSLeakInObtainSystemTokensForUser
parameter_list|()
throws|throws
name|Exception
block|{
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|String
name|user
init|=
literal|"test"
decl_stmt|;
name|int
name|oldCounter
init|=
name|MyFS
operator|.
name|getInstanceCounter
argument_list|()
decl_stmt|;
name|delegationTokenRenewer
operator|.
name|obtainSystemTokensForUser
argument_list|(
name|user
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|obtainSystemTokensForUser
argument_list|(
name|user
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|delegationTokenRenewer
operator|.
name|obtainSystemTokensForUser
argument_list|(
name|user
argument_list|,
name|credentials
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldCounter
argument_list|,
name|MyFS
operator|.
name|getInstanceCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test submitting an application with the token obtained by a previously
comment|// submitted application that is set to be cancelled.  Token should be
comment|// renewed while all apps are running, and then cancelled when all apps
comment|// complete
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCancelWithMultipleAppSubmissions ()
specifier|public
name|void
name|testCancelWithMultipleAppSubmissions
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create Token1:
name|Text
name|userText1
init|=
operator|new
name|Text
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|DelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|DelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
name|userText1
argument_list|)
decl_stmt|;
specifier|final
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|DelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId1
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"password1"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|dtId1
operator|.
name|getKind
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
literal|"service1"
argument_list|)
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|credentials
operator|.
name|addToken
argument_list|(
name|token1
operator|.
name|getService
argument_list|()
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|DelegationTokenRenewer
name|renewer
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Renewer
operator|.
name|cancelled
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|credentials
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|DelegationTokenToRenew
name|dttr
init|=
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|get
argument_list|(
name|token1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dttr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|credentials
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Renewer
operator|.
name|cancelled
argument_list|)
expr_stmt|;
name|finishAMAndWaitForComplete
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am2
argument_list|,
name|dttr
argument_list|)
expr_stmt|;
comment|// app2 completes, app1 is still running, check the token is not cancelled
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dttr
operator|.
name|isTimerCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Renewer
operator|.
name|cancelled
argument_list|)
expr_stmt|;
name|RMApp
name|app3
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|credentials
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dttr
operator|.
name|isTimerCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Renewer
operator|.
name|cancelled
argument_list|)
expr_stmt|;
name|finishAMAndWaitForComplete
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|,
name|dttr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|dttr
operator|.
name|isTimerCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Renewer
operator|.
name|cancelled
argument_list|)
expr_stmt|;
name|finishAMAndWaitForComplete
argument_list|(
name|app3
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am3
argument_list|,
name|dttr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|renewer
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|referringAppIds
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dttr
operator|.
name|isTimerCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Renewer
operator|.
name|cancelled
argument_list|)
expr_stmt|;
comment|// make sure the token also has been removed from appTokens
name|Assert
operator|.
name|assertFalse
argument_list|(
name|renewer
operator|.
name|getDelegationTokens
argument_list|()
operator|.
name|contains
argument_list|(
name|token1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|finishAMAndWaitForComplete (final RMApp app, MockRM rm, MockNM nm, MockAM am, final DelegationTokenToRenew dttr)
specifier|private
name|void
name|finishAMAndWaitForComplete
parameter_list|(
specifier|final
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockAM
name|am
parameter_list|,
specifier|final
name|DelegationTokenToRenew
name|dttr
parameter_list|)
throws|throws
name|Exception
block|{
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|,
name|am
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|!
name|dttr
operator|.
name|referringAppIds
operator|.
name|contains
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|10
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

