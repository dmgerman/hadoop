begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|CsiConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeCapabilityRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|InvalidVolumeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|VolumeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * Test cases for volume specification definition and parsing.  */
end_comment

begin_class
DECL|class|TestVolumeMetaData
specifier|public
class|class
name|TestVolumeMetaData
block|{
annotation|@
name|Test
DECL|method|testPreprovisionedVolume ()
specifier|public
name|void
name|testPreprovisionedVolume
parameter_list|()
throws|throws
name|InvalidVolumeException
block|{
name|VolumeCapabilityRange
name|cap
init|=
name|VolumeCapabilityRange
operator|.
name|newBuilder
argument_list|()
operator|.
name|minCapacity
argument_list|(
literal|1L
argument_list|)
operator|.
name|maxCapacity
argument_list|(
literal|5L
argument_list|)
operator|.
name|unit
argument_list|(
literal|"Gi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// When volume id is given, volume name is optional
name|VolumeMetaData
name|meta
init|=
name|VolumeMetaData
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
operator|new
name|VolumeId
argument_list|(
literal|"id-000001"
argument_list|)
argument_list|)
operator|.
name|capability
argument_list|(
name|cap
argument_list|)
operator|.
name|driverName
argument_list|(
literal|"csi-demo-driver"
argument_list|)
operator|.
name|mountPoint
argument_list|(
literal|"/mnt/data"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|VolumeId
argument_list|(
literal|"id-000001"
argument_list|)
argument_list|,
name|meta
operator|.
name|getVolumeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|meta
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|.
name|getMinCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|meta
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Gi"
argument_list|,
name|meta
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"csi-demo-driver"
argument_list|,
name|meta
operator|.
name|getDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/mnt/data"
argument_list|,
name|meta
operator|.
name|getMountPoint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|meta
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|meta
operator|.
name|isProvisionedVolume
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test toString
name|JsonParser
name|parser
init|=
operator|new
name|JsonParser
argument_list|()
decl_stmt|;
name|JsonElement
name|element
init|=
name|parser
operator|.
name|parse
argument_list|(
name|meta
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonObject
name|json
init|=
name|element
operator|.
name|getAsJsonObject
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"id-000001"
argument_list|,
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"csi-demo-driver"
argument_list|,
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/mnt/data"
argument_list|,
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDynamicalProvisionedVolume ()
specifier|public
name|void
name|testDynamicalProvisionedVolume
parameter_list|()
throws|throws
name|InvalidVolumeException
block|{
name|VolumeCapabilityRange
name|cap
init|=
name|VolumeCapabilityRange
operator|.
name|newBuilder
argument_list|()
operator|.
name|minCapacity
argument_list|(
literal|1L
argument_list|)
operator|.
name|maxCapacity
argument_list|(
literal|5L
argument_list|)
operator|.
name|unit
argument_list|(
literal|"Gi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// When volume name is given, volume id is optional
name|VolumeMetaData
name|meta
init|=
name|VolumeMetaData
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeName
argument_list|(
literal|"volume-name"
argument_list|)
operator|.
name|capability
argument_list|(
name|cap
argument_list|)
operator|.
name|driverName
argument_list|(
literal|"csi-demo-driver"
argument_list|)
operator|.
name|mountPoint
argument_list|(
literal|"/mnt/data"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|meta
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"volume-name"
argument_list|,
name|meta
operator|.
name|getVolumeName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|meta
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|.
name|getMinCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|meta
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Gi"
argument_list|,
name|meta
operator|.
name|getVolumeCapabilityRange
argument_list|()
operator|.
name|getUnit
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"csi-demo-driver"
argument_list|,
name|meta
operator|.
name|getDriverName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/mnt/data"
argument_list|,
name|meta
operator|.
name|getMountPoint
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|meta
operator|.
name|isProvisionedVolume
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test toString
name|JsonParser
name|parser
init|=
operator|new
name|JsonParser
argument_list|()
decl_stmt|;
name|JsonElement
name|element
init|=
name|parser
operator|.
name|parse
argument_list|(
name|meta
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JsonObject
name|json
init|=
name|element
operator|.
name|getAsJsonObject
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_ID
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"volume-name"
argument_list|,
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_NAME
argument_list|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"csi-demo-driver"
argument_list|,
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_DRIVER_NAME
argument_list|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"/mnt/data"
argument_list|,
name|json
operator|.
name|get
argument_list|(
name|CsiConstants
operator|.
name|CSI_VOLUME_MOUNT
argument_list|)
operator|.
name|getAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidVolumeException
operator|.
name|class
argument_list|)
DECL|method|testMissingMountpoint ()
specifier|public
name|void
name|testMissingMountpoint
parameter_list|()
throws|throws
name|InvalidVolumeException
block|{
name|VolumeCapabilityRange
name|cap
init|=
name|VolumeCapabilityRange
operator|.
name|newBuilder
argument_list|()
operator|.
name|minCapacity
argument_list|(
literal|1L
argument_list|)
operator|.
name|maxCapacity
argument_list|(
literal|5L
argument_list|)
operator|.
name|unit
argument_list|(
literal|"Gi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|VolumeMetaData
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
operator|new
name|VolumeId
argument_list|(
literal|"id-000001"
argument_list|)
argument_list|)
operator|.
name|capability
argument_list|(
name|cap
argument_list|)
operator|.
name|driverName
argument_list|(
literal|"csi-demo-driver"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidVolumeException
operator|.
name|class
argument_list|)
DECL|method|testMissingCsiDriverName ()
specifier|public
name|void
name|testMissingCsiDriverName
parameter_list|()
throws|throws
name|InvalidVolumeException
block|{
name|VolumeCapabilityRange
name|cap
init|=
name|VolumeCapabilityRange
operator|.
name|newBuilder
argument_list|()
operator|.
name|minCapacity
argument_list|(
literal|1L
argument_list|)
operator|.
name|maxCapacity
argument_list|(
literal|5L
argument_list|)
operator|.
name|unit
argument_list|(
literal|"Gi"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|VolumeMetaData
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
operator|new
name|VolumeId
argument_list|(
literal|"id-000001"
argument_list|)
argument_list|)
operator|.
name|capability
argument_list|(
name|cap
argument_list|)
operator|.
name|mountPoint
argument_list|(
literal|"/mnt/data"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidVolumeException
operator|.
name|class
argument_list|)
DECL|method|testMissingVolumeCapability ()
specifier|public
name|void
name|testMissingVolumeCapability
parameter_list|()
throws|throws
name|InvalidVolumeException
block|{
name|VolumeMetaData
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
operator|new
name|VolumeId
argument_list|(
literal|"id-000001"
argument_list|)
argument_list|)
operator|.
name|driverName
argument_list|(
literal|"csi-demo-driver"
argument_list|)
operator|.
name|mountPoint
argument_list|(
literal|"/mnt/data"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVolumeId ()
specifier|public
name|void
name|testVolumeId
parameter_list|()
block|{
name|VolumeId
name|id1
init|=
operator|new
name|VolumeId
argument_list|(
literal|"test00001"
argument_list|)
decl_stmt|;
name|VolumeId
name|id11
init|=
operator|new
name|VolumeId
argument_list|(
literal|"test00001"
argument_list|)
decl_stmt|;
name|VolumeId
name|id2
init|=
operator|new
name|VolumeId
argument_list|(
literal|"test00002"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|id1
argument_list|,
name|id11
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|id1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|id11
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|VolumeId
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|id1
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|id11
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|id11
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|map
operator|.
name|get
argument_list|(
name|id11
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|map
operator|.
name|get
argument_list|(
operator|new
name|VolumeId
argument_list|(
literal|"test00001"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|id1
argument_list|,
name|id2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

