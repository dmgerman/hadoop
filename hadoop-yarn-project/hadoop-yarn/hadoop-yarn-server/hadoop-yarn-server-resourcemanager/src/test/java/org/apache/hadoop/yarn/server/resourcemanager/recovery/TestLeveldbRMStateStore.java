begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLeveldbRMStateStore
specifier|public
class|class
name|TestLeveldbRMStateStore
extends|extends
name|RMStateStoreTestBase
block|{
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|File
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
argument_list|,
name|TestLeveldbRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|stateStore
specifier|private
name|LeveldbRMStateStore
name|stateStore
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_LEVELDB_STORE_PATH
argument_list|,
name|TEST_DIR
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|TEST_DIR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testApps ()
specifier|public
name|void
name|testApps
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testRMAppStateStore
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testClientTokens ()
specifier|public
name|void
name|testClientTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testRMDTSecretManagerStateStore
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testVersion ()
specifier|public
name|void
name|testVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testCheckVersion
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testEpoch ()
specifier|public
name|void
name|testEpoch
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testEpoch
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppDeletion ()
specifier|public
name|void
name|testAppDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testAppDeletion
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDeleteStore ()
specifier|public
name|void
name|testDeleteStore
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testDeleteStore
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRemoveApplication ()
specifier|public
name|void
name|testRemoveApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testRemoveApplication
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAMTokens ()
specifier|public
name|void
name|testAMTokens
parameter_list|()
throws|throws
name|Exception
block|{
name|LeveldbStateStoreTester
name|tester
init|=
operator|new
name|LeveldbStateStoreTester
argument_list|()
decl_stmt|;
name|testAMRMTokenSecretManagerStateStore
argument_list|(
name|tester
argument_list|)
expr_stmt|;
block|}
DECL|class|LeveldbStateStoreTester
class|class
name|LeveldbStateStoreTester
implements|implements
name|RMStateStoreHelper
block|{
annotation|@
name|Override
DECL|method|getRMStateStore ()
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|stateStore
operator|!=
literal|null
condition|)
block|{
name|stateStore
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|stateStore
operator|=
operator|new
name|LeveldbRMStateStore
argument_list|()
expr_stmt|;
name|stateStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|stateStore
return|;
block|}
annotation|@
name|Override
DECL|method|isFinalStateValid ()
specifier|public
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
block|{
comment|// There should be 6 total entries:
comment|//   1 entry for version
comment|//   2 entries for app 0010 with one attempt
comment|//   3 entries for app 0001 with two attempts
return|return
name|stateStore
operator|.
name|getNumEntriesInDatabase
argument_list|()
operator|==
literal|6
return|;
block|}
annotation|@
name|Override
DECL|method|writeVersion (Version version)
specifier|public
name|void
name|writeVersion
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|stateStore
operator|.
name|dbStoreVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|stateStore
operator|.
name|getCurrentVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|appExists (RMApp app)
specifier|public
name|boolean
name|appExists
parameter_list|(
name|RMApp
name|app
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|stateStore
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|getRMStateStore
argument_list|()
expr_stmt|;
block|}
return|return
name|stateStore
operator|.
name|loadRMAppState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

