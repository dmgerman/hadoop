begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestNodeLabelContainerAllocation
specifier|public
class|class
name|TestNodeLabelContainerAllocation
block|{
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|mgr
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getConfigurationWithQueueLabels (Configuration config)
specifier|private
name|Configuration
name|getConfigurationWithQueueLabels
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|C
argument_list|,
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B1
argument_list|,
literal|"y"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B1
argument_list|,
literal|"z"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C1
init|=
name|C
operator|+
literal|".c1"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|C
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|checkTaskContainersHost (ApplicationAttemptId attemptId, ContainerId containerId, ResourceManager rm, String host)
specifier|private
name|void
name|checkTaskContainersHost
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|ResourceManager
name|rm
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|YarnScheduler
name|scheduler
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|SchedulerAppReport
name|appReport
init|=
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appReport
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|appReport
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|host
argument_list|,
name|c
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toSet (E... elements)
specifier|private
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|toSet
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
name|set
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testContainerAllocationWithSingleUserLimits ()
specifier|public
name|void
name|testContainerAllocationWithSingleUserLimits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithDefaultQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label = x
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8000
argument_list|)
expr_stmt|;
comment|// label = y
name|MockNM
name|nm3
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// A has only 10% of x, so it can only allocate one container in label=empty
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm3
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cannot allocate 2nd label=empty container
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm3
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// A has default user limit = 100, so it can use all resource in label = x
comment|// We can allocate floor(8000 / 1024) = 7 containers
for|for
control|(
name|int
name|id
init|=
literal|3
init|;
name|id
operator|<=
literal|8
condition|;
name|id
operator|++
control|)
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testContainerAllocateWithComplexLabels ()
specifier|public
name|void
name|testContainerAllocateWithComplexLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Queue structure:      *                      root (*)      *                  ________________      *                 /                \      *               a x(100%), y(50%)   b y(50%), z(100%)      *               ________________    ______________      *              /                   /              \      *             a1 (x,y)         b1(no)              b2(y,z)      *               100%                          y = 100%, z = 100%      *                                 * Node structure:      * h1 : x      * h2 : y      * h3 : y      * h4 : z      * h5 : NO      *       * Total resource:      * x: 4G      * y: 6G      * z: 2G      * *: 2G      *       * Resource of      * a1: x=4G, y=3G, NO=0.2G      * b1: NO=0.9G (max=1G)      * b2: y=3, z=2G, NO=0.9G (max=1G)      *       * Each node can only allocate two containers      */
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h4"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"z"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h5"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getComplexConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h4:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|MockNM
name|nm5
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h5:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// request a container (label = y). can be allocated on nm2
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h2"
argument_list|)
expr_stmt|;
comment|// launch an app to queue b1 (label = y), and check all container will
comment|// be allocated in h5
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm5
argument_list|)
decl_stmt|;
comment|// request a container for AM, will succeed
comment|// and now b1's queue capacity will be used, cannot allocate more containers
comment|// (Maximum capacity reached)
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm4
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm5
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// launch an app to queue b2
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b2"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|nm5
argument_list|)
decl_stmt|;
comment|// request a container. try to allocate on nm1 (label = x) and nm3 (label =
comment|// y,z). Will successfully allocate on nm3
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm3
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h3"
argument_list|)
expr_stmt|;
comment|// try to allocate container (request label = z) on nm4 (label = y,z).
comment|// Will successfully allocate on nm4 only.
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"z"
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm4
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h4"
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testContainerAllocateWithLabels ()
specifier|public
name|void
name|testContainerAllocateWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label = y
name|MockNM
name|nm3
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label =<empty>
name|ContainerId
name|containerId
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h1"
argument_list|)
expr_stmt|;
comment|// launch an app to queue b1 (label = y), and check all container will
comment|// be allocated in h2
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
comment|// request a container.
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h2"
argument_list|)
expr_stmt|;
comment|// launch an app to queue c1 (label = ""), and check all container will
comment|// be allocated in h3
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
comment|// request a container.
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm3
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h3"
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testContainerAllocateWithDefaultQueueLabels ()
specifier|public
name|void
name|testContainerAllocateWithDefaultQueueLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test is pretty much similar to testContainerAllocateWithLabel.
comment|// Difference is, this test doesn't specify label expression in ResourceRequest,
comment|// instead, it uses default queue label expression
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithDefaultQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label = y
name|MockNM
name|nm3
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label =<empty>
name|ContainerId
name|containerId
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm3
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h1"
argument_list|)
expr_stmt|;
comment|// launch an app to queue b1 (label = y), and check all container will
comment|// be allocated in h2
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// request a container.
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm3
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h2"
argument_list|)
expr_stmt|;
comment|// launch an app to queue c1 (label = ""), and check all container will
comment|// be allocated in h3
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
comment|// request a container.
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm3
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h3"
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testContainerReservationWithLabels ()
specifier|public
name|void
name|testContainerReservationWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test is pretty much similar to testContainerAllocateWithLabel.
comment|// Difference is, this test doesn't specify label expression in
comment|// ResourceRequest,
comment|// instead, it uses default queue label expression
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|,
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithDefaultQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
expr_stmt|;
comment|// label = y
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
expr_stmt|;
comment|// label = x
name|ContainerId
name|containerId
decl_stmt|;
comment|// launch an app to queue a1 (label = x), and check all container will
comment|// be allocated in h1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
comment|// Do node heartbeats 2 times
comment|// First time will allocate container for app1, second time will reserve
comment|// container for app1
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|checkTaskContainersHost
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|,
name|rm1
argument_list|,
literal|"h1"
argument_list|)
expr_stmt|;
comment|// Check if a 4G container allocated for app1, and 4G is reserved
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schedulerApp1
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cancel asks of app2 and re-kick RM
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkPendingResource (MockRM rm, int priority, ApplicationAttemptId attemptId, int memory)
specifier|private
name|void
name|checkPendingResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|int
name|priority
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|int
name|memory
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rr
init|=
name|app
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getResourceRequest
argument_list|(
name|TestUtils
operator|.
name|toSchedulerKey
argument_list|(
name|priority
argument_list|)
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|*
name|rr
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkLaunchedContainerNumOnNode (MockRM rm, NodeId nodeId, int numContainers)
specifier|private
name|void
name|checkLaunchedContainerNumOnNode
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|SchedulerNode
name|node
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numContainers
argument_list|,
name|node
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * JIRA YARN-4140, In Resource request set node label will be set only on ANY    * reqest. RACK/NODE local and default requests label expression need to be    * updated. This testcase is to verify the label expression is getting changed    * based on ANY requests.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testResourceRequestUpdateNodePartitions ()
specifier|public
name|void
name|testResourceRequestUpdateNodePartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"z"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|40
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = y
comment|// launch an app to queue b1 (label = y), AM container should be launched in
comment|// nm2
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// Creating request set when request before ANY is not having label and any
comment|// is having label
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequest
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|resourceRequest
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"/default-rack"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"h2:1234"
argument_list|,
literal|1024
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"h2:1234"
argument_list|,
literal|1024
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|resourceRequest
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|allResourceRequests
init|=
name|app
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|changeReq
range|:
name|allResourceRequests
control|)
block|{
if|if
condition|(
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|2
operator|||
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|3
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected label y"
argument_list|,
literal|"y"
argument_list|,
name|changeReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|4
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected label EMPTY"
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|changeReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Previous any request was Y trying to update with z and the
comment|// request before ANY label is null
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|newReq
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|newReq
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"h2:1234"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newReq
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|newReq
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|allResourceRequests
operator|=
name|app
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|changeReq
range|:
name|allResourceRequests
control|)
block|{
if|if
condition|(
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|3
operator|||
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|4
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected label z"
argument_list|,
literal|"z"
argument_list|,
name|changeReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|2
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected label y"
argument_list|,
literal|"y"
argument_list|,
name|changeReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Request before ANY and ANY request is set as NULL. Request should be set
comment|// with Empty Label
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|resourceRequest1
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|resourceRequest1
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"/default-rack"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest1
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest1
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1024
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest1
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"/default-rack"
argument_list|,
literal|1024
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest1
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
argument_list|)
expr_stmt|;
name|resourceRequest1
operator|.
name|add
argument_list|(
name|am1
operator|.
name|createResourceReq
argument_list|(
literal|"h2:1234"
argument_list|,
literal|1024
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|resourceRequest1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|allResourceRequests
operator|=
name|app
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|changeReq
range|:
name|allResourceRequests
control|)
block|{
if|if
condition|(
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|3
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected label Empty"
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|changeReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|changeReq
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|2
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Expected label y"
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|changeReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPreferenceOfNeedyAppsTowardsNodePartitions ()
specifier|public
name|void
name|testPreferenceOfNeedyAppsTowardsNodePartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application to a queue (app1 first then app2), app1      * asked for no-label, app2 asked for label=x, when node1 has label=x      * doing heart beat, app2 will get allocation first, even if app2 submits later      * than app1      */
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = y
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|// launch an app to queue b1 (label = y), AM container should be launched in nm2
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// launch another app to queue b1 (label = y), AM container should be launched in nm2
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// request container and nm1 do heartbeat (nm2 has label=y), note that app1
comment|// request non-labeled container, and app2 request labeled container, app2
comment|// will get allocated first even if app1 submitted first.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|8
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|8
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Do node heartbeats many times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App2 will get preference to be allocated on node1, and node1 will be all
comment|// used by App2.
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// app1 get nothing in nm1 (partition=y)
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|0
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|schedulerApp1
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|9
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|schedulerApp1
argument_list|)
expr_stmt|;
comment|// app2 get all resource in nm1 (partition=y)
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|8
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|schedulerApp2
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|schedulerApp2
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkNumOfContainersInAnAppOnGivenNode (int expectedNum, NodeId nodeId, FiCaSchedulerApp app)
specifier|private
name|void
name|checkNumOfContainersInAnAppOnGivenNode
parameter_list|(
name|int
name|expectedNum
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|FiCaSchedulerApp
name|app
parameter_list|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|app
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|num
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNum
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testPreferenceOfNeedyPrioritiesUnderSameAppTowardsNodePartitions ()
name|testPreferenceOfNeedyPrioritiesUnderSameAppTowardsNodePartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit one application, it asks label="" in priority=1 and      * label="x" in priority=2, when a node with label=x heartbeat, priority=2      * will get allocation first even if there're pending resource in priority=1      */
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Makes y to be non-exclusive node labels
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = y
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|// launch an app to queue b1 (label = y), AM container should be launched in nm3
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// request containers from am2, priority=1 asks for "" and priority=2 asks
comment|// for "y", "y" container should be allocated first
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
comment|// Do a node heartbeat once
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check pending resource for am2, priority=1 doesn't get allocated before
comment|// priority=2 allocated
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|1
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|2
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonLabeledResourceRequestGetPreferrenceToNonLabeledNode ()
specifier|public
name|void
name|testNonLabeledResourceRequestGetPreferrenceToNonLabeledNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit one application, it asks 6 label="" containers, NM1      * with label=y and NM2 has no label, NM1/NM2 doing heartbeat together. Even      * if NM1 has idle resource, containers are all allocated to NM2 since      * non-labeled request should get allocation on non-labeled nodes first.      */
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = y
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
name|ContainerId
name|nextContainerId
decl_stmt|;
comment|// launch an app to queue b1 (label = y), AM container should be launched in nm3
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// request containers from am2, priority=1 asks for "" * 6 (id from 4 to 9),
comment|// nm2/nm3 do
comment|// heartbeat at the same time, check containers are always allocated to nm3.
comment|// This is to verify when there's resource available in non-labeled
comment|// partition, non-labeled resource should allocate to non-labeled partition
comment|// first.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|2
operator|+
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|nextContainerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|waitForState
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nm1
argument_list|,
name|nm2
argument_list|)
argument_list|,
name|nextContainerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// no more container allocated on nm1
name|checkLaunchedContainerNumOnNode
argument_list|(
name|rm1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// all 7 (1 AM container + 6 task container) containers allocated on nm2
name|checkLaunchedContainerNumOnNode
argument_list|(
name|rm1
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreferenceOfQueuesTowardsNodePartitions ()
specifier|public
name|void
name|testPreferenceOfQueuesTowardsNodePartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *       *<pre>      *            root      *         /   |   \      *        a     b    c      *       / \   / \  /  \      *      a1 a2 b1 b2 c1 c2      *     (x)    (x)   (x)      *</pre>      *       * Only a1, b1, c1 can access label=x, and their default label=x Each each      * has one application, asks for 5 containers. NM1 has label=x      *       * NM1/NM2 doing heartbeat for 15 times, it should allocate all 15      * containers with label=x      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|34
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|C
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|C
argument_list|,
literal|"x"
argument_list|,
literal|34
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|C
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c1"
block|,
literal|"c2"
block|}
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A2
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B1
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|B1
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B2
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C1
init|=
name|C
operator|+
literal|".c1"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|C1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|C1
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setDefaultNodeLabelExpression
argument_list|(
name|C1
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C2
init|=
name|C
operator|+
literal|".c2"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|C2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|C2
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// app2 -> a2
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a2"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app3 -> b1
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// app4 -> b2
name|RMApp
name|app4
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b2"
argument_list|)
decl_stmt|;
name|MockAM
name|am4
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app4
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app5 -> c1
name|RMApp
name|app5
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c1"
argument_list|)
decl_stmt|;
name|MockAM
name|am5
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app5
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// app6 -> b2
name|RMApp
name|app6
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c2"
argument_list|)
decl_stmt|;
name|MockAM
name|am6
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app6
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// Each application request 5 * 1GB container
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am4
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am5
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am6
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 15 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// NM1 get 15 new containers (total is 18, 15 task containers and 3 AM
comment|// containers)
name|checkLaunchedContainerNumOnNode
argument_list|(
name|rm1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|18
argument_list|)
expr_stmt|;
comment|// Check pending resource each application
comment|// APP1/APP3/APP5 get satisfied, and APP2/APP2/APP3 get nothing.
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|1
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|1
argument_list|,
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|5
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|1
argument_list|,
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|1
argument_list|,
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|5
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|1
argument_list|,
name|am5
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|rm1
argument_list|,
literal|1
argument_list|,
name|am6
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|5
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueuesWithoutAccessUsingPartitionedNodes ()
specifier|public
name|void
name|testQueuesWithoutAccessUsingPartitionedNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *       *<pre>      *            root      *         /      \      *        a        b      *        (x)      *</pre>      *       * Only a can access label=x, two nodes in the cluster, n1 has x and n2 has      * no-label.      *       * When user-limit-factor=5, submit one application in queue b and request      * for infinite containers should be able to use up all cluster resources.      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setUserLimitFactor
argument_list|(
name|B
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|// app1 -> b
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// Each application request 5 * 1GB container
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|50
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 50 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// How much cycles we waited to be allocated when available resource only on
comment|// partitioned node
name|int
name|cycleWaited
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|schedulerNode1
operator|.
name|getNumContainers
argument_list|()
operator|==
literal|0
condition|)
block|{
name|cycleWaited
operator|++
expr_stmt|;
block|}
block|}
comment|// We will will 10 cycles before get allocated on partitioned node
comment|// NM2 can allocate 10 containers totally, exclude already allocated AM
comment|// container, we will wait 9 to fulfill non-partitioned node, and need wait
comment|// one more cycle before allocating to non-partitioned node
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cycleWaited
argument_list|)
expr_stmt|;
comment|// Both NM1/NM2 launched 10 containers, cluster resource is exhausted
name|checkLaunchedContainerNumOnNode
argument_list|(
name|rm1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|checkLaunchedContainerNumOnNode
argument_list|(
name|rm1
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMContainerAllocationWillAlwaysBeExclusive ()
specifier|public
name|void
name|testAMContainerAllocationWillAlwaysBeExclusive
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit one application without partition, trying to allocate a      * node has partition=x, it should fail to allocate since AM container will      * always respect exclusivity for partitions      */
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|nodeIdStr
init|=
literal|"h1:1234"
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
name|nodeIdStr
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
comment|// launch an app to queue b1 (label = y), AM container should be launched in nm3
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Heartbeat for many times, app1 should get nothing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Scheduler diagnostics should have reason for not assigning the node"
argument_list|,
name|app
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|CSAMContainerLaunchDiagnosticsConstants
operator|.
name|SKIP_AM_ALLOCATION_IN_IGNORE_EXCLUSIVE_MODE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Scheduler diagnostics should have last processed node information"
argument_list|,
name|app
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|CSAMContainerLaunchDiagnosticsConstants
operator|.
name|LAST_NODE_PROCESSED_MSG
operator|+
name|nodeIdStr
operator|+
literal|" ( Partition : [x]"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testQueueMaxCapacitiesWillNotBeHonoredWhenNotRespectingExclusivity ()
name|testQueueMaxCapacitiesWillNotBeHonoredWhenNotRespectingExclusivity
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *       *<pre>      *            root      *         /      \      *        a        b      *        (x)     (x)      *</pre>      *       * a/b can access x, both of them has max-capacity-on-x = 50      *       * When doing non-exclusive allocation, app in a (or b) can use 100% of x      * resource.      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|// app1 -> a
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app1 asks for 10 partition= containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 50 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// app1 gets all resource in partition=x
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|schedulerNode1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// check non-exclusive containers of LeafQueue is correctly updated
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|leafQueue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|leafQueue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// completes all containers of app1, ignoreExclusivityRMContainers should be
comment|// updated as well.
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|leafQueue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|checkQueueUsedCapacity (String queueName, CapacityScheduler cs, String nodePartition, float usedCapacity, float absoluteUsedCapacity)
specifier|private
name|void
name|checkQueueUsedCapacity
parameter_list|(
name|String
name|queueName
parameter_list|,
name|CapacityScheduler
name|cs
parameter_list|,
name|String
name|nodePartition
parameter_list|,
name|float
name|usedCapacity
parameter_list|,
name|float
name|absoluteUsedCapacity
parameter_list|)
block|{
name|float
name|epsilon
init|=
literal|1e-6f
decl_stmt|;
name|CSQueue
name|queue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Failed to get queue="
operator|+
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|usedCapacity
argument_list|,
name|queue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getUsedCapacity
argument_list|(
name|nodePartition
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|absoluteUsedCapacity
argument_list|,
name|queue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteUsedCapacity
argument_list|(
name|nodePartition
argument_list|)
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
block|}
DECL|method|doNMHeartbeat (MockRM rm, NodeId nodeId, int nHeartbeat)
specifier|private
name|void
name|doNMHeartbeat
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|int
name|nHeartbeat
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nHeartbeat
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitSchedulerNodeJoined (MockRM rm, int expectedNodeNum)
specifier|private
name|void
name|waitSchedulerNodeJoined
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|int
name|expectedNodeNum
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|totalWaitTick
init|=
literal|100
decl_stmt|;
comment|// wait 10 sec at most.
while|while
condition|(
name|expectedNodeNum
operator|>
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNumClusterNodes
argument_list|()
operator|&&
name|totalWaitTick
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|totalWaitTick
operator|--
expr_stmt|;
block|}
block|}
DECL|method|waitSchedulerNodeHasUpdatedLabels (CapacityScheduler cs, MockNM nm, String partition)
specifier|private
name|void
name|waitSchedulerNodeHasUpdatedLabels
parameter_list|(
name|CapacityScheduler
name|cs
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|String
name|partition
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|FiCaSchedulerNode
name|node
init|=
name|cs
operator|.
name|getNode
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|totalWaitTick
init|=
literal|20
decl_stmt|;
comment|// wait 2 sec at most.
while|while
condition|(
operator|!
name|node
operator|.
name|getLabels
argument_list|()
operator|.
name|contains
argument_list|(
name|partition
argument_list|)
operator|&&
name|totalWaitTick
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|totalWaitTick
operator|--
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testQueueUsedCapacitiesUpdate ()
specifier|public
name|void
name|testQueueUsedCapacitiesUpdate
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *       *<pre>      *            root      *         /      \      *        a        b      *       / \      (x)      *      a1  a2      *     (x)  (x)      *</pre>      *       * Both a/b can access x, we need to verify when      *<pre>      * 1) container allocated/released in both partitioned/non-partitioned node,       * 2) clusterResource updates      * 3) queue guaranteed resource changed      *</pre>      *       * used capacity / absolute used capacity of queues are correctly updated.      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|/**      * Initially, we set A/B's resource 50:50      */
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A1
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A2
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A2
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|/*      * Before we adding any node to the cluster, used-capacity/abs-used-capacity      * should be 0      */
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|/*      * After we adding nodes to the cluster, and before starting to use them,      * used-capacity/abs-used-capacity should be 0      */
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
comment|// app1 -> a1
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app1 asks for 1 partition= containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Now check usage, app1 uses:
comment|//   a1: used(no-label) = 80%
comment|//       abs-used(no-label) = 20%
comment|//   a: used(no-label) = 40%
comment|//       abs-used(no-label) = 20%
comment|//   root: used(no-label) = 20%
comment|//       abs-used(no-label) = 20%
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.4f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.8f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.2f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
comment|// app1 asks for 2 partition=x containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Now check usage, app1 uses:
comment|//   a1: used(x) = 80%
comment|//       abs-used(x) = 20%
comment|//   a: used(x) = 40%
comment|//       abs-used(x) = 20%
comment|//   root: used(x) = 20%
comment|//       abs-used(x) = 20%
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.4f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.4f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.8f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.8f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.2f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.2f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
comment|// submit an app to a2, uses 1 NON_PARTITIONED container and 1 PARTITIONED
comment|// container
comment|// app2 -> a2
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a2"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app1 asks for 1 partition= containers
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Now check usage, app1 uses:
comment|//   a2: used(x) = 40%
comment|//       abs-used(x) = 10%
comment|//   a: used(x) = 20%
comment|//       abs-used(x) = 10%
comment|//   root: used(x) = 10%
comment|//       abs-used(x) = 10%
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.6f
argument_list|,
literal|0.3f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.6f
argument_list|,
literal|0.3f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.8f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.8f
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.4f
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.4f
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.3f
argument_list|,
literal|0.3f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.3f
argument_list|,
literal|0.3f
argument_list|)
expr_stmt|;
comment|// Add nm3/nm4, double resource for both partitioned/non-partitioned
comment|// resource, used capacity should be 1/2 of before
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h3"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h4:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
name|waitSchedulerNodeJoined
argument_list|(
name|rm
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|waitSchedulerNodeHasUpdatedLabels
argument_list|(
name|cs
argument_list|,
name|nm3
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|waitSchedulerNodeHasUpdatedLabels
argument_list|(
name|cs
argument_list|,
name|nm4
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.3f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.3f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.4f
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.4f
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.2f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.2f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.15f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.15f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
comment|// Reinitialize queue, makes A's capacity double, and B's capacity to be 0
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// was 50
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// was 50
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// was 50
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// was 50
name|cs
operator|.
name|reinitialize
argument_list|(
name|csConf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.15f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.15f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.2f
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.2f
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.1f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.1f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.15f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.15f
argument_list|,
literal|0.15f
argument_list|)
expr_stmt|;
comment|// Release all task containers from a1, check usage
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.05f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.10f
argument_list|,
literal|0.10f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a1"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.1f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.1f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"a2"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.1f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"b"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|"x"
argument_list|,
literal|0.05f
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|checkQueueUsedCapacity
argument_list|(
literal|"root"
argument_list|,
name|cs
argument_list|,
literal|""
argument_list|,
literal|0.10f
argument_list|,
literal|0.10f
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderOfAllocationOnPartitions ()
specifier|public
name|void
name|testOrderOfAllocationOnPartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *       *<pre>      *                root      *          ________________      *         /     |     \    \      *        a (x)  b (x)  c    d      *</pre>      *       * Both a/b can access x, we need to verify when      *<pre>      * When doing allocation on partitioned nodes,      *    - Queue has accessibility to the node will go first      *    - When accessibility is same      *      - Queue has less used_capacity on given partition will go first      *      - When used_capacity is same      *        - Queue has more abs_capacity will go first      *</pre>      *       * used capacity / absolute used capacity of queues are correctly updated.      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|70
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
decl_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|C
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|25
argument_list|)
expr_stmt|;
specifier|final
name|String
name|D
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".d"
decl_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|D
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|D
argument_list|,
literal|25
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<empty>
comment|// app1 -> a
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app2 -> b
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app3 -> c
name|RMApp
name|app3
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app4 -> d
name|RMApp
name|app4
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"d"
argument_list|)
decl_stmt|;
name|MockAM
name|am4
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app4
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// Test case 1
comment|// Both a/b has used_capacity(x) = 0, when doing exclusive allocation, b
comment|// will go first since b has more capacity(x)
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 2
comment|// Do another allocation, a will go first since it has 0 use_capacity(x) and
comment|// b has 1/7 used_capacity(x)
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 3
comment|// Just like above, when doing non-exclusive allocation, b will go first as well.
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 4
comment|// After b allocated, we should be able to allocate non-exlusive container in a
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 5
comment|// b/c/d asks non-exclusive container together, b will go first irrelated to
comment|// used_capacity(x)
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|am4
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|3
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|0
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|0
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 6
comment|// After b allocated, c will go first by lexicographic order
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|3
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|0
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 7
comment|// After c allocated, d will go first because it has less used_capacity(x)
comment|// than c
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|3
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test case 8
comment|// After d allocated, c will go first, c/d has same use_capacity(x), so compare c/d's lexicographic order
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|3
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOrderOfAllocationOnPartitionsWhenAccessibilityIsAll ()
specifier|public
name|void
name|testOrderOfAllocationOnPartitionsWhenAccessibilityIsAll
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *      *<pre>      *             root      *          __________      *         /          \      *        a (*)      b (x)      *</pre>      *      * Both queues a/b can access x, we need to verify whether * accessibility      * is considered in ordering of queues      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|60
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
comment|// app1 -> a
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// app2 -> b
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Both a/b has used_capacity(x) = 0, when doing exclusive allocation, a
comment|// will go first since a has more capacity(x)
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|2
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParentQueueMaxCapsAreRespected ()
specifier|public
name|void
name|testParentQueueMaxCapsAreRespected
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Queue tree:      *          Root      *        /     \      *       A       B      *      / \      *     A1 A2      *      * A has 50% capacity and 50% max capacity (of label=x)      * A1/A2 has 50% capacity and 100% max capacity (of label=x)      * Cluster has one node (label=x) with resource = 24G.      * So we can at most use 12G resources under queueA.      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A1
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setUserLimitFactor
argument_list|(
name|A1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A2
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|A2
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|A2
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setUserLimitFactor
argument_list|(
name|A2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|24
operator|*
name|GB
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// Launch app1 in a1, resource usage is 1GB (am) + 4GB * 2 = 9GB
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|3
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to launch app2 in a2, asked 2GB, should success
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a2"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// am2 asks more resources, cannot success because current used = 9G (app1)
comment|// + 2G (app2) = 11G, and queue's max capacity = 12G
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|doNMHeartbeat
argument_list|(
name|rm
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|checkNumOfContainersInAnAppOnGivenNode
argument_list|(
literal|1
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMetricsWithLabels ()
specifier|public
name|void
name|testQueueMetricsWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *      *<pre>      *            root      *         /      \      *        a        b      *        (x)     (x)      *</pre>      *      * a/b can access x, both of them has max-capacity-on-x = 50      *      * When doing non-exclusive allocation, app in a (or b) can use 100% of x      * resource.      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueA
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|queueA
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|queueA
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|queueA
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|queueA
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueB
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|queueB
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|queueB
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|queueB
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|queueB
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = y
comment|// app1 -> a
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// app1 asks for 5 partition=x containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
comment|// NM1 do 50 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// app1 gets all resource in partition=x
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|schedulerNode1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerNodeReport
name|reportNm1
init|=
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|reportNm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|reportNm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerNodeReport
name|reportNm2
init|=
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|reportNm2
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
name|reportNm2
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMetricsWithLabelsOnDefaultLabelNode ()
specifier|public
name|void
name|testQueueMetricsWithLabelsOnDefaultLabelNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: have a following queue structure:      *      *<pre>      *            root      *         /      \      *        a        b      *        (x)     (x)      *</pre>      *      * a/b can access x, both of them has max-capacity-on-x = 50      *      * When doing non-exclusive allocation, app in a (or b) can use 100% of x      * resource.      */
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueA
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|queueA
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|queueA
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|queueA
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|queueA
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueB
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|queueB
argument_list|,
literal|75
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|queueB
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacityByLabel
argument_list|(
name|queueB
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|queueB
argument_list|,
literal|"x"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// set node -> label
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label = x
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// label =<no_label>
comment|// app1 -> a
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// app1 asks for 3 partition= containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM1 do 50 heartbeats
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// app1 gets all resource in partition=x (non-exclusive)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerNode1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerNodeReport
name|reportNm1
init|=
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|reportNm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
name|reportNm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerNodeReport
name|reportNm2
init|=
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|reportNm2
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
name|reportNm2
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|double
name|delta
init|=
literal|0.0001
decl_stmt|;
comment|// 3GB is used from label x quota. 1.5 GB is remaining from default label.
comment|// 2GB is remaining from label x.
name|assertEquals
argument_list|(
literal|3.5
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// app1 asks for 1 default partition container
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM2 do couple of heartbeats
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
comment|// app1 gets all resource in default partition
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerNode2
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3GB is used from label x quota. 2GB used from default label.
comment|// So total 2.5 GB is remaining.
name|assertEquals
argument_list|(
literal|2.5
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

