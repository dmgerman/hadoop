begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * Test helper for MemoryRMStateStore will make sure the event.  */
end_comment

begin_class
DECL|class|MockMemoryRMStateStore
specifier|public
class|class
name|MockMemoryRMStateStore
extends|extends
name|MemoryRMStateStore
block|{
DECL|field|appSubCtxtCopy
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationSubmissionContext
argument_list|>
name|appSubCtxtCopy
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationSubmissionContext
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|getRMStateStoreEventHandler ()
specifier|protected
name|EventHandler
name|getRMStateStoreEventHandler
parameter_list|()
block|{
return|return
name|rmStateStoreEventHandler
return|;
block|}
annotation|@
name|Override
DECL|method|loadState ()
specifier|public
specifier|synchronized
name|RMState
name|loadState
parameter_list|()
throws|throws
name|Exception
block|{
name|RMState
name|cloneState
init|=
name|super
operator|.
name|loadState
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|state
range|:
name|cloneState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApplicationStateData
name|oldStateData
init|=
name|state
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|oldStateData
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|this
operator|.
name|appSubCtxtCopy
operator|.
name|get
argument_list|(
name|state
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cloneState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|put
argument_list|(
name|state
operator|.
name|getKey
argument_list|()
argument_list|,
name|oldStateData
argument_list|)
expr_stmt|;
block|}
return|return
name|cloneState
return|;
block|}
annotation|@
name|Override
DECL|method|storeApplicationStateInternal ( ApplicationId appId, ApplicationStateData appState)
specifier|public
specifier|synchronized
name|void
name|storeApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Clone Application Submission Context
name|this
operator|.
name|cloneAppSubmissionContext
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|super
operator|.
name|storeApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|updateApplicationStateInternal ( ApplicationId appId, ApplicationStateData appState)
specifier|public
specifier|synchronized
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Clone Application Submission Context
name|this
operator|.
name|cloneAppSubmissionContext
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|super
operator|.
name|updateApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
comment|/**    * Clone Application Submission Context and Store in Map for    * later use.    *    * @param appState    */
DECL|method|cloneAppSubmissionContext (ApplicationStateData appState)
specifier|private
name|void
name|cloneAppSubmissionContext
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|oldAppSubCtxt
init|=
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|oldAppSubCtxt
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getQueue
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getPriority
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getCancelTokensWhenComplete
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|,
name|oldAppSubCtxt
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|oldAppSubCtxt
operator|.
name|getAttemptFailuresValidityInterval
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
name|oldAppSubCtxt
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAMContainerResourceRequests
argument_list|(
name|oldAppSubCtxt
operator|.
name|getAMContainerResourceRequests
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setLogAggregationContext
argument_list|(
name|oldAppSubCtxt
operator|.
name|getLogAggregationContext
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setApplicationType
argument_list|(
name|oldAppSubCtxt
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setNodeLabelExpression
argument_list|(
name|oldAppSubCtxt
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|appSubCtxtCopy
operator|.
name|put
argument_list|(
name|oldAppSubCtxt
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * Traverse each app state and replace cloned app sub context    * into the state.    *    * @param actualState    * @return actualState    */
annotation|@
name|VisibleForTesting
DECL|method|reloadStateWithClonedAppSubCtxt (RMState actualState)
specifier|public
name|RMState
name|reloadStateWithClonedAppSubCtxt
parameter_list|(
name|RMState
name|actualState
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|state
range|:
name|actualState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ApplicationStateData
name|oldStateData
init|=
name|state
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|oldStateData
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|this
operator|.
name|appSubCtxtCopy
operator|.
name|get
argument_list|(
name|state
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actualState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|put
argument_list|(
name|state
operator|.
name|getKey
argument_list|()
argument_list|,
name|oldStateData
argument_list|)
expr_stmt|;
block|}
return|return
name|actualState
return|;
block|}
block|}
end_class

end_unit

