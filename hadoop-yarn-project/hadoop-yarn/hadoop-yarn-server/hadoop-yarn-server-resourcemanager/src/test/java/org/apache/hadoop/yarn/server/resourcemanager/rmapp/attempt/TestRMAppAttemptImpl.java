begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRegistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|webproxy
operator|.
name|ProxyUriUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestRMAppAttemptImpl
specifier|public
class|class
name|TestRMAppAttemptImpl
block|{
DECL|method|testTrackingUrl (String url, boolean unmanaged)
specifier|private
name|void
name|testTrackingUrl
parameter_list|(
name|String
name|url
parameter_list|,
name|boolean
name|unmanaged
parameter_list|)
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|EventHandler
name|handler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Dispatcher
name|dispatcher
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|appContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|appContext
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|unmanaged
argument_list|)
expr_stmt|;
name|RMAppAttemptImpl
name|attempt
init|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|attemptId
argument_list|,
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|appContext
argument_list|,
operator|new
name|YarnConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMAppAttemptRegistrationEvent
name|event
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMAppAttemptRegistrationEvent
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|event
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"h"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|event
operator|.
name|getRpcport
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|event
operator|.
name|getTrackingurl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|url
argument_list|)
expr_stmt|;
operator|new
name|RMAppAttemptImpl
operator|.
name|AMRegisteredTransition
argument_list|()
operator|.
name|transition
argument_list|(
name|attempt
argument_list|,
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|unmanaged
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|url
argument_list|,
name|attempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertNotSame
argument_list|(
name|url
argument_list|,
name|attempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|attempt
operator|.
name|getTrackingUrl
argument_list|()
operator|.
name|contains
argument_list|(
name|ProxyUriUtils
operator|.
name|PROXY_SERVLET_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|attempt
operator|.
name|getTrackingUrl
argument_list|()
operator|.
name|contains
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTrackingUrlUnmanagedAM ()
specifier|public
name|void
name|testTrackingUrlUnmanagedAM
parameter_list|()
block|{
name|testTrackingUrl
argument_list|(
literal|"http://foo:8000/x"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrackingUrlManagedAM ()
specifier|public
name|void
name|testTrackingUrlManagedAM
parameter_list|()
block|{
name|testTrackingUrl
argument_list|(
literal|"bar:8000/x"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

