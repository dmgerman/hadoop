begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestKillApplicationWithRMHA
specifier|public
class|class
name|TestKillApplicationWithRMHA
extends|extends
name|RMHATestBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestKillApplicationWithRMHA
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKillAppWhenFailoverHappensAtNewState ()
specifier|public
name|void
name|testKillAppWhenFailoverHappensAtNewState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a customized RMAppManager
comment|// During the process of Application submission,
comment|// the RMAppState will always be NEW.
comment|// The ApplicationState will not be saved in RMStateStore.
name|startRMsWithCustomizedRMAppManager
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// Submit the application
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|configuration
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// failover and kill application
comment|// When FailOver happens, the state of this application is NEW,
comment|// and ApplicationState is not saved in RMStateStore. The active RM
comment|// can not load the ApplicationState of this application.
comment|// Expected to get ApplicationNotFoundException
comment|// when receives the KillApplicationRequest
try|try
block|{
name|failOverAndKillApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should get an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Trying to kill an absent application "
operator|+
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKillAppWhenFailoverHappensAtRunningState ()
specifier|public
name|void
name|testKillAppWhenFailoverHappensAtRunningState
parameter_list|()
throws|throws
name|Exception
block|{
name|startRMs
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// failover and kill application
comment|// The application is at RUNNING State when failOver happens.
comment|// Since RMStateStore has already saved ApplicationState, the active RM
comment|// will load the ApplicationState. After that, the application will be at
comment|// ACCEPTED State. Because the application is not at Final State,
comment|// KillApplicationResponse.getIsKillCompleted is expected to return false.
name|failOverAndKillApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKillAppWhenFailoverHappensAtFinalState ()
specifier|public
name|void
name|testKillAppWhenFailoverHappensAtFinalState
parameter_list|()
throws|throws
name|Exception
block|{
name|startRMs
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// kill the app.
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// failover and kill application
comment|// The application is at Killed State and RMStateStore has already
comment|// saved this applicationState. After failover happens, the current
comment|// active RM will load the ApplicationState whose RMAppState is killed.
comment|// Because this application is at Final State,
comment|// KillApplicationResponse.getIsKillCompleted is expected to return true.
name|failOverAndKillApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testKillAppWhenFailOverHappensDuringApplicationKill ()
specifier|public
name|void
name|testKillAppWhenFailOverHappensDuringApplicationKill
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a customized ClientRMService
comment|// When receives the killApplicationRequest, simply return the response
comment|// and make sure the application will not be KILLED State
name|startRMsWithCustomizedClientRMService
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// ensure that the app is in running state
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app0
operator|.
name|getState
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// kill the app.
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// failover happens before this application goes to final state.
comment|// The RMAppState that will be loaded by the active rm
comment|// should be ACCEPTED.
name|failOverAndKillApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
DECL|method|failOverAndKillApp (ApplicationId appId, ApplicationAttemptId appAttemptId, RMAppState initialRMAppState, RMAppAttemptState initialRMAppAttemptState, RMAppState expectedAppStateBeforeKillApp)
specifier|private
name|void
name|failOverAndKillApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|RMAppState
name|initialRMAppState
parameter_list|,
name|RMAppAttemptState
name|initialRMAppAttemptState
parameter_list|,
name|RMAppState
name|expectedAppStateBeforeKillApp
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialRMAppState
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialRMAppAttemptState
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|explicitFailover
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAppStateBeforeKillApp
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|killApplication
argument_list|(
name|rm2
argument_list|,
name|appId
argument_list|,
name|appAttemptId
argument_list|,
name|initialRMAppState
argument_list|)
expr_stmt|;
block|}
DECL|method|failOverAndKillApp (ApplicationId appId, RMAppState initialRMAppState)
specifier|private
name|void
name|failOverAndKillApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|RMAppState
name|initialRMAppState
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initialRMAppState
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|explicitFailover
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|killApplication
argument_list|(
name|rm2
argument_list|,
name|appId
argument_list|,
literal|null
argument_list|,
name|initialRMAppState
argument_list|)
expr_stmt|;
block|}
DECL|method|startRMsWithCustomizedClientRMService ()
specifier|private
name|void
name|startRMsWithCustomizedClientRMService
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf1
init|=
operator|new
name|Configuration
argument_list|(
name|confForRM1
argument_list|)
decl_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|MyClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|getRMDTSecretManager
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|confForRM2
argument_list|)
expr_stmt|;
name|startRMs
argument_list|(
name|rm1
argument_list|,
name|conf1
argument_list|,
name|rm2
argument_list|,
name|confForRM2
argument_list|)
expr_stmt|;
block|}
DECL|class|MyClientRMService
specifier|private
specifier|static
class|class
name|MyClientRMService
extends|extends
name|ClientRMService
block|{
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|MyClientRMService (RMContext rmContext, YarnScheduler scheduler, RMAppManager rmAppManager, ApplicationACLsManager applicationACLsManager, QueueACLsManager queueACLsManager, RMDelegationTokenSecretManager rmDTSecretManager)
specifier|public
name|MyClientRMService
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|RMAppManager
name|rmAppManager
parameter_list|,
name|ApplicationACLsManager
name|applicationACLsManager
parameter_list|,
name|QueueACLsManager
name|queueACLsManager
parameter_list|,
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|rmAppManager
argument_list|,
name|applicationACLsManager
argument_list|,
name|queueACLsManager
argument_list|,
name|rmDTSecretManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|serviceStart ()
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
comment|// override to not start rpc handler
block|}
annotation|@
name|Override
DECL|method|serviceStop ()
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
comment|// don't do anything
block|}
annotation|@
name|Override
DECL|method|forceKillApplication ( KillApplicationRequest request)
specifier|public
name|KillApplicationResponse
name|forceKillApplication
parameter_list|(
name|KillApplicationRequest
name|request
parameter_list|)
throws|throws
name|YarnException
block|{
name|ApplicationId
name|applicationId
init|=
name|request
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|application
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
if|if
condition|(
name|application
operator|.
name|isAppFinalStateStored
argument_list|()
condition|)
block|{
return|return
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|KillApplicationResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
block|}
DECL|method|killApplication (MockRM rm, ApplicationId appId, ApplicationAttemptId appAttemptId, RMAppState rmAppState)
specifier|private
name|void
name|killApplication
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|RMAppState
name|rmAppState
parameter_list|)
throws|throws
name|Exception
block|{
name|KillApplicationResponse
name|response
init|=
name|rm
operator|.
name|killApp
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getIsKillCompleted
argument_list|()
operator|==
name|isFinalState
argument_list|(
name|rmAppState
argument_list|)
argument_list|)
expr_stmt|;
name|RMApp
name|loadedApp0
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|appId
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
if|if
condition|(
name|appAttemptId
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|waitForState
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
comment|// no new attempt is created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

