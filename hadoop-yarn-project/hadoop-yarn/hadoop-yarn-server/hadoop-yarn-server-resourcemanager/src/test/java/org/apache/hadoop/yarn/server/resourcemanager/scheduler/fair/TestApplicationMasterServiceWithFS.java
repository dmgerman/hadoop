begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRMAppSubmissionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRMAppSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Application master service using Fair scheduler.  */
end_comment

begin_class
DECL|class|TestApplicationMasterServiceWithFS
specifier|public
class|class
name|TestApplicationMasterServiceWithFS
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestApplicationMasterServiceWithFS
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|MEMORY_ALLOCATION
specifier|private
specifier|static
specifier|final
name|int
name|MEMORY_ALLOCATION
init|=
literal|3
operator|*
name|GB
decl_stmt|;
DECL|field|TEST_FOLDER
specifier|private
specifier|static
specifier|final
name|String
name|TEST_FOLDER
init|=
literal|"test-queues"
decl_stmt|;
DECL|field|allocateResponse
specifier|private
name|AllocateResponse
name|allocateResponse
decl_stmt|;
DECL|field|configuration
specifier|private
specifier|static
name|YarnConfiguration
name|configuration
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|allocFile
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TEST_FOLDER
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|configuration
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|allocFile
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|allocFile
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxContainerAllocation>2048 mb 1 vcores</maxContainerAllocation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxContainerAllocation>3072 mb 1 vcores</maxContainerAllocation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardown ()
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
block|{
name|File
name|allocFile
init|=
name|GenericTestUtils
operator|.
name|getTestDir
argument_list|(
name|TEST_FOLDER
argument_list|)
decl_stmt|;
name|allocFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testQueueLevelContainerAllocationFail ()
specifier|public
name|void
name|testQueueLevelContainerAllocationFail
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|MockRMAppSubmissionData
name|data
init|=
name|MockRMAppSubmissionData
operator|.
name|Builder
operator|.
name|createWithMemory
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|rm
argument_list|)
operator|.
name|withQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
name|MockRMAppSubmitter
operator|.
name|submit
argument_list|(
name|rm
argument_list|,
name|data
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|}
argument_list|,
name|MEMORY_ALLOCATION
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|allocateResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// send the request
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InvalidResourceRequestException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
operator|.
name|GREATER_THEN_MAX_ALLOCATION
argument_list|,
operator|(
operator|(
name|InvalidResourceRequestException
operator|)
name|e
operator|)
operator|.
name|getInvalidResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testQueueLevelContainerAllocationSuccess ()
specifier|public
name|void
name|testQueueLevelContainerAllocationSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|testFairSchedulerContainerAllocationSuccess
argument_list|(
literal|"queueB"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000000
argument_list|)
DECL|method|testSchedulerLevelContainerAllocationSuccess ()
specifier|public
name|void
name|testSchedulerLevelContainerAllocationSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|testFairSchedulerContainerAllocationSuccess
argument_list|(
literal|"queueC"
argument_list|)
expr_stmt|;
block|}
DECL|method|testFairSchedulerContainerAllocationSuccess (String queueName)
specifier|private
name|void
name|testFairSchedulerContainerAllocationSuccess
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|6
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Submit an application
name|MockRMAppSubmissionData
name|data
init|=
name|MockRMAppSubmissionData
operator|.
name|Builder
operator|.
name|createWithMemory
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|rm
argument_list|)
operator|.
name|withQueue
argument_list|(
name|queueName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
name|MockRMAppSubmitter
operator|.
name|submit
argument_list|(
name|rm
argument_list|,
name|data
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|}
argument_list|,
name|MEMORY_ALLOCATION
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocateResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// send the request
operator|(
operator|(
name|FairScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// kick the scheduler
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1"
argument_list|)
expr_stmt|;
try|try
block|{
name|allocateResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Allocation should be successful"
argument_list|)
expr_stmt|;
block|}
return|return
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
argument_list|,
literal|1000
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|Container
name|allocatedContainer
init|=
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MEMORY_ALLOCATION
argument_list|,
name|allocatedContainer
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocatedContainer
operator|.
name|getResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

