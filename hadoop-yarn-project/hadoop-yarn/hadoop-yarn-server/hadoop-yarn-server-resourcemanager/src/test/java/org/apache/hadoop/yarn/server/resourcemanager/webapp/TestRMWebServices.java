begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|YarnVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
DECL|class|TestRMWebServices
specifier|public
class|class
name|TestRMWebServices
extends|extends
name|JerseyTest
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
init|=
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|ServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestRMWebServices ()
specifier|public
name|TestRMWebServices
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|initClusterMetrics ()
specifier|public
specifier|static
name|void
name|initClusterMetrics
parameter_list|()
block|{
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|clusterMetrics
operator|.
name|incrDecommisionedNMs
argument_list|()
expr_stmt|;
name|clusterMetrics
operator|.
name|incrNumActiveNodes
argument_list|()
expr_stmt|;
name|clusterMetrics
operator|.
name|incrNumLostNMs
argument_list|()
expr_stmt|;
name|clusterMetrics
operator|.
name|incrNumRebootedNMs
argument_list|()
expr_stmt|;
name|clusterMetrics
operator|.
name|incrNumUnhealthyNMs
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoXML ()
specifier|public
name|void
name|testInfoXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"info"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfoXML
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidUri ()
specifier|public
name|void
name|testInvalidUri
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|String
name|responseStr
init|=
literal|""
decl_stmt|;
try|try
block|{
name|responseStr
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"bogus"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"error string exists and shouldn't"
argument_list|,
literal|""
argument_list|,
name|responseStr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidUri2 ()
specifier|public
name|void
name|testInvalidUri2
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|String
name|responseStr
init|=
literal|""
decl_stmt|;
try|try
block|{
name|responseStr
operator|=
name|r
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"error string exists and shouldn't"
argument_list|,
literal|""
argument_list|,
name|responseStr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidAccept ()
specifier|public
name|void
name|testInvalidAccept
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|String
name|responseStr
init|=
literal|""
decl_stmt|;
try|try
block|{
name|responseStr
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|TEXT_PLAIN
argument_list|)
operator|.
name|get
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid uri"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"error string exists and shouldn't"
argument_list|,
literal|""
argument_list|,
name|responseStr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCluster ()
specifier|public
name|void
name|testCluster
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSlash ()
specifier|public
name|void
name|testClusterSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
comment|// test with trailing "/" to make sure acts same as without slash
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterDefault ()
specifier|public
name|void
name|testClusterDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
comment|// test with trailing "/" to make sure acts same as without slash
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfo ()
specifier|public
name|void
name|testInfo
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"info"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoSlash ()
specifier|public
name|void
name|testInfoSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
comment|// test with trailing "/" to make sure acts same as without slash
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"info/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInfoDefault ()
specifier|public
name|void
name|testInfoDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"info"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterInfo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterInfoXML (String xml)
specifier|public
name|void
name|verifyClusterInfoXML
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"clusterInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyClusterGeneric
argument_list|(
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"startedOn"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"haState"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"hadoopVersionBuiltOn"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"hadoopBuildVersion"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"hadoopVersion"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"resourceManagerVersionBuiltOn"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"resourceManagerBuildVersion"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"resourceManagerVersion"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyClusterInfo (JSONObject json)
specifier|public
name|void
name|verifyClusterInfo
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"clusterInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|11
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyClusterGeneric
argument_list|(
name|info
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"startedOn"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"haState"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"hadoopVersionBuiltOn"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"hadoopBuildVersion"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"hadoopVersion"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"resourceManagerVersionBuiltOn"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"resourceManagerBuildVersion"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"resourceManagerVersion"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterGeneric (long clusterid, long startedon, String state, String haState, String hadoopVersionBuiltOn, String hadoopBuildVersion, String hadoopVersion, String resourceManagerVersionBuiltOn, String resourceManagerBuildVersion, String resourceManagerVersion)
specifier|public
name|void
name|verifyClusterGeneric
parameter_list|(
name|long
name|clusterid
parameter_list|,
name|long
name|startedon
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|haState
parameter_list|,
name|String
name|hadoopVersionBuiltOn
parameter_list|,
name|String
name|hadoopBuildVersion
parameter_list|,
name|String
name|hadoopVersion
parameter_list|,
name|String
name|resourceManagerVersionBuiltOn
parameter_list|,
name|String
name|resourceManagerBuildVersion
parameter_list|,
name|String
name|resourceManagerVersion
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"clusterId doesn't match: "
argument_list|,
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|,
name|clusterid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"startedOn doesn't match: "
argument_list|,
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|,
name|startedon
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"stated doesn't match: "
operator|+
name|state
argument_list|,
name|state
operator|.
name|matches
argument_list|(
name|STATE
operator|.
name|INITED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"HA state doesn't match: "
operator|+
name|haState
argument_list|,
name|haState
operator|.
name|matches
argument_list|(
literal|"INITIALIZING"
argument_list|)
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"hadoopVersionBuiltOn"
argument_list|,
name|VersionInfo
operator|.
name|getDate
argument_list|()
argument_list|,
name|hadoopVersionBuiltOn
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"hadoopBuildVersion"
argument_list|,
name|VersionInfo
operator|.
name|getBuildVersion
argument_list|()
argument_list|,
name|hadoopBuildVersion
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"hadoopVersion"
argument_list|,
name|VersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|hadoopVersion
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"resourceManagerVersionBuiltOn"
argument_list|,
name|YarnVersionInfo
operator|.
name|getDate
argument_list|()
argument_list|,
name|resourceManagerVersionBuiltOn
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"resourceManagerBuildVersion"
argument_list|,
name|YarnVersionInfo
operator|.
name|getBuildVersion
argument_list|()
argument_list|,
name|resourceManagerBuildVersion
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"resourceManagerVersion"
argument_list|,
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|resourceManagerVersion
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterMetrics ()
specifier|public
name|void
name|testClusterMetrics
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"metrics"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterMetricsJSON
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterMetricsSlash ()
specifier|public
name|void
name|testClusterMetricsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"metrics/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterMetricsJSON
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterMetricsDefault ()
specifier|public
name|void
name|testClusterMetricsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"metrics"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterMetricsJSON
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterMetricsXML ()
specifier|public
name|void
name|testClusterMetricsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"metrics"
argument_list|)
operator|.
name|accept
argument_list|(
literal|"application/xml"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterMetricsXML
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterMetricsXML (String xml)
specifier|public
name|void
name|verifyClusterMetricsXML
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"clusterMetrics"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyClusterMetrics
argument_list|(
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"appsSubmitted"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"appsCompleted"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"reservedMB"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"availableMB"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"allocatedMB"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"reservedVirtualCores"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"availableVirtualCores"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"allocatedVirtualCores"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"totalVirtualCores"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"containersAllocated"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"totalMB"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"totalNodes"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"lostNodes"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"unhealthyNodes"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"decommissionedNodes"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"rebootedNodes"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"activeNodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyClusterMetricsJSON (JSONObject json)
specifier|public
name|void
name|verifyClusterMetricsJSON
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|clusterinfo
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"clusterMetrics"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|23
argument_list|,
name|clusterinfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyClusterMetrics
argument_list|(
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"appsSubmitted"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"appsCompleted"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"reservedMB"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"availableMB"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"allocatedMB"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"reservedVirtualCores"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"availableVirtualCores"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"allocatedVirtualCores"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"totalVirtualCores"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"containersAllocated"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"totalMB"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"totalNodes"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"lostNodes"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"unhealthyNodes"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"decommissionedNodes"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"rebootedNodes"
argument_list|)
argument_list|,
name|clusterinfo
operator|.
name|getInt
argument_list|(
literal|"activeNodes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterMetrics (int submittedApps, int completedApps, int reservedMB, int availableMB, int allocMB, int reservedVirtualCores, int availableVirtualCores, int allocVirtualCores, int totalVirtualCores, int containersAlloc, int totalMB, int totalNodes, int lostNodes, int unhealthyNodes, int decommissionedNodes, int rebootedNodes, int activeNodes)
specifier|public
name|void
name|verifyClusterMetrics
parameter_list|(
name|int
name|submittedApps
parameter_list|,
name|int
name|completedApps
parameter_list|,
name|int
name|reservedMB
parameter_list|,
name|int
name|availableMB
parameter_list|,
name|int
name|allocMB
parameter_list|,
name|int
name|reservedVirtualCores
parameter_list|,
name|int
name|availableVirtualCores
parameter_list|,
name|int
name|allocVirtualCores
parameter_list|,
name|int
name|totalVirtualCores
parameter_list|,
name|int
name|containersAlloc
parameter_list|,
name|int
name|totalMB
parameter_list|,
name|int
name|totalNodes
parameter_list|,
name|int
name|lostNodes
parameter_list|,
name|int
name|unhealthyNodes
parameter_list|,
name|int
name|decommissionedNodes
parameter_list|,
name|int
name|rebootedNodes
parameter_list|,
name|int
name|activeNodes
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|ResourceScheduler
name|rs
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|QueueMetrics
name|metrics
init|=
name|rs
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|long
name|totalMBExpect
init|=
name|metrics
operator|.
name|getAvailableMB
argument_list|()
operator|+
name|metrics
operator|.
name|getAllocatedMB
argument_list|()
decl_stmt|;
name|long
name|totalVirtualCoresExpect
init|=
name|metrics
operator|.
name|getAvailableVirtualCores
argument_list|()
operator|+
name|metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"appsSubmitted doesn't match"
argument_list|,
name|metrics
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|,
name|submittedApps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"appsCompleted doesn't match"
argument_list|,
name|metrics
operator|.
name|getAppsCompleted
argument_list|()
argument_list|,
name|completedApps
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reservedMB doesn't match"
argument_list|,
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|,
name|reservedMB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"availableMB doesn't match"
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|,
name|availableMB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocatedMB doesn't match"
argument_list|,
name|metrics
operator|.
name|getAllocatedMB
argument_list|()
argument_list|,
name|allocMB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"reservedVirtualCores doesn't match"
argument_list|,
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|,
name|reservedVirtualCores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"availableVirtualCores doesn't match"
argument_list|,
name|metrics
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|,
name|availableVirtualCores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocatedVirtualCores doesn't match"
argument_list|,
name|totalVirtualCoresExpect
argument_list|,
name|allocVirtualCores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"containersAllocated doesn't match"
argument_list|,
literal|0
argument_list|,
name|containersAlloc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"totalMB doesn't match"
argument_list|,
name|totalMBExpect
argument_list|,
name|totalMB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"totalNodes doesn't match"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
operator|+
name|clusterMetrics
operator|.
name|getNumLostNMs
argument_list|()
operator|+
name|clusterMetrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
operator|+
name|clusterMetrics
operator|.
name|getNumRebootedNMs
argument_list|()
operator|+
name|clusterMetrics
operator|.
name|getUnhealthyNMs
argument_list|()
argument_list|,
name|totalNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"lostNodes doesn't match"
argument_list|,
name|clusterMetrics
operator|.
name|getNumLostNMs
argument_list|()
argument_list|,
name|lostNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unhealthyNodes doesn't match"
argument_list|,
name|clusterMetrics
operator|.
name|getUnhealthyNMs
argument_list|()
argument_list|,
name|unhealthyNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"decommissionedNodes doesn't match"
argument_list|,
name|clusterMetrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|,
name|decommissionedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rebootedNodes doesn't match"
argument_list|,
name|clusterMetrics
operator|.
name|getNumRebootedNMs
argument_list|()
argument_list|,
name|rebootedNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"activeNodes doesn't match"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
name|activeNodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerFifo ()
specifier|public
name|void
name|testClusterSchedulerFifo
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterSchedulerFifo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerFifoSlash ()
specifier|public
name|void
name|testClusterSchedulerFifoSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterSchedulerFifo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerFifoDefault ()
specifier|public
name|void
name|testClusterSchedulerFifoDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterSchedulerFifo
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerFifoXML ()
specifier|public
name|void
name|testClusterSchedulerFifoXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifySchedulerFifoXML
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySchedulerFifoXML (String xml)
specifier|public
name|void
name|verifySchedulerFifoXML
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodesSched
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"scheduler"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodesSched
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"schedulerInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyClusterSchedulerFifoGeneric
argument_list|(
name|WebServicesTestUtils
operator|.
name|getXmlAttrString
argument_list|(
name|element
argument_list|,
literal|"xsi:type"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"qstate"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"capacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"usedCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"minQueueMemoryCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"maxQueueMemoryCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"numNodes"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"usedNodeCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"availNodeCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"totalNodeCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"numContainers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyClusterSchedulerFifo (JSONObject json)
specifier|public
name|void
name|verifyClusterSchedulerFifo
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"scheduler"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"schedulerInfo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|11
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyClusterSchedulerFifoGeneric
argument_list|(
name|info
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"qstate"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"usedCapacity"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"minQueueMemoryCapacity"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"maxQueueMemoryCapacity"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"numNodes"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"usedNodeCapacity"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"availNodeCapacity"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"totalNodeCapacity"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"numContainers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterSchedulerFifoGeneric (String type, String state, float capacity, float usedCapacity, int minQueueCapacity, int maxQueueCapacity, int numNodes, int usedNodeCapacity, int availNodeCapacity, int totalNodeCapacity, int numContainers)
specifier|public
name|void
name|verifyClusterSchedulerFifoGeneric
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|state
parameter_list|,
name|float
name|capacity
parameter_list|,
name|float
name|usedCapacity
parameter_list|,
name|int
name|minQueueCapacity
parameter_list|,
name|int
name|maxQueueCapacity
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|int
name|usedNodeCapacity
parameter_list|,
name|int
name|availNodeCapacity
parameter_list|,
name|int
name|totalNodeCapacity
parameter_list|,
name|int
name|numContainers
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"type doesn't match"
argument_list|,
literal|"fifoScheduler"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qstate doesn't match"
argument_list|,
name|QueueState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
literal|1.0
argument_list|,
name|capacity
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"usedCapacity doesn't match"
argument_list|,
literal|0.0
argument_list|,
name|usedCapacity
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"minQueueMemoryCapacity doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|minQueueCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maxQueueMemoryCapacity doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|maxQueueCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numNodes doesn't match"
argument_list|,
literal|0
argument_list|,
name|numNodes
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"usedNodeCapacity doesn't match"
argument_list|,
literal|0
argument_list|,
name|usedNodeCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"availNodeCapacity doesn't match"
argument_list|,
literal|0
argument_list|,
name|availNodeCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"totalNodeCapacity doesn't match"
argument_list|,
literal|0
argument_list|,
name|totalNodeCapacity
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numContainers doesn't match"
argument_list|,
literal|0
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

