begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|YarnAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|preemption
operator|.
name|PreemptionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ContainerAllocationProposal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ResourceCommitRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|SchedulerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|CandidateNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AppPriorityACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestParentQueue
specifier|public
class|class
name|TestParentQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestParentQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|conf
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|csConf
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|csContext
name|CapacitySchedulerContext
name|csContext
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|DEFAULT_RACK
specifier|final
specifier|static
name|String
name|DEFAULT_RACK
init|=
literal|"/default"
decl_stmt|;
DECL|field|resourceComparator
specifier|private
specifier|final
name|ResourceCalculator
name|resourceComparator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|rmContext
operator|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|csContext
operator|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getPreemptionManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PreemptionManager
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
block|}
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
literal|"a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
literal|"b"
decl_stmt|;
DECL|method|setupSingleLevelQueues (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupSingleLevelQueues
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|30
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues a and b"
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockApplication (int appId, String user)
specifier|private
name|FiCaSchedulerApp
name|getMockApplication
parameter_list|(
name|int
name|appId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|user
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getHeadroom
argument_list|()
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|applyAllocationToQueue (Resource clusterResource, int allocatedMem, CSQueue queue)
specifier|private
name|void
name|applyAllocationToQueue
parameter_list|(
name|Resource
name|clusterResource
parameter_list|,
name|int
name|allocatedMem
parameter_list|,
name|CSQueue
name|queue
parameter_list|)
block|{
comment|// Call accept& apply for queue
name|ResourceCommitRequest
name|request
init|=
name|mock
argument_list|(
name|ResourceCommitRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|anythingAllocatedOrReserved
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ContainerAllocationProposal
name|allocation
init|=
name|mock
argument_list|(
name|ContainerAllocationProposal
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getTotalReleasedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getFirstAllocatedOrReservedContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|SchedulerContainer
name|scontainer
init|=
name|mock
argument_list|(
name|SchedulerContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|allocation
operator|.
name|getAllocatedOrReservedContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scontainer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|allocation
operator|.
name|getAllocatedOrReservedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|allocatedMem
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scontainer
operator|.
name|getNodePartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|accept
argument_list|(
name|clusterResource
argument_list|,
name|request
argument_list|)
condition|)
block|{
name|queue
operator|.
name|apply
argument_list|(
name|clusterResource
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|stubQueueAllocation (final CSQueue queue, final Resource clusterResource, final FiCaSchedulerNode node, final int allocation)
specifier|private
name|void
name|stubQueueAllocation
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|Resource
name|clusterResource
parameter_list|,
specifier|final
name|FiCaSchedulerNode
name|node
parameter_list|,
specifier|final
name|int
name|allocation
parameter_list|)
block|{
name|stubQueueAllocation
argument_list|(
name|queue
argument_list|,
name|clusterResource
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
block|}
DECL|method|stubQueueAllocation (final CSQueue queue, final Resource clusterResource, final FiCaSchedulerNode node, final int allocation, final NodeType type)
specifier|private
name|void
name|stubQueueAllocation
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|Resource
name|clusterResource
parameter_list|,
specifier|final
name|FiCaSchedulerNode
name|node
parameter_list|,
specifier|final
name|int
name|allocation
parameter_list|,
specifier|final
name|NodeType
name|type
parameter_list|)
block|{
comment|// Simulate the queue allocation
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|CSAssignment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CSAssignment
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FOOBAR q.assignContainers q="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" alloc="
operator|+
name|allocation
operator|+
literal|" node="
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Resource
name|allocatedResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|instanceof
name|ParentQueue
condition|)
block|{
operator|(
operator|(
name|ParentQueue
operator|)
name|queue
operator|)
operator|.
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|allocatedResource
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FiCaSchedulerApp
name|app1
init|=
name|getMockApplication
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LeafQueue
operator|)
name|queue
operator|)
operator|.
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|app1
argument_list|,
name|allocatedResource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Next call - nothing
if|if
condition|(
name|allocation
operator|>
literal|0
condition|)
block|{
name|doReturn
argument_list|(
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceLimits
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock the node's resource availability
name|Resource
name|available
init|=
name|node
operator|.
name|getUnallocatedResource
argument_list|()
decl_stmt|;
name|doReturn
argument_list|(
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|available
argument_list|,
name|allocatedResource
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|node
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|allocatedResource
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceLimits
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|computeQueueAbsoluteUsedCapacity (CSQueue queue, int expectedMemory, Resource clusterResource)
specifier|private
name|float
name|computeQueueAbsoluteUsedCapacity
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedMemory
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|float
operator|)
name|expectedMemory
operator|/
operator|(
name|float
operator|)
name|clusterResource
operator|.
name|getMemorySize
argument_list|()
operator|)
operator|)
return|;
block|}
DECL|method|computeQueueUsedCapacity (CSQueue queue, int expectedMemory, Resource clusterResource)
specifier|private
name|float
name|computeQueueUsedCapacity
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedMemory
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
return|return
operator|(
name|expectedMemory
operator|/
operator|(
name|clusterResource
operator|.
name|getMemorySize
argument_list|()
operator|*
name|queue
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|)
operator|)
return|;
block|}
DECL|field|DELTA
specifier|final
specifier|static
name|float
name|DELTA
init|=
literal|0.0001f
decl_stmt|;
DECL|method|verifyQueueMetrics (CSQueue queue, int expectedMemory, Resource clusterResource)
specifier|private
name|void
name|verifyQueueMetrics
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedMemory
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|computeQueueAbsoluteUsedCapacity
argument_list|(
name|queue
argument_list|,
name|expectedMemory
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|queue
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUsedCapacity
argument_list|(
name|queue
argument_list|,
name|expectedMemory
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|queue
operator|.
name|getUsedCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleLevelQueues ()
specifier|public
name|void
name|testSingleLevelQueues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupSingleLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
comment|// Setup some nodes
specifier|final
name|int
name|memoryPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|coresPerNode
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_1"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
name|memoryPerNode
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
name|coresPerNode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Start testing
name|LeafQueue
name|a
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|LeafQueue
name|b
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
decl_stmt|;
name|a
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|get
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate B returning a container on node_0
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, A should get the scheduling opportunity since A=0G/6G, B=1G/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|InOrder
name|allocationOrder
init|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, B should get the scheduling opportunity
comment|// since A has 2/6G while B has 2/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, B should still get the scheduling opportunity
comment|// since A has 3/6G while B has 4/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|8
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, A should get the scheduling opportunity
comment|// since A has 3/6G while B has 8/14G
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleLevelQueuesPrecision ()
specifier|public
name|void
name|testSingleLevelQueuesPrecision
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupSingleLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
literal|"a"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|30
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
literal|"b"
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|70.5F
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|exceptionOccurred
init|=
literal|false
decl_stmt|;
try|try
block|{
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|exceptionOccurred
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exceptionOccurred
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Capacity is more then 100% so should be failed."
argument_list|)
expr_stmt|;
block|}
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|exceptionOccurred
operator|=
literal|false
expr_stmt|;
name|queues
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|exceptionOccurred
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|exceptionOccurred
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Capacity is 100% so should not be failed."
argument_list|)
expr_stmt|;
block|}
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|70.005F
argument_list|)
expr_stmt|;
name|exceptionOccurred
operator|=
literal|false
expr_stmt|;
name|queues
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{
name|exceptionOccurred
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|exceptionOccurred
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Capacity is under PRECISION which is .05% so should not be failed."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|C
specifier|private
specifier|static
specifier|final
name|String
name|C
init|=
literal|"c"
decl_stmt|;
DECL|field|C1
specifier|private
specifier|static
specifier|final
name|String
name|C1
init|=
literal|"c1"
decl_stmt|;
DECL|field|C11
specifier|private
specifier|static
specifier|final
name|String
name|C11
init|=
literal|"c11"
decl_stmt|;
DECL|field|C111
specifier|private
specifier|static
specifier|final
name|String
name|C111
init|=
literal|"c111"
decl_stmt|;
DECL|field|C1111
specifier|private
specifier|static
specifier|final
name|String
name|C1111
init|=
literal|"c1111"
decl_stmt|;
DECL|field|D
specifier|private
specifier|static
specifier|final
name|String
name|D
init|=
literal|"d"
decl_stmt|;
DECL|field|A1
specifier|private
specifier|static
specifier|final
name|String
name|A1
init|=
literal|"a1"
decl_stmt|;
DECL|field|A2
specifier|private
specifier|static
specifier|final
name|String
name|A2
init|=
literal|"a2"
decl_stmt|;
DECL|field|B1
specifier|private
specifier|static
specifier|final
name|String
name|B1
init|=
literal|"b1"
decl_stmt|;
DECL|field|B2
specifier|private
specifier|static
specifier|final
name|String
name|B2
init|=
literal|"b2"
decl_stmt|;
DECL|field|B3
specifier|private
specifier|static
specifier|final
name|String
name|B3
init|=
literal|"b3"
decl_stmt|;
DECL|method|setupMultiLevelQueues (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupMultiLevelQueues
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|,
name|C
block|,
name|D
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|C
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C
argument_list|,
literal|19.5f
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_D
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|D
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_D
argument_list|,
literal|20.5f
argument_list|)
expr_stmt|;
comment|// Define 2-nd level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_A
argument_list|,
operator|new
name|String
index|[]
block|{
name|A1
block|,
name|A2
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
operator|+
literal|"."
operator|+
name|A1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
operator|+
literal|"."
operator|+
name|A2
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_B
argument_list|,
operator|new
name|String
index|[]
block|{
name|B1
block|,
name|B2
block|,
name|B3
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B3
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_C
argument_list|,
operator|new
name|String
index|[]
block|{
name|C1
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C1
init|=
name|Q_C
operator|+
literal|"."
operator|+
name|C1
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_C1
argument_list|,
operator|new
name|String
index|[]
block|{
name|C11
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C11
init|=
name|Q_C1
operator|+
literal|"."
operator|+
name|C11
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C11
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_C11
argument_list|,
operator|new
name|String
index|[]
block|{
name|C111
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C111
init|=
name|Q_C11
operator|+
literal|"."
operator|+
name|C111
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C111
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//Leaf Queue
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_C111
argument_list|,
operator|new
name|String
index|[]
block|{
name|C1111
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C1111
init|=
name|Q_C111
operator|+
literal|"."
operator|+
name|C1111
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C1111
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiLevelQueues ()
specifier|public
name|void
name|testMultiLevelQueues
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Structure of queue:      *            Root      *           ____________      *          /    |   \   \      *         A     B    C   D      *       / |   / | \   \      *      A1 A2 B1 B2 B3  C1      *                        \      *                         C11      *                           \      *                           C111      *                             \      *                              C1111      */
comment|// Setup queue configs
name|setupMultiLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
comment|// Setup some nodes
specifier|final
name|int
name|memoryPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|coresPerNode
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_1"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|FiCaSchedulerNode
name|node_2
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_2"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
name|memoryPerNode
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
name|coresPerNode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Start testing
name|CSQueue
name|a
init|=
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|a
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|b
init|=
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
decl_stmt|;
name|b
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|c
init|=
name|queues
operator|.
name|get
argument_list|(
name|C
argument_list|)
decl_stmt|;
name|c
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|d
init|=
name|queues
operator|.
name|get
argument_list|(
name|D
argument_list|)
decl_stmt|;
name|d
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|a1
init|=
name|queues
operator|.
name|get
argument_list|(
name|A1
argument_list|)
decl_stmt|;
name|a1
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|a2
init|=
name|queues
operator|.
name|get
argument_list|(
name|A2
argument_list|)
decl_stmt|;
name|a2
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|b1
init|=
name|queues
operator|.
name|get
argument_list|(
name|B1
argument_list|)
decl_stmt|;
name|b1
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|b2
init|=
name|queues
operator|.
name|get
argument_list|(
name|B2
argument_list|)
decl_stmt|;
name|b2
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|b3
init|=
name|queues
operator|.
name|get
argument_list|(
name|B3
argument_list|)
decl_stmt|;
name|b3
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|get
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate C returning a container on node_0
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Now get B2 to allocate
comment|// A = 0/3, B = 0/15, C = 1/6, D=0/6
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b2
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|applyAllocationToQueue
argument_list|(
name|clusterResource
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Now get both A1, C& B3 to allocate in right order
comment|// A = 0/3, B = 4/15, C = 1/6, D=0/6
name|stubQueueAllocation
argument_list|(
name|a1
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b3
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|InOrder
name|allocationOrder
init|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|applyAllocationToQueue
argument_list|(
name|clusterResource
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|c
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|applyAllocationToQueue
argument_list|(
name|clusterResource
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|applyAllocationToQueue
argument_list|(
name|clusterResource
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|6
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Now verify max-capacity
comment|// A = 1/3, B = 6/15, C = 3/6, D=0/6
comment|// Ensure a1 won't alloc above max-cap although it should get
comment|// scheduling opportunity now, right after a2
name|LOG
operator|.
name|info
argument_list|(
literal|"here"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ParentQueue
operator|)
name|a
operator|)
operator|.
name|setMaxCapacity
argument_list|(
literal|.1f
argument_list|)
expr_stmt|;
comment|// a should be capped at 3/30
name|stubQueueAllocation
argument_list|(
name|a1
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
comment|// shouldn't be
comment|// allocated due
comment|// to max-cap
name|stubQueueAllocation
argument_list|(
name|a2
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|2
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b3
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b1
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_2
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|a
argument_list|,
name|a2
argument_list|,
name|a1
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a2
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|applyAllocationToQueue
argument_list|(
name|clusterResource
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|applyAllocationToQueue
argument_list|(
name|clusterResource
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|c
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|8
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testQueueCapacitySettingChildZero ()
specifier|public
name|void
name|testQueueCapacitySettingChildZero
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupMultiLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|// set child queues capacity to 0 when parents not 0
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testQueueCapacitySettingParentZero ()
specifier|public
name|void
name|testQueueCapacitySettingParentZero
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupMultiLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|// set parent capacity to 0 when child not 0
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueCapacityZero ()
specifier|public
name|void
name|testQueueCapacityZero
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupMultiLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|// set parent and child capacity to 0
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_B
operator|+
literal|"."
operator|+
name|B3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed to create queues with 0 capacity: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to create queues with 0 capacity"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOffSwitchScheduling ()
specifier|public
name|void
name|testOffSwitchScheduling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupSingleLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
comment|// Setup some nodes
specifier|final
name|int
name|memoryPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|coresPerNode
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_1"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
name|memoryPerNode
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
name|coresPerNode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Start testing
name|LeafQueue
name|a
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|LeafQueue
name|b
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
decl_stmt|;
name|a
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|get
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate B returning a container on node_0
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, A should get the scheduling opportunity since A=0G/6G, B=1G/14G
comment|// also, B gets a scheduling opportunity since A allocates RACK_LOCAL
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|InOrder
name|allocationOrder
init|=
name|inOrder
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, B should get the scheduling opportunity
comment|// since A has 2/6G while B has 2/14G,
comment|// However, since B returns off-switch, A won't get an opportunity
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|a
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOffSwitchSchedulingMultiLevelQueues ()
specifier|public
name|void
name|testOffSwitchSchedulingMultiLevelQueues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupMultiLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|//B3
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
comment|// Setup some nodes
specifier|final
name|int
name|memoryPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|coresPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_1"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
name|memoryPerNode
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
name|coresPerNode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Start testing
name|LeafQueue
name|b3
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B3
argument_list|)
decl_stmt|;
name|LeafQueue
name|b2
init|=
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B2
argument_list|)
decl_stmt|;
name|b2
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|b3
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|queues
operator|.
name|get
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|CSQueue
name|b
init|=
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
decl_stmt|;
name|b
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
comment|// Simulate B3 returning a container on node_0
name|stubQueueAllocation
argument_list|(
name|b2
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b3
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b2
argument_list|,
literal|0
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b3
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, B2 should get the scheduling opportunity since B2=0G/2G, B3=1G/7G
comment|// also, B3 gets a scheduling opportunity since B2 allocates RACK_LOCAL
name|stubQueueAllocation
argument_list|(
name|b2
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b3
argument_list|,
name|clusterResource
argument_list|,
name|node_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|InOrder
name|allocationOrder
init|=
name|inOrder
argument_list|(
name|b2
argument_list|,
name|b3
argument_list|)
decl_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b2
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b3
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b2
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b3
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|// Now, B3 should get the scheduling opportunity
comment|// since B2 has 1/2G while B3 has 2/7G,
comment|// However, since B3 returns off-switch, B2 won't get an opportunity
name|stubQueueAllocation
argument_list|(
name|b2
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b3
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|allocationOrder
operator|=
name|inOrder
argument_list|(
name|b3
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b3
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b2
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|CandidateNodeSet
operator|.
name|class
argument_list|)
argument_list|,
name|anyResourceLimits
argument_list|()
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b2
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b3
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
block|}
DECL|method|hasQueueACL (List<QueueUserACLInfo> aclInfos, QueueACL acl, String qName)
specifier|public
name|boolean
name|hasQueueACL
parameter_list|(
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|aclInfos
parameter_list|,
name|QueueACL
name|acl
parameter_list|,
name|String
name|qName
parameter_list|)
block|{
for|for
control|(
name|QueueUserACLInfo
name|aclInfo
range|:
name|aclInfos
control|)
block|{
if|if
condition|(
name|aclInfo
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|qName
argument_list|)
condition|)
block|{
if|if
condition|(
name|aclInfo
operator|.
name|getUserAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|acl
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testQueueAcl ()
specifier|public
name|void
name|testQueueAcl
parameter_list|()
throws|throws
name|Exception
block|{
name|setupMultiLevelQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAcl
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAcl
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|C
decl_stmt|;
name|csConf
operator|.
name|setAcl
argument_list|(
name|Q_C
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C11
init|=
name|Q_C
operator|+
literal|"."
operator|+
name|C1
operator|+
literal|"."
operator|+
name|C11
decl_stmt|;
name|csConf
operator|.
name|setAcl
argument_list|(
name|Q_C11
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacitySchedulerQueueManager
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
name|YarnAuthorizationProvider
name|authorizer
init|=
name|YarnAuthorizationProvider
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|AppPriorityACLsManager
name|appPriorityACLManager
init|=
operator|new
name|AppPriorityACLsManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|CapacitySchedulerQueueManager
operator|.
name|setQueueAcls
argument_list|(
name|authorizer
argument_list|,
name|appPriorityACLManager
argument_list|,
name|queues
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
comment|// Setup queue configs
name|ParentQueue
name|c
init|=
operator|(
name|ParentQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|C
argument_list|)
decl_stmt|;
name|ParentQueue
name|c1
init|=
operator|(
name|ParentQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|C1
argument_list|)
decl_stmt|;
name|ParentQueue
name|c11
init|=
operator|(
name|ParentQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|C11
argument_list|)
decl_stmt|;
name|ParentQueue
name|c111
init|=
operator|(
name|ParentQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|C111
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|aclInfos
init|=
name|root
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
comment|// c has no SA, but QA
name|assertTrue
argument_list|(
name|c
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Queue c1 has QA, no SA (gotten perm from parent)
name|assertTrue
argument_list|(
name|c1
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c1
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"c1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Queue c11 has permissions from parent queue and SA
name|assertTrue
argument_list|(
name|c11
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"c11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c11
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"c11"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Queue c111 has SA and AQ, both from parent
name|assertTrue
argument_list|(
name|c111
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"c111"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c111
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|aclInfos
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"c111"
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
DECL|method|anyResourceLimits ()
specifier|private
name|ResourceLimits
name|anyResourceLimits
parameter_list|()
block|{
return|return
name|any
argument_list|(
name|ResourceLimits
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

