begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp.attempt
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|StringHelper
operator|.
name|pjoin
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientToAMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ahs
operator|.
name|RMApplicationHistoryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|ApplicationMasterLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppFailedAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppRunningOnNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptRegistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptUnregistrationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeFinishedContainersPulledByAMEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Allocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|util
operator|.
name|WebAppUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRMAppAttemptTransitions
specifier|public
class|class
name|TestRMAppAttemptTransitions
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMAppAttemptTransitions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY_DIAGNOSTICS
specifier|private
specifier|static
specifier|final
name|String
name|EMPTY_DIAGNOSTICS
init|=
literal|""
decl_stmt|;
DECL|field|FAILED_DIAGNOSTICS
specifier|private
specifier|static
specifier|final
name|String
name|FAILED_DIAGNOSTICS
init|=
literal|"Attempt failed by user."
decl_stmt|;
DECL|field|RM_WEBAPP_ADDR
specifier|private
specifier|static
specifier|final
name|String
name|RM_WEBAPP_ADDR
init|=
name|WebAppUtils
operator|.
name|getResolvedRMWebAppURLWithScheme
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|AHS_WEBAPP_ADDR
specifier|private
specifier|static
specifier|final
name|String
name|AHS_WEBAPP_ADDR
init|=
name|WebAppUtils
operator|.
name|getHttpSchemePrefix
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
operator|+
name|WebAppUtils
operator|.
name|getAHSWebAppURLWithoutScheme
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|isSecurityEnabled
specifier|private
name|boolean
name|isSecurityEnabled
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|spyRMContext
specifier|private
name|RMContext
name|spyRMContext
decl_stmt|;
DECL|field|scheduler
specifier|private
name|YarnScheduler
name|scheduler
decl_stmt|;
DECL|field|resourceScheduler
specifier|private
name|ResourceScheduler
name|resourceScheduler
decl_stmt|;
DECL|field|masterService
specifier|private
name|ApplicationMasterService
name|masterService
decl_stmt|;
DECL|field|applicationMasterLauncher
specifier|private
name|ApplicationMasterLauncher
name|applicationMasterLauncher
decl_stmt|;
DECL|field|amLivelinessMonitor
specifier|private
name|AMLivelinessMonitor
name|amLivelinessMonitor
decl_stmt|;
DECL|field|amFinishingMonitor
specifier|private
name|AMLivelinessMonitor
name|amFinishingMonitor
decl_stmt|;
DECL|field|writer
specifier|private
name|RMApplicationHistoryWriter
name|writer
decl_stmt|;
DECL|field|publisher
specifier|private
name|SystemMetricsPublisher
name|publisher
decl_stmt|;
DECL|field|store
specifier|private
name|RMStateStore
name|store
decl_stmt|;
DECL|field|application
specifier|private
name|RMAppImpl
name|application
decl_stmt|;
DECL|field|applicationAttempt
specifier|private
name|RMAppAttempt
name|applicationAttempt
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|amRMTokenManager
specifier|private
name|AMRMTokenSecretManager
name|amRMTokenManager
init|=
name|spy
argument_list|(
operator|new
name|AMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|clientToAMTokenManager
specifier|private
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenManager
init|=
name|spy
argument_list|(
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|nmTokenManager
specifier|private
name|NMTokenSecretManagerInRM
name|nmTokenManager
init|=
name|spy
argument_list|(
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|transferStateFromPreviousAttempt
specifier|private
name|boolean
name|transferStateFromPreviousAttempt
init|=
literal|false
decl_stmt|;
DECL|field|rmnodeEventHandler
specifier|private
name|EventHandler
argument_list|<
name|RMNodeEvent
argument_list|>
name|rmnodeEventHandler
decl_stmt|;
DECL|class|TestApplicationAttemptEventDispatcher
specifier|private
specifier|final
class|class
name|TestApplicationAttemptEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppAttemptEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMAppAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationAttemptId
name|appID
init|=
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|appID
argument_list|)
expr_stmt|;
try|try
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for application "
operator|+
name|appID
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// handle all the RM application events - same as in ResourceManager.java
DECL|class|TestApplicationEventDispatcher
specifier|private
specifier|final
class|class
name|TestApplicationEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMAppEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|event
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|instanceof
name|RMAppFailedAttemptEvent
condition|)
block|{
name|transferStateFromPreviousAttempt
operator|=
operator|(
operator|(
name|RMAppFailedAttemptEvent
operator|)
name|event
operator|)
operator|.
name|getTransferStateFromPreviousAttempt
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for application "
operator|+
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|TestSchedulerEventDispatcher
specifier|private
specifier|final
class|class
name|TestSchedulerEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestAMLauncherEventDispatcher
specifier|private
specifier|final
class|class
name|TestAMLauncherEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|AMLauncherEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (AMLauncherEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|AMLauncherEvent
name|event
parameter_list|)
block|{
name|applicationMasterLauncher
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|appId
specifier|private
specifier|static
name|int
name|appId
init|=
literal|1
decl_stmt|;
DECL|field|submissionContext
specifier|private
name|ApplicationSubmissionContext
name|submissionContext
init|=
literal|null
decl_stmt|;
DECL|field|unmanagedAM
specifier|private
name|boolean
name|unmanagedAM
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|getTestParameters ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getTestParameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|Boolean
operator|.
name|FALSE
block|}
block|,
block|{
name|Boolean
operator|.
name|TRUE
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestRMAppAttemptTransitions (Boolean isSecurityEnabled)
specifier|public
name|TestRMAppAttemptTransitions
parameter_list|(
name|Boolean
name|isSecurityEnabled
parameter_list|)
block|{
name|this
operator|.
name|isSecurityEnabled
operator|=
name|isSecurityEnabled
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|AuthenticationMethod
name|authMethod
init|=
name|AuthenticationMethod
operator|.
name|SIMPLE
decl_stmt|;
if|if
condition|(
name|isSecurityEnabled
condition|)
block|{
name|authMethod
operator|=
name|AuthenticationMethod
operator|.
name|KERBEROS
expr_stmt|;
block|}
name|SecurityUtil
operator|.
name|setAuthenticationMethod
argument_list|(
name|authMethod
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|InlineDispatcher
name|rmDispatcher
init|=
operator|new
name|InlineDispatcher
argument_list|()
decl_stmt|;
name|ContainerAllocationExpirer
name|containerAllocationExpirer
init|=
name|mock
argument_list|(
name|ContainerAllocationExpirer
operator|.
name|class
argument_list|)
decl_stmt|;
name|amLivelinessMonitor
operator|=
name|mock
argument_list|(
name|AMLivelinessMonitor
operator|.
name|class
argument_list|)
expr_stmt|;
name|amFinishingMonitor
operator|=
name|mock
argument_list|(
name|AMLivelinessMonitor
operator|.
name|class
argument_list|)
expr_stmt|;
name|writer
operator|=
name|mock
argument_list|(
name|RMApplicationHistoryWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|MasterKeyData
name|masterKeyData
init|=
name|amRMTokenManager
operator|.
name|createNewMasterKey
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|amRMTokenManager
operator|.
name|getMasterKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|masterKeyData
argument_list|)
expr_stmt|;
name|rmContext
operator|=
operator|new
name|RMContextImpl
argument_list|(
name|rmDispatcher
argument_list|,
name|containerAllocationExpirer
argument_list|,
name|amLivelinessMonitor
argument_list|,
name|amFinishingMonitor
argument_list|,
literal|null
argument_list|,
name|amRMTokenManager
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|nmTokenManager
argument_list|,
name|clientToAMTokenManager
argument_list|)
expr_stmt|;
name|store
operator|=
name|mock
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMContextImpl
operator|)
name|rmContext
operator|)
operator|.
name|setStateStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|publisher
operator|=
name|mock
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setSystemMetricsPublisher
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setRMApplicationHistoryWriter
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|masterService
operator|=
name|mock
argument_list|(
name|ApplicationMasterService
operator|.
name|class
argument_list|)
expr_stmt|;
name|applicationMasterLauncher
operator|=
name|mock
argument_list|(
name|ApplicationMasterLauncher
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppAttemptEventType
operator|.
name|class
argument_list|,
operator|new
name|TestApplicationAttemptEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppEventType
operator|.
name|class
argument_list|,
operator|new
name|TestApplicationEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
operator|new
name|TestSchedulerEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|AMLauncherEventType
operator|.
name|class
argument_list|,
operator|new
name|TestAMLauncherEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmnodeEventHandler
operator|=
name|mock
argument_list|(
name|RMNodeImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMNodeEventType
operator|.
name|class
argument_list|,
name|rmnodeEventHandler
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
name|appId
operator|++
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|resourceScheduler
operator|=
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|ApplicationResourceUsageReport
name|appResUsgRpt
init|=
name|mock
argument_list|(
name|ApplicationResourceUsageReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appResUsgRpt
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appResUsgRpt
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|resourceScheduler
operator|.
name|getAppResourceUsageReport
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appResUsgRpt
argument_list|)
expr_stmt|;
name|spyRMContext
operator|=
name|spy
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|resourceScheduler
argument_list|)
operator|.
name|when
argument_list|(
name|spyRMContext
argument_list|)
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
specifier|final
name|String
name|user
init|=
name|MockApps
operator|.
name|newUserName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|queue
init|=
name|MockApps
operator|.
name|newQueue
argument_list|()
decl_stmt|;
name|submissionContext
operator|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1536
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|amContainerSpec
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|amContainerSpec
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|unmanagedAM
operator|=
literal|false
expr_stmt|;
name|application
operator|=
name|mock
argument_list|(
name|RMAppImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|applicationAttemptId
argument_list|,
name|spyRMContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|submissionContext
operator|.
name|getResource
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|application
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onInvalidTranstion
parameter_list|(
name|RMAppAttemptEventType
name|rmAppAttemptEventType
parameter_list|,
name|RMAppAttemptState
name|state
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"RMAppAttemptImpl can't handle "
operator|+
name|rmAppAttemptEventType
operator|+
literal|" at state "
operator|+
name|state
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|spyRMContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|testAppAttemptNewState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|this
operator|.
name|spyRMContext
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|getProxyUrl (RMAppAttempt appAttempt)
specifier|private
name|String
name|getProxyUrl
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|)
block|{
name|String
name|url
init|=
name|rmContext
operator|.
name|getAppProxyUrl
argument_list|(
name|conf
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"N/A"
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|url
return|;
block|}
comment|/**    * {@link RMAppAttemptState#NEW}    */
DECL|method|testAppAttemptNewState ()
specifier|private
name|void
name|testAppAttemptNewState
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|NEW
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"N/A"
operator|.
name|equals
argument_list|(
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#SUBMITTED}    */
DECL|method|testAppAttemptSubmittedState ()
specifier|private
name|void
name|testAppAttemptSubmittedState
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|verify
argument_list|(
name|clientToAMTokenManager
argument_list|)
operator|.
name|createMasterKey
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// can't create ClientToken as at this time ClientTokenMasterKey has
comment|// not been registered in the SecretManager
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|"some client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|masterService
argument_list|)
operator|.
name|registerAppAttempt
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|scheduler
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|AppAttemptAddedSchedulerEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#SUBMITTED} -> {@link RMAppAttemptState#FAILED}    */
DECL|method|testAppAttemptSubmittedToFailedState (String diagnostics)
specifier|private
name|void
name|testAppAttemptSubmittedToFailedState
parameter_list|(
name|String
name|diagnostics
parameter_list|)
block|{
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|masterService
argument_list|)
operator|.
name|unregisterAttempt
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// ATTEMPT_FAILED should be notified to app if app attempt is submitted to
comment|// failed state.
name|ArgumentMatcher
argument_list|<
name|RMAppEvent
argument_list|>
name|matcher
init|=
name|event
lambda|->
name|event
operator|.
name|getType
argument_list|()
operator|==
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
decl_stmt|;
name|verify
argument_list|(
name|application
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
name|matcher
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#KILLED}    */
DECL|method|testAppAttemptKilledState (Container amContainer, String diagnostics)
specifier|private
name|void
name|testAppAttemptKilledState
parameter_list|(
name|Container
name|amContainer
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amContainer
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyAttemptFinalStateSaved
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|transferStateFromPreviousAttempt
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#LAUNCHED}    */
DECL|method|testAppAttemptRecoveredState ()
specifier|private
name|void
name|testAppAttemptRecoveredState
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#SCHEDULED}    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAppAttemptScheduledState ()
specifier|private
name|void
name|testAppAttemptScheduledState
parameter_list|()
block|{
name|RMAppAttemptState
name|expectedState
decl_stmt|;
name|int
name|expectedAllocateCount
decl_stmt|;
if|if
condition|(
name|unmanagedAM
condition|)
block|{
name|expectedState
operator|=
name|RMAppAttemptState
operator|.
name|LAUNCHED
expr_stmt|;
name|expectedAllocateCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|expectedState
operator|=
name|RMAppAttemptState
operator|.
name|SCHEDULED
expr_stmt|;
name|expectedAllocateCount
operator|=
literal|1
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedState
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|scheduler
argument_list|,
name|times
argument_list|(
name|expectedAllocateCount
argument_list|)
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|null
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerUpdates
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#ALLOCATED}    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAppAttemptAllocatedState (Container amContainer)
specifier|private
name|void
name|testAppAttemptAllocatedState
parameter_list|(
name|Container
name|amContainer
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amContainer
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|applicationMasterLauncher
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|AMLauncherEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|scheduler
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|ContainerUpdates
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|nmTokenManager
argument_list|)
operator|.
name|clearNodeSetForAttempt
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#FAILED}    */
DECL|method|testAppAttemptFailedState (Container container, String diagnostics)
specifier|private
name|void
name|testAppAttemptFailedState
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
operator|(
name|double
operator|)
name|applicationAttempt
operator|.
name|getProgress
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check events
name|verify
argument_list|(
name|application
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|any
argument_list|(
name|RMAppFailedAttemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyAttemptFinalStateSaved
argument_list|()
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppAttemptLaunchedState (Container container, RMAppAttemptState state)
specifier|private
name|void
name|testAppAttemptLaunchedState
parameter_list|(
name|Container
name|container
parameter_list|,
name|RMAppAttemptState
name|state
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|state
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// ClientTokenMasterKey has been registered in SecretManager, it's able to
comment|// create ClientToken now
name|assertNotNull
argument_list|(
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|"some client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO - need to add more checks relevant to this state
block|}
comment|/**    * {@link RMAppAttemptState#RUNNING}    */
DECL|method|testAppAttemptRunningState (Container container, String host, int rpcPort, String trackingUrl, boolean unmanagedAM)
specifier|private
name|void
name|testAppAttemptRunningState
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|rpcPort
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|boolean
name|unmanagedAM
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|host
argument_list|,
name|applicationAttempt
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rpcPort
argument_list|,
name|applicationAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
name|verifyUrl
argument_list|(
name|trackingUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|unmanagedAM
condition|)
block|{
name|verifyUrl
argument_list|(
name|trackingUrl
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|getProxyUrl
argument_list|(
name|applicationAttempt
argument_list|)
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO - need to add more checks relevant to this state
block|}
comment|/**    * {@link RMAppAttemptState#FINISHING}    */
DECL|method|testAppAttemptFinishingState (Container container, FinalApplicationStatus finalStatus, String trackingUrl, String diagnostics)
specifier|private
name|void
name|testAppAttemptFinishingState
parameter_list|(
name|Container
name|container
parameter_list|,
name|FinalApplicationStatus
name|finalStatus
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|verifyUrl
argument_list|(
name|trackingUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getProxyUrl
argument_list|(
name|applicationAttempt
argument_list|)
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|finalStatus
argument_list|,
name|applicationAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyAttemptFinalStateSaved
argument_list|()
expr_stmt|;
block|}
comment|/**    * {@link RMAppAttemptState#FINISHED}    */
DECL|method|testAppAttemptFinishedState (Container container, FinalApplicationStatus finalStatus, String trackingUrl, String diagnostics, int finishedContainerCount, boolean unmanagedAM)
specifier|private
name|void
name|testAppAttemptFinishedState
parameter_list|(
name|Container
name|container
parameter_list|,
name|FinalApplicationStatus
name|finalStatus
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|int
name|finishedContainerCount
parameter_list|,
name|boolean
name|unmanagedAM
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|diagnostics
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|verifyUrl
argument_list|(
name|trackingUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|unmanagedAM
condition|)
block|{
name|verifyUrl
argument_list|(
name|trackingUrl
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|getProxyUrl
argument_list|(
name|applicationAttempt
argument_list|)
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verifyAttemptFinalStateSaved
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|finishedContainerCount
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getFinishedContainersSentToAM
argument_list|(
name|applicationAttempt
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|finalStatus
argument_list|,
name|applicationAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|transferStateFromPreviousAttempt
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
DECL|method|submitApplicationAttempt ()
specifier|private
name|void
name|submitApplicationAttempt
parameter_list|()
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptSubmittedState
argument_list|()
expr_stmt|;
block|}
DECL|method|scheduleApplicationAttempt ()
specifier|private
name|void
name|scheduleApplicationAttempt
parameter_list|()
block|{
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_ADDED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unmanagedAM
condition|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED_UNMANAGED_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_NEW_SAVED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testAppAttemptScheduledState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|allocateApplicationAttempt ()
specifier|private
name|Container
name|allocateApplicationAttempt
parameter_list|()
block|{
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
comment|// Mock the allocation of AM container
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|Allocation
name|allocation
init|=
name|mock
argument_list|(
name|Allocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|allocation
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|ContainerUpdates
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|RMContainer
name|rmContainer
init|=
name|mock
argument_list|(
name|RMContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// Before SAVED state, can't create ClientToken as at this time
comment|// ClientTokenMasterKey has not been registered in the SecretManager
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|"some client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_NEW_SAVED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
comment|// Before SAVED state, can't create ClientToken as at this time
comment|// ClientTokenMasterKey has not been registered in the SecretManager
name|assertNotNull
argument_list|(
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|"some client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|testAppAttemptAllocatedState
argument_list|(
name|container
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|launchApplicationAttempt (Container container)
specifier|private
name|void
name|launchApplicationAttempt
parameter_list|(
name|Container
name|container
parameter_list|)
block|{
name|launchApplicationAttempt
argument_list|(
name|container
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
block|}
DECL|method|launchApplicationAttempt (Container container, RMAppAttemptState state)
specifier|private
name|void
name|launchApplicationAttempt
parameter_list|(
name|Container
name|container
parameter_list|,
name|RMAppAttemptState
name|state
parameter_list|)
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptLaunchedState
argument_list|(
name|container
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
DECL|method|runApplicationAttempt (Container container, String host, int rpcPort, String trackingUrl, boolean unmanagedAM)
specifier|private
name|void
name|runApplicationAttempt
parameter_list|(
name|Container
name|container
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|rpcPort
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|boolean
name|unmanagedAM
parameter_list|)
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptRegistrationEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|host
argument_list|,
name|rpcPort
argument_list|,
name|trackingUrl
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptRunningState
argument_list|(
name|container
argument_list|,
name|host
argument_list|,
name|rpcPort
argument_list|,
name|trackingUrl
argument_list|,
name|unmanagedAM
argument_list|)
expr_stmt|;
block|}
DECL|method|unregisterApplicationAttempt (Container container, FinalApplicationStatus finalStatus, String trackingUrl, String diagnostics)
specifier|private
name|void
name|unregisterApplicationAttempt
parameter_list|(
name|Container
name|container
parameter_list|,
name|FinalApplicationStatus
name|finalStatus
parameter_list|,
name|String
name|trackingUrl
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUnregistrationEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|trackingUrl
argument_list|,
name|finalStatus
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|testAppAttemptFinishingState
argument_list|(
name|container
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
DECL|method|testUnmanagedAMSuccess (String url)
specifier|private
name|void
name|testUnmanagedAMSuccess
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|unmanagedAM
operator|=
literal|true
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// submit AM and check it goes to LAUNCHED state
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
name|testAppAttemptLaunchedState
argument_list|(
literal|null
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|amLivelinessMonitor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|register
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch AM
name|runApplicationAttempt
argument_list|(
literal|null
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
name|url
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// complete a container
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRunningOnNodeEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|mock
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
argument_list|,
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// complete AM
name|String
name|diagnostics
init|=
literal|"Successful"
decl_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUnregistrationEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|url
argument_list|,
name|finalStatus
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|testAppAttemptFinishedState
argument_list|(
literal|null
argument_list|,
name|finalStatus
argument_list|,
name|url
argument_list|,
name|diagnostics
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|transferStateFromPreviousAttempt
argument_list|)
expr_stmt|;
block|}
DECL|method|sendAttemptUpdateSavedEvent (RMAppAttempt applicationAttempt)
specifier|private
name|void
name|sendAttemptUpdateSavedEvent
parameter_list|(
name|RMAppAttempt
name|applicationAttempt
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_UPDATE_SAVED
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUsageReport ()
specifier|public
name|void
name|testUsageReport
parameter_list|()
block|{
comment|// scheduler has info on running apps
name|ApplicationAttemptId
name|attemptId
init|=
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|ApplicationResourceUsageReport
name|appResUsgRpt
init|=
name|mock
argument_list|(
name|ApplicationResourceUsageReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appResUsgRpt
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|123456L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appResUsgRpt
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|55544L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getAppResourceUsageReport
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appResUsgRpt
argument_list|)
expr_stmt|;
comment|// start and finish the attempt
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUnregistrationEvent
argument_list|(
name|attemptId
argument_list|,
literal|""
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// expect usage stats to come from the scheduler report
name|ApplicationResourceUsageReport
name|report
init|=
name|applicationAttempt
operator|.
name|getApplicationResourceUsageReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|123456L
argument_list|,
name|report
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|55544L
argument_list|,
name|report
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
comment|// finish app attempt and remove it from scheduler
name|when
argument_list|(
name|appResUsgRpt
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|223456L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appResUsgRpt
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|75544L
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|attemptId
argument_list|,
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getSchedulerAppInfo
argument_list|(
name|eq
argument_list|(
name|attemptId
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|report
operator|=
name|applicationAttempt
operator|.
name|getApplicationResourceUsageReport
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|223456
argument_list|,
name|report
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|75544
argument_list|,
name|report
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmanagedAMUnexpectedRegistration ()
specifier|public
name|void
name|testUnmanagedAMUnexpectedRegistration
parameter_list|()
block|{
name|unmanagedAM
operator|=
literal|true
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// submit AM and check it goes to SUBMITTED state
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch AM and verify attempt failed
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptRegistrationEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptSubmittedToFailedState
argument_list|(
literal|"Unmanaged AM must register after AM attempt reaches LAUNCHED state."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmanagedAMContainersCleanup ()
specifier|public
name|void
name|testUnmanagedAMContainersCleanup
parameter_list|()
block|{
name|unmanagedAM
operator|=
literal|true
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// submit AM and check it goes to SUBMITTED state
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
comment|// launch AM and verify attempt failed
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptRegistrationEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|transferStateFromPreviousAttempt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewToKilled ()
specifier|public
name|void
name|testNewToKilled
parameter_list|()
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|NEW
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
literal|null
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewToRecovered ()
specifier|public
name|void
name|testNewToRecovered
parameter_list|()
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|RECOVER
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptRecoveredState
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmittedToKilled ()
specifier|public
name|void
name|testSubmittedToKilled
parameter_list|()
block|{
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
literal|null
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScheduledToKilled ()
specifier|public
name|void
name|testScheduledToKilled
parameter_list|()
block|{
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
literal|null
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMCrashAtScheduled ()
specifier|public
name|void
name|testAMCrashAtScheduled
parameter_list|()
block|{
comment|// This is to test sending CONTAINER_FINISHED event at SCHEDULED state.
comment|// Verify the state transition is correct.
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
name|ContainerStatus
name|cs
init|=
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
decl_stmt|;
comment|// send CONTAINER_FINISHED event at SCHEDULED state,
comment|// The state should be FINAL_SAVING with previous state SCHEDULED
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|cs
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
comment|// createApplicationAttemptState will return previous state (SCHEDULED),
comment|// if the current state is FINAL_SAVING.
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// send ATTEMPT_UPDATE_SAVED event,
comment|// verify the state is changed to state FAILED.
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocatedToKilled ()
specifier|public
name|void
name|testAllocatedToKilled
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
name|amContainer
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocatedToFailed ()
specifier|public
name|void
name|testAllocatedToFailed
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Launch Failed"
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptFailedState
argument_list|(
name|amContainer
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAllocatedToRunning ()
specifier|public
name|void
name|testAllocatedToRunning
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
comment|// Register attempt event arrives before launched attempt event
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testCreateAppAttemptReport ()
specifier|public
name|void
name|testCreateAppAttemptReport
parameter_list|()
block|{
name|RMAppAttemptState
index|[]
name|attemptStates
init|=
name|RMAppAttemptState
operator|.
name|values
argument_list|()
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|// ALL RMAppAttemptState TO BE CHECK
name|RMAppAttempt
name|attempt
init|=
name|spy
argument_list|(
name|applicationAttempt
argument_list|)
decl_stmt|;
for|for
control|(
name|RMAppAttemptState
name|rmAppAttemptState
range|:
name|attemptStates
control|)
block|{
name|when
argument_list|(
name|attempt
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmAppAttemptState
argument_list|)
expr_stmt|;
name|attempt
operator|.
name|createApplicationAttemptReport
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testLaunchedAtFinalSaving ()
specifier|public
name|void
name|testLaunchedAtFinalSaving
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
comment|// ALLOCATED->FINAL_SAVING
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify for both launched and launch_failed transitions in final_saving
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
literal|"Launch Failed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptKilledState
argument_list|(
name|amContainer
argument_list|,
name|EMPTY_DIAGNOSTICS
argument_list|)
expr_stmt|;
comment|// verify for both launched and launch_failed transitions in killed
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
literal|"Launch Failed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAttemptAddedAtFinalSaving ()
specifier|public
name|void
name|testAttemptAddedAtFinalSaving
parameter_list|()
block|{
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
comment|// SUBMITTED->FINAL_SAVING
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_ADDED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testAttemptRegisteredAtFailed ()
specifier|public
name|void
name|testAttemptRegisteredAtFailed
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
comment|//send CONTAINER_FINISHED event
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|//send REGISTERED event
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|REGISTERED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAttemptLaunchFailedAtFailed ()
specifier|public
name|void
name|testAttemptLaunchFailedAtFailed
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
comment|//send CONTAINER_FINISHED event
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|//send LAUNCH_FAILED event
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMCrashAtAllocated ()
specifier|public
name|void
name|testAMCrashAtAllocated
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|String
name|containerDiagMsg
init|=
literal|"some error"
decl_stmt|;
name|int
name|exitCode
init|=
literal|123
decl_stmt|;
name|ContainerStatus
name|cs
init|=
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|containerDiagMsg
argument_list|,
name|exitCode
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|cs
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|boolean
name|shouldCheckURL
init|=
operator|(
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
operator|!=
literal|null
operator|)
decl_stmt|;
name|verifyAMCrashAtAllocatedDiagnosticInfo
argument_list|(
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|exitCode
argument_list|,
name|shouldCheckURL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRunningToFailed ()
specifier|public
name|void
name|testRunningToFailed
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|containerDiagMsg
init|=
literal|"some error"
decl_stmt|;
name|int
name|exitCode
init|=
literal|123
decl_stmt|;
name|ContainerStatus
name|cs
init|=
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|containerDiagMsg
argument_list|,
name|exitCode
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|appAttemptId
argument_list|,
name|cs
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
comment|// ignored ContainerFinished and Expire at FinalSaving if we were supposed
comment|// to Failed state.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amContainer
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rmAppPageUrl
init|=
name|pjoin
argument_list|(
name|RM_WEBAPP_ADDR
argument_list|,
literal|"cluster"
argument_list|,
literal|"app"
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAMHostAndPortInvalidated
argument_list|()
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRunningToKilled ()
specifier|public
name|void
name|testRunningToKilled
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
comment|// ignored ContainerFinished and Expire at FinalSaving if we were supposed
comment|// to Killed state.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amContainer
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rmAppPageUrl
init|=
name|pjoin
argument_list|(
name|RM_WEBAPP_ADDR
argument_list|,
literal|"cluster"
argument_list|,
literal|"app"
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyAMHostAndPortInvalidated
argument_list|()
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testLaunchedExpire ()
specifier|public
name|void
name|testLaunchedExpire
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expire diagnostics missing"
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"timed out"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rmAppPageUrl
init|=
name|pjoin
argument_list|(
name|RM_WEBAPP_ADDR
argument_list|,
literal|"cluster"
argument_list|,
literal|"app"
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testLaunchedFailWhileAHSEnabled ()
specifier|public
name|void
name|testLaunchedFailWhileAHSEnabled
parameter_list|()
block|{
name|Configuration
name|myConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|myConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|myApplicationAttempt
init|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|spyRMContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|,
name|myConf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|submissionContext
operator|.
name|getResource
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|application
argument_list|)
decl_stmt|;
comment|//submit, schedule and allocate app attempt
name|myApplicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|myApplicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_ADDED
argument_list|)
argument_list|)
expr_stmt|;
name|Container
name|amContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|Allocation
name|allocation
init|=
name|mock
argument_list|(
name|Allocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|allocation
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|amContainer
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|ContainerUpdates
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|RMContainer
name|rmContainer
init|=
name|mock
argument_list|(
name|RMContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|myApplicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|ALLOCATED_SAVING
argument_list|,
name|myApplicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|myApplicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|ATTEMPT_NEW_SAVED
argument_list|)
argument_list|)
expr_stmt|;
comment|// launch app attempt
name|myApplicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|myApplicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|//fail container right after launched
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|myApplicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|myApplicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|myApplicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rmAppPageUrl
init|=
name|pjoin
argument_list|(
name|AHS_WEBAPP_ADDR
argument_list|,
literal|"applicationhistory"
argument_list|,
literal|"app"
argument_list|,
name|myApplicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|myApplicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|myApplicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRunningExpire ()
specifier|public
name|void
name|testRunningExpire
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expire diagnostics missing"
argument_list|,
name|applicationAttempt
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|contains
argument_list|(
literal|"timed out"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|rmAppPageUrl
init|=
name|pjoin
argument_list|(
name|RM_WEBAPP_ADDR
argument_list|,
literal|"cluster"
argument_list|,
literal|"app"
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyAMHostAndPortInvalidated
argument_list|()
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnregisterToKilledFinishing ()
specifier|public
name|void
name|testUnregisterToKilledFinishing
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|unregisterApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|FinalApplicationStatus
operator|.
name|KILLED
argument_list|,
literal|"newtrackingurl"
argument_list|,
literal|"Killed by user"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrackingUrlUnmanagedAM ()
specifier|public
name|void
name|testTrackingUrlUnmanagedAM
parameter_list|()
block|{
name|testUnmanagedAMSuccess
argument_list|(
literal|"oldTrackingUrl"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyTrackingUrlUnmanagedAM ()
specifier|public
name|void
name|testEmptyTrackingUrlUnmanagedAM
parameter_list|()
block|{
name|testUnmanagedAMSuccess
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullTrackingUrlUnmanagedAM ()
specifier|public
name|void
name|testNullTrackingUrlUnmanagedAM
parameter_list|()
block|{
name|testUnmanagedAMSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testManagedAMWithTrackingUrl ()
specifier|public
name|void
name|testManagedAMWithTrackingUrl
parameter_list|()
block|{
name|testTrackingUrlManagedAM
argument_list|(
literal|"theTrackingUrl"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testManagedAMWithEmptyTrackingUrl ()
specifier|public
name|void
name|testManagedAMWithEmptyTrackingUrl
parameter_list|()
block|{
name|testTrackingUrlManagedAM
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testManagedAMWithNullTrackingUrl ()
specifier|public
name|void
name|testManagedAMWithNullTrackingUrl
parameter_list|()
block|{
name|testTrackingUrlManagedAM
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|testTrackingUrlManagedAM (String url)
specifier|private
name|void
name|testTrackingUrlManagedAM
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
name|url
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|unregisterApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|url
argument_list|,
literal|"Successful"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnregisterToSuccessfulFinishing ()
specifier|public
name|void
name|testUnregisterToSuccessfulFinishing
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|unregisterApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|"mytrackingurl"
argument_list|,
literal|"Successful"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishingKill ()
specifier|public
name|void
name|testFinishingKill
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|FAILED
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|"newtrackingurl"
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Job failed"
decl_stmt|;
name|unregisterApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptFinishingState
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishingExpire ()
specifier|public
name|void
name|testFinishingExpire
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|"mytrackingurl"
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Successful"
decl_stmt|;
name|unregisterApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptFinishedState
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishingToFinishing ()
specifier|public
name|void
name|testFinishingToFinishing
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|"mytrackingurl"
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Successful"
decl_stmt|;
name|unregisterApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
comment|// container must be AM container to move from FINISHING to FINISHED
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|42
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptFinishingState
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSuccessfulFinishingToFinished ()
specifier|public
name|void
name|testSuccessfulFinishingToFinished
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|"mytrackingurl"
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Successful"
decl_stmt|;
name|unregisterApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptFinishedState
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// While attempt is at FINAL_SAVING, Contaienr_Finished event may come before
comment|// Attempt_Saved event, we stay on FINAL_SAVING on Container_Finished event
comment|// and then directly jump from FINAL_SAVING to FINISHED state on Attempt_Saved
comment|// event
annotation|@
name|Test
specifier|public
name|void
DECL|method|testFinalSavingToFinishedWithContainerFinished ()
name|testFinalSavingToFinishedWithContainerFinished
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|"mytrackingurl"
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Successful"
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUnregistrationEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|trackingUrl
argument_list|,
name|finalStatus
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container_finished event comes before Attempt_Saved event.
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// send attempt_saved
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|testAppAttemptFinishedState
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// While attempt is at FINAL_SAVING, Expire event may come before
comment|// Attempt_Saved event, we stay on FINAL_SAVING on Expire event and then
comment|// directly jump from FINAL_SAVING to FINISHED state on Attempt_Saved event.
annotation|@
name|Test
DECL|method|testFinalSavingToFinishedWithExpire ()
specifier|public
name|void
name|testFinalSavingToFinishedWithExpire
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|FinalApplicationStatus
name|finalStatus
init|=
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
decl_stmt|;
name|String
name|trackingUrl
init|=
literal|"mytrackingurl"
decl_stmt|;
name|String
name|diagnostics
init|=
literal|"Successssseeeful"
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptUnregistrationEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|trackingUrl
argument_list|,
name|finalStatus
argument_list|,
name|diagnostics
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expire event comes before Attempt_saved event.
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|EXPIRE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// send attempt_saved
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|testAppAttemptFinishedState
argument_list|(
name|amContainer
argument_list|,
name|finalStatus
argument_list|,
name|trackingUrl
argument_list|,
name|diagnostics
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFinishedContainer ()
specifier|public
name|void
name|testFinishedContainer
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Complete one container
name|ContainerId
name|containerId1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Container
name|container1
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|ContainerStatus
name|containerStatus1
init|=
name|mock
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerStatus1
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
operator|new
name|RMAppRunningOnNodeEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|container1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|containerStatus1
argument_list|,
name|container1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ArgumentCaptor
argument_list|<
name|RMNodeFinishedContainersPulledByAMEvent
argument_list|>
name|captor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|RMNodeFinishedContainersPulledByAMEvent
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Verify justFinishedContainers
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getId
argument_list|()
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getFinishedContainersSentToAM
argument_list|(
name|applicationAttempt
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify finishedContainersSentToAM gets container after pull
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|applicationAttempt
operator|.
name|pullJustFinishedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|rmnodeEventHandler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RMNodeEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getFinishedContainersSentToAM
argument_list|(
name|applicationAttempt
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify container is acked to NM via the RMNodeEvent after second pull
name|containerStatuses
operator|=
name|applicationAttempt
operator|.
name|pullJustFinishedContainers
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|rmnodeEventHandler
argument_list|)
operator|.
name|handle
argument_list|(
name|captor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container1
operator|.
name|getId
argument_list|()
argument_list|,
name|captor
operator|.
name|getValue
argument_list|()
operator|.
name|getContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getFinishedContainersSentToAM
argument_list|(
name|applicationAttempt
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify if no containers to acknowledge to NM then event should not be
comment|// triggered. Number of times event invoked is 1 i.e on second pull
name|containerStatuses
operator|=
name|applicationAttempt
operator|.
name|pullJustFinishedContainers
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containerStatuses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|rmnodeEventHandler
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|RMNodeEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getFinishedContainersSentToAM ( RMAppAttempt applicationAttempt)
specifier|private
specifier|static
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|getFinishedContainersSentToAM
parameter_list|(
name|RMAppAttempt
name|applicationAttempt
parameter_list|)
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
range|:
name|applicationAttempt
operator|.
name|getFinishedContainersSentToAMReference
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|containers
operator|.
name|addAll
argument_list|(
name|containerStatuses
argument_list|)
expr_stmt|;
block|}
return|return
name|containers
return|;
block|}
comment|// this is to test user can get client tokens only after the client token
comment|// master key is saved in the state store and also registered in
comment|// ClientTokenSecretManager
annotation|@
name|Test
DECL|method|testGetClientToken ()
specifier|public
name|void
name|testGetClientToken
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|isSecurityEnabled
argument_list|)
expr_stmt|;
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
comment|// before attempt is launched, can not get ClientToken
name|Token
argument_list|<
name|ClientToAMTokenIdentifier
argument_list|>
name|token
init|=
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
comment|// after attempt is launched , can get ClientToken
name|token
operator|=
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|token
operator|=
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|"clientuser"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
comment|// after attempt is killed, can not get Client Token
name|token
operator|=
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|token
operator|=
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|"clientuser"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
comment|// this is to test master key is saved in the secret manager only after
comment|// attempt is launched and in secure-mode
annotation|@
name|Test
DECL|method|testApplicationAttemptMasterKey ()
specifier|public
name|void
name|testApplicationAttemptMasterKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appid
init|=
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|boolean
name|isMasterKeyExisted
init|=
name|clientToAMTokenManager
operator|.
name|hasMasterKey
argument_list|(
name|appid
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSecurityEnabled
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|isMasterKeyExisted
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|clientToAMTokenManager
operator|.
name|getMasterKey
argument_list|(
name|appid
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isMasterKeyExisted
argument_list|)
expr_stmt|;
block|}
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|KILL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
comment|// after attempt is killed, can not get MasterKey
name|isMasterKeyExisted
operator|=
name|clientToAMTokenManager
operator|.
name|hasMasterKey
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|isMasterKeyExisted
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFailedToFailed ()
specifier|public
name|void
name|testFailedToFailed
parameter_list|()
block|{
comment|// create a failed attempt.
name|when
argument_list|(
name|submissionContext
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|getNumFailedAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContainerStatus
name|cs1
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"some error"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|appAttemptId
argument_list|,
name|cs1
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// should not kill containers when attempt fails.
name|assertTrue
argument_list|(
name|transferStateFromPreviousAttempt
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// failed attempt captured the container finished event.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerStatus
name|cs2
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|appAttemptId
argument_list|,
name|cs2
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|containerStatus
range|:
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|cs2
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerStatus
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerRemovedBeforeAllocate ()
specifier|public
name|void
name|testContainerRemovedBeforeAllocate
parameter_list|()
block|{
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
comment|// Mock the allocation of AM container
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|Allocation
name|allocation
init|=
name|mock
argument_list|(
name|Allocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|allocation
operator|.
name|getContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|,
name|any
argument_list|(
name|ContainerUpdates
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
comment|//container removed, so return null
name|when
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|CONTAINER_ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testContainersCleanupForLastAttempt ()
specifier|public
name|void
name|testContainersCleanupForLastAttempt
parameter_list|()
block|{
comment|// create a failed attempt.
name|applicationAttempt
operator|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|spyRMContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|submissionContext
operator|.
name|getResource
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getKeepContainersAcrossApplicationAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|submissionContext
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ContainerStatus
name|cs1
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"some error"
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|appAttemptId
argument_list|,
name|cs1
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|RUNNING
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|transferStateFromPreviousAttempt
argument_list|)
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testScheduleTransitionReplaceAMContainerRequestWithDefaults ()
specifier|public
name|void
name|testScheduleTransitionReplaceAMContainerRequestWithDefaults
parameter_list|()
block|{
name|YarnScheduler
name|mockScheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockScheduler
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerUpdates
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Allocation
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|public
name|Allocation
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ResourceRequest
name|rr
init|=
call|(
name|ResourceRequest
call|)
argument_list|(
operator|(
name|List
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// capacity shouldn't changed
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3333
argument_list|,
literal|1
argument_list|)
argument_list|,
name|rr
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"label-expression"
argument_list|,
name|rr
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
comment|// priority, #container, relax-locality will be changed
name|assertEquals
argument_list|(
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
argument_list|,
name|rr
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rr
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|rr
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
comment|// just return an empty allocation
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
name|s
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
return|return
operator|new
name|Allocation
argument_list|(
name|l
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|s
argument_list|,
name|s
argument_list|,
name|l
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// create an attempt.
name|applicationAttempt
operator|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|spyRMContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|submissionContext
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|"host1"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3333
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|,
literal|"label-expression"
argument_list|)
argument_list|)
argument_list|,
name|application
argument_list|)
expr_stmt|;
operator|new
name|RMAppAttemptImpl
operator|.
name|ScheduleTransition
argument_list|()
operator|.
name|transition
argument_list|(
operator|(
name|RMAppAttemptImpl
operator|)
name|applicationAttempt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNewToFailed ()
specifier|public
name|void
name|testNewToFailed
parameter_list|()
block|{
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|NEW
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptFailedState
argument_list|(
literal|null
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
expr_stmt|;
name|verifyTokenCount
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSubmittedToFailed ()
specifier|public
name|void
name|testSubmittedToFailed
parameter_list|()
block|{
name|submitApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|SUBMITTED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptFailedState
argument_list|(
literal|null
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testScheduledToFailed ()
specifier|public
name|void
name|testScheduledToFailed
parameter_list|()
block|{
name|scheduleApplicationAttempt
argument_list|()
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptFailedState
argument_list|(
literal|null
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAllocatedToFailedUserTriggeredFailEvent ()
specifier|public
name|void
name|testAllocatedToFailedUserTriggeredFailEvent
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|ALLOCATED
argument_list|,
name|applicationAttempt
operator|.
name|createApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
argument_list|)
expr_stmt|;
name|testAppAttemptFailedState
argument_list|(
name|amContainer
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRunningToFailedUserTriggeredFailEvent ()
specifier|public
name|void
name|testRunningToFailedUserTriggeredFailEvent
parameter_list|()
block|{
name|Container
name|amContainer
init|=
name|allocateApplicationAttempt
argument_list|()
decl_stmt|;
name|launchApplicationAttempt
argument_list|(
name|amContainer
argument_list|)
expr_stmt|;
name|runApplicationAttempt
argument_list|(
name|amContainer
argument_list|,
literal|"host"
argument_list|,
literal|8042
argument_list|,
literal|"oldtrackingurl"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptEventType
operator|.
name|FAIL
argument_list|,
name|FAILED_DIAGNOSTICS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINAL_SAVING
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|sendAttemptUpdateSavedEvent
argument_list|(
name|applicationAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|NodeId
name|anyNodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|applicationAttempt
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|amContainer
operator|.
name|getResource
argument_list|()
argument_list|)
argument_list|,
name|anyNodeId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicationAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|amContainer
argument_list|,
name|applicationAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|application
operator|.
name|getRanNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rmAppPageUrl
init|=
name|pjoin
argument_list|(
name|RM_WEBAPP_ADDR
argument_list|,
literal|"cluster"
argument_list|,
literal|"app"
argument_list|,
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmAppPageUrl
argument_list|,
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAMHostAndPortInvalidated
argument_list|()
expr_stmt|;
name|verifyApplicationAttemptFinished
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAMCrashAtAllocatedDiagnosticInfo (String diagnostics, int exitCode, boolean shouldCheckURL)
specifier|private
name|void
name|verifyAMCrashAtAllocatedDiagnosticInfo
parameter_list|(
name|String
name|diagnostics
parameter_list|,
name|int
name|exitCode
parameter_list|,
name|boolean
name|shouldCheckURL
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Diagnostic information does not point the logs to the users"
argument_list|,
name|diagnostics
operator|.
name|contains
argument_list|(
literal|"logs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Diagnostic information does not contain application attempt id"
argument_list|,
name|diagnostics
operator|.
name|contains
argument_list|(
name|applicationAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Diagnostic information does not contain application exit code"
argument_list|,
name|diagnostics
operator|.
name|contains
argument_list|(
literal|"exitCode: "
operator|+
name|exitCode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldCheckURL
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Diagnostic information does not contain application proxy URL"
argument_list|,
name|diagnostics
operator|.
name|contains
argument_list|(
name|applicationAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyTokenCount (ApplicationAttemptId appAttemptId, int count)
specifier|private
name|void
name|verifyTokenCount
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|verify
argument_list|(
name|amRMTokenManager
argument_list|,
name|times
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|applicationMasterFinished
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|verify
argument_list|(
name|clientToAMTokenManager
argument_list|,
name|times
argument_list|(
name|count
argument_list|)
argument_list|)
operator|.
name|unRegisterApplication
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|applicationAttempt
operator|.
name|createClientToken
argument_list|(
literal|"client"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyUrl (String url1, String url2)
specifier|private
name|void
name|verifyUrl
parameter_list|(
name|String
name|url1
parameter_list|,
name|String
name|url2
parameter_list|)
block|{
if|if
condition|(
name|url1
operator|==
literal|null
operator|||
name|url1
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|url2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|url1
argument_list|,
name|url2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAttemptFinalStateSaved ()
specifier|private
name|void
name|verifyAttemptFinalStateSaved
parameter_list|()
block|{
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|updateApplicationAttemptState
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptStateData
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAMHostAndPortInvalidated ()
specifier|private
name|void
name|verifyAMHostAndPortInvalidated
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"N/A"
argument_list|,
name|applicationAttempt
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|applicationAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyApplicationAttemptFinished (RMAppAttemptState state)
specifier|private
name|void
name|verifyApplicationAttemptFinished
parameter_list|(
name|RMAppAttemptState
name|state
parameter_list|)
block|{
name|ArgumentCaptor
argument_list|<
name|RMAppAttemptState
argument_list|>
name|finalState
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|RMAppAttemptState
operator|.
name|class
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|writer
argument_list|)
operator|.
name|applicationAttemptFinished
argument_list|(
name|any
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
argument_list|,
name|finalState
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|state
argument_list|,
name|finalState
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|finalState
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|RMAppAttemptState
operator|.
name|class
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|publisher
argument_list|)
operator|.
name|appAttemptFinished
argument_list|(
name|any
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
argument_list|,
name|finalState
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|state
argument_list|,
name|finalState
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

