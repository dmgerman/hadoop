begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|TestContinuousScheduling
specifier|public
class|class
name|TestContinuousScheduling
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|mockClock
specifier|private
name|ControlledClock
name|mockClock
decl_stmt|;
DECL|field|delayThresholdTimeMs
specifier|private
specifier|static
name|int
name|delayThresholdTimeMs
init|=
literal|1000
decl_stmt|;
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|public
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_DELAY_NODE_MS
argument_list|,
name|delayThresholdTimeMs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_DELAY_RACK_MS
argument_list|,
name|delayThresholdTimeMs
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|mockClock
operator|=
operator|new
name|ControlledClock
argument_list|()
expr_stmt|;
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|mockClock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|,
name|scheduler
operator|.
name|getContinuousSchedulingSleepMs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mockClock
argument_list|,
name|scheduler
operator|.
name|getClock
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBasic ()
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// Add one node
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue11"
argument_list|,
literal|"user11"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|triggerSchedulingAttempt
argument_list|()
expr_stmt|;
name|checkAppConsumption
argument_list|(
name|app
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testSortedNodes ()
specifier|public
name|void
name|testSortedNodes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add two nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// available resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|// send application request
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue11"
argument_list|,
literal|"user11"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|triggerSchedulingAttempt
argument_list|()
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|checkAppConsumption
argument_list|(
name|app
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// another request
name|request
operator|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|triggerSchedulingAttempt
argument_list|()
expr_stmt|;
name|checkAppConsumption
argument_list|(
name|app
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 containers should be assigned to 2 nodes
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RMContainer
argument_list|>
name|it
init|=
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithNodeRemoved ()
specifier|public
name|void
name|testWithNodeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable continuous scheduling, will invoke continuous
comment|// scheduling once manually
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|=
name|super
operator|.
name|createConfiguration
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// TODO: This test should really be using MockRM. For now starting stuff
comment|// that is needed at a bare minimum.
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// to initialize the master key
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Continuous scheduling should be disabled."
argument_list|,
operator|!
name|scheduler
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Add two nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We should have two alive nodes."
argument_list|,
literal|2
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove one node
name|NodeRemovedSchedulerEvent
name|removeNode1
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|removeNode1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We should only have one alive node."
argument_list|,
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invoke the continuous scheduling once
try|try
block|{
name|scheduler
operator|.
name|continuousSchedulingAttempt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception happened when doing continuous scheduling. "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInterruptedException ()
specifier|public
name|void
name|testInterruptedException
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable continuous scheduling, will invoke continuous
comment|// scheduling once manually
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|=
name|super
operator|.
name|createConfiguration
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// TODO: This test should really be using MockRM. For now starting stuff
comment|// that is needed at a bare minimum.
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// to initialize the master key
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|FairScheduler
name|spyScheduler
init|=
name|spy
argument_list|(
name|scheduler
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Continuous scheduling should be disabled."
argument_list|,
operator|!
name|spyScheduler
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|spyScheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We should have one alive node."
argument_list|,
literal|1
argument_list|,
name|spyScheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|InterruptedException
name|ie
init|=
operator|new
name|InterruptedException
argument_list|()
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|YarnRuntimeException
argument_list|(
name|ie
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spyScheduler
argument_list|)
operator|.
name|attemptScheduling
argument_list|(
name|isA
argument_list|(
name|FSSchedulerNode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Invoke the continuous scheduling once
try|try
block|{
name|spyScheduler
operator|.
name|continuousSchedulingAttempt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected InterruptedException to stop schedulingThread"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ie
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testThreadLifeCycle ()
specifier|public
name|void
name|testThreadLifeCycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|updateThread
init|=
name|scheduler
operator|.
name|updateThread
decl_stmt|;
name|Thread
name|schedulingThread
init|=
name|scheduler
operator|.
name|schedulingThread
decl_stmt|;
name|assertTrue
argument_list|(
name|updateThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|schedulingThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|int
name|numRetries
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|numRetries
operator|--
operator|>
literal|0
operator|&&
operator|(
name|updateThread
operator|.
name|isAlive
argument_list|()
operator|||
name|schedulingThread
operator|.
name|isAlive
argument_list|()
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|assertNotEquals
argument_list|(
literal|"One of the threads is still alive"
argument_list|,
literal|0
argument_list|,
name|numRetries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairSchedulerContinuousSchedulingInitTime ()
specifier|public
name|void
name|testFairSchedulerContinuousSchedulingInitTime
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|priorityValue
decl_stmt|;
name|Priority
name|priority
decl_stmt|;
name|FSAppAttempt
name|fsAppAttempt
decl_stmt|;
name|ResourceRequest
name|request1
decl_stmt|;
name|ResourceRequest
name|request2
decl_stmt|;
name|ApplicationAttemptId
name|id11
decl_stmt|;
name|priorityValue
operator|=
literal|1
expr_stmt|;
name|id11
operator|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createMockRMApp
argument_list|(
name|id11
argument_list|)
expr_stmt|;
name|priority
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
name|priorityValue
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id11
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id11
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fsAppAttempt
operator|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|id11
argument_list|)
expr_stmt|;
name|String
name|hostName
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
literal|1024
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|1
argument_list|,
name|hostName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|request1
operator|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|8
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|priorityValue
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|request2
operator|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|8
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|priorityValue
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id11
argument_list|,
name|ask1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|FSSchedulerNode
name|node
init|=
operator|(
name|FSSchedulerNode
operator|)
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Tick the time and let the fsApp startTime different from initScheduler
comment|// time
name|mockClock
operator|.
name|tickSec
argument_list|(
name|delayThresholdTimeMs
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|attemptScheduling
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|SchedulerRequestKey
argument_list|,
name|Long
argument_list|>
name|lastScheduledContainer
init|=
name|fsAppAttempt
operator|.
name|getLastScheduledContainer
argument_list|()
decl_stmt|;
name|long
name|initSchedulerTime
init|=
name|lastScheduledContainer
operator|.
name|get
argument_list|(
name|TestUtils
operator|.
name|toSchedulerKey
argument_list|(
name|priority
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|delayThresholdTimeMs
argument_list|,
name|initSchedulerTime
argument_list|)
expr_stmt|;
block|}
DECL|method|triggerSchedulingAttempt ()
specifier|private
name|void
name|triggerSchedulingAttempt
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|scheduler
operator|.
name|getConf
argument_list|()
operator|.
name|getContinuousSchedulingSleepMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

