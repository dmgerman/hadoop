begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestUtils
operator|.
name|toSchedulerKey
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSchedulerApplicationAttempt
specifier|public
class|class
name|TestSchedulerApplicationAttempt
block|{
DECL|field|nodeId
specifier|private
specifier|static
specifier|final
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"somehost"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testActiveUsersWhenMove ()
specifier|public
name|void
name|testActiveUsersWhenMove
parameter_list|()
block|{
specifier|final
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
name|Queue
name|parentQueue
init|=
name|createQueue
argument_list|(
literal|"parent"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Queue
name|queue1
init|=
name|createQueue
argument_list|(
literal|"queue1"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|Queue
name|queue2
init|=
name|createQueue
argument_list|(
literal|"queue2"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|Queue
name|queue3
init|=
name|createQueue
argument_list|(
literal|"queue3"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createAppAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getEpoch
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|app
init|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|appAttId
argument_list|,
name|user
argument_list|,
name|queue1
argument_list|,
name|queue1
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// Resource request
name|Resource
name|requestedResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1536
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Priority
name|requestedPriority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|requestedPriority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|requestedResource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|app
operator|.
name|updateResourceRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue1
operator|.
name|getAbstractUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// move app from queue1 to queue2
name|app
operator|.
name|move
argument_list|(
name|queue2
argument_list|)
expr_stmt|;
comment|// Active user count has to decrease from queue1
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue1
operator|.
name|getAbstractUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Increase the active user count in queue2 if the moved app has pending requests
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue2
operator|.
name|getAbstractUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocated container
name|RMContainer
name|container1
init|=
name|createRMContainer
argument_list|(
name|appAttId
argument_list|,
literal|1
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
name|app
operator|.
name|liveContainers
operator|.
name|put
argument_list|(
name|container1
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container1
argument_list|)
expr_stmt|;
name|SchedulerNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|app
operator|.
name|appSchedulingInfo
operator|.
name|allocate
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|node
argument_list|,
name|toSchedulerKey
argument_list|(
name|requestedPriority
argument_list|)
argument_list|,
name|container1
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Active user count has to decrease from queue2 due to app has NO pending requests
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue2
operator|.
name|getAbstractUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// move app from queue2 to queue3
name|app
operator|.
name|move
argument_list|(
name|queue3
argument_list|)
expr_stmt|;
comment|// Active user count in queue3 stays same if the moved app has NO pending requests
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue3
operator|.
name|getAbstractUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMove ()
specifier|public
name|void
name|testMove
parameter_list|()
block|{
specifier|final
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
name|Queue
name|parentQueue
init|=
name|createQueue
argument_list|(
literal|"parent"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Queue
name|oldQueue
init|=
name|createQueue
argument_list|(
literal|"old"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|Queue
name|newQueue
init|=
name|createQueue
argument_list|(
literal|"new"
argument_list|,
name|parentQueue
argument_list|)
decl_stmt|;
name|QueueMetrics
name|parentMetrics
init|=
name|parentQueue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|QueueMetrics
name|oldMetrics
init|=
name|oldQueue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|QueueMetrics
name|newMetrics
init|=
name|newQueue
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createAppAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getEpoch
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|app
init|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|appAttId
argument_list|,
name|user
argument_list|,
name|oldQueue
argument_list|,
name|oldQueue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|oldMetrics
operator|.
name|submitApp
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// confirm that containerId is calculated based on epoch.
name|assertEquals
argument_list|(
literal|0x30000000001L
argument_list|,
name|app
operator|.
name|getNewContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resource request
name|Resource
name|requestedResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1536
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Priority
name|requestedPriority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|requestedPriority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|requestedResource
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|app
operator|.
name|updateResourceRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
comment|// Allocated container
name|RMContainer
name|container1
init|=
name|createRMContainer
argument_list|(
name|appAttId
argument_list|,
literal|1
argument_list|,
name|requestedResource
argument_list|)
decl_stmt|;
name|app
operator|.
name|liveContainers
operator|.
name|put
argument_list|(
name|container1
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|container1
argument_list|)
expr_stmt|;
name|SchedulerNode
name|node
init|=
name|createNode
argument_list|()
decl_stmt|;
name|app
operator|.
name|appSchedulingInfo
operator|.
name|allocate
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|node
argument_list|,
name|toSchedulerKey
argument_list|(
name|requestedPriority
argument_list|)
argument_list|,
name|container1
operator|.
name|getContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reserved container
name|Priority
name|prio1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|reservedResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RMContainer
name|container2
init|=
name|createReservedRMContainer
argument_list|(
name|appAttId
argument_list|,
literal|1
argument_list|,
name|reservedResource
argument_list|,
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|prio1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
name|reservations
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|reservations
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|container2
argument_list|)
expr_stmt|;
name|app
operator|.
name|reservedContainers
operator|.
name|put
argument_list|(
name|toSchedulerKey
argument_list|(
name|prio1
argument_list|)
argument_list|,
name|reservations
argument_list|)
expr_stmt|;
name|oldMetrics
operator|.
name|reserveResource
argument_list|(
name|container2
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|user
argument_list|,
name|reservedResource
argument_list|)
expr_stmt|;
name|checkQueueMetrics
argument_list|(
name|oldMetrics
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1536
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
literal|3
argument_list|,
literal|3072
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkQueueMetrics
argument_list|(
name|newMetrics
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkQueueMetrics
argument_list|(
name|parentMetrics
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1536
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
literal|3
argument_list|,
literal|3072
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|app
operator|.
name|move
argument_list|(
name|newQueue
argument_list|)
expr_stmt|;
name|checkQueueMetrics
argument_list|(
name|oldMetrics
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkQueueMetrics
argument_list|(
name|newMetrics
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1536
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
literal|3
argument_list|,
literal|3072
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkQueueMetrics
argument_list|(
name|parentMetrics
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1536
argument_list|,
literal|2
argument_list|,
literal|2048
argument_list|,
literal|3
argument_list|,
literal|3072
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueueMetrics (QueueMetrics metrics, int activeApps, int runningApps, int allocMb, int allocVcores, int reservedMb, int reservedVcores, int pendingMb, int pendingVcores)
specifier|private
name|void
name|checkQueueMetrics
parameter_list|(
name|QueueMetrics
name|metrics
parameter_list|,
name|int
name|activeApps
parameter_list|,
name|int
name|runningApps
parameter_list|,
name|int
name|allocMb
parameter_list|,
name|int
name|allocVcores
parameter_list|,
name|int
name|reservedMb
parameter_list|,
name|int
name|reservedVcores
parameter_list|,
name|int
name|pendingMb
parameter_list|,
name|int
name|pendingVcores
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|activeApps
argument_list|,
name|metrics
operator|.
name|getActiveApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|runningApps
argument_list|,
name|metrics
operator|.
name|getAppsRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocMb
argument_list|,
name|metrics
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allocVcores
argument_list|,
name|metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reservedMb
argument_list|,
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|reservedVcores
argument_list|,
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pendingMb
argument_list|,
name|metrics
operator|.
name|getPendingMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pendingVcores
argument_list|,
name|metrics
operator|.
name|getPendingVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createNode ()
specifier|private
name|SchedulerNode
name|createNode
parameter_list|()
block|{
name|SchedulerNode
name|node
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"somehost"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"somerack"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
DECL|method|createReservedRMContainer (ApplicationAttemptId appAttId, int id, Resource resource, NodeId nodeId, Priority reservedPriority)
specifier|private
name|RMContainer
name|createReservedRMContainer
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|,
name|int
name|id
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|Priority
name|reservedPriority
parameter_list|)
block|{
name|RMContainer
name|container
init|=
name|createRMContainer
argument_list|(
name|appAttId
argument_list|,
name|id
argument_list|,
name|resource
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getReservedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getReservedSchedulerKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|toSchedulerKey
argument_list|(
name|reservedPriority
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getReservedNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|createRMContainer (ApplicationAttemptId appAttId, int id, Resource resource)
specifier|private
name|RMContainer
name|createRMContainer
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|,
name|int
name|id
parameter_list|,
name|Resource
name|resource
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttId
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|mock
argument_list|(
name|RMContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
return|return
name|rmContainer
return|;
block|}
DECL|method|createQueue (String name, Queue parent)
specifier|private
name|Queue
name|createQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|Queue
name|parent
parameter_list|)
block|{
return|return
name|createQueue
argument_list|(
name|name
argument_list|,
name|parent
argument_list|,
literal|1.0f
argument_list|)
return|;
block|}
DECL|method|createQueue (String name, Queue parent, float capacity)
specifier|private
name|Queue
name|createQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|Queue
name|parent
parameter_list|,
name|float
name|capacity
parameter_list|)
block|{
name|QueueMetrics
name|metrics
init|=
name|QueueMetrics
operator|.
name|forQueue
argument_list|(
name|name
argument_list|,
name|parent
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|QueueInfo
name|queueInfo
init|=
name|QueueInfo
operator|.
name|newInstance
argument_list|(
name|name
argument_list|,
name|capacity
argument_list|,
literal|1.0f
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ActiveUsersManager
name|activeUsersManager
init|=
operator|new
name|ActiveUsersManager
argument_list|(
name|metrics
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|mock
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|activeUsersManager
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueInfo
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
return|return
name|queue
return|;
block|}
DECL|method|createAppAttemptId (int appId, int attemptId)
specifier|private
name|ApplicationAttemptId
name|createAppAttemptId
parameter_list|(
name|int
name|appId
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
name|ApplicationId
name|appIdImpl
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|appId
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appIdImpl
argument_list|,
name|attemptId
argument_list|)
decl_stmt|;
return|return
name|attId
return|;
block|}
annotation|@
name|Test
DECL|method|testAppPercentages ()
specifier|public
name|void
name|testAppPercentages
parameter_list|()
throws|throws
name|Exception
block|{
name|FifoScheduler
name|scheduler
init|=
name|mock
argument_list|(
name|FifoScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createAppAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getEpoch
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
name|Queue
name|queue
init|=
name|createQueue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SchedulerApplicationAttempt
name|app
init|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|appAttId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// Resource request
name|Resource
name|requestedResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1536
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|app
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getQueueUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getClusterUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|queue
operator|=
name|createQueue
argument_list|(
literal|"test2"
argument_list|,
literal|null
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|appAttId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|app
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getQueueUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getClusterUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|app
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|app
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|app
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getQueueUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getClusterUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|queue
operator|=
name|createQueue
argument_list|(
literal|"test3"
argument_list|,
literal|null
argument_list|,
name|Float
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|app
operator|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|appAttId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// Resource request
name|app
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getQueueUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getClusterUsagePercentage
argument_list|()
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppPercentagesOnswitch ()
specifier|public
name|void
name|testAppPercentagesOnswitch
parameter_list|()
throws|throws
name|Exception
block|{
name|FifoScheduler
name|scheduler
init|=
name|mock
argument_list|(
name|FifoScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createAppAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getEpoch
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
name|Queue
name|queue
init|=
name|createQueue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SchedulerApplicationAttempt
name|app
init|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|appAttId
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// Resource request
name|Resource
name|requestedResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1536
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|app
operator|.
name|attemptResourceUsage
operator|.
name|incUsed
argument_list|(
name|requestedResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getQueueUsagePercentage
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|app
operator|.
name|getResourceUsageReport
argument_list|()
operator|.
name|getClusterUsagePercentage
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingOpportunityOverflow ()
specifier|public
name|void
name|testSchedulingOpportunityOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|createQueue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getEpoch
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|app
init|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|attemptId
argument_list|,
literal|"user"
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SchedulerRequestKey
name|schedulerKey
init|=
name|toSchedulerKey
argument_list|(
name|priority
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|addSchedulingOpportunity
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify the count is capped at MAX_VALUE and does not overflow
name|app
operator|.
name|setSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|,
name|app
operator|.
name|getSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|addSchedulingOpportunity
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|app
operator|.
name|getSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|addSchedulingOpportunity
argument_list|(
name|schedulerKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|app
operator|.
name|getSchedulingOpportunities
argument_list|(
name|schedulerKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHasPendingResourceRequest ()
specifier|public
name|void
name|testHasPendingResourceRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|createQueue
argument_list|(
literal|"test"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getEpoch
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|3L
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|app
init|=
operator|new
name|SchedulerApplicationAttempt
argument_list|(
name|attemptId
argument_list|,
literal|"user"
argument_list|,
name|queue
argument_list|,
name|queue
operator|.
name|getAbstractUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|unit
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1L
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Add a request for a container with a node label
name|requests
operator|.
name|add
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|unit
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|"label1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a request for a container without a node label
name|requests
operator|.
name|add
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|unit
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add unique allocation IDs so that the requests aren't considered
comment|// duplicates
name|requests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setAllocationRequestId
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|requests
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|setAllocationRequestId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|app
operator|.
name|updateResourceRequests
argument_list|(
name|requests
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reported no pending resource requests for no label when "
operator|+
literal|"resource requests for no label are pending (exclusive partitions)"
argument_list|,
name|app
operator|.
name|hasPendingResourceRequest
argument_list|(
literal|""
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reported no pending resource requests for label with pending "
operator|+
literal|"resource requests (exclusive partitions)"
argument_list|,
name|app
operator|.
name|hasPendingResourceRequest
argument_list|(
literal|"label1"
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Reported pending resource requests for label with no pending "
operator|+
literal|"resource requests (exclusive partitions)"
argument_list|,
name|app
operator|.
name|hasPendingResourceRequest
argument_list|(
literal|"label2"
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reported no pending resource requests for no label when "
operator|+
literal|"resource requests for no label are pending (relaxed partitions)"
argument_list|,
name|app
operator|.
name|hasPendingResourceRequest
argument_list|(
literal|""
argument_list|,
name|SchedulingMode
operator|.
name|IGNORE_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reported no pending resource requests for label with pending "
operator|+
literal|"resource requests (relaxed partitions)"
argument_list|,
name|app
operator|.
name|hasPendingResourceRequest
argument_list|(
literal|"label1"
argument_list|,
name|SchedulingMode
operator|.
name|IGNORE_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Reported no pending resource requests for label with no "
operator|+
literal|"pending resource requests (relaxed partitions)"
argument_list|,
name|app
operator|.
name|hasPendingResourceRequest
argument_list|(
literal|"label2"
argument_list|,
name|SchedulingMode
operator|.
name|IGNORE_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

