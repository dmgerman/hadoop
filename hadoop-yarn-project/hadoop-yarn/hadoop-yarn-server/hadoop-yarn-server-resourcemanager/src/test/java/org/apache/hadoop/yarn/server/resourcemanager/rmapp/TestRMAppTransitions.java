begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.rmapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMAppManagerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ApplicationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMAppTransitions
specifier|public
class|class
name|TestRMAppTransitions
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMAppTransitions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|maxAppAttempts
specifier|private
specifier|static
name|int
name|maxAppAttempts
init|=
literal|4
decl_stmt|;
DECL|field|appId
specifier|private
specifier|static
name|int
name|appId
init|=
literal|1
decl_stmt|;
DECL|field|rmDispatcher
specifier|private
name|DrainDispatcher
name|rmDispatcher
decl_stmt|;
comment|// ignore all the RM application attempt events
DECL|class|TestApplicationAttemptEventDispatcher
specifier|private
specifier|static
specifier|final
class|class
name|TestApplicationAttemptEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppAttemptEvent
argument_list|>
block|{
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|TestApplicationAttemptEventDispatcher (RMContext rmContext)
specifier|public
name|TestApplicationAttemptEventDispatcher
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppAttemptEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptEvent
name|event
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmApp
operator|.
name|getRMAppAttempt
argument_list|(
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for application "
operator|+
name|appId
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// handle all the RM application events - same as in ResourceManager.java
DECL|class|TestApplicationEventDispatcher
specifier|private
specifier|static
specifier|final
class|class
name|TestApplicationEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppEvent
argument_list|>
block|{
DECL|field|rmContext
specifier|private
specifier|final
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|TestApplicationEventDispatcher (RMContext rmContext)
specifier|public
name|TestApplicationEventDispatcher
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
block|{
name|this
operator|.
name|rmContext
operator|=
name|rmContext
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle (RMAppEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppEvent
name|event
parameter_list|)
block|{
name|ApplicationId
name|appID
init|=
name|event
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMApp
name|rmApp
init|=
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appID
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmApp
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rmApp
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in handling event type "
operator|+
name|event
operator|.
name|getType
argument_list|()
operator|+
literal|" for application "
operator|+
name|appID
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// handle all the RM application manager events - same as in
comment|// ResourceManager.java
DECL|class|TestApplicationManagerEventDispatcher
specifier|private
specifier|static
specifier|final
class|class
name|TestApplicationManagerEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMAppManagerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMAppManagerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppManagerEvent
name|event
parameter_list|)
block|{     }
block|}
comment|// handle all the scheduler events - same as in ResourceManager.java
DECL|class|TestSchedulerEventDispatcher
specifier|private
specifier|static
specifier|final
class|class
name|TestSchedulerEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{     }
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rmDispatcher
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|ContainerAllocationExpirer
name|containerAllocationExpirer
init|=
name|mock
argument_list|(
name|ContainerAllocationExpirer
operator|.
name|class
argument_list|)
decl_stmt|;
name|AMLivelinessMonitor
name|amLivelinessMonitor
init|=
name|mock
argument_list|(
name|AMLivelinessMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|AMLivelinessMonitor
name|amFinishingMonitor
init|=
name|mock
argument_list|(
name|AMLivelinessMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMStateStore
name|store
init|=
name|mock
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|this
operator|.
name|rmContext
operator|=
operator|new
name|RMContextImpl
argument_list|(
name|rmDispatcher
argument_list|,
name|store
argument_list|,
name|containerAllocationExpirer
argument_list|,
name|amLivelinessMonitor
argument_list|,
name|amFinishingMonitor
argument_list|,
literal|null
argument_list|,
operator|new
name|ApplicationTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppAttemptEventType
operator|.
name|class
argument_list|,
operator|new
name|TestApplicationAttemptEventDispatcher
argument_list|(
name|this
operator|.
name|rmContext
argument_list|)
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppEventType
operator|.
name|class
argument_list|,
operator|new
name|TestApplicationEventDispatcher
argument_list|(
name|rmContext
argument_list|)
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|RMAppManagerEventType
operator|.
name|class
argument_list|,
operator|new
name|TestApplicationManagerEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
operator|new
name|TestSchedulerEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|createNewTestApp (ApplicationSubmissionContext submissionContext)
specifier|protected
name|RMApp
name|createNewTestApp
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
name|appId
operator|++
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|MockApps
operator|.
name|newUserName
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|MockApps
operator|.
name|newAppName
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|MockApps
operator|.
name|newQueue
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// ensure max application attempts set to known value
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|maxAppAttempts
argument_list|)
expr_stmt|;
name|YarnScheduler
name|scheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|rmContext
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
if|if
condition|(
name|submissionContext
operator|==
literal|null
condition|)
block|{
name|submissionContext
operator|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
expr_stmt|;
block|}
name|RMApp
name|application
init|=
operator|new
name|RMAppImpl
argument_list|(
name|applicationId
argument_list|,
name|rmContext
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|submissionContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|testAppStartState
argument_list|(
name|applicationId
argument_list|,
name|user
argument_list|,
name|name
argument_list|,
name|queue
argument_list|,
name|application
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
comment|// Test expected newly created app state
DECL|method|testAppStartState (ApplicationId applicationId, String user, String name, String queue, RMApp application)
specifier|private
specifier|static
name|void
name|testAppStartState
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|queue
parameter_list|,
name|RMApp
name|application
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"application start time is not greater then 0"
argument_list|,
name|application
operator|.
name|getStartTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"application start time is before currentTime"
argument_list|,
name|application
operator|.
name|getStartTime
argument_list|()
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application user is not correct"
argument_list|,
name|user
argument_list|,
name|application
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application id is not correct"
argument_list|,
name|applicationId
argument_list|,
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application progress is not correct"
argument_list|,
operator|(
name|float
operator|)
literal|0.0
argument_list|,
name|application
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application queue is not correct"
argument_list|,
name|queue
argument_list|,
name|application
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application name is not correct"
argument_list|,
name|name
argument_list|,
name|application
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application finish time is not 0 and should be"
argument_list|,
literal|0
argument_list|,
name|application
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application tracking url is not correct"
argument_list|,
literal|null
argument_list|,
name|application
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuilder
name|diag
init|=
name|application
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application diagnostics is not correct"
argument_list|,
literal|0
argument_list|,
name|diag
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test to make sure times are set when app finishes
DECL|method|assertStartTimeSet (RMApp application)
specifier|private
specifier|static
name|void
name|assertStartTimeSet
parameter_list|(
name|RMApp
name|application
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"application start time is not greater then 0"
argument_list|,
name|application
operator|.
name|getStartTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"application start time is before currentTime"
argument_list|,
name|application
operator|.
name|getStartTime
argument_list|()
operator|<=
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAppState (RMAppState state, RMApp application)
specifier|private
specifier|static
name|void
name|assertAppState
parameter_list|(
name|RMAppState
name|state
parameter_list|,
name|RMApp
name|application
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application state should have been "
operator|+
name|state
argument_list|,
name|state
argument_list|,
name|application
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFinalAppStatus (FinalApplicationStatus status, RMApp application)
specifier|private
specifier|static
name|void
name|assertFinalAppStatus
parameter_list|(
name|FinalApplicationStatus
name|status
parameter_list|,
name|RMApp
name|application
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Final application status should have been "
operator|+
name|status
argument_list|,
name|status
argument_list|,
name|application
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test to make sure times are set when app finishes
DECL|method|assertTimesAtFinish (RMApp application)
specifier|private
specifier|static
name|void
name|assertTimesAtFinish
parameter_list|(
name|RMApp
name|application
parameter_list|)
block|{
name|assertStartTimeSet
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"application finish time is not greater then 0"
argument_list|,
operator|(
name|application
operator|.
name|getFinishTime
argument_list|()
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"application finish time is not>= then start time"
argument_list|,
operator|(
name|application
operator|.
name|getFinishTime
argument_list|()
operator|>=
name|application
operator|.
name|getStartTime
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertKilled (RMApp application)
specifier|private
specifier|static
name|void
name|assertKilled
parameter_list|(
name|RMApp
name|application
parameter_list|)
block|{
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|assertFinalAppStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|StringBuilder
name|diag
init|=
name|application
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application diagnostics is not correct"
argument_list|,
literal|"Application killed by user."
argument_list|,
name|diag
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAppAndAttemptKilled (RMApp application)
specifier|private
specifier|static
name|void
name|assertAppAndAttemptKilled
parameter_list|(
name|RMApp
name|application
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|assertKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertFailed (RMApp application, String regex)
specifier|private
specifier|static
name|void
name|assertFailed
parameter_list|(
name|RMApp
name|application
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|assertFinalAppStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|StringBuilder
name|diag
init|=
name|application
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"application diagnostics is not correct"
argument_list|,
name|diag
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateAppNewSaving ( ApplicationSubmissionContext submissionContext)
specifier|protected
name|RMApp
name|testCreateAppNewSaving
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
throws|throws
name|IOException
block|{
name|RMApp
name|application
init|=
name|createNewTestApp
argument_list|(
name|submissionContext
argument_list|)
decl_stmt|;
comment|// NEW => NEW_SAVING event RMAppEventType.START
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertStartTimeSet
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|application
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|testCreateAppSubmittedNoRecovery ( ApplicationSubmissionContext submissionContext)
specifier|protected
name|RMApp
name|testCreateAppSubmittedNoRecovery
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
throws|throws
name|IOException
block|{
name|RMApp
name|application
init|=
name|testCreateAppNewSaving
argument_list|(
name|submissionContext
argument_list|)
decl_stmt|;
comment|// NEW_SAVING => SUBMITTED event RMAppEventType.APP_SAVED
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppStoredEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertStartTimeSet
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|application
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|testCreateAppSubmittedRecovery ( ApplicationSubmissionContext submissionContext)
specifier|protected
name|RMApp
name|testCreateAppSubmittedRecovery
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
throws|throws
name|IOException
block|{
name|RMApp
name|application
init|=
name|createNewTestApp
argument_list|(
name|submissionContext
argument_list|)
decl_stmt|;
comment|// NEW => SUBMITTED event RMAppEventType.RECOVER
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertStartTimeSet
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|application
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|testCreateAppAccepted ( ApplicationSubmissionContext submissionContext)
specifier|protected
name|RMApp
name|testCreateAppAccepted
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
throws|throws
name|IOException
block|{
name|RMApp
name|application
init|=
name|testCreateAppSubmittedNoRecovery
argument_list|(
name|submissionContext
argument_list|)
decl_stmt|;
comment|// SUBMITTED => ACCEPTED event RMAppEventType.APP_ACCEPTED
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertStartTimeSet
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|application
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|testCreateAppRunning ( ApplicationSubmissionContext submissionContext)
specifier|protected
name|RMApp
name|testCreateAppRunning
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
throws|throws
name|IOException
block|{
name|RMApp
name|application
init|=
name|testCreateAppAccepted
argument_list|(
name|submissionContext
argument_list|)
decl_stmt|;
comment|// ACCEPTED => RUNNING event RMAppEventType.ATTEMPT_REGISTERED
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_REGISTERED
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertStartTimeSet
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|assertFinalAppStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
name|application
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|testCreateAppFinishing ( ApplicationSubmissionContext submissionContext)
specifier|protected
name|RMApp
name|testCreateAppFinishing
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|)
throws|throws
name|IOException
block|{
comment|// unmanaged AMs don't use the FINISHING state
assert|assert
name|submissionContext
operator|==
literal|null
operator|||
operator|!
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
assert|;
name|RMApp
name|application
init|=
name|testCreateAppRunning
argument_list|(
name|submissionContext
argument_list|)
decl_stmt|;
comment|// RUNNING => FINISHING event RMAppEventType.ATTEMPT_FINISHING
name|RMAppEvent
name|finishingEvent
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FINISHING
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|finishingEvent
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|testCreateAppFinished ( ApplicationSubmissionContext submissionContext, String diagnostics)
specifier|protected
name|RMApp
name|testCreateAppFinished
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|String
name|diagnostics
parameter_list|)
throws|throws
name|IOException
block|{
comment|// unmanaged AMs don't use the FINISHING state
name|RMApp
name|application
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|submissionContext
operator|!=
literal|null
operator|&&
name|submissionContext
operator|.
name|getUnmanagedAM
argument_list|()
condition|)
block|{
name|application
operator|=
name|testCreateAppRunning
argument_list|(
name|submissionContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|application
operator|=
name|testCreateAppFinishing
argument_list|(
name|submissionContext
argument_list|)
expr_stmt|;
block|}
comment|// RUNNING/FINISHING => FINISHED event RMAppEventType.ATTEMPT_FINISHED
name|RMAppEvent
name|finishedEvent
init|=
operator|new
name|RMAppFinishedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|diagnostics
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|finishedEvent
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
comment|// finished without a proper unregister implies failed
name|assertFinalAppStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Finished app missing diagnostics"
argument_list|,
name|application
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|indexOf
argument_list|(
name|diagnostics
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|application
return|;
block|}
annotation|@
name|Test
DECL|method|testUnmanagedApp ()
specifier|public
name|void
name|testUnmanagedApp
parameter_list|()
throws|throws
name|IOException
block|{
name|ApplicationSubmissionContext
name|subContext
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|subContext
operator|.
name|setUnmanagedAM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// test success path
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testUnmanagedAppSuccessPath ---"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|diagMsg
init|=
literal|"some diagnostics"
decl_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppFinished
argument_list|(
name|subContext
argument_list|,
name|diagMsg
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Finished app missing diagnostics"
argument_list|,
name|application
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|indexOf
argument_list|(
name|diagMsg
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// test app fails after 1 app attempt failure
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testUnmanagedAppFailPath ---"
argument_list|)
expr_stmt|;
name|application
operator|=
name|testCreateAppRunning
argument_list|(
name|subContext
argument_list|)
expr_stmt|;
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|assertFailed
argument_list|(
name|application
argument_list|,
literal|".*Unmanaged application.*Failing the application.*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppSuccessPath ()
specifier|public
name|void
name|testAppSuccessPath
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppSuccessPath ---"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|diagMsg
init|=
literal|"some diagnostics"
decl_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppFinished
argument_list|(
literal|null
argument_list|,
name|diagMsg
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Finished application missing diagnostics"
argument_list|,
name|application
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|indexOf
argument_list|(
name|diagMsg
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppRecoverPath ()
specifier|public
name|void
name|testAppRecoverPath
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppRecoverPath ---"
argument_list|)
expr_stmt|;
name|testCreateAppSubmittedRecovery
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppNewKill ()
specifier|public
name|void
name|testAppNewKill
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppNewKill ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|createNewTestApp
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// NEW => KILLED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppNewReject ()
specifier|public
name|void
name|testAppNewReject
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppNewReject ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|createNewTestApp
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// NEW => FAILED event RMAppEventType.APP_REJECTED
name|String
name|rejectedText
init|=
literal|"Test Application Rejected"
decl_stmt|;
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppRejectedEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|rejectedText
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFailed
argument_list|(
name|application
argument_list|,
name|rejectedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppNewSavingKill ()
specifier|public
name|void
name|testAppNewSavingKill
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppNewSavingKill ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppNewSaving
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// NEW_SAVING => KILLED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppNewSavingReject ()
specifier|public
name|void
name|testAppNewSavingReject
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppNewSavingReject ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppNewSaving
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// NEW_SAVING => FAILED event RMAppEventType.APP_REJECTED
name|String
name|rejectedText
init|=
literal|"Test Application Rejected"
decl_stmt|;
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppRejectedEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|rejectedText
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFailed
argument_list|(
name|application
argument_list|,
name|rejectedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppSubmittedRejected ()
specifier|public
name|void
name|testAppSubmittedRejected
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppSubmittedRejected ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppSubmittedNoRecovery
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// SUBMITTED => FAILED event RMAppEventType.APP_REJECTED
name|String
name|rejectedText
init|=
literal|"app rejected"
decl_stmt|;
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppRejectedEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|rejectedText
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFailed
argument_list|(
name|application
argument_list|,
name|rejectedText
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppSubmittedKill ()
specifier|public
name|void
name|testAppSubmittedKill
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppSubmittedKill---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppSubmittedNoRecovery
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// SUBMITTED => KILLED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppAndAttemptKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAcceptedFailed ()
specifier|public
name|void
name|testAppAcceptedFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppAcceptedFailed ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppAccepted
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// ACCEPTED => ACCEPTED event RMAppEventType.RMAppEventType.ATTEMPT_FAILED
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|maxAppAttempts
condition|;
name|i
operator|++
control|)
block|{
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
comment|// ACCEPTED => FAILED event RMAppEventType.RMAppEventType.ATTEMPT_FAILED
comment|// after max application attempts
name|String
name|message
init|=
literal|"Test fail"
decl_stmt|;
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFailed
argument_list|(
name|application
argument_list|,
literal|".*"
operator|+
name|message
operator|+
literal|".*Failing the application.*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAcceptedKill ()
specifier|public
name|void
name|testAppAcceptedKill
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppAcceptedKill ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppAccepted
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// ACCEPTED => KILLED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppAndAttemptKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppRunningKill ()
specifier|public
name|void
name|testAppRunningKill
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppRunningKill ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppRunning
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// RUNNING => KILLED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertKilled
argument_list|(
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppRunningFailed ()
specifier|public
name|void
name|testAppRunningFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppRunningFailed ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppRunning
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|int
name|expectedAttemptId
init|=
literal|1
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAttemptId
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// RUNNING => FAILED/RESTARTING event RMAppEventType.ATTEMPT_FAILED
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|maxAppAttempts
condition|;
name|i
operator|++
control|)
block|{
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|appAttempt
operator|=
name|application
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|++
name|expectedAttemptId
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|APP_ACCEPTED
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_REGISTERED
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
comment|// RUNNING => FAILED/RESTARTING event RMAppEventType.ATTEMPT_FAILED
comment|// after max application attempts
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFailed
argument_list|(
name|application
argument_list|,
literal|".*Failing the application.*"
argument_list|)
expr_stmt|;
comment|// FAILED => FAILED event RMAppEventType.KILL
name|event
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertFailed
argument_list|(
name|application
argument_list|,
literal|".*Failing the application.*"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppFinishingKill ()
specifier|public
name|void
name|testAppFinishingKill
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppFinishedFinished ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppFinishing
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// FINISHING => FINISHED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppFinishedFinished ()
specifier|public
name|void
name|testAppFinishedFinished
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppFinishedFinished ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppFinished
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// FINISHED => FINISHED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|StringBuilder
name|diag
init|=
name|application
operator|.
name|getDiagnostics
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"application diagnostics is not correct"
argument_list|,
literal|""
argument_list|,
name|diag
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppFailedFailed ()
specifier|public
name|void
name|testAppFailedFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppFailedFailed ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppNewSaving
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// NEW_SAVING => FAILED event RMAppEventType.APP_REJECTED
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppRejectedEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// FAILED => FAILED event RMAppEventType.KILL
name|event
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// FAILED => FAILED event RMAppEventType.APP_SAVED
name|event
operator|=
operator|new
name|RMAppStoredEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppKilledKilled ()
specifier|public
name|void
name|testAppKilledKilled
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testAppKilledKilled ---"
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
name|testCreateAppRunning
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// RUNNING => KILLED event RMAppEventType.KILL
name|RMAppEvent
name|event
init|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
decl_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// KILLED => KILLED event RMAppEventType.ATTEMPT_FINISHED
name|event
operator|=
operator|new
name|RMAppFinishedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// KILLED => KILLED event RMAppEventType.ATTEMPT_FAILED
name|event
operator|=
operator|new
name|RMAppFailedAttemptEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_FAILED
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// KILLED => KILLED event RMAppEventType.ATTEMPT_KILLED
name|event
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|ATTEMPT_KILLED
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// KILLED => KILLED event RMAppEventType.KILL
name|event
operator|=
operator|new
name|RMAppEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|// KILLED => KILLED event RMAppEventType.APP_SAVED
name|event
operator|=
operator|new
name|RMAppStoredEvent
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|rmDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTimesAtFinish
argument_list|(
name|application
argument_list|)
expr_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|application
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAppReport ()
specifier|public
name|void
name|testGetAppReport
parameter_list|()
block|{
name|RMApp
name|app
init|=
name|createNewTestApp
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertAppState
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|ApplicationReport
name|report
init|=
name|app
operator|.
name|createAndGetApplicationReport
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|report
operator|.
name|getApplicationResourceUsageReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

