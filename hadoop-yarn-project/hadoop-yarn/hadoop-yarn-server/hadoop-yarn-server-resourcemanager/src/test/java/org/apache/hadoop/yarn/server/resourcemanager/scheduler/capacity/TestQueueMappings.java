begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|SimpleGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestQueueMappings
specifier|public
class|class
name|TestQueueMappings
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQueueMappings
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|Q1
specifier|private
specifier|static
specifier|final
name|String
name|Q1
init|=
literal|"q1"
decl_stmt|;
DECL|field|Q2
specifier|private
specifier|static
specifier|final
name|String
name|Q2
init|=
literal|"q2"
decl_stmt|;
DECL|field|Q1_PATH
specifier|private
specifier|final
specifier|static
name|String
name|Q1_PATH
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|Q1
decl_stmt|;
DECL|field|Q2_PATH
specifier|private
specifier|final
specifier|static
name|String
name|Q2_PATH
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|Q2
decl_stmt|;
DECL|field|resourceManager
specifier|private
name|MockRM
name|resourceManager
decl_stmt|;
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping the resource manager"
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setupQueueConfiguration (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q1
block|,
name|Q2
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q1_PATH
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q2_PATH
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues q1 and q2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQueueMapping ()
specifier|public
name|void
name|testQueueMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ENABLE_QUEUE_MAPPING_OVERRIDE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// configuration parsing tests - negative test cases
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"x:a:b"
argument_list|,
literal|"invalid specifier"
argument_list|)
expr_stmt|;
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"u:a"
argument_list|,
literal|"no queue specified"
argument_list|)
expr_stmt|;
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"g:a"
argument_list|,
literal|"no queue specified"
argument_list|)
expr_stmt|;
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"u:a:b,g:a"
argument_list|,
literal|"multiple mappings with invalid mapping"
argument_list|)
expr_stmt|;
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"u:a:b,g:a:d:e"
argument_list|,
literal|"too many path segments"
argument_list|)
expr_stmt|;
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"u::"
argument_list|,
literal|"empty source and queue"
argument_list|)
expr_stmt|;
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"u:"
argument_list|,
literal|"missing source missing queue"
argument_list|)
expr_stmt|;
name|checkInvalidQMapping
argument_list|(
name|conf
argument_list|,
name|cs
argument_list|,
literal|"u:a:"
argument_list|,
literal|"empty source missing q"
argument_list|)
expr_stmt|;
comment|// simple base case for mapping user to queue
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"u:a:"
operator|+
name|Q1
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkQMapping
argument_list|(
literal|"a"
argument_list|,
name|Q1
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// group mapping test
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"g:agroup:"
operator|+
name|Q1
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkQMapping
argument_list|(
literal|"a"
argument_list|,
name|Q1
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// %user tests
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"u:%user:"
operator|+
name|Q2
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkQMapping
argument_list|(
literal|"a"
argument_list|,
name|Q2
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"u:%user:%user"
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkQMapping
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// %primary_group tests
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"u:%user:%primary_group"
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkQMapping
argument_list|(
literal|"a"
argument_list|,
literal|"agroup"
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// non-primary group mapping
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"g:asubgroup1:"
operator|+
name|Q1
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkQMapping
argument_list|(
literal|"a"
argument_list|,
name|Q1
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// space trimming
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"    u : a : "
operator|+
name|Q1
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkQMapping
argument_list|(
literal|"a"
argument_list|,
name|Q1
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ENABLE_QUEUE_MAPPING_OVERRIDE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"u:user:"
operator|+
name|Q1
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// ensure that if the user specifies a Q that is still overriden
name|checkAppQueue
argument_list|(
name|resourceManager
argument_list|,
literal|"user"
argument_list|,
name|Q2
argument_list|,
name|Q1
argument_list|)
expr_stmt|;
comment|// toggle admin override and retry
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ENABLE_QUEUE_MAPPING_OVERRIDE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"u:user:"
operator|+
name|Q1
argument_list|)
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|checkAppQueue
argument_list|(
name|resourceManager
argument_list|,
literal|"user"
argument_list|,
name|Q2
argument_list|,
name|Q2
argument_list|)
expr_stmt|;
comment|// ensure that if a user does not specify a Q, the user mapping is used
name|checkAppQueue
argument_list|(
name|resourceManager
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|Q1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"g:usergroup:"
operator|+
name|Q2
argument_list|)
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// ensure that if a user does not specify a Q, the group mapping is used
name|checkAppQueue
argument_list|(
name|resourceManager
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|Q2
argument_list|)
expr_stmt|;
comment|// if the mapping specifies a queue that does not exist, the job is rejected
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
literal|"u:user:non_existent_queue"
argument_list|)
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioex
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"queue initialization failed for non-existent q"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|checkAppQueue (MockRM resourceManager, String user, String submissionQueue, String expected)
specifier|private
name|void
name|checkAppQueue
parameter_list|(
name|MockRM
name|resourceManager
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|submissionQueue
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|RMApp
name|app
init|=
name|resourceManager
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
name|user
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
name|submissionQueue
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RMAppState
name|expectedState
init|=
name|expected
operator|.
name|isEmpty
argument_list|()
condition|?
name|RMAppState
operator|.
name|FAILED
else|:
name|RMAppState
operator|.
name|ACCEPTED
decl_stmt|;
name|resourceManager
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|expectedState
argument_list|)
expr_stmt|;
comment|// get scheduler app
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerApplication
name|schedulerApp
init|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|queue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|schedulerApp
operator|!=
literal|null
condition|)
block|{
name|queue
operator|=
name|schedulerApp
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected "
operator|+
name|expected
operator|+
literal|" actual "
operator|+
name|queue
argument_list|,
name|expected
operator|.
name|equals
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkInvalidQMapping (YarnConfiguration conf, CapacityScheduler cs, String mapping, String reason)
specifier|private
name|void
name|checkInvalidQMapping
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|,
name|CapacityScheduler
name|cs
parameter_list|,
name|String
name|mapping
parameter_list|,
name|String
name|reason
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_MAPPING
argument_list|,
name|mapping
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"invalid mapping did not throw exception for "
operator|+
name|reason
argument_list|,
name|fail
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQMapping (String user, String expected, CapacityScheduler cs)
specifier|private
name|void
name|checkQMapping
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|expected
parameter_list|,
name|CapacityScheduler
name|cs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|actual
init|=
name|cs
operator|.
name|getMappedQueueForTest
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"expected "
operator|+
name|expected
operator|+
literal|" actual "
operator|+
name|actual
argument_list|,
name|expected
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

