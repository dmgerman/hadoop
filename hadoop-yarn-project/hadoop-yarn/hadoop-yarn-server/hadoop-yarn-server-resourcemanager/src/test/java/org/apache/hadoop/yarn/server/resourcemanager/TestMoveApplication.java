begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMoveApplication
specifier|public
class|class
name|TestMoveApplication
block|{
DECL|field|resourceManager
specifier|private
name|ResourceManager
name|resourceManager
init|=
literal|null
decl_stmt|;
DECL|field|failMove
specifier|private
specifier|static
name|boolean
name|failMove
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoSchedulerWithMove
operator|.
name|class
argument_list|,
name|FifoSchedulerWithMove
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|failMove
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveRejectedByScheduler ()
specifier|public
name|void
name|testMoveRejectedByScheduler
parameter_list|()
throws|throws
name|Exception
block|{
name|failMove
operator|=
literal|true
expr_stmt|;
comment|// Submit application
name|Application
name|application
init|=
operator|new
name|Application
argument_list|(
literal|"user1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// Wait for app to be accepted
name|RMApp
name|app
init|=
name|resourceManager
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|app
operator|.
name|getState
argument_list|()
operator|!=
name|RMAppState
operator|.
name|ACCEPTED
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|ClientRMService
name|clientRMService
init|=
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
try|try
block|{
comment|// FIFO scheduler does not support moves
name|clientRMService
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"newqueue"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Move not supported"
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMoveTooLate ()
specifier|public
name|void
name|testMoveTooLate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Submit application
name|Application
name|application
init|=
operator|new
name|Application
argument_list|(
literal|"user1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|application
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|application
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ClientRMService
name|clientRMService
init|=
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
comment|// Kill the application
name|clientRMService
operator|.
name|forceKillApplication
argument_list|(
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
comment|// wait until it's dead
while|while
condition|(
name|rmApp
operator|.
name|getState
argument_list|()
operator|!=
name|RMAppState
operator|.
name|KILLED
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|clientRMService
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|"newqueue"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|YarnException
operator|.
name|class
argument_list|,
name|ex
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App in KILLED state cannot be moved."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
DECL|method|testMoveSuccessful ()
name|void
name|testMoveSuccessful
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|ClientRMService
name|clientRMService
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
comment|// FIFO scheduler does not support moves
name|clientRMService
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"newqueue"
argument_list|)
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"newqueue"
argument_list|,
name|rmApp
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveRejectedByPermissions ()
specifier|public
name|void
name|testMoveRejectedByPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|failMove
operator|=
literal|true
expr_stmt|;
comment|// Submit application
specifier|final
name|Application
name|application
init|=
operator|new
name|Application
argument_list|(
literal|"user1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application
operator|.
name|submit
argument_list|()
expr_stmt|;
specifier|final
name|ClientRMService
name|clientRMService
init|=
name|resourceManager
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
try|try
block|{
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"otheruser"
argument_list|)
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|MoveApplicationAcrossQueuesResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MoveApplicationAcrossQueuesResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|clientRMService
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|application
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"newqueue"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have hit exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|AccessControlException
operator|.
name|class
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FifoSchedulerWithMove
specifier|public
specifier|static
class|class
name|FifoSchedulerWithMove
extends|extends
name|FifoScheduler
block|{
annotation|@
name|Override
DECL|method|moveApplication (ApplicationId appId, String newQueue)
specifier|public
name|String
name|moveApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|newQueue
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|failMove
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Move not supported"
argument_list|)
throw|;
block|}
return|return
name|newQueue
return|;
block|}
annotation|@
name|Override
DECL|method|checkAccess (UserGroupInformation callerUGI, QueueACL acl, String queueName)
specifier|public
specifier|synchronized
name|boolean
name|checkAccess
parameter_list|(
name|UserGroupInformation
name|callerUGI
parameter_list|,
name|QueueACL
name|acl
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
return|return
name|acl
operator|!=
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
return|;
block|}
annotation|@
name|Override
DECL|method|preValidateMoveApplication (ApplicationId appId, String newQueue)
specifier|public
name|void
name|preValidateMoveApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|newQueue
parameter_list|)
throws|throws
name|YarnException
block|{
if|if
condition|(
name|failMove
condition|)
block|{
throw|throw
operator|new
name|YarnException
argument_list|(
literal|"Move not supported"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

