begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|CallerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|ApplicationHistoryServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|AppAttemptMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ApplicationMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|ContainerMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|MemoryTimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|MemoryTimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|TimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSystemMetricsPublisher
specifier|public
class|class
name|TestSystemMetricsPublisher
block|{
DECL|field|timelineServer
specifier|private
specifier|static
name|ApplicationHistoryServer
name|timelineServer
decl_stmt|;
DECL|field|metricsPublisher
specifier|private
specifier|static
name|TimelineServiceV1Publisher
name|metricsPublisher
decl_stmt|;
DECL|field|store
specifier|private
specifier|static
name|TimelineStore
name|store
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_STORE
argument_list|,
name|MemoryTimelineStore
operator|.
name|class
argument_list|,
name|TimelineStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_STATE_STORE_CLASS
argument_list|,
name|MemoryTimelineStateStore
operator|.
name|class
argument_list|,
name|TimelineStateStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|timelineServer
operator|=
operator|new
name|ApplicationHistoryServer
argument_list|()
expr_stmt|;
name|timelineServer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|timelineServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|store
operator|=
name|timelineServer
operator|.
name|getTimelineStore
argument_list|()
expr_stmt|;
name|metricsPublisher
operator|=
operator|new
name|TimelineServiceV1Publisher
argument_list|()
expr_stmt|;
name|metricsPublisher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|metricsPublisher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|metricsPublisher
operator|!=
literal|null
condition|)
block|{
name|metricsPublisher
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timelineServer
operator|!=
literal|null
condition|)
block|{
name|timelineServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPublishApplicationMetrics ()
specifier|public
name|void
name|testPublishApplicationMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|stateUpdateTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|createRMApp
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|metricsPublisher
operator|.
name|appCreated
argument_list|(
name|app
argument_list|,
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|when
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"new test queue"
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|asc
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"high-cpu"
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerLaunchContext
operator|.
name|getCommands
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"java -Xmx1024m"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|asc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|metricsPublisher
operator|.
name|appUpdated
argument_list|(
name|app
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metricsPublisher
operator|.
name|appUpdated
argument_list|(
name|app
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
name|metricsPublisher
operator|.
name|appStateUpdated
argument_list|(
name|app
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
argument_list|,
name|stateUpdateTimeStamp
argument_list|)
expr_stmt|;
name|metricsPublisher
operator|.
name|appFinished
argument_list|(
name|app
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|metricsPublisher
operator|.
name|appACLsUpdated
argument_list|(
name|app
argument_list|,
literal|"uers1,user2"
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// in case user doesn't specify the ACLs
name|metricsPublisher
operator|.
name|appACLsUpdated
argument_list|(
name|app
argument_list|,
literal|null
argument_list|,
literal|4L
argument_list|)
expr_stmt|;
block|}
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
do|do
block|{
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|appId
operator|.
name|toString
argument_list|()
argument_list|,
name|ApplicationMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure Five events are both published before leaving the loop
block|}
do|while
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|)
do|;
comment|// verify all the fields
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|NAME_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UNMANAGED_APPLICATION_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APPLICATION_PRIORITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|AM_NODE_LABEL_EXPRESSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_NODE_LABEL_EXPRESSION
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|USER_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|TYPE_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|SUBMITTED_TIME_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyAppTags
argument_list|(
name|app
operator|.
name|getApplicationTags
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"uers1,user2"
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_VIEW_ACLS_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getCommands
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|AM_CONTAINER_LAUNCH_COMMAND
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_VIEW_ACLS_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getMemorySeconds
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_MEM_METRICS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_CPU_METRICS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getPreemptedMemorySeconds
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_MEM_PREEMPT_METRICS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getPreemptedVcoreSeconds
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_CPU_PREEMPT_METRICS
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"context"
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|YARN_APP_CALLER_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hasCreatedEvent
init|=
literal|false
decl_stmt|;
name|boolean
name|hasUpdatedEvent
init|=
literal|false
decl_stmt|;
name|boolean
name|hasFinishedEvent
init|=
literal|false
decl_stmt|;
name|boolean
name|hasACLsUpdatedEvent
init|=
literal|false
decl_stmt|;
name|boolean
name|hasStateUpdateEvent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasCreatedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasFinishedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|DIAGNOSTICS_INFO_EVENT_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|FINAL_STATUS_EVENT_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|UPDATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasUpdatedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|1
operator|==
name|i
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APPLICATION_PRIORITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"new test queue"
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|QUEUE_ENTITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|ACLS_UPDATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasACLsUpdatedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_UPDATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasStateUpdateEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|stateUpdateTimeStamp
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|STATE_EVENT_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Do assertTrue verification separately for easier debug
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasCreatedEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasFinishedEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasACLsUpdatedEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasUpdatedEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasStateUpdateEvent
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPublishAppAttemptMetricsForUnmanagedAM ()
specifier|public
name|void
name|testPublishAppAttemptMetricsForUnmanagedAM
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|createRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|metricsPublisher
operator|.
name|appAttemptRegistered
argument_list|(
name|appAttempt
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|metricsPublisher
operator|.
name|appAttemptFinished
argument_list|(
name|appAttempt
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|app
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|2L
argument_list|)
expr_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
do|do
block|{
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure two events are both published before leaving the loop
block|}
do|while
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
do|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPublishAppAttemptMetrics ()
specifier|public
name|void
name|testPublishAppAttemptMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|createRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|metricsPublisher
operator|.
name|appAttemptRegistered
argument_list|(
name|appAttempt
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|metricsPublisher
operator|.
name|appAttemptFinished
argument_list|(
name|appAttempt
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|app
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|2L
argument_list|)
expr_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
do|do
block|{
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure two events are both published before leaving the loop
block|}
do|while
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
do|;
comment|// verify all the fields
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|PARENT_PRIMARY_FILTER
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasRegisteredEvent
init|=
literal|false
decl_stmt|;
name|boolean
name|hasFinishedEvent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|REGISTERED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasRegisteredEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttempt
operator|.
name|getHost
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|HOST_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|RPC_PORT_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|MASTER_CONTAINER_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasFinishedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|DIAGNOSTICS_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|TRACKING_URL_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|ORIGINAL_TRACKING_URL_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINAL_STATUS_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|STATE_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasRegisteredEvent
operator|&&
name|hasFinishedEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPublishHostPortInfoOnContainerFinished ()
specifier|public
name|void
name|testPublishHostPortInfoOnContainerFinished
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMContainer
name|container
init|=
name|createRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|metricsPublisher
operator|.
name|containerFinished
argument_list|(
name|container
argument_list|,
name|container
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
do|do
block|{
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|ContainerMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
do|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testPublishContainerMetrics ()
specifier|public
name|void
name|testPublishContainerMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMContainer
name|container
init|=
name|createRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|metricsPublisher
operator|.
name|containerCreated
argument_list|(
name|container
argument_list|,
name|container
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|metricsPublisher
operator|.
name|containerFinished
argument_list|(
name|container
argument_list|,
name|container
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
do|do
block|{
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|ContainerMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// ensure two events are both published before leaving the loop
block|}
do|while
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
do|;
comment|// verify all the fields
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|entity
operator|.
name|getEntityType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getPrimaryFilters
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|PARENT_PRIMARIY_FILTER
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_HOST_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PORT_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getAllocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
comment|// KeyValueBasedTimelineStore could cast long to integer, need make sure
comment|// variables for compare have same type.
operator|(
operator|(
name|Integer
operator|)
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_MEMORY_INFO
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getAllocatedResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_VCORE_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getAllocatedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|entity
operator|.
name|getOtherInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|ALLOCATED_PRIORITY_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hasCreatedEvent
init|=
literal|false
decl_stmt|;
name|boolean
name|hasFinishedEvent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerMetricsConstants
operator|.
name|CREATED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasCreatedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getCreationTime
argument_list|()
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|ContainerMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasFinishedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|event
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|DIAGNOSTICS_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|EXIT_STATUS_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getContainerState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|ContainerMetricsConstants
operator|.
name|STATE_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasCreatedEvent
operator|&&
name|hasFinishedEvent
argument_list|)
expr_stmt|;
block|}
DECL|method|createRMApp (ApplicationId appId)
specifier|private
specifier|static
name|RMApp
name|createRMApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|RMApp
name|app
init|=
name|mock
argument_list|(
name|RMAppImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test app"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test app type"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test user"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test queue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|2L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|3L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"test diagnostics info"
argument_list|)
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getRMAppMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RMAppMetrics
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appTags
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|appTags
operator|.
name|add
argument_list|(
literal|"tags"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appTags
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|asc
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"high-cpu"
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerLaunchContext
operator|.
name|getCommands
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"java -Xmx1024m"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asc
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|asc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|ResourceRequest
name|amReq
init|=
name|mock
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|amReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"high-mem"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAMResourceRequests
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|amReq
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getCallerContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|CallerContext
operator|.
name|Builder
argument_list|(
literal|"context"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
DECL|method|createRMAppAttempt ( ApplicationAttemptId appAttemptId, boolean unmanagedAMAttempt)
specifier|private
specifier|static
name|RMAppAttempt
name|createRMAppAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|boolean
name|unmanagedAMAttempt
parameter_list|)
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test host"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unmanagedAMAttempt
condition|)
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test diagnostics info"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test tracking url"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test original tracking url"
argument_list|)
expr_stmt|;
return|return
name|appAttempt
return|;
block|}
DECL|method|createRMContainer (ContainerId containerId)
specifier|private
specifier|static
name|RMContainer
name|createRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|RMContainer
name|container
init|=
name|mock
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"test host"
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getAllocatedPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getCreationTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|2L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test diagnostics info"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|Container
name|mockContainer
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockContainer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContainer
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"http://localhost:1234"
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
DECL|method|verifyAppTags (Set<String> appTags, Map<String, Object> entityInfo)
specifier|private
specifier|static
name|boolean
name|verifyAppTags
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|appTags
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entityInfo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|entityInfo
operator|.
name|containsKey
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_TAGS_INFO
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Object
name|obj
init|=
name|entityInfo
operator|.
name|get
argument_list|(
name|ApplicationMetricsConstants
operator|.
name|APP_TAGS_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Collection
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|collection
init|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|size
argument_list|()
operator|!=
name|appTags
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|appTag
range|:
name|appTags
control|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|collection
control|)
block|{
if|if
condition|(
name|o
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|appTag
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_class

unit|}
end_unit

