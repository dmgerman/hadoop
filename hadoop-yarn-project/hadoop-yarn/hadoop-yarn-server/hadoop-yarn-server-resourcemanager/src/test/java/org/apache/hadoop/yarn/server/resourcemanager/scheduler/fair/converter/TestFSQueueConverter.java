begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|junit
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Unit tests for FSQueueConverter.  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
DECL|class|TestFSQueueConverter
specifier|public
class|class
name|TestFSQueueConverter
block|{
DECL|field|CLUSTER_RESOURCE
specifier|private
specifier|static
specifier|final
name|Resource
name|CLUSTER_RESOURCE
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|16384
argument_list|,
literal|16
argument_list|)
decl_stmt|;
DECL|field|ALL_QUEUES
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|ALL_QUEUES
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root"
argument_list|,
literal|"root.default"
argument_list|,
literal|"root.admins"
argument_list|,
literal|"root.users"
argument_list|,
literal|"root.admins.alice"
argument_list|,
literal|"root.admins.bob"
argument_list|,
literal|"root.users.joe"
argument_list|,
literal|"root.users.john"
argument_list|)
decl_stmt|;
DECL|field|FILE_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|FILE_PREFIX
init|=
literal|"file:"
decl_stmt|;
DECL|field|FAIR_SCHEDULER_XML
specifier|private
specifier|static
specifier|final
name|String
name|FAIR_SCHEDULER_XML
init|=
name|prepareFileName
argument_list|(
literal|"fair-scheduler-conversion.xml"
argument_list|)
decl_stmt|;
DECL|method|prepareFileName (String f)
specifier|private
specifier|static
name|String
name|prepareFileName
parameter_list|(
name|String
name|f
parameter_list|)
block|{
return|return
name|FILE_PREFIX
operator|+
operator|new
name|File
argument_list|(
literal|"src/test/resources/"
operator|+
name|f
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
DECL|field|converter
specifier|private
name|FSQueueConverter
name|converter
decl_stmt|;
DECL|field|config
specifier|private
name|Configuration
name|config
decl_stmt|;
DECL|field|csConfig
specifier|private
name|Configuration
name|csConfig
decl_stmt|;
DECL|field|fs
specifier|private
name|FairScheduler
name|fs
decl_stmt|;
DECL|field|rootQueue
specifier|private
name|FSQueue
name|rootQueue
decl_stmt|;
annotation|@
name|Mock
DECL|field|ruleHandler
specifier|private
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
decl_stmt|;
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|config
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|FAIR_SCHEDULER_XML
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|MIGRATION_MODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|csConfig
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|=
name|createFairScheduler
argument_list|()
expr_stmt|;
name|createConverter
argument_list|()
expr_stmt|;
name|rootQueue
operator|=
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createFairScheduler ()
specifier|private
name|FairScheduler
name|createFairScheduler
parameter_list|()
block|{
name|RMContext
name|ctx
init|=
operator|new
name|RMContextImpl
argument_list|()
decl_stmt|;
name|PlacementManager
name|placementManager
init|=
operator|new
name|PlacementManager
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|setQueuePlacementManager
argument_list|(
name|placementManager
argument_list|)
expr_stmt|;
name|FairScheduler
name|fairScheduler
init|=
operator|new
name|FairScheduler
argument_list|()
decl_stmt|;
name|fairScheduler
operator|.
name|setRMContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|fairScheduler
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|fairScheduler
return|;
block|}
DECL|method|createConverter ()
specifier|private
name|void
name|createConverter
parameter_list|()
block|{
name|converter
operator|=
operator|new
name|FSQueueConverter
argument_list|(
name|ruleHandler
argument_list|,
name|csConfig
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|CLUSTER_RESOURCE
argument_list|,
literal|0.16f
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertQueueHierarchy ()
specifier|public
name|void
name|testConvertQueueHierarchy
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
comment|// root children
name|assertEquals
argument_list|(
literal|"root children"
argument_list|,
literal|"default,admins,users"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.queues"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.admins children
name|assertEquals
argument_list|(
literal|"root.admins children"
argument_list|,
literal|"bob,alice"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.queues"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.default children - none
name|assertNull
argument_list|(
literal|"root.default children"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.default"
operator|+
literal|".queues"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.users children
name|assertEquals
argument_list|(
literal|"root.users children"
argument_list|,
literal|"john,joe"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.queues"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|leafs
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|ALL_QUEUES
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root"
argument_list|,
literal|"root.default"
argument_list|,
literal|"root.admins"
argument_list|,
literal|"root.users"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoValueForQueues
argument_list|(
name|leafs
argument_list|,
literal|".queues"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertQueueHierarchyWithSameLeafQueues ()
specifier|public
name|void
name|testConvertQueueHierarchyWithSameLeafQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|ConversionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Leaf queues must be unique"
argument_list|)
expr_stmt|;
name|String
name|absolutePath
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/fair-scheduler-sameleafqueue.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|FILE_PREFIX
operator|+
name|absolutePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|createFairScheduler
argument_list|()
expr_stmt|;
name|rootQueue
operator|=
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
expr_stmt|;
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxAMShare ()
specifier|public
name|void
name|testQueueMaxAMShare
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
comment|// root.admins.bob
name|assertEquals
argument_list|(
literal|"root.admins.bob AM share"
argument_list|,
literal|"1.0"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.bob.maximum-am-resource-percent"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.admins.alice
name|assertEquals
argument_list|(
literal|"root.admins.alice AM share"
argument_list|,
literal|"0.15"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.alice.maximum-am-resource-percent"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remaining
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|ALL_QUEUES
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.admins.bob"
argument_list|,
literal|"root.admins.alice"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoValueForQueues
argument_list|(
name|remaining
argument_list|,
literal|".maximum-am-resource-percent"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxRunningApps ()
specifier|public
name|void
name|testQueueMaxRunningApps
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins.alice max apps"
argument_list|,
literal|2
argument_list|,
name|csConfig
operator|.
name|getInt
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.alice.maximum-applications"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remaining
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|ALL_QUEUES
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.admins.alice"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoValueForQueues
argument_list|(
name|remaining
argument_list|,
literal|".maximum-applications"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxAllocations ()
specifier|public
name|void
name|testQueueMaxAllocations
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
comment|// root.admins vcores + mb
name|assertEquals
argument_list|(
literal|"root.admins max vcores"
argument_list|,
literal|3
argument_list|,
name|csConfig
operator|.
name|getInt
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.maximum-allocation-vcores"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins max memory"
argument_list|,
literal|4096
argument_list|,
name|csConfig
operator|.
name|getInt
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.maximum-allocation-mb"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.users.john max vcores + mb
name|assertEquals
argument_list|(
literal|"root.users.john max vcores"
argument_list|,
literal|2
argument_list|,
name|csConfig
operator|.
name|getInt
argument_list|(
name|PREFIX
operator|+
literal|"root.users.john.maximum-allocation-vcores"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.users.john max memory"
argument_list|,
literal|8192
argument_list|,
name|csConfig
operator|.
name|getInt
argument_list|(
name|PREFIX
operator|+
literal|"root.users.john.maximum-allocation-mb"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remaining
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|ALL_QUEUES
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.admins"
argument_list|,
literal|"root.users.john"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoValueForQueues
argument_list|(
name|remaining
argument_list|,
literal|".maximum-allocation-vcores"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
name|assertNoValueForQueues
argument_list|(
name|remaining
argument_list|,
literal|".maximum-allocation-mb"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueuePreemptionDisabled ()
specifier|public
name|void
name|testQueuePreemptionDisabled
parameter_list|()
block|{
name|converter
operator|=
operator|new
name|FSQueueConverter
argument_list|(
name|ruleHandler
argument_list|,
name|csConfig
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|CLUSTER_RESOURCE
argument_list|,
literal|0.16f
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.admins.alice preemption setting"
argument_list|,
name|csConfig
operator|.
name|getBoolean
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.alice.disable_preemption"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.users.joe preemption setting"
argument_list|,
name|csConfig
operator|.
name|getBoolean
argument_list|(
name|PREFIX
operator|+
literal|"root.users.joe.disable_preemption"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remaining
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|ALL_QUEUES
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.admins.alice"
argument_list|,
literal|"root.users.joe"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoValueForQueues
argument_list|(
name|remaining
argument_list|,
literal|".disable_preemption"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueuePreemptionDisabledWhenGlobalPreemptionDisabled ()
specifier|public
name|void
name|testQueuePreemptionDisabledWhenGlobalPreemptionDisabled
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|assertNoValueForQueues
argument_list|(
name|ALL_QUEUES
argument_list|,
literal|".disable_preemption"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testChildCapacity ()
specifier|public
name|void
name|testChildCapacity
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
comment|// root
name|assertEquals
argument_list|(
literal|"root.default capacity"
argument_list|,
literal|"33.333"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.default.capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins capacity"
argument_list|,
literal|"33.333"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.users capacity"
argument_list|,
literal|"66.667"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.capacity"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.users
name|assertEquals
argument_list|(
literal|"root.users.john capacity"
argument_list|,
literal|"25.000"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.john.capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.users.joe capacity"
argument_list|,
literal|"75.000"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.joe.capacity"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.admins
name|assertEquals
argument_list|(
literal|"root.admins.alice capacity"
argument_list|,
literal|"75.000"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.alice.capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins.bob capacity"
argument_list|,
literal|"25.000"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.bob.capacity"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaximumCapacity ()
specifier|public
name|void
name|testQueueMaximumCapacity
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.users.joe maximum capacity"
argument_list|,
literal|"[memory=8192, vcores=8]"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.joe.maximum-capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins.bob maximum capacity"
argument_list|,
literal|"[memory=8192, vcores=2]"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.bob.maximum-capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins.alice maximum capacity"
argument_list|,
literal|"[memory=16384, vcores=4]"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.alice.maximum-capacity"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|remaining
init|=
name|Sets
operator|.
name|difference
argument_list|(
name|ALL_QUEUES
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.users.joe"
argument_list|,
literal|"root.admins.bob"
argument_list|,
literal|"root.admins.alice"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNoValueForQueues
argument_list|(
name|remaining
argument_list|,
literal|".maximum-capacity"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueAutoCreateChildQueue ()
specifier|public
name|void
name|testQueueAutoCreateChildQueue
parameter_list|()
block|{
name|config
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|converter
operator|=
operator|new
name|FSQueueConverter
argument_list|(
name|ruleHandler
argument_list|,
name|csConfig
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|CLUSTER_RESOURCE
argument_list|,
literal|0.16f
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|assertTrueForQueues
argument_list|(
name|ALL_QUEUES
argument_list|,
literal|".auto-create-child-queue.enabled"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueSizeBasedWeightEnabled ()
specifier|public
name|void
name|testQueueSizeBasedWeightEnabled
parameter_list|()
block|{
name|converter
operator|=
operator|new
name|FSQueueConverter
argument_list|(
name|ruleHandler
argument_list|,
name|csConfig
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|CLUSTER_RESOURCE
argument_list|,
literal|0.16f
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|assertTrueForQueues
argument_list|(
name|ALL_QUEUES
argument_list|,
literal|".ordering-policy.fair.enable-size-based-weight"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueSizeBasedWeightDisabled ()
specifier|public
name|void
name|testQueueSizeBasedWeightDisabled
parameter_list|()
block|{
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
name|assertNoValueForQueues
argument_list|(
name|ALL_QUEUES
argument_list|,
literal|".ordering-policy.fair.enable-size-based-weight"
argument_list|,
name|csConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueOrderingPolicy ()
specifier|public
name|void
name|testQueueOrderingPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|absolutePath
init|=
operator|new
name|File
argument_list|(
literal|"src/test/resources/fair-scheduler-orderingpolicy.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|FILE_PREFIX
operator|+
name|absolutePath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|=
name|createFairScheduler
argument_list|()
expr_stmt|;
name|rootQueue
operator|=
name|fs
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
expr_stmt|;
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
comment|// root
name|assertEquals
argument_list|(
literal|"root ordering policy"
argument_list|,
literal|"fair"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default ordering policy"
argument_list|,
literal|"fair"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.default.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins ordering policy"
argument_list|,
literal|"fair"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.users ordering policy"
argument_list|,
literal|"fair"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.users
name|assertEquals
argument_list|(
literal|"root.users.joe ordering policy"
argument_list|,
literal|"fair"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.joe.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.users.john ordering policy"
argument_list|,
literal|"FIFO"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.users.john.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root.admins
name|assertEquals
argument_list|(
literal|"root.admins.alice ordering policy"
argument_list|,
literal|"FIFO"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.alice.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.admins.bob ordering policy"
argument_list|,
literal|"fair"
argument_list|,
name|csConfig
operator|.
name|get
argument_list|(
name|PREFIX
operator|+
literal|"root.admins.bob.ordering-policy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxChildCapacityNotSupported ()
specifier|public
name|void
name|testQueueMaxChildCapacityNotSupported
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedPropertyException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|UnsupportedPropertyException
argument_list|(
literal|"test"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|ruleHandler
argument_list|)
operator|.
name|handleMaxChildCapacity
argument_list|()
expr_stmt|;
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationSystemNotSupported ()
specifier|public
name|void
name|testReservationSystemNotSupported
parameter_list|()
block|{
name|expectedException
operator|.
name|expect
argument_list|(
name|UnsupportedPropertyException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"maxCapacity"
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|UnsupportedPropertyException
argument_list|(
literal|"maxCapacity"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|ruleHandler
argument_list|)
operator|.
name|handleMaxChildCapacity
argument_list|()
expr_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|converter
operator|.
name|convertQueueHierarchy
argument_list|(
name|rootQueue
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoValueForQueues (Set<String> queues, String postfix, Configuration config)
specifier|private
name|void
name|assertNoValueForQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|,
name|String
name|postfix
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
for|for
control|(
name|String
name|queue
range|:
name|queues
control|)
block|{
name|String
name|key
init|=
name|PREFIX
operator|+
name|queue
operator|+
name|postfix
decl_stmt|;
name|assertNull
argument_list|(
literal|"Key "
operator|+
name|key
operator|+
literal|" has value, but it should be null"
argument_list|,
name|config
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertTrueForQueues (Set<String> queues, String postfix, Configuration config)
specifier|private
name|void
name|assertTrueForQueues
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queues
parameter_list|,
name|String
name|postfix
parameter_list|,
name|Configuration
name|config
parameter_list|)
block|{
for|for
control|(
name|String
name|queue
range|:
name|queues
control|)
block|{
name|String
name|key
init|=
name|PREFIX
operator|+
name|queue
operator|+
name|postfix
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Key "
operator|+
name|key
operator|+
literal|" is false, should be true"
argument_list|,
name|config
operator|.
name|getBoolean
argument_list|(
name|key
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

