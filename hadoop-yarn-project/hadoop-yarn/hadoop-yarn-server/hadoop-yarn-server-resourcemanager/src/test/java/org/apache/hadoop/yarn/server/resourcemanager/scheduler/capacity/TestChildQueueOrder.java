begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ahs
operator|.
name|RMApplicationHistoryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|ContainerAllocationExpirer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceLimits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestChildQueueOrder
specifier|public
class|class
name|TestChildQueueOrder
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestChildQueueOrder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|conf
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|csConf
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|csContext
name|CapacitySchedulerContext
name|csContext
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|DEFAULT_RACK
specifier|final
specifier|static
name|String
name|DEFAULT_RACK
init|=
literal|"/default"
decl_stmt|;
DECL|field|resourceComparator
specifier|private
specifier|final
name|ResourceCalculator
name|resourceComparator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|rmContext
operator|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|csContext
operator|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNonPartitionedQueueComparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacityScheduler
operator|.
name|nonPartitionedQueueComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockApplication (int appId, String user)
specifier|private
name|FiCaSchedulerApp
name|getMockApplication
parameter_list|(
name|int
name|appId
parameter_list|,
name|String
name|user
parameter_list|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|user
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getHeadroom
argument_list|()
expr_stmt|;
return|return
name|application
return|;
block|}
DECL|method|stubQueueAllocation (final CSQueue queue, final Resource clusterResource, final FiCaSchedulerNode node, final int allocation)
specifier|private
name|void
name|stubQueueAllocation
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|Resource
name|clusterResource
parameter_list|,
specifier|final
name|FiCaSchedulerNode
name|node
parameter_list|,
specifier|final
name|int
name|allocation
parameter_list|)
block|{
name|stubQueueAllocation
argument_list|(
name|queue
argument_list|,
name|clusterResource
argument_list|,
name|node
argument_list|,
name|allocation
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
block|}
DECL|method|stubQueueAllocation (final CSQueue queue, final Resource clusterResource, final FiCaSchedulerNode node, final int allocation, final NodeType type)
specifier|private
name|void
name|stubQueueAllocation
parameter_list|(
specifier|final
name|CSQueue
name|queue
parameter_list|,
specifier|final
name|Resource
name|clusterResource
parameter_list|,
specifier|final
name|FiCaSchedulerNode
name|node
parameter_list|,
specifier|final
name|int
name|allocation
parameter_list|,
specifier|final
name|NodeType
name|type
parameter_list|)
block|{
comment|// Simulate the queue allocation
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|CSAssignment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CSAssignment
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
throw|throw
operator|new
name|Exception
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FOOBAR q.assignContainers q="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" alloc="
operator|+
name|allocation
operator|+
literal|" node="
operator|+
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Resource
name|allocatedResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|instanceof
name|ParentQueue
condition|)
block|{
operator|(
operator|(
name|ParentQueue
operator|)
name|queue
operator|)
operator|.
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|allocatedResource
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FiCaSchedulerApp
name|app1
init|=
name|getMockApplication
argument_list|(
literal|0
argument_list|,
literal|""
argument_list|)
decl_stmt|;
operator|(
operator|(
name|LeafQueue
operator|)
name|queue
operator|)
operator|.
name|allocateResource
argument_list|(
name|clusterResource
argument_list|,
name|app1
argument_list|,
name|allocatedResource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Next call - nothing
if|if
condition|(
name|allocation
operator|>
literal|0
condition|)
block|{
name|doReturn
argument_list|(
operator|new
name|CSAssignment
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceLimits
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Mock the node's resource availability
name|Resource
name|available
init|=
name|node
operator|.
name|getAvailableResource
argument_list|()
decl_stmt|;
name|doReturn
argument_list|(
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|available
argument_list|,
name|allocatedResource
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|node
argument_list|)
operator|.
name|getAvailableResource
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|CSAssignment
argument_list|(
name|allocatedResource
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceLimits
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|node
argument_list|)
operator|.
name|releaseContainer
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|computeQueueAbsoluteUsedCapacity (CSQueue queue, int expectedMemory, Resource clusterResource)
specifier|private
name|float
name|computeQueueAbsoluteUsedCapacity
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedMemory
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|float
operator|)
name|expectedMemory
operator|/
operator|(
name|float
operator|)
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|)
operator|)
return|;
block|}
DECL|method|computeQueueUsedCapacity (CSQueue queue, int expectedMemory, Resource clusterResource)
specifier|private
name|float
name|computeQueueUsedCapacity
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedMemory
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
return|return
operator|(
name|expectedMemory
operator|/
operator|(
name|clusterResource
operator|.
name|getMemory
argument_list|()
operator|*
name|queue
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|)
operator|)
return|;
block|}
DECL|field|DELTA
specifier|final
specifier|static
name|float
name|DELTA
init|=
literal|0.0001f
decl_stmt|;
DECL|method|verifyQueueMetrics (CSQueue queue, int expectedMemory, Resource clusterResource)
specifier|private
name|void
name|verifyQueueMetrics
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedMemory
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|computeQueueAbsoluteUsedCapacity
argument_list|(
name|queue
argument_list|,
name|expectedMemory
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|queue
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|computeQueueUsedCapacity
argument_list|(
name|queue
argument_list|,
name|expectedMemory
argument_list|,
name|clusterResource
argument_list|)
argument_list|,
name|queue
operator|.
name|getUsedCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
literal|"a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
literal|"b"
decl_stmt|;
DECL|field|C
specifier|private
specifier|static
specifier|final
name|String
name|C
init|=
literal|"c"
decl_stmt|;
DECL|field|D
specifier|private
specifier|static
specifier|final
name|String
name|D
init|=
literal|"d"
decl_stmt|;
DECL|method|setupSortedQueues (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupSortedQueues
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define queues
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|,
name|C
block|,
name|D
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|25
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|25
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|C
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C
argument_list|,
literal|25
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_D
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|D
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_D
argument_list|,
literal|25
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortedQueues ()
specifier|public
name|void
name|testSortedQueues
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup queue configs
name|setupSortedQueues
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|root
init|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
comment|// Setup some nodes
specifier|final
name|int
name|memoryPerNode
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|coresPerNode
init|=
literal|16
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
name|memoryPerNode
operator|*
name|GB
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|node_0
argument_list|)
operator|.
name|releaseContainer
argument_list|(
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
name|memoryPerNode
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
name|coresPerNode
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Start testing
name|CSQueue
name|a
init|=
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|CSQueue
name|b
init|=
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
decl_stmt|;
name|CSQueue
name|c
init|=
name|queues
operator|.
name|get
argument_list|(
name|C
argument_list|)
decl_stmt|;
name|CSQueue
name|d
init|=
name|queues
operator|.
name|get
argument_list|(
name|D
argument_list|)
decl_stmt|;
comment|// Make a/b/c/d has>0 pending resource, so that allocation will continue.
name|queues
operator|.
name|get
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|incPending
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Stub an App and its containerCompleted
name|FiCaSchedulerApp
name|app_0
init|=
name|getMockApplication
argument_list|(
literal|0
argument_list|,
name|user_0
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|app_0
argument_list|)
operator|.
name|containerCompleted
argument_list|(
name|any
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMContainerEventType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ContainerAllocationExpirer
name|expirer
init|=
name|mock
argument_list|(
name|ContainerAllocationExpirer
operator|.
name|class
argument_list|)
decl_stmt|;
name|DrainDispatcher
name|drainDispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|RMApplicationHistoryWriter
name|writer
init|=
name|mock
argument_list|(
name|RMApplicationHistoryWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|SystemMetricsPublisher
name|publisher
init|=
name|mock
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getContainerAllocationExpirer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|expirer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|drainDispatcher
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|app_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|TestUtils
operator|.
name|getMockContainer
argument_list|(
name|containerId
argument_list|,
name|node_0
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
name|priority
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|appAttemptId
argument_list|,
name|node_0
operator|.
name|getNodeID
argument_list|()
argument_list|,
literal|"user"
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// Assign {1,2,3,4} 1GB containers respectively to queues
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
block|}
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|//Release 3 x 1GB containers from D
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|d
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|//reset manually resources on node
name|node_0
operator|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
operator|(
name|memoryPerNode
operator|-
literal|1
operator|-
literal|2
operator|-
literal|3
operator|-
literal|1
operator|)
operator|*
name|GB
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign 2 x 1GB Containers to A
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
block|}
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|//Release 1GB Container from A
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|//reset manually resources on node
name|node_0
operator|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
operator|(
name|memoryPerNode
operator|-
literal|2
operator|-
literal|2
operator|-
literal|3
operator|-
literal|1
operator|)
operator|*
name|GB
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign 1GB container to B
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|//Release 1GB container resources from B
name|b
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|//reset manually resources on node
name|node_0
operator|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host_0"
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
operator|(
name|memoryPerNode
operator|-
literal|2
operator|-
literal|2
operator|-
literal|3
operator|-
literal|1
operator|)
operator|*
name|GB
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assign 1GB container to A
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now do the real test, where B and D request a 1GB container
comment|// D should should get the next container if the order is correct
name|stubQueueAllocation
argument_list|(
name|a
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|b
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|c
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|stubQueueAllocation
argument_list|(
name|d
argument_list|,
name|clusterResource
argument_list|,
name|node_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|root
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|,
operator|new
name|ResourceLimits
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
expr_stmt|;
name|InOrder
name|allocationOrder
init|=
name|inOrder
argument_list|(
name|d
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|d
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|FiCaSchedulerNode
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceLimits
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocationOrder
operator|.
name|verify
argument_list|(
name|b
argument_list|)
operator|.
name|assignContainers
argument_list|(
name|eq
argument_list|(
name|clusterResource
argument_list|)
argument_list|,
name|any
argument_list|(
name|FiCaSchedulerNode
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceLimits
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|SchedulingMode
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|a
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|b
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|c
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|verifyQueueMetrics
argument_list|(
name|d
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
comment|//D got the container
name|LOG
operator|.
name|info
argument_list|(
literal|"status child-queues: "
operator|+
operator|(
operator|(
name|ParentQueue
operator|)
name|root
operator|)
operator|.
name|getChildQueuesToPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
block|}
end_class

end_unit

