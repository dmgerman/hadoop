begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_comment
comment|/**  * This class can submit an application to {@link MockRM}.  */
end_comment

begin_class
DECL|class|MockRMAppSubmitter
specifier|public
class|class
name|MockRMAppSubmitter
block|{
DECL|method|submitWithMemory (long memory, MockRM mockRM)
specifier|public
specifier|static
name|RMApp
name|submitWithMemory
parameter_list|(
name|long
name|memory
parameter_list|,
name|MockRM
name|mockRM
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
name|memory
argument_list|)
expr_stmt|;
name|MockRMAppSubmissionData
name|data
init|=
name|MockRMAppSubmissionData
operator|.
name|Builder
operator|.
name|createWithResource
argument_list|(
name|resource
argument_list|,
name|mockRM
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|MockRMAppSubmitter
operator|.
name|submit
argument_list|(
name|mockRM
argument_list|,
name|data
argument_list|)
return|;
block|}
DECL|method|submit (MockRM mockRM, MockRMAppSubmissionData data)
specifier|public
specifier|static
name|RMApp
name|submit
parameter_list|(
name|MockRM
name|mockRM
parameter_list|,
name|MockRMAppSubmissionData
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|data
operator|.
name|isAppIdProvided
argument_list|()
condition|?
name|data
operator|.
name|getApplicationId
argument_list|()
else|:
literal|null
decl_stmt|;
name|ApplicationClientProtocol
name|client
init|=
name|mockRM
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isAppIdProvided
argument_list|()
condition|)
block|{
name|GetNewApplicationResponse
name|resp
init|=
name|client
operator|.
name|getNewApplication
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|appId
operator|=
name|resp
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
block|}
name|SubmitApplicationRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|sub
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
name|data
operator|.
name|isKeepContainers
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setApplicationName
argument_list|(
name|data
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setMaxAppAttempts
argument_list|(
name|data
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|getApplicationTags
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setApplicationTags
argument_list|(
name|data
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|getApplicationTimeouts
argument_list|()
operator|!=
literal|null
operator|&&
name|data
operator|.
name|getApplicationTimeouts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sub
operator|.
name|setApplicationTimeouts
argument_list|(
name|data
operator|.
name|getApplicationTimeouts
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|isUnmanaged
argument_list|()
condition|)
block|{
name|sub
operator|.
name|setUnmanagedAM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|getQueue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setQueue
argument_list|(
name|data
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|getPriority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setPriority
argument_list|(
name|data
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|getAppNodeLabel
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setNodeLabelExpression
argument_list|(
name|data
operator|.
name|getAppNodeLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|setApplicationType
argument_list|(
name|data
operator|.
name|getAppType
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|clc
operator|.
name|setApplicationACLs
argument_list|(
name|data
operator|.
name|getAcls
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|getCredentials
argument_list|()
operator|!=
literal|null
operator|&&
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|data
operator|.
name|getCredentials
argument_list|()
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|securityTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|clc
operator|.
name|setTokens
argument_list|(
name|securityTokens
argument_list|)
expr_stmt|;
name|clc
operator|.
name|setTokensConf
argument_list|(
name|data
operator|.
name|getTokensConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|setAMContainerSpec
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|data
operator|.
name|getAttemptFailuresValidityInterval
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|getLogAggregationContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setLogAggregationContext
argument_list|(
name|data
operator|.
name|getLogAggregationContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|setCancelTokensWhenComplete
argument_list|(
name|data
operator|.
name|isCancelTokensWhenComplete
argument_list|()
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|data
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|priority
operator|==
literal|null
condition|)
block|{
name|priority
operator|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|amResourceRequests
init|=
name|data
operator|.
name|getAmResourceRequests
argument_list|()
decl_stmt|;
if|if
condition|(
name|amResourceRequests
operator|==
literal|null
operator|||
name|amResourceRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ResourceRequest
name|amResReq
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|data
operator|.
name|getResource
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|amResourceRequests
operator|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|amResReq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|.
name|getAmLabel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|data
operator|.
name|getAmLabel
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ResourceRequest
name|amResourceRequest
range|:
name|amResourceRequests
control|)
block|{
name|amResourceRequest
operator|.
name|setNodeLabelExpression
argument_list|(
name|data
operator|.
name|getAmLabel
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sub
operator|.
name|setAMContainerResourceRequests
argument_list|(
name|amResourceRequests
argument_list|)
expr_stmt|;
name|req
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|fakeUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|data
operator|.
name|getUser
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"someGroup"
block|}
argument_list|)
decl_stmt|;
name|PrivilegedExceptionAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
name|action
init|=
operator|new
name|SubmitApplicationResponsePrivilegedExceptionAction
argument_list|()
operator|.
name|setClientReq
argument_list|(
name|client
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|fakeUser
operator|.
name|doAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
comment|// make sure app is immediately available after submit
if|if
condition|(
name|data
operator|.
name|isWaitForAccepted
argument_list|()
condition|)
block|{
name|mockRM
operator|.
name|waitForState
argument_list|(
name|appId
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
name|RMApp
name|rmApp
init|=
name|mockRM
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
comment|// unmanaged AM won't go to RMAppAttemptState.SCHEDULED.
if|if
condition|(
name|data
operator|.
name|isWaitForAccepted
argument_list|()
operator|&&
operator|!
name|data
operator|.
name|isUnmanaged
argument_list|()
condition|)
block|{
name|mockRM
operator|.
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|mockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
return|return
name|rmApp
return|;
block|}
DECL|class|SubmitApplicationResponsePrivilegedExceptionAction
specifier|private
specifier|static
class|class
name|SubmitApplicationResponsePrivilegedExceptionAction
implements|implements
name|PrivilegedExceptionAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
block|{
DECL|field|client
name|ApplicationClientProtocol
name|client
decl_stmt|;
DECL|field|req
name|SubmitApplicationRequest
name|req
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|SubmitApplicationResponse
name|run
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
try|try
block|{
return|return
name|client
operator|.
name|submitApplication
argument_list|(
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|setClientReq ( ApplicationClientProtocol client, SubmitApplicationRequest req)
name|PrivilegedExceptionAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
name|setClientReq
parameter_list|(
name|ApplicationClientProtocol
name|client
parameter_list|,
name|SubmitApplicationRequest
name|req
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

