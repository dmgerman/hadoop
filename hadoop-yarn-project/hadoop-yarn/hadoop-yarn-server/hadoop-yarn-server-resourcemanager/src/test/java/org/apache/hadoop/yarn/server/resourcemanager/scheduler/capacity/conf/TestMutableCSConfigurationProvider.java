begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|QueueConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|QueueConfigsUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doThrow
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests {@link MutableCSConfigurationProvider}.  */
end_comment

begin_class
DECL|class|TestMutableCSConfigurationProvider
specifier|public
class|class
name|TestMutableCSConfigurationProvider
block|{
DECL|field|confProvider
specifier|private
name|MutableCSConfigurationProvider
name|confProvider
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|goodUpdate
specifier|private
name|QueueConfigsUpdateInfo
name|goodUpdate
decl_stmt|;
DECL|field|badUpdate
specifier|private
name|QueueConfigsUpdateInfo
name|badUpdate
decl_stmt|;
DECL|field|cs
specifier|private
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|TEST_USER
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|TEST_USER
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"testUser"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|cs
operator|=
name|mock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmContext
operator|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|confProvider
operator|=
operator|new
name|MutableCSConfigurationProvider
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|goodUpdate
operator|=
operator|new
name|QueueConfigsUpdateInfo
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|goodUpdateMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|goodUpdateMap
operator|.
name|put
argument_list|(
literal|"goodKey"
argument_list|,
literal|"goodVal"
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|goodUpdateInfo
init|=
operator|new
name|QueueConfigInfo
argument_list|(
literal|"root.a"
argument_list|,
name|goodUpdateMap
argument_list|)
decl_stmt|;
name|goodUpdate
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
name|goodUpdateInfo
argument_list|)
expr_stmt|;
name|badUpdate
operator|=
operator|new
name|QueueConfigsUpdateInfo
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|badUpdateMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|badUpdateMap
operator|.
name|put
argument_list|(
literal|"badKey"
argument_list|,
literal|"badVal"
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|badUpdateInfo
init|=
operator|new
name|QueueConfigInfo
argument_list|(
literal|"root.a"
argument_list|,
name|badUpdateMap
argument_list|)
decl_stmt|;
name|badUpdate
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
name|badUpdateInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInMemoryBackedProvider ()
specifier|public
name|void
name|testInMemoryBackedProvider
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|confProvider
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confProvider
operator|.
name|loadConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.a.goodKey"
argument_list|)
argument_list|)
expr_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|cs
argument_list|)
operator|.
name|reinitialize
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|mutateConfiguration
argument_list|(
name|TEST_USER
argument_list|,
name|goodUpdate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"goodVal"
argument_list|,
name|confProvider
operator|.
name|loadConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.a.goodKey"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confProvider
operator|.
name|loadConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.a.badKey"
argument_list|)
argument_list|)
expr_stmt|;
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|cs
argument_list|)
operator|.
name|reinitialize
argument_list|(
name|any
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|confProvider
operator|.
name|mutateConfiguration
argument_list|(
name|TEST_USER
argument_list|,
name|badUpdate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected exception.
block|}
name|assertNull
argument_list|(
name|confProvider
operator|.
name|loadConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.a.badKey"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

