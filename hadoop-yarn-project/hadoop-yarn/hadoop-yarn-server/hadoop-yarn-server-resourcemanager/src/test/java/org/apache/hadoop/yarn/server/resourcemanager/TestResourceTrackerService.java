begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeLabelTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UnRegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|AppCollectorData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NodeLabelsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeStatusEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|PerNodeTimelineCollectorsAuxService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|YarnVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_class
DECL|class|TestResourceTrackerService
specifier|public
class|class
name|TestResourceTrackerService
extends|extends
name|NodeLabelTestBase
block|{
DECL|field|TEMP_DIR
specifier|private
specifier|final
specifier|static
name|File
name|TEMP_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"decommision"
argument_list|)
decl_stmt|;
DECL|field|hostFile
specifier|private
specifier|final
name|File
name|hostFile
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hostFile.txt"
argument_list|)
decl_stmt|;
DECL|field|excludeHostFile
specifier|private
specifier|final
name|File
name|excludeHostFile
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"excludeHostFile.txt"
argument_list|)
decl_stmt|;
DECL|field|excludeHostXmlFile
specifier|private
specifier|final
name|File
name|excludeHostXmlFile
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"excludeHostFile.xml"
argument_list|)
decl_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
decl_stmt|;
comment|/**    * Test RM read NM next heartBeat Interval correctly from Configuration file,    * and NM get next heartBeat Interval from RM correctly    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testGetNextHeartBeatInterval ()
specifier|public
name|void
name|testGetNextHeartBeatInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|,
literal|"4000"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4000
argument_list|,
name|nodeHeartbeat
operator|.
name|getNextHeartBeatInterval
argument_list|()
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat2
init|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4000
argument_list|,
name|nodeHeartbeat2
operator|.
name|getNextHeartBeatInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Decommissioning using a pre-configured include hosts file    */
annotation|@
name|Test
DECL|method|testDecommissionWithIncludeHosts ()
specifier|public
name|void
name|testDecommissionWithIncludeHosts
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"localhost"
argument_list|,
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:4433"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|metrics
operator|!=
literal|null
operator|)
assert|;
name|int
name|metricCount
init|=
name|metrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// To test that IPs also work
name|String
name|ip
init|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkShutdownNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|metricCount
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node is not decommisioned."
argument_list|,
name|NodeAction
operator|.
name|SHUTDOWN
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|metricCount
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Decommissioning using a pre-configured exclude hosts file    */
annotation|@
name|Test
DECL|method|testDecommissionWithExcludeHosts ()
specifier|public
name|void
name|testDecommissionWithExcludeHosts
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:4433"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|int
name|metricCount
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// To test that IPs also work
name|String
name|ip
init|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
name|metricCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The decommisioned metrics are not updated"
argument_list|,
name|NodeAction
operator|.
name|SHUTDOWN
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The decommisioned metrics are not updated"
argument_list|,
name|NodeAction
operator|.
name|SHUTDOWN
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm3
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:4433"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// decommissined node is 1 since 1 node is rejoined after updating exclude
comment|// file
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
name|metricCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Graceful decommission node with no running application.    */
annotation|@
name|Test
DECL|method|testGracefulDecommissionNoApp ()
specifier|public
name|void
name|testGracefulDecommissionNoApp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host3:4433"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|int
name|metricCount
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat1
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat2
init|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat3
init|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat1
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat2
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat3
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Graceful decommission both host2 and host3.
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|,
literal|"host3"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|nodeHeartbeat1
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeHeartbeat2
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nodeHeartbeat3
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
name|metricCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat1
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|nodeHeartbeat2
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|nodeHeartbeat3
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGracefulDecommissionDefaultTimeoutResolution ()
specifier|public
name|void
name|testGracefulDecommissionDefaultTimeoutResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostXmlFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsXmlFile
argument_list|(
name|excludeHostXmlFile
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|nodeMemory
init|=
literal|1024
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
name|nodeMemory
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
name|nodeMemory
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host3:9101"
argument_list|,
name|nodeMemory
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat1
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat2
init|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat3
init|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat1
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat2
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat3
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Graceful decommission both host1 and host2, with
comment|// non default timeout for host1
specifier|final
name|Integer
name|nm1DecommissionTimeout
init|=
literal|20
decl_stmt|;
name|writeToHostsXmlFile
argument_list|(
name|excludeHostXmlFile
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
name|nm1DecommissionTimeout
argument_list|)
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nm1DecommissionTimeout
argument_list|,
name|rm
operator|.
name|getDecommissioningTimeout
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|defaultDecTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultDecTimeout
argument_list|,
name|rm
operator|.
name|getDecommissioningTimeout
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Graceful decommission host3 with a new default timeout
specifier|final
name|Integer
name|newDefaultDecTimeout
init|=
name|defaultDecTimeout
operator|+
literal|10
decl_stmt|;
name|writeToHostsXmlFile
argument_list|(
name|excludeHostXmlFile
argument_list|,
name|Pair
operator|.
name|of
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|,
name|newDefaultDecTimeout
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newDefaultDecTimeout
argument_list|,
name|rm
operator|.
name|getDecommissioningTimeout
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Graceful decommission node with running application.    */
annotation|@
name|Test
DECL|method|testGracefulDecommissionWithApp ()
specifier|public
name|void
name|testGracefulDecommissionWithApp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|20480
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host3:4433"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|NodeId
name|id1
init|=
name|nm1
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|NodeId
name|id3
init|=
name|nm3
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id3
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Create an app and launch two containers on host1.
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|aaid
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|aaid
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Graceful decommission host1 and host3
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
literal|"host3"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id3
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
comment|// host1 should be DECOMMISSIONING due to running containers.
comment|// host3 should become DECOMMISSIONED.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id3
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|aaid
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Complete containers on host1.
comment|// Since the app is still RUNNING, expect NodeAction.NORMAL.
name|NodeHeartbeatResponse
name|nodeHeartbeat1
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|aaid
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat1
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finish the app and verified DECOMMISSIONED.
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|nodeHeartbeat1
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|aaid
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|nodeHeartbeat1
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
block|}
comment|/**   * Decommissioning using a post-configured include hosts file   */
annotation|@
name|Test
DECL|method|testAddNewIncludePathToConfiguration ()
specifier|public
name|void
name|testAddNewIncludePathToConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|metrics
operator|!=
literal|null
operator|)
assert|;
name|int
name|initialMetricCount
init|=
name|metrics
operator|.
name|getNumShutdownNMs
argument_list|()
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkShutdownNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|initialMetricCount
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should not have been shutdown."
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|nodeState
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should have been shutdown but is in state"
operator|+
name|nodeState
argument_list|,
name|NodeState
operator|.
name|SHUTDOWN
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
block|}
comment|/**    * Decommissioning using a post-configured exclude hosts file    */
annotation|@
name|Test
DECL|method|testAddNewExcludePathToConfiguration ()
specifier|public
name|void
name|testAddNewExcludePathToConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|metrics
operator|!=
literal|null
operator|)
assert|;
name|int
name|initialMetricCount
init|=
name|metrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|initialMetricCount
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should not have been decomissioned."
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should have been decomissioned but is in state"
operator|+
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|,
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationSuccess ()
specifier|public
name|void
name|testNodeRegistrationSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// trying to register a invalid node.
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationWithLabels ()
specifier|public
name|void
name|testNodeRegistrationWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|nodeLabelsMgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|nodeLabelsMgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|nodeLabelsMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught Exception while initializing"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeLabels
argument_list|(
name|toSet
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Action should be normal on valid Node Labels"
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|NodeLabelsUtils
operator|.
name|convertToStringSet
argument_list|(
name|registerReq
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Valid Node Labels were not accepted by RM"
argument_list|,
name|response
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationWithInvalidLabels ()
specifier|public
name|void
name|testNodeRegistrationWithInvalidLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|nodeLabelsMgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|nodeLabelsMgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|nodeLabelsMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"X"
argument_list|,
literal|"Y"
argument_list|,
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught Exception while initializing"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"On Invalid Node Labels action is expected to be normal"
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node Labels should not accepted by RM If Invalid"
argument_list|,
name|response
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationWithInvalidLabelsSyntax ()
specifier|public
name|void
name|testNodeRegistrationWithInvalidLabelsSyntax
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|nodeLabelsMgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|nodeLabelsMgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|nodeLabelsMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"X"
argument_list|,
literal|"Y"
argument_list|,
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught Exception while initializing"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"#Y"
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"On Invalid Node Labels action is expected to be normal"
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node Labels should not accepted by RM If Invalid"
argument_list|,
name|response
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationWithCentralLabelConfig ()
specifier|public
name|void
name|testNodeRegistrationWithCentralLabelConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|nodeLabelsMgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|nodeLabelsMgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|nodeLabelsMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught Exception while initializing"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
comment|// registered to RM with central label config
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node Labels should not accepted by RM If its configured with "
operator|+
literal|"Central configuration"
argument_list|,
name|response
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNodeStatusObject (NodeId nodeId)
specifier|private
name|NodeStatus
name|getNodeStatusObject
parameter_list|(
name|NodeId
name|nodeId
parameter_list|)
block|{
name|NodeStatus
name|status
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|status
operator|.
name|setResponseId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainersStatuses
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setKeepAliveApplications
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
annotation|@
name|Test
DECL|method|testNodeHeartBeatWithLabels ()
specifier|public
name|void
name|testNodeHeartBeatWithLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|nodeLabelsMgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|nodeLabelsMgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// adding valid labels
try|try
block|{
name|nodeLabelsMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught Exception while initializing"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// Registering of labels and other required info to RM
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node register label
name|RegisterNodeManagerResponse
name|registerResponse
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
comment|// modification of labels during heartbeat
name|NodeHeartbeatRequest
name|heartbeatReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeHeartbeatRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|heartbeatReq
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node heartbeat label update
name|NodeStatus
name|nodeStatusObject
init|=
name|getNodeStatusObject
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|heartbeatReq
operator|.
name|setNodeStatus
argument_list|(
name|nodeStatusObject
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownNMTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownContainerTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeatResponse
init|=
name|resourceTrackerService
operator|.
name|nodeHeartbeat
argument_list|(
name|heartbeatReq
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"InValid Node Labels were not accepted by RM"
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeatResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|NodeLabelsUtils
operator|.
name|convertToStringSet
argument_list|(
name|heartbeatReq
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Valid Node Labels were not accepted by RM"
argument_list|,
name|nodeHeartbeatResponse
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
comment|// After modification of labels next heartbeat sends null informing no update
name|Set
argument_list|<
name|String
argument_list|>
name|oldLabels
init|=
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|int
name|responseId
init|=
name|nodeStatusObject
operator|.
name|getResponseId
argument_list|()
decl_stmt|;
name|heartbeatReq
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeHeartbeatRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setNodeLabels
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Node heartbeat label update
name|nodeStatusObject
operator|=
name|getNodeStatusObject
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|nodeStatusObject
operator|.
name|setResponseId
argument_list|(
name|responseId
operator|+
literal|1
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setNodeStatus
argument_list|(
name|nodeStatusObject
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownNMTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownContainerTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartbeatResponse
operator|=
name|resourceTrackerService
operator|.
name|nodeHeartbeat
argument_list|(
name|heartbeatReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"InValid Node Labels were not accepted by RM"
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeatResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|,
name|oldLabels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node Labels should not accepted by RM"
argument_list|,
name|nodeHeartbeatResponse
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeHeartBeatWithInvalidLabels ()
specifier|public
name|void
name|testNodeHeartBeatWithInvalidLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|nodeLabelsMgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|nodeLabelsMgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|nodeLabelsMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Caught Exception while initializing"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|registerReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|registerReq
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|registerReq
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|registerResponse
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|registerReq
argument_list|)
decl_stmt|;
name|NodeHeartbeatRequest
name|heartbeatReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeHeartbeatRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|heartbeatReq
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"B"
argument_list|,
literal|"#C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Invalid heart beat labels
name|heartbeatReq
operator|.
name|setNodeStatus
argument_list|(
name|getNodeStatusObject
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownNMTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownContainerTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeatResponse
init|=
name|resourceTrackerService
operator|.
name|nodeHeartbeat
argument_list|(
name|heartbeatReq
argument_list|)
decl_stmt|;
comment|// response should be NORMAL when RM heartbeat labels are rejected
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Response should be NORMAL when RM heartbeat labels"
operator|+
literal|" are rejected"
argument_list|,
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeatResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nodeHeartbeatResponse
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeHeartbeatResponse
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeHeartbeatWithCentralLabelConfig ()
specifier|public
name|void
name|testNodeHeartbeatWithCentralLabelConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODELABEL_CONFIGURATION_TYPE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_NODELABEL_CONFIGURATION_TYPE
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|nodeLabelsMgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|nodeLabelsMgr
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|,
literal|"C"
argument_list|)
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|registerResponse
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|NodeHeartbeatRequest
name|heartbeatReq
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NodeHeartbeatRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|heartbeatReq
operator|.
name|setNodeLabels
argument_list|(
name|toNodeLabelSet
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Valid heart beat labels
name|heartbeatReq
operator|.
name|setNodeStatus
argument_list|(
name|getNodeStatusObject
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownNMTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getNMTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|heartbeatReq
operator|.
name|setLastKnownContainerTokenMasterKey
argument_list|(
name|registerResponse
operator|.
name|getContainerTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeatResponse
init|=
name|resourceTrackerService
operator|.
name|nodeHeartbeat
argument_list|(
name|heartbeatReq
argument_list|)
decl_stmt|;
comment|// response should be ok but the RMacceptNodeLabelsUpdate should be false
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeatResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// no change in the labels,
name|Assert
operator|.
name|assertNull
argument_list|(
name|nodeLabelsMgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
comment|// heartbeat labels rejected
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Invalid Node Labels should not accepted by RM"
argument_list|,
name|nodeHeartbeatResponse
operator|.
name|getAreNodeLabelsAcceptedByRM
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationVersionLessThanRM ()
specifier|public
name|void
name|testNodeRegistrationVersionLessThanRM
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_MINIMUM_VERSION
argument_list|,
literal|"EqualToRM"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|nmVersion
init|=
literal|"1.9.9"
decl_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNMVersion
argument_list|(
name|nmVersion
argument_list|)
expr_stmt|;
comment|// trying to register a invalid node.
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Diagnostic message did not contain: 'Disallowed NodeManager "
operator|+
literal|"Version "
operator|+
name|nmVersion
operator|+
literal|", is less than the minimum version'"
argument_list|,
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Disallowed NodeManager Version "
operator|+
name|nmVersion
operator|+
literal|", is less than the minimum version "
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationFailure ()
specifier|public
name|void
name|testNodeRegistrationFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
comment|// trying to register a invalid node.
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Disallowed NodeManager from  host2, Sending SHUTDOWN signal to the NodeManager."
argument_list|,
name|response
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetRMIdentifierInRegistration ()
specifier|public
name|void
name|testSetRMIdentifierInRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|nm
operator|.
name|registerNode
argument_list|()
decl_stmt|;
comment|// Verify the RMIdentifier is correctly set in RegisterNodeManagerResponse
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|,
name|response
operator|.
name|getRMIdentifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeRegistrationWithMinimumAllocations ()
specifier|public
name|void
name|testNodeRegistrationWithMinimumAllocations
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|"2048"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|BuilderUtils
operator|.
name|newNodeId
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response1
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|response1
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setMemorySize
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setVirtualCores
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response2
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|response2
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setMemorySize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setVirtualCores
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response3
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|response3
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setMemorySize
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
name|capability
operator|.
name|setVirtualCores
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|RegisterNodeManagerResponse
name|response4
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response4
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReboot ()
specifier|public
name|void
name|testReboot
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|int
name|initialMetricCount
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumRebootedNMs
argument_list|()
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|RESYNC
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Too far behind rm response id:0 nm response id:-100"
argument_list|,
name|nodeHeartbeat
operator|.
name|getDiagnosticsMessage
argument_list|()
argument_list|)
expr_stmt|;
name|checkRebootedNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|initialMetricCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeHeartbeatForAppCollectorsMap ()
specifier|public
name|void
name|testNodeHeartbeatForAppCollectorsMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set version to 2
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
comment|// enable aux-service based timeline collectors
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
argument_list|,
literal|"timeline_collector"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_AUX_SERVICES
operator|+
literal|"."
operator|+
literal|"timeline_collector"
operator|+
literal|".class"
argument_list|,
name|PerNodeTimelineCollectorsAuxService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|FileSystemTimelineWriterImpl
operator|.
name|class
argument_list|,
name|TimelineWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat1
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat2
init|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|RMNodeImpl
name|node1
init|=
operator|(
name|RMNodeImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNodeImpl
name|node2
init|=
operator|(
name|RMNodeImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app1
init|=
operator|(
name|RMAppImpl
operator|)
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|String
name|collectorAddr1
init|=
literal|"1.2.3.4:5"
decl_stmt|;
name|app1
operator|.
name|setCollectorData
argument_list|(
name|AppCollectorData
operator|.
name|newInstance
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|collectorAddr1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|collectorAddr2
init|=
literal|"5.4.3.2:1"
decl_stmt|;
name|RMAppImpl
name|app2
init|=
operator|(
name|RMAppImpl
operator|)
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|app2
operator|.
name|setCollectorData
argument_list|(
name|AppCollectorData
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|collectorAddr2
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|collectorAddr3
init|=
literal|"5.4.3.2:2"
decl_stmt|;
name|app2
operator|.
name|setCollectorData
argument_list|(
name|AppCollectorData
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|collectorAddr3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|collectorAddr4
init|=
literal|"5.4.3.2:3"
decl_stmt|;
name|app2
operator|.
name|setCollectorData
argument_list|(
name|AppCollectorData
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|collectorAddr4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a running container for app1 running on nm1
name|ContainerId
name|runningContainerId1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerStatus
name|status1
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|runningContainerId1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|statusList
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|statusList
operator|.
name|add
argument_list|(
name|status1
argument_list|)
expr_stmt|;
name|NodeHealthStatus
name|nodeHealth
init|=
name|NodeHealthStatus
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|NodeStatus
name|nodeStatus
init|=
name|NodeStatus
operator|.
name|newInstance
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|statusList
argument_list|,
literal|null
argument_list|,
name|nodeHealth
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|node1
operator|.
name|getRunningApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|node1
operator|.
name|getRunningApps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a running container for app2 running on nm2
name|ContainerId
name|runningContainerId2
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ContainerStatus
name|status2
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|runningContainerId2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|statusList
operator|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
expr_stmt|;
name|statusList
operator|.
name|add
argument_list|(
name|status2
argument_list|)
expr_stmt|;
name|nodeStatus
operator|=
name|NodeStatus
operator|.
name|newInstance
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|statusList
argument_list|,
literal|null
argument_list|,
name|nodeHealth
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|node2
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|node2
operator|.
name|getRunningApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|node2
operator|.
name|getRunningApps
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat1
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|AppCollectorData
argument_list|>
name|map1
init|=
name|nodeHeartbeat1
operator|.
name|getAppCollectors
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|collectorAddr1
argument_list|,
name|map1
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCollectorAddr
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartbeat2
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|AppCollectorData
argument_list|>
name|map2
init|=
name|nodeHeartbeat2
operator|.
name|getAppCollectors
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|map2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|collectorAddr4
argument_list|,
name|map2
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCollectorAddr
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRebootedNMCount (MockRM rm2, int count)
specifier|private
name|void
name|checkRebootedNMCount
parameter_list|(
name|MockRM
name|rm2
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumRebootedNMs
argument_list|()
operator|!=
name|count
operator|&&
name|waitCount
operator|++
operator|<
literal|20
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The rebooted metrics are not updated"
argument_list|,
name|count
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumRebootedNMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnhealthyNodeStatus ()
specifier|public
name|void
name|testUnhealthyNodeStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getUnhealthyNMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// node healthy
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// node unhealthy
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|checkUnhealthyNMCount
argument_list|(
name|rm
argument_list|,
name|nm1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// node healthy again
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkUnhealthyNMCount
argument_list|(
name|rm
argument_list|,
name|nm1
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|checkUnhealthyNMCount (MockRM rm, MockNM nm1, boolean health, int count)
specifier|private
name|void
name|checkUnhealthyNMCount
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm1
parameter_list|,
name|boolean
name|health
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
operator|!=
name|NodeState
operator|.
name|UNHEALTHY
operator|)
operator|==
name|health
operator|&&
name|waitCount
operator|++
operator|<
literal|20
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
operator|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
operator|!=
name|NodeState
operator|.
name|UNHEALTHY
operator|)
operator|==
name|health
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unhealthy metrics not incremented"
argument_list|,
name|count
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getUnhealthyNMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
DECL|method|testHandleContainerStatusInvalidCompletions ()
specifier|public
name|void
name|testHandleContainerStatusInvalidCompletions
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|EventHandler
name|handler
init|=
name|spy
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
decl_stmt|;
comment|// Case 1: Unmanaged AM
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Case 1.1: AppAttemptId is null
name|NMContainerStatus
name|report
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"Dummy Completed"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|handleNMContainerStatus
argument_list|(
name|report
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|handler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|Event
operator|)
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 1.2: Master container is null
name|RMAppAttemptImpl
name|currentAttempt
init|=
operator|(
name|RMAppAttemptImpl
operator|)
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|currentAttempt
operator|.
name|setMasterContainer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|report
operator|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"Dummy Completed"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|handleNMContainerStatus
argument_list|(
name|report
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|handler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|Event
operator|)
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 2: Managed AM
name|app
operator|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
comment|// Case 2.1: AppAttemptId is null
name|report
operator|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"Dummy Completed"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|handleNMContainerStatus
argument_list|(
name|report
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected - ignore
block|}
name|verify
argument_list|(
name|handler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|Event
operator|)
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// Case 2.2: Master container is null
name|currentAttempt
operator|=
operator|(
name|RMAppAttemptImpl
operator|)
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
name|currentAttempt
operator|.
name|setMasterContainer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|report
operator|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|currentAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"Dummy Completed"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|handleNMContainerStatus
argument_list|(
name|report
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected - ignore
block|}
name|verify
argument_list|(
name|handler
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
operator|(
name|Event
operator|)
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReconnectNode ()
specifier|public
name|void
name|testReconnectNode
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|createSchedulerEventDispatcher
parameter_list|()
block|{
return|return
operator|new
name|EventDispatcher
argument_list|<
name|SchedulerEvent
argument_list|>
argument_list|(
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|scheduler
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|checkUnhealthyNMCount
argument_list|(
name|rm
argument_list|,
name|nm2
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expectedNMs
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumActiveNMs
argument_list|()
decl_stmt|;
name|QueueMetrics
name|metrics
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
comment|// TODO Metrics incorrect in case of the FifoScheduler
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5120
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// reconnect of healthy node
name|nm1
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|response
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNMs
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnhealthyNMCount
argument_list|(
name|rm
argument_list|,
name|nm2
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// reconnect of unhealthy node
name|nm2
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNMs
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|)
expr_stmt|;
name|checkUnhealthyNMCount
argument_list|(
name|rm
argument_list|,
name|nm2
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// unhealthy node changed back to healthy
name|nm2
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5120
operator|+
literal|5120
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// reconnect of node with changed capability
name|nm1
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5120
operator|+
literal|10240
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// reconnect of node with changed capability and running applications
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApps
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
name|runningApps
operator|.
name|add
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|nm1
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|15360
argument_list|,
literal|2
argument_list|,
name|runningApps
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5120
operator|+
literal|15360
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// reconnect healthy node changing http port
name|nm1
operator|=
operator|new
name|MockNM
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|setHttpPort
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|RMNode
name|rmNode
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rmNode
operator|.
name|getHttpPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5120
argument_list|,
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5120
operator|+
literal|15360
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNMUnregistration ()
specifier|public
name|void
name|testNMUnregistration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|int
name|shutdownNMsCount
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumShutdownNMs
argument_list|()
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UnRegisterNodeManagerRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|UnRegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|unRegisterNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|checkShutdownNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|shutdownNMsCount
argument_list|)
expr_stmt|;
comment|// The RM should remove the node after unregistration, hence send a reboot
comment|// command.
name|nodeHeartbeat
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|RESYNC
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnhealthyNMUnregistration ()
specifier|public
name|void
name|testUnhealthyNMUnregistration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getUnhealthyNMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// node healthy
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|shutdownNMsCount
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumShutdownNMs
argument_list|()
decl_stmt|;
comment|// node unhealthy
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|checkUnhealthyNMCount
argument_list|(
name|rm
argument_list|,
name|nm1
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|UnRegisterNodeManagerRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|UnRegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|unRegisterNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|checkShutdownNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|shutdownNMsCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidNMUnregistration ()
specifier|public
name|void
name|testInvalidNMUnregistration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|int
name|decommisionedNMsCount
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
decl_stmt|;
comment|// Node not found for unregister
name|UnRegisterNodeManagerRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|UnRegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|BuilderUtils
operator|.
name|newNodeId
argument_list|(
literal|"host"
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|unRegisterNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|checkShutdownNMCount
argument_list|(
name|rm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 1. Register the Node Manager
comment|// 2. Exclude the same Node Manager host
comment|// 3. Give NM heartbeat to RM
comment|// 4. Unregister the Node Manager
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|,
name|resourceTrackerService
argument_list|)
decl_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|nm1
operator|.
name|registerNode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|shutdownNMsCount
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumShutdownNMs
argument_list|()
decl_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|heartbeatResponse
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
argument_list|,
name|heartbeatResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
name|decommisionedNMsCount
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|unRegisterNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|checkShutdownNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|shutdownNMsCount
argument_list|)
expr_stmt|;
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
name|decommisionedNMsCount
argument_list|)
expr_stmt|;
comment|// 1. Register the Node Manager
comment|// 2. Exclude the same Node Manager host
comment|// 3. Unregister the Node Manager
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"host2:1234"
argument_list|,
literal|5120
argument_list|,
name|resourceTrackerService
argument_list|)
decl_stmt|;
name|RegisterNodeManagerResponse
name|response2
init|=
name|nm2
operator|.
name|registerNode
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response2
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNodeId
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|unRegisterNodeManager
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|checkShutdownNMCount
argument_list|(
name|rm
argument_list|,
operator|++
name|shutdownNMsCount
argument_list|)
expr_stmt|;
name|checkDecommissionedNMCount
argument_list|(
name|rm
argument_list|,
name|decommisionedNMsCount
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInitDecommMetric ()
specifier|public
name|void
name|testInitDecommMetric
parameter_list|()
throws|throws
name|Exception
block|{
name|testInitDecommMetricHelper
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testInitDecommMetricHelper
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testInitDecommMetricHelper (boolean hasIncludeList)
specifier|public
name|void
name|testInitDecommMetricHelper
parameter_list|(
name|boolean
name|hasIncludeList
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|"host1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasIncludeList
condition|)
block|{
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|nm2
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of Decommissioned nodes should be 1"
argument_list|,
literal|1
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The inactiveRMNodes should contain an entry for the"
operator|+
literal|"decommissioned node"
argument_list|,
literal|1
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nm1
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The decommissioned nodes metric should have "
operator|+
literal|"decremented to 0"
argument_list|,
literal|0
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The active nodes metric should be 2"
argument_list|,
literal|2
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The inactive RMNodes entry should have been removed"
argument_list|,
literal|0
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInitDecommMetricNoRegistration ()
specifier|public
name|void
name|testInitDecommMetricNoRegistration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//host3 will not register or heartbeat
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|"host3"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The decommissioned nodes metric should be 1 "
argument_list|,
literal|1
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The decommissioned nodes metric should be 2 "
argument_list|,
literal|2
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIncorrectRecommission ()
specifier|public
name|void
name|testIncorrectRecommission
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Check decommissioned node not get recommissioned with graceful refresh
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|"host3"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|"host1"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodesGracefully
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node "
operator|+
name|nm1
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|" should be Decommissioned"
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodesGracefully
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node "
operator|+
name|nm1
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|" should be Decommissioned"
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Remove a node from all lists and check if its forgotten.    */
annotation|@
name|Test
DECL|method|testNodeRemovalNormally ()
specifier|public
name|void
name|testNodeRemovalNormally
parameter_list|()
throws|throws
name|Exception
block|{
name|testNodeRemovalUtil
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testNodeRemovalUtilLost
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testNodeRemovalUtilRebooted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testNodeRemovalUtilUnhealthy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeRemovalGracefully ()
specifier|public
name|void
name|testNodeRemovalGracefully
parameter_list|()
throws|throws
name|Exception
block|{
name|testNodeRemovalUtil
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testNodeRemovalUtilLost
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testNodeRemovalUtilRebooted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testNodeRemovalUtilUnhealthy
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshNodesOption (boolean doGraceful, Configuration conf)
specifier|public
name|void
name|refreshNodesOption
parameter_list|(
name|boolean
name|doGraceful
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|doGraceful
condition|)
block|{
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodesGracefully
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNodeRemovalUtil (boolean doGraceful)
specifier|public
name|void
name|testNodeRemovalUtil
parameter_list|(
name|boolean
name|doGraceful
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|timeoutValue
init|=
literal|500
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|timeoutValue
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:4433"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|metrics
operator|!=
literal|null
operator|)
assert|;
comment|//check all 3 nodes joined in as NORMAL
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All 3 nodes should be active"
argument_list|,
name|metrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//Remove nm2 from include list, should now be shutdown with timer test
name|String
name|ip
init|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
if|if
condition|(
name|doGraceful
condition|)
block|{
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
block|}
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node should not be in active node list"
argument_list|,
operator|!
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RMNode
name|rmNode
init|=
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should be in inactive node list"
argument_list|,
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|doGraceful
condition|?
name|NodeState
operator|.
name|DECOMMISSIONED
else|:
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Active nodes should be 2"
argument_list|,
name|metrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shutdown nodes should be expected"
argument_list|,
name|metrics
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|,
name|doGraceful
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|int
name|nodeRemovalTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|)
decl_stmt|;
name|int
name|nodeRemovalInterval
init|=
name|rmContext
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|getNodeRemovalCheckInterval
argument_list|()
decl_stmt|;
name|long
name|maxThreadSleeptime
init|=
name|nodeRemovalInterval
operator|+
name|nodeRemovalTimeout
decl_stmt|;
name|latch
operator|.
name|await
argument_list|(
name|maxThreadSleeptime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|rmNode
operator|=
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should have been forgotten!"
argument_list|,
name|rmNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shutdown nodes should be 0 now"
argument_list|,
name|metrics
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Check node removal and re-addition before timer expires
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
name|ip
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nm2
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|doGraceful
condition|?
name|NodeState
operator|.
name|DECOMMISSIONING
else|:
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rmNode
operator|=
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should be shutdown"
argument_list|,
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|,
name|doGraceful
condition|?
name|NodeState
operator|.
name|DECOMMISSIONED
else|:
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Active nodes should be 2"
argument_list|,
name|metrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shutdown nodes should be expected"
argument_list|,
name|metrics
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|,
name|doGraceful
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
comment|//add back the node before timer expires
name|latch
operator|.
name|await
argument_list|(
name|maxThreadSleeptime
operator|-
literal|2000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
name|ip
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nm2
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shutdown nodes should be 0 now"
argument_list|,
name|metrics
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All 3 nodes should be active"
argument_list|,
name|metrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//Decommission this node, check timer doesn't remove it
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
literal|"host2"
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rmNode
operator|=
name|doGraceful
condition|?
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
else|:
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node should be DECOMMISSIONED or DECOMMISSIONING"
argument_list|,
operator|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
operator|)
operator|||
operator|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Decommissioned/ing nodes should be 1 now"
argument_list|,
name|metrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
name|maxThreadSleeptime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|rmNode
operator|=
name|doGraceful
condition|?
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
else|:
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node should be DECOMMISSIONED or DECOMMISSIONING"
argument_list|,
operator|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
operator|)
operator|||
operator|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Decommissioned/ing nodes should be 1 now"
argument_list|,
name|metrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//Test decommed/ing node that transitions to untracked,timer should remove
name|testNodeRemovalUtilDecomToUntracked
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|maxThreadSleeptime
argument_list|,
name|doGraceful
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// A helper method used by testNodeRemovalUtil to avoid exceeding
comment|// max allowed length.
DECL|method|testNodeRemovalUtilDecomToUntracked ( RMContext rmContext, Configuration conf, MockNM nm1, MockNM nm2, MockNM nm3, long maxThreadSleeptime, boolean doGraceful)
specifier|private
name|void
name|testNodeRemovalUtilDecomToUntracked
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|MockNM
name|nm1
parameter_list|,
name|MockNM
name|nm2
parameter_list|,
name|MockNM
name|nm3
parameter_list|,
name|long
name|maxThreadSleeptime
parameter_list|,
name|boolean
name|doGraceful
parameter_list|)
throws|throws
name|Exception
block|{
name|ClusterMetrics
name|metrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|String
name|ip
init|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
name|ip
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//nm2.nodeHeartbeat(true);
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
name|maxThreadSleeptime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|RMNode
name|rmNode
init|=
name|doGraceful
condition|?
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
else|:
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"Timer for this node was not canceled!"
argument_list|,
name|rmNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node should be DECOMMISSIONED or DECOMMISSIONING"
argument_list|,
operator|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONED
operator|)
operator|||
operator|(
name|rmNode
operator|.
name|getState
argument_list|()
operator|==
name|NodeState
operator|.
name|DECOMMISSIONING
operator|)
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|"host1"
argument_list|,
name|ip
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
name|maxThreadSleeptime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|rmNode
operator|=
name|doGraceful
condition|?
name|rmContext
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
else|:
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node should have been forgotten!"
argument_list|,
name|rmNode
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shutdown nodes should be 0 now"
argument_list|,
name|metrics
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shutdown nodes should be 0 now"
argument_list|,
name|metrics
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Active nodes should be 2"
argument_list|,
name|metrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testNodeRemovalUtilLost (boolean doGraceful)
specifier|private
name|void
name|testNodeRemovalUtilLost
parameter_list|(
name|boolean
name|doGraceful
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_EXPIRY_INTERVAL_MS
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|int
name|timeoutValue
init|=
literal|500
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"localhost"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|timeoutValue
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:4433"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|clusterMetrics
decl_stmt|;
assert|assert
operator|(
name|metrics
operator|!=
literal|null
operator|)
assert|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|//check all 3 nodes joined in as NORMAL
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All 3 nodes should be active"
argument_list|,
name|metrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|waitCount
operator|++
operator|<
literal|20
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"host2 should be a lost NM!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host2 should be a lost NM!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|NodeState
operator|.
name|LOST
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 1 Lost NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumLostNMs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 2 Active NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|nodeRemovalTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|)
decl_stmt|;
name|int
name|nodeRemovalInterval
init|=
name|rmContext
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|getNodeRemovalCheckInterval
argument_list|()
decl_stmt|;
name|long
name|maxThreadSleeptime
init|=
name|nodeRemovalInterval
operator|+
name|nodeRemovalTimeout
decl_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|waitCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|waitCount
operator|++
operator|<
literal|2
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
name|maxThreadSleeptime
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host2 should have been forgotten!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be no Lost NMs!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumLostNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 2 Active NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testNodeRemovalUtilRebooted (boolean doGraceful)
specifier|private
name|void
name|testNodeRemovalUtilRebooted
parameter_list|(
name|boolean
name|doGraceful
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|timeoutValue
init|=
literal|500
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"localhost"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|timeoutValue
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:4433"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|clusterMetrics
decl_stmt|;
assert|assert
operator|(
name|metrics
operator|!=
literal|null
operator|)
assert|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|100
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"host2 should be a rebooted NM!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host2 should be a rebooted NM!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|NodeState
operator|.
name|REBOOTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 1 Rebooted NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumRebootedNMs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 2 Active NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|nodeRemovalTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|)
decl_stmt|;
name|int
name|nodeRemovalInterval
init|=
name|rmContext
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|getNodeRemovalCheckInterval
argument_list|()
decl_stmt|;
name|long
name|maxThreadSleeptime
init|=
name|nodeRemovalInterval
operator|+
name|nodeRemovalTimeout
decl_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|waitCount
operator|++
operator|<
literal|2
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
name|maxThreadSleeptime
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host2 should have been forgotten!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be no Rebooted NMs!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumRebootedNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 2 Active NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testNodeRemovalUtilUnhealthy (boolean doGraceful)
specifier|private
name|void
name|testNodeRemovalUtilUnhealthy
parameter_list|(
name|boolean
name|doGraceful
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|int
name|timeoutValue
init|=
literal|500
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_INCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeHostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"localhost"
argument_list|,
literal|"host2"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|timeoutValue
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:5678"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:4433"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|clusterMetrics
decl_stmt|;
assert|assert
operator|(
name|metrics
operator|!=
literal|null
operator|)
assert|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|//check all 3 nodes joined in as NORMAL
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|NORMAL
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"All 3 nodes should be active"
argument_list|,
name|metrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// node healthy
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkUnhealthyNMCount
argument_list|(
name|rm
argument_list|,
name|nm2
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
literal|"host1"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
name|excludeHostFile
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|refreshNodesOption
argument_list|(
name|doGraceful
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|doGraceful
condition|)
block|{
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"host2 should be a shutdown NM!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host2 should be a shutdown NM!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 2 Active NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|doGraceful
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 1 Shutdown NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 0 Unhealthy NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getUnhealthyNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
name|nodeRemovalTimeout
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC
argument_list|)
decl_stmt|;
name|int
name|nodeRemovalInterval
init|=
name|rmContext
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|getNodeRemovalCheckInterval
argument_list|()
decl_stmt|;
name|long
name|maxThreadSleeptime
init|=
name|nodeRemovalInterval
operator|+
name|nodeRemovalTimeout
decl_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|waitCount
operator|++
operator|<
literal|2
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
name|maxThreadSleeptime
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"host2 should have been forgotten!"
argument_list|,
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be no Shutdown NMs!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumRebootedNMs
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"There should be 2 Active NM!"
argument_list|,
name|clusterMetrics
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|ensureFileExists (File file)
specifier|private
name|void
name|ensureFileExists
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|TEMP_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeToHostsFile (String... hosts)
specifier|private
name|void
name|writeToHostsFile
parameter_list|(
name|String
modifier|...
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
name|writeToHostsFile
argument_list|(
name|hostFile
argument_list|,
name|hosts
argument_list|)
expr_stmt|;
block|}
DECL|method|writeToHostsFile (File file, String... hosts)
specifier|private
name|void
name|writeToHostsFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
modifier|...
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureFileExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fStream
operator|.
name|write
argument_list|(
name|hosts
index|[
name|i
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fStream
operator|.
name|write
argument_list|(
literal|"\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fStream
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fStream
argument_list|)
expr_stmt|;
name|fStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeToHostsXmlFile ( File file, Pair<String, Integer>... hostsAndTimeouts)
specifier|private
name|void
name|writeToHostsXmlFile
parameter_list|(
name|File
name|file
parameter_list|,
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
modifier|...
name|hostsAndTimeouts
parameter_list|)
throws|throws
name|Exception
block|{
name|ensureFileExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|DocumentBuilderFactory
name|dbFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|dbFactory
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|hosts
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"hosts"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|hostsAndTimeout
range|:
name|hostsAndTimeouts
control|)
block|{
name|Element
name|host
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"host"
argument_list|)
decl_stmt|;
name|hosts
operator|.
name|appendChild
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|Element
name|name
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|host
operator|.
name|appendChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|name
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|hostsAndTimeout
operator|.
name|getLeft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostsAndTimeout
operator|.
name|getRight
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|timeout
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"timeout"
argument_list|)
decl_stmt|;
name|host
operator|.
name|appendChild
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|hostsAndTimeout
operator|.
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TransformerFactory
name|transformerFactory
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Transformer
name|transformer
init|=
name|transformerFactory
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkDecommissionedNMCount (MockRM rm, int count)
specifier|private
name|void
name|checkDecommissionedNMCount
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
operator|!=
name|count
operator|&&
name|waitCount
operator|++
operator|<
literal|20
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The decommisioned metrics are not updated"
argument_list|,
name|count
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkShutdownNMCount (MockRM rm, int count)
specifier|private
name|void
name|checkShutdownNMCount
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumShutdownNMs
argument_list|()
operator|!=
name|count
operator|&&
name|waitCount
operator|++
operator|<
literal|20
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The shutdown metrics are not updated"
argument_list|,
name|count
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumShutdownNMs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|hostFile
operator|!=
literal|null
operator|&&
name|hostFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|hostFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|ClusterMetrics
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|MetricsSystem
name|ms
init|=
name|DefaultMetricsSystem
operator|.
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|.
name|getSource
argument_list|(
literal|"ClusterMetrics"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testHandleOpportunisticContainerStatus ()
specifier|public
name|void
name|testHandleOpportunisticContainerStatus
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|ResourceTrackerService
name|resourceTrackerService
init|=
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
decl_stmt|;
name|SchedulerApplicationAttempt
name|applicationAttempt
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|applicationAttempt
operator|==
literal|null
condition|)
block|{
name|applicationAttempt
operator|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Resource
name|currentConsumption
init|=
name|applicationAttempt
operator|.
name|getCurrentConsumption
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|currentConsumption
argument_list|)
expr_stmt|;
name|Resource
name|allocResources
init|=
name|applicationAttempt
operator|.
name|getQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedResources
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|allocResources
argument_list|)
expr_stmt|;
name|RegisterNodeManagerRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNodeId
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|req
operator|.
name|setHttpPort
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNMVersion
argument_list|(
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|c1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|c2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerId
name|c3
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|queuedOpp
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|c1
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"Dummy Queued OC"
argument_list|,
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|1234
argument_list|,
literal|""
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|runningOpp
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|c2
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"Dummy Running OC"
argument_list|,
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|1234
argument_list|,
literal|""
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|runningGuar
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|c3
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"Dummy Running GC"
argument_list|,
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|1234
argument_list|,
literal|""
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|req
operator|.
name|setContainerStatuses
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|queuedOpp
argument_list|,
name|runningOpp
argument_list|,
name|runningGuar
argument_list|)
argument_list|)
expr_stmt|;
comment|// trying to register a invalid node.
name|RegisterNodeManagerResponse
name|response
init|=
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|response
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|applicationAttempt
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|liveContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|RMContainer
argument_list|>
name|iter
init|=
name|liveContainers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RMContainer
name|rc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rc
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|c3
argument_list|)
condition|?
name|ExecutionType
operator|.
name|GUARANTEED
else|:
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|rc
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Should only include GUARANTEED resources
name|currentConsumption
operator|=
name|applicationAttempt
operator|.
name|getCurrentConsumption
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|currentConsumption
argument_list|)
expr_stmt|;
name|allocResources
operator|=
name|applicationAttempt
operator|.
name|getQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedResources
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|allocResources
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|schedulerNode
argument_list|)
expr_stmt|;
name|Resource
name|nodeResources
init|=
name|schedulerNode
operator|.
name|getAllocatedResource
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|nodeResources
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNodeHeartBeatResponseForUnknownContainerCleanUp ()
specifier|public
name|void
name|testNodeHeartBeatResponseForUnknownContainerCleanUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// send 1st heartbeat
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create 2 unknown containers tracked by NM
name|ApplicationId
name|applicationId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|applicationId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|cid1
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ContainerId
name|cid2
init|=
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptId
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
name|containerStats
operator|.
name|add
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|cid1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|containerStats
operator|.
name|add
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|cid2
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|conts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|conts
operator|.
name|put
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|containerStats
argument_list|)
expr_stmt|;
comment|// add RMApp into context.
name|RMApp
name|app1
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|applicationId
argument_list|,
name|app1
argument_list|)
expr_stmt|;
comment|// Send unknown container status in heartbeat
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|conts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|int
name|containersToBeRemovedFromNM
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|containersToBeRemovedFromNM
operator|+=
name|nodeHeartbeat
operator|.
name|getContainersToBeRemovedFromNM
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// asserting for 2 since two unknown containers status has been sent
if|if
condition|(
name|containersToBeRemovedFromNM
operator|==
literal|2
condition|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testResponseIdOverflow ()
specifier|public
name|void
name|testResponseIdOverflow
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// prepare the responseId that's about to overflow
name|RMNode
name|node
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|getLastNodeHeartBeatResponse
argument_list|()
operator|.
name|setResponseId
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|setResponseId
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// heartbeat twice and check responseId
name|nodeHeartbeat
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|nodeHeartbeat
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|,
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeHeartbeat
operator|.
name|getResponseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

