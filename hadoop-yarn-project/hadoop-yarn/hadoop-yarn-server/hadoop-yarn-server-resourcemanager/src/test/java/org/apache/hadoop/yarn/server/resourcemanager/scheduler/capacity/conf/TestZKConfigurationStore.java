begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryNTimes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|ZKRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|MutableConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|QueueConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedConfUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests {@link ZKConfigurationStore}.  */
end_comment

begin_class
DECL|class|TestZKConfigurationStore
specifier|public
class|class
name|TestZKConfigurationStore
extends|extends
name|ConfigurationStoreBaseTest
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestZKConfigurationStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZK_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|ZK_TIMEOUT_MS
init|=
literal|10000
decl_stmt|;
DECL|field|curatorTestingServer
specifier|private
name|TestingServer
name|curatorTestingServer
decl_stmt|;
DECL|field|curatorFramework
specifier|private
name|CuratorFramework
name|curatorFramework
decl_stmt|;
DECL|field|rm
specifier|private
name|ResourceManager
name|rm
decl_stmt|;
DECL|method|setupCuratorServer ()
specifier|public
specifier|static
name|TestingServer
name|setupCuratorServer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestingServer
name|curatorTestingServer
init|=
operator|new
name|TestingServer
argument_list|()
decl_stmt|;
name|curatorTestingServer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curatorTestingServer
return|;
block|}
DECL|method|setupCuratorFramework ( TestingServer curatorTestingServer)
specifier|public
specifier|static
name|CuratorFramework
name|setupCuratorFramework
parameter_list|(
name|TestingServer
name|curatorTestingServer
parameter_list|)
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curatorFramework
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curatorFramework
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curatorFramework
return|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|curatorTestingServer
operator|=
name|setupCuratorServer
argument_list|()
expr_stmt|;
name|curatorFramework
operator|=
name|setupCuratorFramework
argument_list|(
name|curatorTestingServer
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|,
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rmContext
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanup ()
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|curatorFramework
operator|.
name|close
argument_list|()
expr_stmt|;
name|curatorTestingServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVersioning ()
specifier|public
name|void
name|testVersioning
parameter_list|()
throws|throws
name|Exception
block|{
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confStore
operator|.
name|getConfStoreVersion
argument_list|()
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ZKConfigurationStore
operator|.
name|CURRENT_VERSION_INFO
argument_list|,
name|confStore
operator|.
name|getConfStoreVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPersistConfiguration ()
specifier|public
name|void
name|testPersistConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|schedConf
operator|.
name|set
argument_list|(
literal|"key"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HOSTNAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a new configuration store, and check for old configuration
name|confStore
operator|=
name|createConfStore
argument_list|()
expr_stmt|;
name|schedConf
operator|.
name|set
argument_list|(
literal|"key"
argument_list|,
literal|"badVal"
argument_list|)
expr_stmt|;
comment|// Should ignore passed-in scheduler configuration.
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPersistUpdatedConfiguration ()
specifier|public
name|void
name|testPersistUpdatedConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a new configuration store, and check for updated configuration
name|confStore
operator|=
name|createConfStore
argument_list|()
expr_stmt|;
name|schedConf
operator|.
name|set
argument_list|(
literal|"key"
argument_list|,
literal|"badVal"
argument_list|)
expr_stmt|;
comment|// Should ignore passed-in scheduler configuration.
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxLogs ()
specifier|public
name|void
name|testMaxLogs
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDCONF_MAX_LOGS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|>
name|logs
init|=
operator|(
operator|(
name|ZKConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update1
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|logs
operator|=
operator|(
operator|(
name|ZKConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"val2"
argument_list|)
expr_stmt|;
name|mutation
operator|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update2
argument_list|,
name|TEST_USER
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|logs
operator|=
operator|(
operator|(
name|ZKConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next update should purge first update from logs.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update3
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update3
operator|.
name|put
argument_list|(
literal|"key3"
argument_list|,
literal|"val3"
argument_list|)
expr_stmt|;
name|mutation
operator|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update3
argument_list|,
name|TEST_USER
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|logs
operator|=
operator|(
operator|(
name|ZKConfigurationStore
operator|)
name|confStore
operator|)
operator|.
name|getLogs
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val3"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key3"
argument_list|)
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|logs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val2"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val3"
argument_list|,
name|logs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUpdates
argument_list|()
operator|.
name|get
argument_list|(
literal|"key3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createRMHAConf (String rmIds, String rmId, int adminPort)
specifier|public
name|Configuration
name|createRMHAConf
parameter_list|(
name|String
name|rmIds
parameter_list|,
name|String
name|rmId
parameter_list|,
name|int
name|adminPort
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|rmIds
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_STORE_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|ZK_CONFIGURATION_STORE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|ZKRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|rpcAddress
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|rpcAddress
argument_list|,
name|id
argument_list|)
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|rmId
argument_list|)
argument_list|,
literal|"localhost:"
operator|+
name|adminPort
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * When failing over, new active RM should read from current state of store,    * including any updates when the new active RM was in standby.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testFailoverReadsFromUpdatedStore ()
specifier|public
name|void
name|testFailoverReadsFromUpdatedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|Configuration
name|conf1
init|=
name|createRMHAConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm1
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
name|createRMHAConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm2"
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Standby"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update configuration on RM1
name|SchedConfUpdateInfo
name|schedConfUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|schedConfUpdateInfo
operator|.
name|getGlobalParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|MutableConfigurationProvider
name|confProvider
init|=
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getMutableConfProvider
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|TEST_USER
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|confProvider
operator|.
name|logAndApplyMutation
argument_list|(
name|user
argument_list|,
name|schedConfUpdateInfo
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf1
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|confirmPendingMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
operator|(
name|MutableCSConfigurationProvider
operator|)
name|confProvider
operator|)
operator|.
name|getConfStore
argument_list|()
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Next update is not persisted, it should not be recovered
name|schedConfUpdateInfo
operator|.
name|getGlobalParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"badVal"
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|logAndApplyMutation
argument_list|(
name|user
argument_list|,
name|schedConfUpdateInfo
argument_list|)
expr_stmt|;
comment|// Start RM2 and verifies it starts with updated configuration
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm2
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ZK_TIMEOUT_MS
operator|/
literal|50
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"RM should have been fenced"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
call|(
name|MutableCSConfigurationProvider
call|)
argument_list|(
operator|(
name|CapacityScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
argument_list|)
operator|.
name|getMutableConfProvider
argument_list|()
operator|)
operator|.
name|getConfStore
argument_list|()
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transition to standby will set RM's HA status and then reinitialize in
comment|// a separate thread. Despite asserting for STANDBY state, it's
comment|// possible for reinitialization to be unfinished. Wait here for it to
comment|// finish, otherwise closing rm1 will close zkManager and the unfinished
comment|// reinitialization will throw an exception.
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * When failing over, if RM1 stopped and removed a queue that RM2 has in    * memory, failing over to RM2 should not throw an exception.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testFailoverAfterRemoveQueue ()
specifier|public
name|void
name|testFailoverAfterRemoveQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|Configuration
name|conf1
init|=
name|createRMHAConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm1
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
name|createRMHAConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm2"
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Standby"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|TEST_USER
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|MutableConfigurationProvider
name|confProvider
init|=
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getMutableConfProvider
argument_list|()
decl_stmt|;
comment|// Add root.a
name|SchedConfUpdateInfo
name|schedConfUpdateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|addParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|addParams
operator|.
name|put
argument_list|(
literal|"capacity"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|addInfo
init|=
operator|new
name|QueueConfigInfo
argument_list|(
literal|"root.a"
argument_list|,
name|addParams
argument_list|)
decl_stmt|;
name|schedConfUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
name|addInfo
argument_list|)
expr_stmt|;
comment|// Stop root.default
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|stopParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|stopParams
operator|.
name|put
argument_list|(
literal|"state"
argument_list|,
literal|"STOPPED"
argument_list|)
expr_stmt|;
name|stopParams
operator|.
name|put
argument_list|(
literal|"capacity"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|QueueConfigInfo
name|stopInfo
init|=
operator|new
name|QueueConfigInfo
argument_list|(
literal|"root.default"
argument_list|,
name|stopParams
argument_list|)
decl_stmt|;
name|schedConfUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
name|stopInfo
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|logAndApplyMutation
argument_list|(
name|user
argument_list|,
name|schedConfUpdateInfo
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf1
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|confirmPendingMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.queues"
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove root.default
name|schedConfUpdateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|schedConfUpdateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|schedConfUpdateInfo
operator|.
name|getRemoveQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
literal|"root.default"
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|logAndApplyMutation
argument_list|(
name|user
argument_list|,
name|schedConfUpdateInfo
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|conf1
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|confProvider
operator|.
name|confirmPendingMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.queues"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start RM2 and verifies it starts with updated configuration
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm2
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ZK_TIMEOUT_MS
operator|/
literal|50
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"RM should have been fenced"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
call|(
name|MutableCSConfigurationProvider
call|)
argument_list|(
operator|(
name|CapacityScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
argument_list|)
operator|.
name|getMutableConfProvider
argument_list|()
operator|)
operator|.
name|getConfStore
argument_list|()
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.queues"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
operator|(
operator|(
name|MutableConfScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"yarn.scheduler.capacity.root.queues"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Transition to standby will set RM's HA status and then reinitialize in
comment|// a separate thread. Despite asserting for STANDBY state, it's
comment|// possible for reinitialization to be unfinished. Wait here for it to
comment|// finish, otherwise closing rm1 will close zkManager and the unfinished
comment|// reinitialization will throw an exception.
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createConfStore ()
specifier|public
name|YarnConfigurationStore
name|createConfStore
parameter_list|()
block|{
return|return
operator|new
name|ZKConfigurationStore
argument_list|()
return|;
block|}
block|}
end_class

end_unit

