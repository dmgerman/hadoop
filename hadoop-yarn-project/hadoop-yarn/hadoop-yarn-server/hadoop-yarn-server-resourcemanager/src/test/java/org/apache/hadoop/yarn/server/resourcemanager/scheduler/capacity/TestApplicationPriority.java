begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestApplicationPriority
specifier|public
class|class
name|TestApplicationPriority
block|{
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationOrderingWithPriority ()
specifier|public
name|void
name|testApplicationOrderingWithPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|LeafQueue
name|q
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// add app 1 start
name|ApplicationId
name|appId1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMAppAttemptMetrics
name|attemptMetric1
init|=
operator|new
name|RMAppAttemptMetrics
argument_list|(
name|appAttemptId1
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app1
init|=
name|mock
argument_list|(
name|RMAppImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId1
argument_list|)
expr_stmt|;
name|RMAppAttemptImpl
name|attempt1
init|=
name|mock
argument_list|(
name|RMAppAttemptImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt1
operator|.
name|getRMAppAttemptMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptMetric1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attempt1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|appId1
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|SchedulerEvent
name|addAppEvent1
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId1
argument_list|,
literal|"default"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAppEvent1
argument_list|)
expr_stmt|;
name|SchedulerEvent
name|addAttemptEvent1
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAttemptEvent1
argument_list|)
expr_stmt|;
comment|// add app1 end
comment|// add app2 begin
name|ApplicationId
name|appId2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|100
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId2
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMAppAttemptMetrics
name|attemptMetric2
init|=
operator|new
name|RMAppAttemptMetrics
argument_list|(
name|appAttemptId2
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|RMAppImpl
name|app2
init|=
name|mock
argument_list|(
name|RMAppImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId2
argument_list|)
expr_stmt|;
name|RMAppAttemptImpl
name|attempt2
init|=
name|mock
argument_list|(
name|RMAppAttemptImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|attempt2
operator|.
name|getRMAppAttemptMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptMetric2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attempt2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|appId2
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|SchedulerEvent
name|addAppEvent2
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId2
argument_list|,
literal|"default"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAppEvent2
argument_list|)
expr_stmt|;
name|SchedulerEvent
name|addAttemptEvent2
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAttemptEvent2
argument_list|)
expr_stmt|;
comment|// add app end
comment|// Now, the first assignment will be for app2 since app2 is of highest
comment|// priority
name|assertEquals
argument_list|(
name|q
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|q
operator|.
name|getApplications
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|appAttemptId2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationPriorityAllocation ()
specifier|public
name|void
name|testApplicationPriorityAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|16
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB given to AM1, remaining 15GB on nm1
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// allocate 7 containers for App1
name|List
argument_list|<
name|Container
argument_list|>
name|allocated1
init|=
name|am1
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|7
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|allocated1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// check node report, 15 GB used (1 AM and 7 containers) and 1 GB available
name|SchedulerNodeReport
name|report_nm1
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit the second app App2 with priority 8 (Higher than App1)
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority2
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB which was free is given to AM of App2
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// check node report, 16 GB used and 0 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// get scheduler
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// get scheduler app
name|FiCaSchedulerApp
name|schedulerAppAttempt
init|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// kill 2 containers of App1 to free up some space
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|allocated1
control|)
block|{
if|if
condition|(
operator|++
name|counter
operator|>
literal|2
condition|)
block|{
break|break;
block|}
name|cs
operator|.
name|markContainerForKillable
argument_list|(
name|schedulerAppAttempt
operator|.
name|getRMContainer
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check node report, 12 GB used and 4 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// send updated request for App1
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// kick the scheduler, since App2 priority is more than App1, it will get
comment|// remaining cluster space.
name|List
argument_list|<
name|Container
argument_list|>
name|allocated2
init|=
name|am2
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// App2 has got 2 containers now.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check node report, 16 GB used and 0 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriorityWithPendingApplications ()
specifier|public
name|void
name|testPriorityWithPendingApplications
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB given to AM1, remaining 7GB on nm1
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// kick the scheduler, 7 containers will be allocated for App1
name|List
argument_list|<
name|Container
argument_list|>
name|allocated1
init|=
name|am1
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|7
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|allocated1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// check node report, 8 GB used (1 AM and 7 containers) and 0 GB available
name|SchedulerNodeReport
name|report_nm1
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit the second app App2 with priority 7
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority2
argument_list|)
decl_stmt|;
comment|// Submit the third app App3 with priority 8
name|Priority
name|appPriority3
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|RMApp
name|app3
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority3
argument_list|)
decl_stmt|;
comment|// Submit the second app App4 with priority 6
name|Priority
name|appPriority4
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|RMApp
name|app4
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority4
argument_list|)
decl_stmt|;
comment|// Only one app can run as AM resource limit restricts it. Kill app1,
comment|// If app3 (highest priority among rest) gets active, it indicates that
comment|// priority is working with pendingApplications.
name|rm
operator|.
name|killApp
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// kick the scheduler, app3 (high among pending) gets free space
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app3
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am3
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// check node report, 1 GB used and 7 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxPriorityValidation ()
specifier|public
name|void
name|testMaxPriorityValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Priority
name|maxPriority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
comment|// Application submission should be successful and verify priority
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|maxPriority
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdatePriorityAtRuntime ()
specifier|public
name|void
name|testUpdatePriorityAtRuntime
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|16
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB given to AM1, remaining 15GB on nm1
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// get scheduler
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Change the priority of App1 to 8
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|app1
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|updateApplicationPriority
argument_list|(
name|appPriority2
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
comment|// get scheduler app
name|FiCaSchedulerApp
name|schedulerAppAttempt
init|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// Verify whether the new priority is updated
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority2
argument_list|,
name|schedulerAppAttempt
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateInvalidPriorityAtRuntime ()
specifier|public
name|void
name|testUpdateInvalidPriorityAtRuntime
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|16
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB given to AM1, remaining 15GB on nm1
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// get scheduler
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Change the priority of App1 to 15
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|15
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|app1
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|updateApplicationPriority
argument_list|(
name|appPriority2
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
comment|// get scheduler app
name|FiCaSchedulerApp
name|schedulerAppAttempt
init|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// Verify whether priority 15 is reset to 10
name|Priority
name|appPriority3
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority3
argument_list|,
name|schedulerAppAttempt
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testRMRestartWithChangeInPriority ()
specifier|public
name|void
name|testRMRestartWithChangeInPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// PHASE 1: create state in an RM
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB given to AM1, remaining 15GB on nm1
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// get scheduler
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Change the priority of App1 to 8
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|app1
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|updateApplicationPriority
argument_list|(
name|appPriority2
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
comment|// let things settle down
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// create new RM to represent restart and recover state
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
comment|// start new RM
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// change NM to point to new RM
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify RM Apps after this restart
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// get scheduler app
name|RMApp
name|loadedApp
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify whether priority 15 is reset to 10
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority2
argument_list|,
name|loadedApp
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationPriorityAllocationWithChangeInPriority ()
specifier|public
name|void
name|testApplicationPriorityAllocationWithChangeInPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|16
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB given to AM1, remaining 15GB on nm1
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// add request for containers and wait for containers to be allocated.
name|int
name|NUM_CONTAINERS
init|=
literal|7
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated1
init|=
name|am1
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|NUM_CONTAINERS
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|allocated1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// check node report, 15 GB used (1 AM and 7 containers) and 1 GB available
name|SchedulerNodeReport
name|report_nm1
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit the second app App2 with priority 8 (Higher than App1)
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|appPriority2
argument_list|)
decl_stmt|;
comment|// kick the scheduler, 1 GB which was free is given to AM of App2
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// check node report, 16 GB used and 0 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// get scheduler
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// get scheduler app
name|FiCaSchedulerApp
name|schedulerAppAttemptApp1
init|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// kill 2 containers to free up some space
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Container
argument_list|>
name|iterator
init|=
name|allocated1
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Container
name|c
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|++
name|counter
operator|>
literal|2
condition|)
block|{
break|break;
block|}
name|cs
operator|.
name|markContainerForKillable
argument_list|(
name|schedulerAppAttemptApp1
operator|.
name|getRMContainer
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// check node report, 12 GB used and 4 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// add request for containers App1
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// add request for containers App2 and wait for containers to get allocated
name|List
argument_list|<
name|Container
argument_list|>
name|allocated2
init|=
name|am2
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check node report, 16 GB used and 0 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill 1 more
name|counter
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Container
argument_list|>
name|iterator
init|=
name|allocated1
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Container
name|c
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|++
name|counter
operator|>
literal|1
condition|)
block|{
break|break;
block|}
name|cs
operator|.
name|markContainerForKillable
argument_list|(
name|schedulerAppAttemptApp1
operator|.
name|getRMContainer
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// check node report, 14 GB used and 2 GB available
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|14
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the priority of App1 to 3 (lowest)
name|Priority
name|appPriority3
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|app2
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|updateApplicationPriority
argument_list|(
name|appPriority3
argument_list|,
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
comment|// add request for containers App2
name|am2
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// add request for containers App1 and wait for containers to get allocated
comment|// since priority is more for App1 now, App1 will get a container.
name|List
argument_list|<
name|Container
argument_list|>
name|allocated3
init|=
name|am1
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now App1 will have 5 containers and 1 AM. App2 will have 2 containers.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|schedulerAppAttemptApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    *<p>    * Test case verifies the order of applications activated after RM Restart.    *</p>    *<li>App-1 and app-2 submitted and scheduled and running with a priority    * 5 and 6 Respectively</li>    *<li>App-3 submitted and scheduled with a priority 7. This    * is not activated since AMResourceLimit is reached</li>    *<li>RM restarted</li>    *<li>App-1 get activated nevertheless of AMResourceLimit</li>    *<li>App-2 and app-3 put in pendingOrderingPolicy</li>    *<li>After NM registration, app-3 is activated</li>    *<p>    * Expected Output : App-2 must get activated since app-2 was running earlier    *</p>    * @throws Exception    */
annotation|@
name|Test
DECL|method|testOrderOfActivatingThePriorityApplicationOnRMRestart ()
specifier|public
name|void
name|testOrderOfActivatingThePriorityApplicationOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|16384
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|LeafQueue
name|defaultQueue
init|=
call|(
name|LeafQueue
call|)
argument_list|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
argument_list|)
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|int
name|memory
init|=
call|(
name|int
call|)
argument_list|(
name|defaultQueue
operator|.
name|getAMResourceLimit
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
comment|// App-1 with priority 5 submitted and running
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
name|memory
argument_list|,
name|appPriority1
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// App-2 with priority 6 submitted and running
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
name|memory
argument_list|,
name|appPriority2
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultQueue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultQueue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
comment|// App-3 with priority 7 submitted and scheduled. But not activated since
comment|// AMResourceLimit threshold
name|Priority
name|appPriority3
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
name|memory
argument_list|,
name|appPriority3
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultQueue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultQueue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|iterator
init|=
name|defaultQueue
operator|.
name|getOrderingPolicy
argument_list|()
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|fcApp2
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|fcApp2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|fcApp1
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|fcApp1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|=
name|defaultQueue
operator|.
name|getPendingApplications
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|FiCaSchedulerApp
name|fcApp3
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app3
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|fcApp3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// create new RM to represent restart and recover state
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
comment|// start new RM
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// change NM to point to new RM
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify RM Apps after this restart
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|scheduler
operator|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
name|defaultQueue
operator|=
call|(
name|LeafQueue
call|)
argument_list|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
argument_list|)
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
comment|// wait for all applications to get added to scheduler
name|int
name|count
init|=
literal|50
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|defaultQueue
operator|.
name|getNumPendingApplications
argument_list|()
operator|==
literal|3
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
comment|// Before NM registration, AMResourceLimit threshold is 0. So no
comment|// applications get activated.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|defaultQueue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|defaultQueue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM resync to new RM
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// wait for activating applications
name|count
operator|=
literal|50
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|defaultQueue
operator|.
name|getNumActiveApplications
argument_list|()
operator|==
literal|2
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultQueue
operator|.
name|getNumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultQueue
operator|.
name|getNumPendingApplications
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify for order of activated applications iterator
name|iterator
operator|=
name|defaultQueue
operator|.
name|getOrderingPolicy
argument_list|()
operator|.
name|getSchedulableEntities
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|fcApp2
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|fcApp2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|fcApp1
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|fcApp1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify for pending application iterator. It should be app-3 attempt
name|iterator
operator|=
name|defaultQueue
operator|.
name|getPendingApplications
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|fcApp3
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app3
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|fcApp3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testUpdatePriorityOnPendingAppAndKillAttempt ()
specifier|public
name|void
name|testUpdatePriorityOnPendingAppAndKillAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxPriority
init|=
literal|10
decl_stmt|;
name|int
name|appPriority
init|=
literal|5
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
name|maxPriority
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|defaultQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// Update priority and kill application with no resource
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|appPriority
argument_list|)
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|appsPending
init|=
operator|(
operator|(
name|LeafQueue
operator|)
name|defaultQueue
operator|)
operator|.
name|getPendingApplications
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|activeApps
init|=
operator|(
operator|(
name|LeafQueue
operator|)
name|defaultQueue
operator|)
operator|.
name|getOrderingPolicy
argument_list|()
operator|.
name|getSchedulableEntities
argument_list|()
decl_stmt|;
comment|// Verify app is in pending state
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Pending apps should be 1"
argument_list|,
literal|1
argument_list|,
name|appsPending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Active apps should be 0"
argument_list|,
literal|0
argument_list|,
name|activeApps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill app1 which is pending
name|killAppAndVerifyOrderingPolicy
argument_list|(
name|rm
argument_list|,
name|defaultQueue
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|app1
argument_list|)
expr_stmt|;
comment|// Check ordering policy size when resource is added
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|appPriority
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Pending apps should be 0"
argument_list|,
literal|0
argument_list|,
name|appsPending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Active apps should be 1"
argument_list|,
literal|1
argument_list|,
name|activeApps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|app3
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|appPriority
argument_list|)
argument_list|)
decl_stmt|;
name|RMApp
name|app4
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|appPriority
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Pending apps should be 2"
argument_list|,
literal|2
argument_list|,
name|appsPending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Active apps should be 1"
argument_list|,
literal|1
argument_list|,
name|activeApps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill app3, pending apps should reduce to 1
name|killAppAndVerifyOrderingPolicy
argument_list|(
name|rm
argument_list|,
name|defaultQueue
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|app3
argument_list|)
expr_stmt|;
comment|// kill app2, running apps is killed and pending added to running
name|killAppAndVerifyOrderingPolicy
argument_list|(
name|rm
argument_list|,
name|defaultQueue
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|app2
argument_list|)
expr_stmt|;
comment|// kill app4, all apps are killed and both policy size should be zero
name|killAppAndVerifyOrderingPolicy
argument_list|(
name|rm
argument_list|,
name|defaultQueue
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|app4
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|killAppAndVerifyOrderingPolicy (MockRM rm, CSQueue defaultQueue, int appsPendingExpected, int activeAppsExpected, RMApp app)
specifier|private
name|void
name|killAppAndVerifyOrderingPolicy
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|CSQueue
name|defaultQueue
parameter_list|,
name|int
name|appsPendingExpected
parameter_list|,
name|int
name|activeAppsExpected
parameter_list|,
name|RMApp
name|app
parameter_list|)
throws|throws
name|YarnException
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|updateApplicationPriority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|ugi
argument_list|)
expr_stmt|;
name|SchedulerEvent
name|removeAttempt
decl_stmt|;
name|removeAttempt
operator|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|removeAttempt
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|appsPending
init|=
operator|(
operator|(
name|LeafQueue
operator|)
name|defaultQueue
operator|)
operator|.
name|getPendingApplications
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|activeApps
init|=
operator|(
operator|(
name|LeafQueue
operator|)
name|defaultQueue
operator|)
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Pending apps should be "
operator|+
name|appsPendingExpected
argument_list|,
name|appsPendingExpected
argument_list|,
name|appsPending
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Active apps should be "
operator|+
name|activeAppsExpected
argument_list|,
name|activeAppsExpected
argument_list|,
name|activeApps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

