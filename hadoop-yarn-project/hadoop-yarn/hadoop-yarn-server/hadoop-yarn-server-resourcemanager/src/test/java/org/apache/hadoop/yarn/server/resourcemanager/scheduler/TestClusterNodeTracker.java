begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test class to verify ClusterNodeTracker. Using FSSchedulerNode without  * loss of generality.  */
end_comment

begin_class
DECL|class|TestClusterNodeTracker
specifier|public
class|class
name|TestClusterNodeTracker
block|{
DECL|field|nodeTracker
specifier|private
name|ClusterNodeTracker
argument_list|<
name|FSSchedulerNode
argument_list|>
name|nodeTracker
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|nodeTracker
operator|=
operator|new
name|ClusterNodeTracker
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|addEight4x4Nodes ()
specifier|private
name|void
name|addEight4x4Nodes
parameter_list|()
block|{
name|MockNodes
operator|.
name|resetHostIds
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
init|=
name|MockNodes
operator|.
name|newNodes
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|rmNodes
control|)
block|{
name|nodeTracker
operator|.
name|addNode
argument_list|(
operator|new
name|FSSchedulerNode
argument_list|(
name|rmNode
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetNodeCount ()
specifier|public
name|void
name|testGetNodeCount
parameter_list|()
block|{
name|addEight4x4Nodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes in the cluster"
argument_list|,
literal|8
argument_list|,
name|nodeTracker
operator|.
name|nodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes in each rack"
argument_list|,
literal|4
argument_list|,
name|nodeTracker
operator|.
name|nodeCount
argument_list|(
literal|"rack0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNodesForResourceName ()
specifier|public
name|void
name|testGetNodesForResourceName
parameter_list|()
throws|throws
name|Exception
block|{
name|addEight4x4Nodes
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes matching ANY"
argument_list|,
literal|8
argument_list|,
name|nodeTracker
operator|.
name|getNodesByResourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes matching rack"
argument_list|,
literal|4
argument_list|,
name|nodeTracker
operator|.
name|getNodesByResourceName
argument_list|(
literal|"rack0"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes matching node"
argument_list|,
literal|1
argument_list|,
name|nodeTracker
operator|.
name|getNodesByResourceName
argument_list|(
literal|"host0"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxAllowedAllocation ()
specifier|public
name|void
name|testMaxAllowedAllocation
parameter_list|()
block|{
comment|// Add a third resource
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
literal|"test1"
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setup
argument_list|()
expr_stmt|;
name|Resource
name|maximum
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|10
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test1"
argument_list|,
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
name|nodeTracker
operator|.
name|setConfiguredMaxAllocation
argument_list|(
name|maximum
argument_list|)
expr_stmt|;
name|Resource
name|result
init|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"With no nodes added, the ClusterNodeTracker did not return "
operator|+
literal|"the configured max allocation"
argument_list|,
name|maximum
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RMNode
argument_list|>
name|smallNodes
init|=
name|MockNodes
operator|.
name|newNodes
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test1"
argument_list|,
literal|4L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FSSchedulerNode
name|smallNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|smallNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RMNode
argument_list|>
name|mediumNodes
init|=
name|MockNodes
operator|.
name|newNodes
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|2
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test1"
argument_list|,
literal|2L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FSSchedulerNode
name|mediumNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|mediumNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RMNode
argument_list|>
name|largeNodes
init|=
name|MockNodes
operator|.
name|newNodes
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|16384
argument_list|,
literal|4
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test1"
argument_list|,
literal|1L
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FSSchedulerNode
name|largeNode
init|=
operator|new
name|FSSchedulerNode
argument_list|(
name|largeNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|mediumNode
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"With a single node added, the ClusterNodeTracker did not "
operator|+
literal|"return that node's resources as the maximum allocation"
argument_list|,
name|mediumNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|smallNode
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"With two nodes added, the ClusterNodeTracker did not "
operator|+
literal|"return a the maximum allocation that was the max of their aggregate "
operator|+
literal|"resources"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|2
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test1"
argument_list|,
literal|4L
argument_list|)
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|smallNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After removing a node, the ClusterNodeTracker did not "
operator|+
literal|"recalculate the adjusted maximum allocation correctly"
argument_list|,
name|mediumNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|largeNode
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"With two nodes added, the ClusterNodeTracker did not "
operator|+
literal|"return a the maximum allocation that was the max of their aggregate "
operator|+
literal|"resources"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|4
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test1"
argument_list|,
literal|2L
argument_list|)
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|largeNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After removing a node, the ClusterNodeTracker did not "
operator|+
literal|"recalculate the adjusted maximum allocation correctly"
argument_list|,
name|mediumNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|mediumNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After removing all nodes, the ClusterNodeTracker did not "
operator|+
literal|"return the configured maximum allocation"
argument_list|,
name|maximum
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|smallNode
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|mediumNode
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|largeNode
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"With three nodes added, the ClusterNodeTracker did not "
operator|+
literal|"return a the maximum allocation that was the max of their aggregate "
operator|+
literal|"resources"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|4
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"test1"
argument_list|,
literal|4L
argument_list|)
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|smallNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|mediumNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|largeNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|nodeTracker
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After removing all nodes, the ClusterNodeTracker did not "
operator|+
literal|"return the configured maximum allocation"
argument_list|,
name|maximum
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

