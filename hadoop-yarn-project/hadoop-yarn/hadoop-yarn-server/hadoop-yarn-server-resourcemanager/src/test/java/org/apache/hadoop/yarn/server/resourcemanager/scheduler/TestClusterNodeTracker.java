begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Test class to verify ClusterNodeTracker. Using FSSchedulerNode without  * loss of generality.  */
end_comment

begin_class
DECL|class|TestClusterNodeTracker
specifier|public
class|class
name|TestClusterNodeTracker
block|{
DECL|field|nodeTracker
specifier|private
name|ClusterNodeTracker
argument_list|<
name|FSSchedulerNode
argument_list|>
name|nodeTracker
init|=
operator|new
name|ClusterNodeTracker
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|List
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
init|=
name|MockNodes
operator|.
name|newNodes
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|rmNodes
control|)
block|{
name|nodeTracker
operator|.
name|addNode
argument_list|(
operator|new
name|FSSchedulerNode
argument_list|(
name|rmNode
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetNodeCount ()
specifier|public
name|void
name|testGetNodeCount
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes in the cluster"
argument_list|,
literal|8
argument_list|,
name|nodeTracker
operator|.
name|nodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes in each rack"
argument_list|,
literal|4
argument_list|,
name|nodeTracker
operator|.
name|nodeCount
argument_list|(
literal|"rack0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNodesForResourceName ()
specifier|public
name|void
name|testGetNodesForResourceName
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes matching ANY"
argument_list|,
literal|8
argument_list|,
name|nodeTracker
operator|.
name|getNodesByResourceName
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes matching rack"
argument_list|,
literal|4
argument_list|,
name|nodeTracker
operator|.
name|getNodesByResourceName
argument_list|(
literal|"rack0"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of nodes matching node"
argument_list|,
literal|1
argument_list|,
name|nodeTracker
operator|.
name|getNodesByResourceName
argument_list|(
literal|"host0"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

