begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ParameterizedSchedulerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests for checking Scheduling with allocationRequestId, i.e. mapping of  * allocated containers to the original client {@code ResourceRequest}.  */
end_comment

begin_class
DECL|class|TestSchedulingWithAllocationRequestId
specifier|public
class|class
name|TestSchedulingWithAllocationRequestId
extends|extends
name|ParameterizedSchedulerTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSchedulingWithAllocationRequestId
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|method|TestSchedulingWithAllocationRequestId (SchedulerType type)
specifier|public
name|TestSchedulingWithAllocationRequestId
parameter_list|(
name|SchedulerType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getConf ()
specifier|public
name|YarnConfiguration
name|getConf
parameter_list|()
block|{
name|YarnConfiguration
name|conf
init|=
name|super
operator|.
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|.
name|equals
argument_list|(
name|SchedulerType
operator|.
name|FAIR
argument_list|)
condition|)
block|{
comment|// Some tests here rely on being able to assign multiple containers with
comment|// a single heartbeat
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMultipleAllocationRequestIds ()
specifier|public
name|void
name|testMultipleAllocationRequestIds
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:5678"
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// send requests for containers with id 10& 20
name|am1
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|}
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|10L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.2"
block|}
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|20L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// check if request id 10 is satisfied
name|AllocateResponse
name|allocResponse
init|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am1
argument_list|,
name|nm1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAllocatedContainer
argument_list|(
name|allocated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// check now if request id 20 is satisfied
name|allocResponse
operator|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am1
argument_list|,
name|nm2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocated
control|)
block|{
name|checkAllocatedContainer
argument_list|(
name|container
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMultipleAllocationRequestDiffPriority ()
specifier|public
name|void
name|testMultipleAllocationRequestDiffPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:5678"
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// send requests for containers with id 10& 20
name|am1
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|}
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|10L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.2"
block|}
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|20L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// check if request id 20 is satisfied first
name|AllocateResponse
name|allocResponse
init|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am1
argument_list|,
name|nm2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|allocated
control|)
block|{
name|checkAllocatedContainer
argument_list|(
name|container
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
comment|// check now if request id 10 is satisfied
name|allocResponse
operator|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am1
argument_list|,
name|nm1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAllocatedContainer
argument_list|(
name|allocated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|checkAllocatedContainer (Container allocated, int memory, NodeId nodeId, long allocationRequestId)
specifier|private
name|void
name|checkAllocatedContainer
parameter_list|(
name|Container
name|allocated
parameter_list|,
name|int
name|memory
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|long
name|allocationRequestId
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|allocated
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nodeId
argument_list|,
name|allocated
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocationRequestId
argument_list|,
name|allocated
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testMultipleAppsWithAllocationReqId ()
specifier|public
name|void
name|testMultipleAppsWithAllocationReqId
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|String
name|host0
init|=
literal|"host_0"
decl_stmt|;
name|String
name|host1
init|=
literal|"host_1"
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
name|host0
operator|+
literal|":1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// Register node2
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
name|host1
operator|+
literal|":2351"
argument_list|,
literal|8
operator|*
name|GB
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// submit 1st app
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"user_0"
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Submit app1 RR with allocationReqId = 5
name|int
name|numContainers
init|=
literal|1
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
name|host0
block|,
name|host1
block|}
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|numContainers
argument_list|,
literal|5L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for container to be allocated.
name|AllocateResponse
name|allocResponse
init|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am1
argument_list|,
name|nm1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAllocatedContainer
argument_list|(
name|allocated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
comment|// Submit another application
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"user_1"
argument_list|,
literal|"a2"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// Submit app2 RR with allocationReqId = 5
name|am2
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
name|host0
block|,
name|host1
block|}
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|numContainers
argument_list|,
literal|5L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for container to be allocated.
name|allocResponse
operator|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am2
argument_list|,
name|nm2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAllocatedContainer
argument_list|(
name|allocated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
comment|// Now submit app2 RR with allocationReqId = 10
name|am2
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
name|host0
block|,
name|host1
block|}
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|numContainers
argument_list|,
literal|10L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for container to be allocated.
name|allocResponse
operator|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am2
argument_list|,
name|nm1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAllocatedContainer
argument_list|(
name|allocated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
comment|// Now submit app1 RR with allocationReqId = 10
name|am1
operator|.
name|allocate
argument_list|(
name|am1
operator|.
name|createReq
argument_list|(
operator|new
name|String
index|[]
block|{
name|host0
block|,
name|host1
block|}
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|numContainers
argument_list|,
literal|10L
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for container to be allocated.
name|allocResponse
operator|=
name|waitForAllocResponse
argument_list|(
name|rm
argument_list|,
name|am1
argument_list|,
name|nm2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkAllocatedContainer
argument_list|(
name|allocated
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|10L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|waitForAllocResponse (MockRM rm, MockAM am, MockNM nm, int size)
specifier|private
name|AllocateResponse
name|waitForAllocResponse
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|MockAM
name|am
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|AllocateResponse
name|allocResponse
init|=
name|am
operator|.
name|doHeartbeat
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|size
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app..."
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|am
operator|.
name|doHeartbeat
argument_list|()
expr_stmt|;
block|}
return|return
name|allocResponse
return|;
block|}
block|}
end_class

end_unit

