begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|MAX_IGNORED_OVER_CAPACITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|MONITORING_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|NATURAL_TERMINATION_FACTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|OBSERVE_ONLY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|TOTAL_PREEMPTION_PER_ROUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|WAIT_TIME_BEFORE_KILL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
operator|.
name|MARK_CONTAINER_FOR_KILLABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
operator|.
name|MARK_CONTAINER_FOR_PREEMPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|SchedulingMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|TempQueuePerPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|ParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|preemption
operator|.
name|PreemptionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerPreemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
operator|.
name|OrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestProportionalCapacityPreemptionPolicy
specifier|public
class|class
name|TestProportionalCapacityPreemptionPolicy
block|{
DECL|field|TS
specifier|static
specifier|final
name|long
name|TS
init|=
literal|3141592653L
decl_stmt|;
DECL|field|appAlloc
name|int
name|appAlloc
init|=
literal|0
decl_stmt|;
DECL|field|setAMContainer
name|boolean
name|setAMContainer
init|=
literal|false
decl_stmt|;
DECL|field|setLabeledContainer
name|boolean
name|setLabeledContainer
init|=
literal|false
decl_stmt|;
DECL|field|setAMResourcePercent
name|float
name|setAMResourcePercent
init|=
literal|0.0f
decl_stmt|;
DECL|field|rand
name|Random
name|rand
init|=
literal|null
decl_stmt|;
DECL|field|mClock
name|Clock
name|mClock
init|=
literal|null
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|mCS
name|CapacityScheduler
name|mCS
init|=
literal|null
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
init|=
literal|null
decl_stmt|;
DECL|field|lm
name|RMNodeLabelsManager
name|lm
init|=
literal|null
decl_stmt|;
DECL|field|schedConf
name|CapacitySchedulerConfiguration
name|schedConf
init|=
literal|null
decl_stmt|;
DECL|field|mDisp
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|mDisp
init|=
literal|null
decl_stmt|;
DECL|field|rc
name|ResourceCalculator
name|rc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|clusterResources
name|Resource
name|clusterResources
init|=
literal|null
decl_stmt|;
DECL|field|appA
specifier|final
name|ApplicationAttemptId
name|appA
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|appB
specifier|final
name|ApplicationAttemptId
name|appB
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|appC
specifier|final
name|ApplicationAttemptId
name|appC
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|appD
specifier|final
name|ApplicationAttemptId
name|appD
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|appE
specifier|final
name|ApplicationAttemptId
name|appE
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|appF
specifier|final
name|ApplicationAttemptId
name|appF
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|evtCaptor
specifier|final
name|ArgumentCaptor
argument_list|<
name|ContainerPreemptEvent
argument_list|>
name|evtCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|ContainerPreemptEvent
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|priority
specifier|public
enum|enum
name|priority
block|{
DECL|enumConstant|AMCONTAINER
DECL|enumConstant|CONTAINER
DECL|enumConstant|LABELEDCONTAINER
name|AMCONTAINER
argument_list|(
literal|0
argument_list|)
block|,
name|CONTAINER
argument_list|(
literal|1
argument_list|)
block|,
name|LABELEDCONTAINER
argument_list|(
literal|2
argument_list|)
block|;
DECL|field|value
name|int
name|value
decl_stmt|;
DECL|method|priority (int value)
specifier|private
name|priority
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
DECL|method|getValue ()
specifier|public
name|int
name|getValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
block|}
empty_stmt|;
DECL|field|name
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MONITORING_INTERVAL
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|// report "ideal" preempt
name|conf
operator|.
name|setFloat
argument_list|(
name|TOTAL_PREEMPTION_PER_ROUND
argument_list|,
operator|(
name|float
operator|)
literal|1.0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|NATURAL_TERMINATION_FACTOR
argument_list|,
operator|(
name|float
operator|)
literal|1.0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|,
name|ProportionalCapacityPreemptionPolicy
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// FairScheduler doesn't support this test,
comment|// Set CapacityScheduler as the scheduler for this test.
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.scheduler.class"
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mClock
operator|=
name|mock
argument_list|(
name|Clock
operator|.
name|class
argument_list|)
expr_stmt|;
name|mCS
operator|=
name|mock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mCS
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|lm
operator|=
name|mock
argument_list|(
name|RMNodeLabelsManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|schedConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|mCS
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|schedConf
argument_list|)
expr_stmt|;
name|rmContext
operator|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mCS
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mCS
operator|.
name|getPreemptionManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PreemptionManager
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lm
argument_list|)
expr_stmt|;
name|mDisp
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|disp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|disp
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mDisp
argument_list|)
expr_stmt|;
name|rand
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
name|long
name|seed
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|" SEED: "
operator|+
name|seed
argument_list|)
expr_stmt|;
name|rand
operator|.
name|setSeed
argument_list|(
name|seed
argument_list|)
expr_stmt|;
name|appAlloc
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIgnore ()
specifier|public
name|void
name|testIgnore
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|0
block|,
literal|60
block|,
literal|40
block|}
block|,
comment|// used
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// don't correct imbalances without demand
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerPreemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProportionalPreemption ()
specifier|public
name|void
name|testProportionalPreemption
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C  D
block|{
literal|100
block|,
literal|10
block|,
literal|40
block|,
literal|20
block|,
literal|30
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|30
block|,
literal|60
block|,
literal|10
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|45
block|,
literal|20
block|,
literal|5
block|,
literal|20
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|16
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxCap ()
specifier|public
name|void
name|testMaxCap
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|45
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|55
block|,
literal|45
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|20
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// despite the imbalance, since B is at maxCap, do not correct
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptCycle ()
specifier|public
name|void
name|testPreemptCycle
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|0
block|,
literal|60
block|,
literal|40
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|10
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// ensure all pending rsrc from A get preempted from other queues
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExpireKill ()
specifier|public
name|void
name|testExpireKill
parameter_list|()
block|{
specifier|final
name|long
name|killTime
init|=
literal|10000L
decl_stmt|;
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|0
block|,
literal|60
block|,
literal|40
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|10
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|WAIT_TIME_BEFORE_KILL
argument_list|,
name|killTime
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
comment|// ensure all pending rsrc from A get preempted from other queues
name|when
argument_list|(
name|mClock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// requests reiterated
name|when
argument_list|(
name|mClock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|killTime
operator|/
literal|2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// kill req sent
name|when
argument_list|(
name|mClock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|killTime
operator|+
literal|1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|evtCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerPreemptEvent
argument_list|>
name|events
init|=
name|evtCaptor
operator|.
name|getAllValues
argument_list|()
decl_stmt|;
for|for
control|(
name|ContainerPreemptEvent
name|e
range|:
name|events
operator|.
name|subList
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|appC
argument_list|,
name|e
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MARK_CONTAINER_FOR_KILLABLE
argument_list|,
name|e
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeadzone ()
specifier|public
name|void
name|testDeadzone
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|39
block|,
literal|43
block|,
literal|21
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|10
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MAX_IGNORED_OVER_CAPACITY
argument_list|,
operator|(
name|float
operator|)
literal|0.1
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// ignore 10% overcapacity to avoid jitter
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerPreemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerQueueDisablePreemption ()
specifier|public
name|void
name|testPerQueueDisablePreemption
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A    B    C
block|{
literal|100
block|,
literal|55
block|,
literal|25
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|0
block|,
literal|54
block|,
literal|46
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|10
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//     appA appB appC
block|{
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueB"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// Since queueB is not preemptable, get resources from queueC
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since queueB is preemptable, resources will be preempted
comment|// from both queueB and queueC. Test must be reset so that the mDisp
comment|// event handler will count only events from the following test and not the
comment|// previous one.
name|setup
argument_list|()
expr_stmt|;
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy2
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy2
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerQueueDisablePreemptionHierarchical ()
specifier|public
name|void
name|testPerQueueDisablePreemptionHierarchical
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A              D
comment|//            B    C         E    F
block|{
literal|200
block|,
literal|100
block|,
literal|50
block|,
literal|50
block|,
literal|100
block|,
literal|10
block|,
literal|90
block|}
block|,
comment|// abs
block|{
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|}
block|,
comment|// maxCap
block|{
literal|200
block|,
literal|110
block|,
literal|60
block|,
literal|50
block|,
literal|90
block|,
literal|90
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|,
literal|0
block|,
literal|10
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//          appA appB      appC appD
block|{
literal|4
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// verify capacity taken from queueB (appA), not queueE (appC) despite
comment|// queueE being far over its absolute capacity because queueA (queueB's
comment|// parent) is over capacity and queueD (queueE's parent) is not.
name|ApplicationAttemptId
name|expectedAttemptOnQueueB
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appA
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appA
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"appA should be running on queueB"
argument_list|,
name|mCS
operator|.
name|getAppsInQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|contains
argument_list|(
name|expectedAttemptOnQueueB
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Need to call setup() again to reset mDisp
name|setup
argument_list|()
expr_stmt|;
comment|// Turn off preemption for queueB and it's children
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueA.queueB"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy2
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy2
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|expectedAttemptOnQueueC
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appB
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appB
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|expectedAttemptOnQueueE
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appC
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appC
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Now, all of queueB's (appA) over capacity is not preemptable, so neither
comment|// is queueA's. Verify that capacity is taken from queueE (appC).
name|assertTrue
argument_list|(
literal|"appB should be running on queueC"
argument_list|,
name|mCS
operator|.
name|getAppsInQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|contains
argument_list|(
name|expectedAttemptOnQueueC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"appC should be running on queueE"
argument_list|,
name|mCS
operator|.
name|getAppsInQueue
argument_list|(
literal|"queueE"
argument_list|)
operator|.
name|contains
argument_list|(
name|expectedAttemptOnQueueE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Resources should have come from queueE (appC) and neither of queueA's
comment|// children.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerQueueDisablePreemptionBroadHierarchical ()
specifier|public
name|void
name|testPerQueueDisablePreemptionBroadHierarchical
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A              D              G
comment|//            B    C         E    F         H    I
block|{
literal|1000
block|,
literal|350
block|,
literal|150
block|,
literal|200
block|,
literal|400
block|,
literal|200
block|,
literal|200
block|,
literal|250
block|,
literal|100
block|,
literal|150
block|}
block|,
comment|// abs
block|{
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|}
block|,
comment|// maxCap
block|{
literal|1000
block|,
literal|400
block|,
literal|200
block|,
literal|200
block|,
literal|400
block|,
literal|250
block|,
literal|150
block|,
literal|200
block|,
literal|150
block|,
literal|50
block|}
block|,
comment|// used
block|{
literal|50
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|50
block|,
literal|0
block|,
literal|50
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//          appA appB      appC appD      appE appF
block|{
literal|6
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granulrity
block|{
literal|3
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// queueF(appD) wants resources, Verify that resources come from queueE(appC)
comment|// because it's a sibling and queueB(appA) because queueA is over capacity.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|28
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|22
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Need to call setup() again to reset mDisp
name|setup
argument_list|()
expr_stmt|;
comment|// Turn off preemption for queueB(appA)
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueA.queueB"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy2
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy2
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// Now that queueB(appA) is not preemptable, verify that resources come
comment|// from queueE(appC)
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setup
argument_list|()
expr_stmt|;
comment|// Turn off preemption for two of the 3 queues with over-capacity.
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueD.queueE"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueA.queueB"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy3
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy3
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// Verify that the request was starved out even though queueH(appE) is
comment|// over capacity. This is because queueG (queueH's parent) is NOT
comment|// overcapacity.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueB
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueC
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueE
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueH
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueI
block|}
annotation|@
name|Test
DECL|method|testPerQueueDisablePreemptionInheritParent ()
specifier|public
name|void
name|testPerQueueDisablePreemptionInheritParent
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A                   E
comment|//            B    C    D         F    G    H
block|{
literal|1000
block|,
literal|500
block|,
literal|200
block|,
literal|200
block|,
literal|100
block|,
literal|500
block|,
literal|200
block|,
literal|200
block|,
literal|100
block|}
block|,
comment|// abs (guar)
block|{
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|}
block|,
comment|// maxCap
block|{
literal|1000
block|,
literal|700
block|,
literal|0
block|,
literal|350
block|,
literal|350
block|,
literal|300
block|,
literal|0
block|,
literal|200
block|,
literal|100
block|}
block|,
comment|// used
block|{
literal|200
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|200
block|,
literal|200
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//               appA appB      appC appD appE
block|{
literal|5
block|,
literal|2
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granulrity
block|{
literal|2
block|,
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// With all queues preemptable, resources should be taken from queueC(appA)
comment|// and queueD(appB). Resources taken more from queueD(appB) than
comment|// queueC(appA) because it's over its capacity by a larger percentage.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|17
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|183
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Turn off preemption for queueA and it's children. queueF(appC)'s request
comment|// should starve.
name|setup
argument_list|()
expr_stmt|;
comment|// Call setup() to reset mDisp
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueA"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy2
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy2
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueC
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueD
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueG
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueH
block|}
annotation|@
name|Test
DECL|method|testPerQueuePreemptionNotAllUntouchable ()
specifier|public
name|void
name|testPerQueuePreemptionNotAllUntouchable
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /      A                       E
comment|//               B     C     D           F     G     H
block|{
literal|2000
block|,
literal|1000
block|,
literal|800
block|,
literal|100
block|,
literal|100
block|,
literal|1000
block|,
literal|500
block|,
literal|300
block|,
literal|200
block|}
block|,
comment|// abs
block|{
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|,
literal|2000
block|}
block|,
comment|// maxCap
block|{
literal|2000
block|,
literal|1300
block|,
literal|300
block|,
literal|800
block|,
literal|200
block|,
literal|700
block|,
literal|500
block|,
literal|0
block|,
literal|200
block|}
block|,
comment|// used
block|{
literal|300
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|300
block|,
literal|0
block|,
literal|300
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//             appA  appB  appC        appD  appE  appF
block|{
literal|6
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueA.queueC"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// Although queueC(appB) is way over capacity and is untouchable,
comment|// queueD(appC) is preemptable. Request should be filled from queueD(appC).
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|100
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerQueueDisablePreemptionRootDisablesAll ()
specifier|public
name|void
name|testPerQueueDisablePreemptionRootDisablesAll
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A              D              G
comment|//            B    C         E    F         H    I
block|{
literal|1000
block|,
literal|500
block|,
literal|250
block|,
literal|250
block|,
literal|250
block|,
literal|100
block|,
literal|150
block|,
literal|250
block|,
literal|100
block|,
literal|150
block|}
block|,
comment|// abs
block|{
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|}
block|,
comment|// maxCap
block|{
literal|1000
block|,
literal|20
block|,
literal|0
block|,
literal|20
block|,
literal|490
block|,
literal|240
block|,
literal|250
block|,
literal|490
block|,
literal|240
block|,
literal|250
block|}
block|,
comment|// used
block|{
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//          appA appB      appC appD      appE appF
block|{
literal|6
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granulrity
block|{
literal|3
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// All queues should be non-preemptable, so request should starve.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueC
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueE
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueB
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueH
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queueI
block|}
annotation|@
name|Test
DECL|method|testPerQueueDisablePreemptionOverAbsMaxCapacity ()
specifier|public
name|void
name|testPerQueueDisablePreemptionOverAbsMaxCapacity
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A              D
comment|//            B    C         E    F
block|{
literal|1000
block|,
literal|725
block|,
literal|360
block|,
literal|365
block|,
literal|275
block|,
literal|17
block|,
literal|258
block|}
block|,
comment|// absCap
block|{
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|550
block|,
literal|109
block|,
literal|1000
block|}
block|,
comment|// absMaxCap
block|{
literal|1000
block|,
literal|741
block|,
literal|396
block|,
literal|345
block|,
literal|259
block|,
literal|110
block|,
literal|149
block|}
block|,
comment|// used
block|{
literal|40
block|,
literal|20
block|,
literal|0
block|,
literal|20
block|,
literal|20
block|,
literal|20
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//          appA appB     appC appD
block|{
literal|4
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granulrity
block|{
literal|2
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
comment|// QueueE inherits non-preemption from QueueD
name|schedConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.queueD"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// appC is running on QueueE. QueueE is over absMaxCap, but is not
comment|// preemptable. Therefore, appC resources should not be preempted.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverCapacityImbalance ()
specifier|public
name|void
name|testOverCapacityImbalance
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|55
block|,
literal|45
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|20
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// correct imbalance between over-capacity queues
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNaturalTermination ()
specifier|public
name|void
name|testNaturalTermination
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|55
block|,
literal|45
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|20
block|,
literal|10
block|,
literal|10
block|,
literal|0
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|NATURAL_TERMINATION_FACTOR
argument_list|,
operator|(
name|float
operator|)
literal|0.1
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// ignore 10% imbalance between over-capacity queues
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerPreemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testObserveOnly ()
specifier|public
name|void
name|testObserveOnly
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B   C
block|{
literal|100
block|,
literal|40
block|,
literal|40
block|,
literal|20
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxCap
block|{
literal|100
block|,
literal|90
block|,
literal|10
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|80
block|,
literal|10
block|,
literal|20
block|,
literal|50
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|OBSERVE_ONLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// verify even severe imbalance not affected
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|isA
argument_list|(
name|ContainerPreemptEvent
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchical ()
specifier|public
name|void
name|testHierarchical
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A   B   C    D   E   F
block|{
literal|200
block|,
literal|100
block|,
literal|50
block|,
literal|50
block|,
literal|100
block|,
literal|10
block|,
literal|90
block|}
block|,
comment|// abs
block|{
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|}
block|,
comment|// maxCap
block|{
literal|200
block|,
literal|110
block|,
literal|60
block|,
literal|50
block|,
literal|90
block|,
literal|90
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|,
literal|0
block|,
literal|10
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|4
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// verify capacity taken from A1, not B1 despite B1 being far over
comment|// its absolute guaranteed capacity
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroGuar ()
specifier|public
name|void
name|testZeroGuar
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A   B   C    D   E   F
block|{
literal|200
block|,
literal|100
block|,
literal|0
block|,
literal|99
block|,
literal|100
block|,
literal|10
block|,
literal|90
block|}
block|,
comment|// abs
block|{
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|}
block|,
comment|// maxCap
block|{
literal|170
block|,
literal|80
block|,
literal|60
block|,
literal|20
block|,
literal|90
block|,
literal|90
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|,
literal|0
block|,
literal|10
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|4
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// verify capacity taken from A1, not B1 despite B1 being far over
comment|// its absolute guaranteed capacity
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroGuarOverCap ()
specifier|public
name|void
name|testZeroGuarOverCap
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A   B   C    D   E   F
block|{
literal|200
block|,
literal|100
block|,
literal|0
block|,
literal|99
block|,
literal|0
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// abs
block|{
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|,
literal|200
block|}
block|,
comment|// maxCap
block|{
literal|170
block|,
literal|170
block|,
literal|60
block|,
literal|20
block|,
literal|90
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|85
block|,
literal|50
block|,
literal|30
block|,
literal|10
block|,
literal|10
block|,
literal|20
block|,
literal|20
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|4
block|,
literal|3
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|3
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// we verify both that C has priority on B and D (has it has>0 guarantees)
comment|// and that B and D are force to share their over capacity fairly (as they
comment|// are both zero-guarantees) hence D sees some of its containers preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|15
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalLarge ()
specifier|public
name|void
name|testHierarchicalLarge
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A              D              G
comment|//            B    C         E    F         H    I
block|{
literal|400
block|,
literal|200
block|,
literal|60
block|,
literal|140
block|,
literal|100
block|,
literal|70
block|,
literal|30
block|,
literal|100
block|,
literal|10
block|,
literal|90
block|}
block|,
comment|// abs
block|{
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|}
block|,
comment|// maxCap
block|{
literal|400
block|,
literal|210
block|,
literal|70
block|,
literal|140
block|,
literal|100
block|,
literal|50
block|,
literal|50
block|,
literal|90
block|,
literal|90
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|15
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|15
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//          appA appB      appC appD      appE appF
block|{
literal|6
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// verify capacity taken from A1, not H1 despite H1 being far over
comment|// its absolute guaranteed capacity
comment|// XXX note: compensating for rounding error in Resources.multiplyTo
comment|// which is likely triggered since we use small numbers for readability
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|9
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContainerOrdering ()
specifier|public
name|void
name|testContainerOrdering
parameter_list|()
block|{
name|List
argument_list|<
name|RMContainer
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// create a set of containers
name|RMContainer
name|rm1
init|=
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
literal|5
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RMContainer
name|rm2
init|=
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
literal|3
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RMContainer
name|rm3
init|=
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
literal|2
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RMContainer
name|rm4
init|=
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
literal|1
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RMContainer
name|rm5
init|=
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
literal|4
argument_list|,
name|mock
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// insert them in non-sorted order
name|containers
operator|.
name|add
argument_list|(
name|rm3
argument_list|)
expr_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|rm2
argument_list|)
expr_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|rm1
argument_list|)
expr_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|rm5
argument_list|)
expr_stmt|;
name|containers
operator|.
name|add
argument_list|(
name|rm4
argument_list|)
expr_stmt|;
comment|// sort them
name|ProportionalCapacityPreemptionPolicy
operator|.
name|sortContainers
argument_list|(
name|containers
argument_list|)
expr_stmt|;
comment|// verify the "priority"-first, "reverse container-id"-second
comment|// ordering is enforced correctly
assert|assert
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|rm1
argument_list|)
assert|;
assert|assert
name|containers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|rm2
argument_list|)
assert|;
assert|assert
name|containers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
name|rm3
argument_list|)
assert|;
assert|assert
name|containers
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
name|rm4
argument_list|)
assert|;
assert|assert
name|containers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|equals
argument_list|(
name|rm5
argument_list|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testPolicyInitializeAfterSchedulerInitialized ()
specifier|public
name|void
name|testPolicyInitializeAfterSchedulerInitialized
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// ProportionalCapacityPreemptionPolicy should be initialized after
comment|// CapacityScheduler initialized. We will
comment|// 1) find SchedulingMonitor from RMActiveService's service list,
comment|// 2) check if ResourceCalculator in policy is null or not.
comment|// If it's not null, we can come to a conclusion that policy initialized
comment|// after scheduler got initialized
for|for
control|(
name|Service
name|service
range|:
name|rm
operator|.
name|getRMActiveService
argument_list|()
operator|.
name|getServices
argument_list|()
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|SchedulingMonitor
condition|)
block|{
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
call|(
name|ProportionalCapacityPreemptionPolicy
call|)
argument_list|(
operator|(
name|SchedulingMonitor
operator|)
name|service
argument_list|)
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|policy
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Failed to find SchedulingMonitor service, please check what happened"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSkipAMContainer ()
specifier|public
name|void
name|testSkipAMContainer
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B
block|{
literal|100
block|,
literal|50
block|,
literal|50
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxcap
block|{
literal|100
block|,
literal|100
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|70
block|,
literal|20
block|,
literal|50
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|5
block|,
literal|4
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|setAMContainer
operator|=
literal|true
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// By skipping AM Container, all other 24 containers of appD will be
comment|// preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// By skipping AM Container, all other 24 containers of appC will be
comment|// preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|24
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since AM containers of appC and appD are saved, 2 containers from appB
comment|// has to be preempted.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setAMContainer
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptSkippedAMContainers ()
specifier|public
name|void
name|testPreemptSkippedAMContainers
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B
block|{
literal|100
block|,
literal|10
block|,
literal|90
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxcap
block|{
literal|100
block|,
literal|100
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|70
block|,
literal|20
block|,
literal|90
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|5
block|,
literal|4
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|5
block|,
literal|5
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|setAMContainer
operator|=
literal|true
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// All 5 containers of appD will be preempted including AM container.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// All 5 containers of appC will be preempted including AM container.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// By skipping AM Container, all other 4 containers of appB will be
comment|// preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// By skipping AM Container, all other 4 containers of appA will be
comment|// preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setAMContainer
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMResourcePercentForSkippedAMContainers ()
specifier|public
name|void
name|testAMResourcePercentForSkippedAMContainers
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /   A   B
block|{
literal|100
block|,
literal|10
block|,
literal|90
block|}
block|,
comment|// abs
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxcap
block|{
literal|100
block|,
literal|100
block|,
literal|0
block|}
block|,
comment|// used
block|{
literal|70
block|,
literal|20
block|,
literal|90
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
block|{
literal|5
block|,
literal|4
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
literal|5
block|,
literal|5
block|}
block|,
comment|// req granularity
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|setAMContainer
operator|=
literal|true
expr_stmt|;
name|setAMResourcePercent
operator|=
literal|0.5f
expr_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// AMResoucePercent is 50% of cluster and maxAMCapacity will be 5Gb.
comment|// Total used AM container size is 20GB, hence 2 AM container has
comment|// to be preempted as Queue Capacity is 10Gb.
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Including AM Container, all other 4 containers of appC will be
comment|// preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// By skipping AM Container, all other 4 containers of appB will be
comment|// preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// By skipping AM Container, all other 4 containers of appA will be
comment|// preempted
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setAMContainer
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionWithVCoreResource ()
specifier|public
name|void
name|testPreemptionWithVCoreResource
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|// / A B
block|{
literal|100
block|,
literal|100
block|,
literal|100
block|}
block|,
comment|// maxcap
block|{
literal|5
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
comment|// Resources can be set like memory:vcores
name|String
index|[]
index|[]
name|resData
init|=
operator|new
name|String
index|[]
index|[]
block|{
comment|// / A B
block|{
literal|"100:100"
block|,
literal|"50:50"
block|,
literal|"50:50"
block|}
block|,
comment|// abs
block|{
literal|"10:100"
block|,
literal|"10:100"
block|,
literal|"0"
block|}
block|,
comment|// used
block|{
literal|"70:20"
block|,
literal|"70:20"
block|,
literal|"10:100"
block|}
block|,
comment|// pending
block|{
literal|"0"
block|,
literal|"0"
block|,
literal|"0"
block|}
block|,
comment|// reserved
block|{
literal|"-1"
block|,
literal|"1:10"
block|,
literal|"1:10"
block|}
block|,
comment|// req granularity
block|}
decl_stmt|;
comment|// Passing last param as TRUE to use DominantResourceCalculator
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|,
name|resData
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 5 containers will be preempted here
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalLarge3Levels ()
specifier|public
name|void
name|testHierarchicalLarge3Levels
parameter_list|()
block|{
name|int
index|[]
index|[]
name|qData
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|//  /    A                      F               I
comment|//            B    C                  G    H          J    K
comment|//                    D    E
block|{
literal|400
block|,
literal|200
block|,
literal|60
block|,
literal|140
block|,
literal|100
block|,
literal|40
block|,
literal|100
block|,
literal|70
block|,
literal|30
block|,
literal|100
block|,
literal|10
block|,
literal|90
block|}
block|,
comment|// abs
block|{
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|,
literal|400
block|}
block|,
comment|// maxCap
block|{
literal|400
block|,
literal|210
block|,
literal|60
block|,
literal|150
block|,
literal|100
block|,
literal|50
block|,
literal|100
block|,
literal|50
block|,
literal|50
block|,
literal|90
block|,
literal|10
block|,
literal|80
block|}
block|,
comment|// used
block|{
literal|10
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|}
block|,
comment|// pending
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// reserved
comment|//          appA     appB appC   appD appE      appF appG
block|{
literal|7
block|,
literal|3
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// apps
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|,
operator|-
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// req granularity
block|{
literal|3
block|,
literal|2
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// subqueues
block|}
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
name|buildPolicy
argument_list|(
name|qData
argument_list|)
decl_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// XXX note: compensating for rounding error in Resources.multiplyTo
comment|// which is likely triggered since we use small numbers for readability
comment|//run with Logger.getRootLogger().setLevel(Level.DEBUG);
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|9
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|appC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|policy
operator|.
name|getQueuePartitions
argument_list|()
operator|.
name|get
argument_list|(
literal|"queueE"
argument_list|)
operator|.
name|get
argument_list|(
literal|""
argument_list|)
operator|.
name|preemptableExtra
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|//2nd level child(E) preempts 10, but parent A has only 9 extra
comment|//check the parent can prempt only the extra from> 2 level child
name|TempQueuePerPartition
name|tempQueueAPartition
init|=
name|policy
operator|.
name|getQueuePartitions
argument_list|()
operator|.
name|get
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|get
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tempQueueAPartition
operator|.
name|untouchableExtra
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|extraForQueueA
init|=
name|tempQueueAPartition
operator|.
name|current
operator|.
name|getMemory
argument_list|()
operator|-
name|tempQueueAPartition
operator|.
name|guaranteed
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|extraForQueueA
argument_list|,
name|tempQueueAPartition
operator|.
name|preemptableExtra
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|IsPreemptionRequestFor
specifier|static
class|class
name|IsPreemptionRequestFor
extends|extends
name|ArgumentMatcher
argument_list|<
name|ContainerPreemptEvent
argument_list|>
block|{
DECL|field|appAttId
specifier|private
specifier|final
name|ApplicationAttemptId
name|appAttId
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|SchedulerEventType
name|type
decl_stmt|;
DECL|method|IsPreemptionRequestFor (ApplicationAttemptId appAttId)
name|IsPreemptionRequestFor
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|)
block|{
name|this
argument_list|(
name|appAttId
argument_list|,
name|MARK_CONTAINER_FOR_PREEMPTION
argument_list|)
expr_stmt|;
block|}
DECL|method|IsPreemptionRequestFor (ApplicationAttemptId appAttId, SchedulerEventType type)
name|IsPreemptionRequestFor
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|,
name|SchedulerEventType
name|type
parameter_list|)
block|{
name|this
operator|.
name|appAttId
operator|=
name|appAttId
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|appAttId
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ContainerPreemptEvent
operator|)
name|o
operator|)
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|&&
name|type
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ContainerPreemptEvent
operator|)
name|o
operator|)
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|appAttId
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|buildPolicy (int[][] qData)
name|ProportionalCapacityPreemptionPolicy
name|buildPolicy
parameter_list|(
name|int
index|[]
index|[]
name|qData
parameter_list|)
block|{
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
operator|new
name|ProportionalCapacityPreemptionPolicy
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|,
name|mCS
argument_list|,
name|mClock
argument_list|)
decl_stmt|;
name|clusterResources
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|leafAbsCapacities
argument_list|(
name|qData
index|[
literal|0
index|]
argument_list|,
name|qData
index|[
literal|7
index|]
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ParentQueue
name|mRoot
init|=
name|buildMockRootQueue
argument_list|(
name|rand
argument_list|,
name|qData
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mCS
operator|.
name|getRootQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mRoot
argument_list|)
expr_stmt|;
name|setResourceAndNodeDetails
argument_list|()
expr_stmt|;
return|return
name|policy
return|;
block|}
DECL|method|buildPolicy (int[][] qData, String[][] resData)
name|ProportionalCapacityPreemptionPolicy
name|buildPolicy
parameter_list|(
name|int
index|[]
index|[]
name|qData
parameter_list|,
name|String
index|[]
index|[]
name|resData
parameter_list|)
block|{
return|return
name|buildPolicy
argument_list|(
name|qData
argument_list|,
name|resData
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|buildPolicy (int[][] qData, String[][] resData, boolean useDominantResourceCalculator)
name|ProportionalCapacityPreemptionPolicy
name|buildPolicy
parameter_list|(
name|int
index|[]
index|[]
name|qData
parameter_list|,
name|String
index|[]
index|[]
name|resData
parameter_list|,
name|boolean
name|useDominantResourceCalculator
parameter_list|)
block|{
if|if
condition|(
name|useDominantResourceCalculator
condition|)
block|{
name|when
argument_list|(
name|mCS
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DominantResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
operator|new
name|ProportionalCapacityPreemptionPolicy
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|,
name|mCS
argument_list|,
name|mClock
argument_list|)
decl_stmt|;
name|clusterResources
operator|=
name|leafAbsCapacities
argument_list|(
name|parseResourceDetails
argument_list|(
name|resData
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|qData
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ParentQueue
name|mRoot
init|=
name|buildMockRootQueue
argument_list|(
name|rand
argument_list|,
name|resData
argument_list|,
name|qData
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mCS
operator|.
name|getRootQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mRoot
argument_list|)
expr_stmt|;
name|setResourceAndNodeDetails
argument_list|()
expr_stmt|;
return|return
name|policy
return|;
block|}
DECL|method|setResourceAndNodeDetails ()
specifier|private
name|void
name|setResourceAndNodeDetails
parameter_list|()
block|{
name|when
argument_list|(
name|mCS
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResources
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|lm
operator|.
name|getResourceByLabel
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResources
argument_list|)
expr_stmt|;
name|SchedulerNode
name|mNode
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mNode
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mCS
operator|.
name|getSchedulerNode
argument_list|(
name|any
argument_list|(
name|NodeId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mNode
argument_list|)
expr_stmt|;
block|}
DECL|method|buildMockRootQueue (Random r, int[]... queueData)
name|ParentQueue
name|buildMockRootQueue
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
index|[]
modifier|...
name|queueData
parameter_list|)
block|{
name|Resource
index|[]
name|abs
init|=
name|generateResourceList
argument_list|(
name|queueData
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|used
init|=
name|generateResourceList
argument_list|(
name|queueData
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|pending
init|=
name|generateResourceList
argument_list|(
name|queueData
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|reserved
init|=
name|generateResourceList
argument_list|(
name|queueData
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|gran
init|=
name|generateResourceList
argument_list|(
name|queueData
index|[
literal|6
index|]
argument_list|)
decl_stmt|;
name|int
index|[]
name|maxCap
init|=
name|queueData
index|[
literal|1
index|]
decl_stmt|;
name|int
index|[]
name|apps
init|=
name|queueData
index|[
literal|5
index|]
decl_stmt|;
name|int
index|[]
name|queues
init|=
name|queueData
index|[
literal|7
index|]
decl_stmt|;
return|return
name|mockNested
argument_list|(
name|abs
argument_list|,
name|maxCap
argument_list|,
name|used
argument_list|,
name|pending
argument_list|,
name|reserved
argument_list|,
name|apps
argument_list|,
name|gran
argument_list|,
name|queues
argument_list|)
return|;
block|}
DECL|method|buildMockRootQueue (Random r, String[][] resData, int[]... queueData)
name|ParentQueue
name|buildMockRootQueue
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
index|[]
index|[]
name|resData
parameter_list|,
name|int
index|[]
modifier|...
name|queueData
parameter_list|)
block|{
name|Resource
index|[]
name|abs
init|=
name|parseResourceDetails
argument_list|(
name|resData
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|used
init|=
name|parseResourceDetails
argument_list|(
name|resData
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|pending
init|=
name|parseResourceDetails
argument_list|(
name|resData
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|reserved
init|=
name|parseResourceDetails
argument_list|(
name|resData
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|Resource
index|[]
name|gran
init|=
name|parseResourceDetails
argument_list|(
name|resData
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|int
index|[]
name|maxCap
init|=
name|queueData
index|[
literal|0
index|]
decl_stmt|;
name|int
index|[]
name|apps
init|=
name|queueData
index|[
literal|1
index|]
decl_stmt|;
name|int
index|[]
name|queues
init|=
name|queueData
index|[
literal|2
index|]
decl_stmt|;
return|return
name|mockNested
argument_list|(
name|abs
argument_list|,
name|maxCap
argument_list|,
name|used
argument_list|,
name|pending
argument_list|,
name|reserved
argument_list|,
name|apps
argument_list|,
name|gran
argument_list|,
name|queues
argument_list|)
return|;
block|}
DECL|method|parseResourceDetails (String[] resData)
name|Resource
index|[]
name|parseResourceDetails
parameter_list|(
name|String
index|[]
name|resData
parameter_list|)
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|resourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|resource
init|=
name|resData
index|[
name|i
index|]
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|resourceList
operator|.
name|add
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|resource
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resourceList
operator|.
name|add
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|resource
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|resource
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|resourceList
operator|.
name|toArray
argument_list|(
operator|new
name|Resource
index|[
name|resourceList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|generateResourceList (int[] qData)
name|Resource
index|[]
name|generateResourceList
parameter_list|(
name|int
index|[]
name|qData
parameter_list|)
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|resourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qData
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|resourceList
operator|.
name|add
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|qData
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|resourceList
operator|.
name|toArray
argument_list|(
operator|new
name|Resource
index|[
name|resourceList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|mockNested (Resource[] abs, int[] maxCap, Resource[] used, Resource[] pending, Resource[] reserved, int[] apps, Resource[] gran, int[] queues)
name|ParentQueue
name|mockNested
parameter_list|(
name|Resource
index|[]
name|abs
parameter_list|,
name|int
index|[]
name|maxCap
parameter_list|,
name|Resource
index|[]
name|used
parameter_list|,
name|Resource
index|[]
name|pending
parameter_list|,
name|Resource
index|[]
name|reserved
parameter_list|,
name|int
index|[]
name|apps
parameter_list|,
name|Resource
index|[]
name|gran
parameter_list|,
name|int
index|[]
name|queues
parameter_list|)
block|{
name|ResourceCalculator
name|rc
init|=
name|mCS
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|tot
init|=
name|leafAbsCapacities
argument_list|(
name|abs
argument_list|,
name|queues
argument_list|)
decl_stmt|;
name|Deque
argument_list|<
name|ParentQueue
argument_list|>
name|pqs
init|=
operator|new
name|LinkedList
argument_list|<
name|ParentQueue
argument_list|>
argument_list|()
decl_stmt|;
name|ParentQueue
name|root
init|=
name|mockParentQueue
argument_list|(
literal|null
argument_list|,
name|queues
index|[
literal|0
index|]
argument_list|,
name|pqs
argument_list|)
decl_stmt|;
name|ResourceUsage
name|resUsage
init|=
operator|new
name|ResourceUsage
argument_list|()
decl_stmt|;
name|resUsage
operator|.
name|setUsed
argument_list|(
name|used
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|used
index|[
literal|0
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|abs
index|[
literal|0
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxCap
index|[
literal|0
index|]
operator|/
operator|(
name|float
operator|)
name|tot
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getQueueResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resUsage
argument_list|)
expr_stmt|;
name|QueueCapacities
name|rootQc
init|=
operator|new
name|QueueCapacities
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|rootQc
operator|.
name|setAbsoluteUsedCapacity
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|used
index|[
literal|0
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|rootQc
operator|.
name|setAbsoluteCapacity
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|abs
index|[
literal|0
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|rootQc
operator|.
name|setAbsoluteMaximumCapacity
argument_list|(
name|maxCap
index|[
literal|0
index|]
operator|/
operator|(
name|float
operator|)
name|tot
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getQueueCapacities
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rootQc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getQueuePath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
expr_stmt|;
name|boolean
name|preemptionDisabled
init|=
name|mockPreemptionStatus
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|root
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|preemptionDisabled
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|queues
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|CSQueue
name|q
decl_stmt|;
specifier|final
name|ParentQueue
name|p
init|=
name|pqs
operator|.
name|removeLast
argument_list|()
decl_stmt|;
specifier|final
name|String
name|queueName
init|=
literal|"queue"
operator|+
operator|(
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|i
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|queues
index|[
name|i
index|]
operator|>
literal|0
condition|)
block|{
name|q
operator|=
name|mockParentQueue
argument_list|(
name|p
argument_list|,
name|queues
index|[
name|i
index|]
argument_list|,
name|pqs
argument_list|)
expr_stmt|;
name|ResourceUsage
name|resUsagePerQueue
init|=
operator|new
name|ResourceUsage
argument_list|()
decl_stmt|;
name|resUsagePerQueue
operator|.
name|setUsed
argument_list|(
name|used
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getQueueResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resUsagePerQueue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
name|mockLeafQueue
argument_list|(
name|p
argument_list|,
name|tot
argument_list|,
name|i
argument_list|,
name|abs
argument_list|,
name|used
argument_list|,
name|pending
argument_list|,
name|reserved
argument_list|,
name|apps
argument_list|,
name|gran
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|q
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|used
index|[
name|i
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|abs
index|[
name|i
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxCap
index|[
name|i
index|]
operator|/
operator|(
name|float
operator|)
name|tot
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// We need to make these fields to QueueCapacities
name|QueueCapacities
name|qc
init|=
operator|new
name|QueueCapacities
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|qc
operator|.
name|setAbsoluteUsedCapacity
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|used
index|[
name|i
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setAbsoluteCapacity
argument_list|(
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|tot
argument_list|,
name|abs
index|[
name|i
index|]
argument_list|,
name|tot
argument_list|)
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setAbsoluteMaximumCapacity
argument_list|(
name|maxCap
index|[
name|i
index|]
operator|/
operator|(
name|float
operator|)
name|tot
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getQueueCapacities
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qc
argument_list|)
expr_stmt|;
name|String
name|parentPathName
init|=
name|p
operator|.
name|getQueuePath
argument_list|()
decl_stmt|;
name|parentPathName
operator|=
operator|(
name|parentPathName
operator|==
literal|null
operator|)
condition|?
literal|"root"
else|:
name|parentPathName
expr_stmt|;
name|String
name|queuePathName
init|=
operator|(
name|parentPathName
operator|+
literal|"."
operator|+
name|queueName
operator|)
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"root"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getQueuePath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queuePathName
argument_list|)
expr_stmt|;
name|preemptionDisabled
operator|=
name|mockPreemptionStatus
argument_list|(
name|queuePathName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|preemptionDisabled
argument_list|)
expr_stmt|;
block|}
assert|assert
literal|0
operator|==
name|pqs
operator|.
name|size
argument_list|()
assert|;
return|return
name|root
return|;
block|}
comment|// Determine if any of the elements in the queupath have preemption disabled.
comment|// Also must handle the case where preemption disabled property is explicitly
comment|// set to something other than the default. Assumes system-wide preemption
comment|// property is true.
DECL|method|mockPreemptionStatus (String queuePathName)
specifier|private
name|boolean
name|mockPreemptionStatus
parameter_list|(
name|String
name|queuePathName
parameter_list|)
block|{
name|boolean
name|preemptionDisabled
init|=
literal|false
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|queuePathName
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|String
name|qName
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|qName
operator|+=
name|tokenizer
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|preemptionDisabled
operator|=
name|schedConf
operator|.
name|getPreemptionDisabled
argument_list|(
name|qName
argument_list|,
name|preemptionDisabled
argument_list|)
expr_stmt|;
name|qName
operator|+=
literal|"."
expr_stmt|;
block|}
return|return
name|preemptionDisabled
return|;
block|}
DECL|method|mockParentQueue (ParentQueue p, int subqueues, Deque<ParentQueue> pqs)
name|ParentQueue
name|mockParentQueue
parameter_list|(
name|ParentQueue
name|p
parameter_list|,
name|int
name|subqueues
parameter_list|,
name|Deque
argument_list|<
name|ParentQueue
argument_list|>
name|pqs
parameter_list|)
block|{
name|ParentQueue
name|pq
init|=
name|mock
argument_list|(
name|ParentQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CSQueue
argument_list|>
name|cqs
init|=
operator|new
name|ArrayList
argument_list|<
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|pq
operator|.
name|getChildQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cqs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subqueues
condition|;
operator|++
name|i
control|)
block|{
name|pqs
operator|.
name|add
argument_list|(
name|pq
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|getChildQueues
argument_list|()
operator|.
name|add
argument_list|(
name|pq
argument_list|)
expr_stmt|;
block|}
return|return
name|pq
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|mockLeafQueue (ParentQueue p, Resource tot, int i, Resource[] abs, Resource[] used, Resource[] pending, Resource[] reserved, int[] apps, Resource[] gran)
name|LeafQueue
name|mockLeafQueue
parameter_list|(
name|ParentQueue
name|p
parameter_list|,
name|Resource
name|tot
parameter_list|,
name|int
name|i
parameter_list|,
name|Resource
index|[]
name|abs
parameter_list|,
name|Resource
index|[]
name|used
parameter_list|,
name|Resource
index|[]
name|pending
parameter_list|,
name|Resource
index|[]
name|reserved
parameter_list|,
name|int
index|[]
name|apps
parameter_list|,
name|Resource
index|[]
name|gran
parameter_list|)
block|{
name|LeafQueue
name|lq
init|=
name|mock
argument_list|(
name|LeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceCalculator
name|rc
init|=
name|mCS
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appAttemptIdList
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptId
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|lq
operator|.
name|getTotalPendingResourcesConsideringUserLimit
argument_list|(
name|isA
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pending
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// need to set pending resource in resource usage as well
name|ResourceUsage
name|ru
init|=
operator|new
name|ResourceUsage
argument_list|()
decl_stmt|;
name|ru
operator|.
name|setPending
argument_list|(
name|pending
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setUsed
argument_list|(
name|used
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|lq
operator|.
name|getQueueResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ru
argument_list|)
expr_stmt|;
comment|// consider moving where CapacityScheduler::comparator accessible
specifier|final
name|NavigableSet
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|qApps
init|=
operator|new
name|TreeSet
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FiCaSchedulerApp
name|a1
parameter_list|,
name|FiCaSchedulerApp
name|a2
parameter_list|)
block|{
return|return
name|a1
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// applications are added in global L->R order in queues
if|if
condition|(
name|apps
index|[
name|i
index|]
operator|!=
literal|0
condition|)
block|{
name|Resource
name|aUsed
init|=
name|Resources
operator|.
name|divideAndCeil
argument_list|(
name|rc
argument_list|,
name|used
index|[
name|i
index|]
argument_list|,
name|apps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Resource
name|aPending
init|=
name|Resources
operator|.
name|divideAndCeil
argument_list|(
name|rc
argument_list|,
name|pending
index|[
name|i
index|]
argument_list|,
name|apps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|Resource
name|aReserve
init|=
name|Resources
operator|.
name|divideAndCeil
argument_list|(
name|rc
argument_list|,
name|reserved
index|[
name|i
index|]
argument_list|,
name|apps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|apps
index|[
name|i
index|]
condition|;
operator|++
name|a
control|)
block|{
name|FiCaSchedulerApp
name|mockFiCaApp
init|=
name|mockApp
argument_list|(
name|i
argument_list|,
name|appAlloc
argument_list|,
name|aUsed
argument_list|,
name|aPending
argument_list|,
name|aReserve
argument_list|,
name|gran
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|qApps
operator|.
name|add
argument_list|(
name|mockFiCaApp
argument_list|)
expr_stmt|;
operator|++
name|appAlloc
expr_stmt|;
name|appAttemptIdList
operator|.
name|add
argument_list|(
name|mockFiCaApp
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|mCS
operator|.
name|getAppsInQueue
argument_list|(
literal|"queue"
operator|+
call|(
name|char
call|)
argument_list|(
literal|'A'
operator|+
name|i
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptIdList
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|lq
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qApps
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|OrderingPolicy
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|so
init|=
name|mock
argument_list|(
name|OrderingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|so
operator|.
name|getPreemptionIterator
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
return|return
name|qApps
operator|.
name|descendingIterator
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|lq
operator|.
name|getOrderingPolicy
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|so
argument_list|)
expr_stmt|;
if|if
condition|(
name|setAMResourcePercent
operator|!=
literal|0.0f
condition|)
block|{
name|when
argument_list|(
name|lq
operator|.
name|getMaxAMResourcePerQueuePercent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|setAMResourcePercent
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|getChildQueues
argument_list|()
operator|.
name|add
argument_list|(
name|lq
argument_list|)
expr_stmt|;
return|return
name|lq
return|;
block|}
DECL|method|mockApp (int qid, int id, Resource used, Resource pending, Resource reserved, Resource gran)
name|FiCaSchedulerApp
name|mockApp
parameter_list|(
name|int
name|qid
parameter_list|,
name|int
name|id
parameter_list|,
name|Resource
name|used
parameter_list|,
name|Resource
name|pending
parameter_list|,
name|Resource
name|reserved
parameter_list|,
name|Resource
name|gran
parameter_list|)
block|{
name|FiCaSchedulerApp
name|app
init|=
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceCalculator
name|rc
init|=
name|mCS
operator|.
name|getResourceCalculator
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|TS
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttId
argument_list|)
expr_stmt|;
name|int
name|cAlloc
init|=
literal|0
decl_stmt|;
name|Resource
name|unit
init|=
name|gran
decl_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|cReserved
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|Resource
name|resIter
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|clusterResources
argument_list|,
name|resIter
argument_list|,
name|reserved
argument_list|)
condition|;
name|Resources
operator|.
name|addTo
argument_list|(
name|resIter
argument_list|,
name|gran
argument_list|)
control|)
block|{
name|cReserved
operator|.
name|add
argument_list|(
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
name|cAlloc
argument_list|,
name|unit
argument_list|,
name|priority
operator|.
name|CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|cAlloc
expr_stmt|;
block|}
name|when
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cReserved
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|cLive
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|Resource
name|usedIter
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|Resources
operator|.
name|lessThan
argument_list|(
name|rc
argument_list|,
name|clusterResources
argument_list|,
name|usedIter
argument_list|,
name|used
argument_list|)
condition|;
name|Resources
operator|.
name|addTo
argument_list|(
name|usedIter
argument_list|,
name|gran
argument_list|)
control|)
block|{
if|if
condition|(
name|setAMContainer
operator|&&
name|i
operator|==
literal|0
condition|)
block|{
name|cLive
operator|.
name|add
argument_list|(
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
name|cAlloc
argument_list|,
name|unit
argument_list|,
name|priority
operator|.
name|AMCONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|setLabeledContainer
operator|&&
name|i
operator|==
literal|1
condition|)
block|{
name|cLive
operator|.
name|add
argument_list|(
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
name|cAlloc
argument_list|,
name|unit
argument_list|,
name|priority
operator|.
name|LABELEDCONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|used
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cLive
operator|.
name|add
argument_list|(
name|mockContainer
argument_list|(
name|appAttId
argument_list|,
name|cAlloc
argument_list|,
name|unit
argument_list|,
name|priority
operator|.
name|CONTAINER
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|cAlloc
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|when
argument_list|(
name|app
operator|.
name|getLiveContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cLive
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
DECL|method|mockContainer (ApplicationAttemptId appAttId, int id, Resource r, int cpriority)
name|RMContainer
name|mockContainer
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|,
name|int
name|id
parameter_list|,
name|Resource
name|r
parameter_list|,
name|int
name|cpriority
parameter_list|)
block|{
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttId
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|create
argument_list|(
name|cpriority
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainer
name|mC
init|=
name|mock
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mC
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mC
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mC
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mC
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|priority
operator|.
name|AMCONTAINER
operator|.
name|getValue
argument_list|()
operator|==
name|cpriority
condition|)
block|{
name|when
argument_list|(
name|mC
operator|.
name|isAMContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|priority
operator|.
name|LABELEDCONTAINER
operator|.
name|getValue
argument_list|()
operator|==
name|cpriority
condition|)
block|{
name|when
argument_list|(
name|mC
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node1"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mC
return|;
block|}
DECL|method|leafAbsCapacities (int[] abs, int[] subqueues)
specifier|static
name|int
name|leafAbsCapacities
parameter_list|(
name|int
index|[]
name|abs
parameter_list|,
name|int
index|[]
name|subqueues
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|abs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
literal|0
operator|==
name|subqueues
index|[
name|i
index|]
condition|)
block|{
name|ret
operator|+=
name|abs
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|leafAbsCapacities (Resource[] abs, int[] subqueues)
specifier|static
name|Resource
name|leafAbsCapacities
parameter_list|(
name|Resource
index|[]
name|abs
parameter_list|,
name|int
index|[]
name|subqueues
parameter_list|)
block|{
name|Resource
name|ret
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|abs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
literal|0
operator|==
name|subqueues
index|[
name|i
index|]
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|ret
argument_list|,
name|abs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
DECL|method|printString (CSQueue nq, String indent)
name|void
name|printString
parameter_list|(
name|CSQueue
name|nq
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
if|if
condition|(
name|nq
operator|instanceof
name|ParentQueue
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indent
operator|+
name|nq
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" cur:"
operator|+
name|nq
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
operator|+
literal|" guar:"
operator|+
name|nq
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CSQueue
name|q
range|:
operator|(
operator|(
name|ParentQueue
operator|)
name|nq
operator|)
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
name|printString
argument_list|(
name|q
argument_list|,
name|indent
operator|+
literal|"  "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indent
operator|+
name|nq
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" pen:"
operator|+
operator|(
operator|(
name|LeafQueue
operator|)
name|nq
operator|)
operator|.
name|getTotalPendingResourcesConsideringUserLimit
argument_list|(
name|isA
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
operator|+
literal|" cur:"
operator|+
name|nq
operator|.
name|getAbsoluteUsedCapacity
argument_list|()
operator|+
literal|" guar:"
operator|+
name|nq
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FiCaSchedulerApp
name|a
range|:
operator|(
operator|(
name|LeafQueue
operator|)
name|nq
operator|)
operator|.
name|getApplications
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|indent
operator|+
literal|"  "
operator|+
name|a
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

