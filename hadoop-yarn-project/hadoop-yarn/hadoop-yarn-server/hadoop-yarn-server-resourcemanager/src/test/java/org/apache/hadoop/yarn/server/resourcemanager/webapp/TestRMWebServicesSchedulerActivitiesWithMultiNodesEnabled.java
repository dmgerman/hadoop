begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|util
operator|.
name|MultivaluedMapImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivityDiagnosticConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|AllocationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|ResourceUsageMultiNodeLookupPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GuiceServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|ActivitiesTestUtils
operator|.
name|INSUFFICIENT_RESOURCE_DIAGNOSTIC_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|ActivitiesTestUtils
operator|.
name|findInAllocations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|ActivitiesTestUtils
operator|.
name|verifyNumberOfAllocationAttempts
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|ActivitiesTestUtils
operator|.
name|verifyNumberOfAllocations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|ActivitiesTestUtils
operator|.
name|verifyStateOfAllocations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests for scheduler/app activities when multi-nodes enabled.  */
end_comment

begin_class
DECL|class|TestRMWebServicesSchedulerActivitiesWithMultiNodesEnabled
specifier|public
class|class
name|TestRMWebServicesSchedulerActivitiesWithMultiNodesEnabled
extends|extends
name|JerseyTestBase
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|csConf
specifier|private
specifier|static
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|method|TestRMWebServicesSchedulerActivitiesWithMultiNodesEnabled ()
specifier|public
name|TestRMWebServicesSchedulerActivitiesWithMultiNodesEnabled
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|WebServletModule
specifier|private
specifier|static
class|class
name|WebServletModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// enable multi-nodes placement
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_PLACEMENT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|policyName
init|=
literal|"resource-based"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_SORTING_POLICIES
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_SORTING_POLICY_NAME
argument_list|,
name|policyName
argument_list|)
expr_stmt|;
name|String
name|policyConfPrefix
init|=
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_SORTING_POLICY_NAME
operator|+
literal|"."
operator|+
name|policyName
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|policyConfPrefix
operator|+
literal|".class"
argument_list|,
name|ResourceUsageMultiNodeLookupPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|policyConfPrefix
operator|+
literal|".sorting-interval.ms"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
name|YarnConfiguration
operator|.
name|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setupQueueConfiguration ( CapacitySchedulerConfiguration config)
specifier|private
specifier|static
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|config
parameter_list|)
block|{
comment|// Define top-level queues
name|config
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueA
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|queueA
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaximumCapacity
argument_list|(
name|queueA
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueB
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|queueB
argument_list|,
literal|89.5f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaximumApplicationMasterResourcePerQueuePercent
argument_list|(
name|queueB
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAssignContainer ()
specifier|public
name|void
name|testAssignContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Start RM so that it accepts app submissions
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
try|try
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|"/default-rack"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Trigger recording for multi-nodes without params
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/activities"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Trigger scheduling for this app
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check scheduler activities, it should contain one allocation and
comment|// final allocation state is ALLOCATED
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/activities"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyNumberOfAllocations
argument_list|(
name|json
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JSONObject
name|allocations
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"allocations"
argument_list|)
decl_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocations
argument_list|,
literal|"finalAllocationState"
argument_list|,
literal|"ALLOCATED"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSchedulingWithoutPendingRequests ()
specifier|public
name|void
name|testSchedulingWithoutPendingRequests
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Start RM so that it accepts app submissions
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8
operator|*
literal|1024
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
try|try
block|{
comment|//Trigger recording for multi-nodes without params
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/activities"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Trigger scheduling for this app
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check scheduler activities, it should contain one allocation and
comment|// final allocation state is SKIPPED
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/activities"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyNumberOfAllocations
argument_list|(
name|json
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JSONObject
name|allocations
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"allocations"
argument_list|)
decl_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocations
argument_list|,
literal|"finalAllocationState"
argument_list|,
literal|"SKIPPED"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppAssignContainer ()
specifier|public
name|void
name|testAppAssignContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Trigger recording for this app
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MultivaluedMapImpl
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|APP_ID
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/app-activities"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"waiting for display"
argument_list|,
name|json
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Trigger scheduling for this app
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check app activities, it should contain one allocation and
comment|// final allocation state is ALLOCATED
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/app-activities"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|verifyNumberOfAllocations
argument_list|(
name|json
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JSONObject
name|allocationObj
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"allocations"
argument_list|)
decl_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"ACCEPTED"
argument_list|)
expr_stmt|;
name|JSONObject
name|requestAllocationObj
init|=
name|allocationObj
operator|.
name|getJSONObject
argument_list|(
literal|"requestAllocation"
argument_list|)
decl_stmt|;
name|verifyNumberOfAllocationAttempts
argument_list|(
name|requestAllocationObj
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|requestAllocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"ALLOCATED"
argument_list|)
expr_stmt|;
name|JSONArray
name|allocationAttemptArray
init|=
name|requestAllocationObj
operator|.
name|getJSONArray
argument_list|(
literal|"allocationAttempt"
argument_list|)
decl_stmt|;
name|JSONObject
name|allocationAttempt1
init|=
name|allocationAttemptArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocationAttempt1
argument_list|,
literal|"allocationState"
argument_list|,
literal|"SKIPPED"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocationAttempt1
operator|.
name|optString
argument_list|(
literal|"diagnostic"
argument_list|)
operator|.
name|contains
argument_list|(
name|INSUFFICIENT_RESOURCE_DIAGNOSTIC_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|allocationAttempt2
init|=
name|allocationAttemptArray
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocationAttempt2
argument_list|,
literal|"allocationState"
argument_list|,
literal|"ALLOCATED"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testInsufficientResourceDiagnostic ()
specifier|public
name|void
name|testInsufficientResourceDiagnostic
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.3:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.4:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|3072
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app2"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/activities"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"waiting for next allocation"
argument_list|,
name|json
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Request a container for am2, will reserve a container on nm1
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4096
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/activities"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//Check app activities
name|verifyNumberOfAllocations
argument_list|(
name|json
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JSONObject
name|allocationObj
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"allocations"
argument_list|)
decl_stmt|;
comment|//Check diagnostic for request of app1
name|Predicate
argument_list|<
name|JSONObject
argument_list|>
name|findApp1Pred
init|=
parameter_list|(
name|obj
parameter_list|)
lambda|->
name|obj
operator|.
name|optString
argument_list|(
literal|"name"
argument_list|)
operator|.
name|equals
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|JSONObject
name|app1Obj
init|=
name|findInAllocations
argument_list|(
name|allocationObj
argument_list|,
name|findApp1Pred
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"SKIPPED"
argument_list|,
name|app1Obj
operator|.
name|optString
argument_list|(
literal|"allocationState"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActivityDiagnosticConstant
operator|.
name|APPLICATION_DO_NOT_NEED_RESOURCE
argument_list|,
name|app1Obj
operator|.
name|optString
argument_list|(
literal|"diagnostic"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Check diagnostic for request of app2
name|Predicate
argument_list|<
name|JSONObject
argument_list|>
name|findApp2ReqPred
init|=
parameter_list|(
name|obj
parameter_list|)
lambda|->
name|obj
operator|.
name|optString
argument_list|(
literal|"name"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"request_1_-1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JSONObject
argument_list|>
name|app2ReqObjs
init|=
name|findInAllocations
argument_list|(
name|allocationObj
argument_list|,
name|findApp2ReqPred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2ReqObjs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|app2ReqChildren
init|=
name|app2ReqObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|app2ReqChildren
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|app2ReqChildren
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|reqChild
init|=
name|app2ReqChildren
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqChild
operator|.
name|getString
argument_list|(
literal|"allocationState"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"SKIPPED"
argument_list|)
condition|)
block|{
name|String
name|diagnostic
init|=
name|reqChild
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|diagnostic
operator|.
name|contains
argument_list|(
name|INSUFFICIENT_RESOURCE_DIAGNOSTIC_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppInsufficientResourceDiagnostic ()
specifier|public
name|void
name|testAppInsufficientResourceDiagnostic
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.3:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.4:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|3072
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MultivaluedMapImpl
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|APP_ID
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/app-activities"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"waiting for display"
argument_list|,
name|json
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Request two containers with different priority for am1
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Trigger scheduling, will allocate a container with priority 0
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Trigger scheduling, will reserve a container with priority 1 on nm1
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/app-activities"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
comment|//Check app activities
name|verifyNumberOfAllocations
argument_list|(
name|json
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|JSONArray
name|allocationArray
init|=
name|json
operator|.
name|getJSONArray
argument_list|(
literal|"allocations"
argument_list|)
decl_stmt|;
comment|//Check first activity is for second allocation with RESERVED state
name|JSONObject
name|allocationObj
init|=
name|allocationArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"RESERVED"
argument_list|)
expr_stmt|;
name|JSONObject
name|requestAllocationObj
init|=
name|allocationObj
operator|.
name|getJSONObject
argument_list|(
literal|"requestAllocation"
argument_list|)
decl_stmt|;
name|verifyNumberOfAllocationAttempts
argument_list|(
name|requestAllocationObj
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|JSONArray
name|allocationAttemptArray
init|=
name|requestAllocationObj
operator|.
name|getJSONArray
argument_list|(
literal|"allocationAttempt"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allocationAttemptArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|allocationAttemptObj
init|=
name|allocationAttemptArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|allocationAttemptArray
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|allocationAttemptObj
operator|.
name|optString
argument_list|(
literal|"diagnostic"
argument_list|)
operator|.
name|contains
argument_list|(
name|INSUFFICIENT_RESOURCE_DIAGNOSTIC_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check second activity is for first allocation with ALLOCATED state
name|allocationObj
operator|=
name|allocationArray
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"ACCEPTED"
argument_list|)
expr_stmt|;
name|requestAllocationObj
operator|=
name|allocationObj
operator|.
name|getJSONObject
argument_list|(
literal|"requestAllocation"
argument_list|)
expr_stmt|;
name|verifyNumberOfAllocationAttempts
argument_list|(
name|requestAllocationObj
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|requestAllocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"ALLOCATED"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testGroupByDiagnostics ()
specifier|public
name|void
name|testGroupByDiagnostics
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.3:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.4:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|3072
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_ACTIVITIES
argument_list|)
decl_stmt|;
name|MultivaluedMapImpl
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
comment|/*        * test non-exist groupBy        */
name|params
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|,
literal|"NON-EXIST-GROUP-BY"
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|ActivitiesTestUtils
operator|.
name|requestWebResource
argument_list|(
name|r
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|json
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Got invalid groupBy:"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|)
expr_stmt|;
comment|/*        * test groupBy: DIAGNOSTIC        */
name|params
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|,
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
operator|.
name|DIAGNOSTIC
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|ActivitiesTestUtils
operator|.
name|requestWebResource
argument_list|(
name|r
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"waiting for next allocation"
argument_list|,
name|json
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Request a container for am2, will reserve a container on nm1
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4096
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|=
name|ActivitiesTestUtils
operator|.
name|requestWebResource
argument_list|(
name|r
argument_list|,
name|params
argument_list|)
expr_stmt|;
comment|//Check activities
name|verifyNumberOfAllocations
argument_list|(
name|json
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JSONObject
name|allocationObj
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"allocations"
argument_list|)
decl_stmt|;
comment|//Check diagnostic for request of app1
name|Predicate
argument_list|<
name|JSONObject
argument_list|>
name|findReqPred
init|=
parameter_list|(
name|obj
parameter_list|)
lambda|->
name|obj
operator|.
name|optString
argument_list|(
literal|"name"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"request_1_-1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|JSONObject
argument_list|>
name|reqObjs
init|=
name|findInAllocations
argument_list|(
name|allocationObj
argument_list|,
name|findReqPred
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|reqObjs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|reqChildren
init|=
name|reqObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"children"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reqChildren
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reqChildren
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|reqChild
init|=
name|reqChildren
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqChild
operator|.
name|getString
argument_list|(
literal|"allocationState"
argument_list|)
operator|.
name|equals
argument_list|(
name|AllocationState
operator|.
name|SKIPPED
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|reqChild
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|reqChild
operator|.
name|getJSONArray
argument_list|(
literal|"nodeIds"
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reqChild
operator|.
name|optString
argument_list|(
literal|"diagnostic"
argument_list|)
operator|.
name|contains
argument_list|(
name|INSUFFICIENT_RESOURCE_DIAGNOSTIC_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reqChild
operator|.
name|getString
argument_list|(
literal|"allocationState"
argument_list|)
operator|.
name|equals
argument_list|(
name|AllocationState
operator|.
name|RESERVED
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|reqChild
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reqChild
operator|.
name|getString
argument_list|(
literal|"nodeIds"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Allocation state should be "
operator|+
name|AllocationState
operator|.
name|SKIPPED
operator|.
name|name
argument_list|()
operator|+
literal|" or "
operator|+
name|AllocationState
operator|.
name|RESERVED
operator|.
name|name
argument_list|()
operator|+
literal|"!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppGroupByDiagnostics ()
specifier|public
name|void
name|testAppGroupByDiagnostics
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.3:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.4:1234"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|)
decl_stmt|;
try|try
block|{
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|3072
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|RM_WEB_SERVICE_PATH
argument_list|)
operator|.
name|path
argument_list|(
name|RMWSConsts
operator|.
name|SCHEDULER_APP_ACTIVITIES
argument_list|)
decl_stmt|;
name|MultivaluedMapImpl
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|APP_ID
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        * test non-exist groupBy        */
name|params
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|,
literal|"NON-EXIST-GROUP-BY"
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|ActivitiesTestUtils
operator|.
name|requestWebResource
argument_list|(
name|r
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|json
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Got invalid groupBy:"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|)
expr_stmt|;
comment|/*        * test groupBy: DIAGNOSTIC        */
name|params
operator|.
name|add
argument_list|(
name|RMWSConsts
operator|.
name|GROUP_BY
argument_list|,
name|RMWSConsts
operator|.
name|ActivitiesGroupBy
operator|.
name|DIAGNOSTIC
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|ActivitiesTestUtils
operator|.
name|requestWebResource
argument_list|(
name|r
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"waiting for display"
argument_list|,
name|json
operator|.
name|getString
argument_list|(
literal|"diagnostic"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Request two containers with different priority for am1
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Trigger scheduling, will allocate a container with priority 0
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Trigger scheduling, will reserve a container with priority 1 on nm1
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|json
operator|=
name|ActivitiesTestUtils
operator|.
name|requestWebResource
argument_list|(
name|r
argument_list|,
name|params
argument_list|)
expr_stmt|;
comment|//Check app activities
name|verifyNumberOfAllocations
argument_list|(
name|json
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|JSONArray
name|allocationArray
init|=
name|json
operator|.
name|getJSONArray
argument_list|(
literal|"allocations"
argument_list|)
decl_stmt|;
comment|//Check first activity is for second allocation with RESERVED state
name|JSONObject
name|allocationObj
init|=
name|allocationArray
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"RESERVED"
argument_list|)
expr_stmt|;
name|JSONObject
name|requestAllocationObj
init|=
name|allocationObj
operator|.
name|getJSONObject
argument_list|(
literal|"requestAllocation"
argument_list|)
decl_stmt|;
name|verifyNumberOfAllocationAttempts
argument_list|(
name|requestAllocationObj
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|JSONArray
name|allocationAttemptArray
init|=
name|requestAllocationObj
operator|.
name|getJSONArray
argument_list|(
literal|"allocationAttempt"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allocationAttemptArray
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|allocationAttemptObj
init|=
name|allocationAttemptArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|allocationAttemptObj
operator|.
name|getString
argument_list|(
literal|"allocationState"
argument_list|)
operator|.
name|equals
argument_list|(
name|AllocationState
operator|.
name|SKIPPED
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|allocationAttemptObj
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocationAttemptObj
operator|.
name|getJSONArray
argument_list|(
literal|"nodeIds"
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocationAttemptObj
operator|.
name|optString
argument_list|(
literal|"diagnostic"
argument_list|)
operator|.
name|contains
argument_list|(
name|INSUFFICIENT_RESOURCE_DIAGNOSTIC_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allocationAttemptObj
operator|.
name|getString
argument_list|(
literal|"allocationState"
argument_list|)
operator|.
name|equals
argument_list|(
name|AllocationState
operator|.
name|RESERVED
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|allocationAttemptObj
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|allocationAttemptObj
operator|.
name|getString
argument_list|(
literal|"nodeIds"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Allocation state should be "
operator|+
name|AllocationState
operator|.
name|SKIPPED
operator|.
name|name
argument_list|()
operator|+
literal|" or "
operator|+
name|AllocationState
operator|.
name|RESERVED
operator|.
name|name
argument_list|()
operator|+
literal|"!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check second activity is for first allocation with ALLOCATED state
name|allocationObj
operator|=
name|allocationArray
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|allocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"ACCEPTED"
argument_list|)
expr_stmt|;
name|requestAllocationObj
operator|=
name|allocationObj
operator|.
name|getJSONObject
argument_list|(
literal|"requestAllocation"
argument_list|)
expr_stmt|;
name|verifyNumberOfAllocationAttempts
argument_list|(
name|requestAllocationObj
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyStateOfAllocations
argument_list|(
name|requestAllocationObj
argument_list|,
literal|"allocationState"
argument_list|,
literal|"ALLOCATED"
argument_list|)
expr_stmt|;
name|JSONObject
name|allocationAttemptObj
init|=
name|requestAllocationObj
operator|.
name|getJSONObject
argument_list|(
literal|"allocationAttempt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|allocationAttemptObj
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|allocationAttemptObj
operator|.
name|getString
argument_list|(
literal|"nodeIds"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

