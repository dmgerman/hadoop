begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.federation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|federation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|FederationStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|GetSubClusterInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterDeregisterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|federation
operator|.
name|store
operator|.
name|records
operator|.
name|SubClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ClusterMetricsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONConfiguration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONJAXBContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONUnmarshaller
import|;
end_import

begin_comment
comment|/**  * Unit tests for FederationStateStoreService.  */
end_comment

begin_class
DECL|class|TestFederationRMStateStoreService
specifier|public
class|class
name|TestFederationRMStateStoreService
block|{
DECL|field|requestInfo
specifier|private
specifier|final
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
DECL|field|subClusterId
specifier|private
specifier|final
name|SubClusterId
name|subClusterId
init|=
name|SubClusterId
operator|.
name|newInstance
argument_list|(
literal|"SC-1"
argument_list|)
decl_stmt|;
DECL|field|request
specifier|private
specifier|final
name|GetSubClusterInfoRequest
name|request
init|=
name|GetSubClusterInfoRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|stateStore
specifier|private
name|FederationStateStore
name|stateStore
decl_stmt|;
DECL|field|lastHearbeatTS
specifier|private
name|long
name|lastHearbeatTS
init|=
literal|0
decl_stmt|;
DECL|field|jc
specifier|private
name|JSONJAXBContext
name|jc
decl_stmt|;
DECL|field|unmarshaller
specifier|private
name|JSONUnmarshaller
name|unmarshaller
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
throws|,
name|JAXBException
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|jc
operator|=
operator|new
name|JSONJAXBContext
argument_list|(
name|JSONConfiguration
operator|.
name|mapped
argument_list|()
operator|.
name|rootUnwrapping
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|ClusterMetricsInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|unmarshaller
operator|=
name|jc
operator|.
name|createJSONUnmarshaller
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|unmarshaller
operator|=
literal|null
expr_stmt|;
name|jc
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFederationStateStoreService ()
specifier|public
name|void
name|testFederationStateStoreService
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|FEDERATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
name|subClusterId
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Initially there should be no entry for the sub-cluster
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|stateStore
operator|=
name|rm
operator|.
name|getFederationStateStoreService
argument_list|()
operator|.
name|getStateStoreClient
argument_list|()
expr_stmt|;
name|GetSubClusterInfoResponse
name|response
init|=
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
comment|// Validate if sub-cluster is registered
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|capability
init|=
name|checkSubClusterInfo
argument_list|(
name|SubClusterState
operator|.
name|SC_NEW
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capability
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Heartbeat to see if sub-cluster transitions to running
name|FederationStateStoreHeartbeat
name|storeHeartbeat
init|=
name|rm
operator|.
name|getFederationStateStoreService
argument_list|()
operator|.
name|getStateStoreHeartbeatThread
argument_list|()
decl_stmt|;
name|storeHeartbeat
operator|.
name|run
argument_list|()
expr_stmt|;
name|capability
operator|=
name|checkSubClusterInfo
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|checkClusterMetricsInfo
argument_list|(
name|capability
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// heartbeat again after adding a node.
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|storeHeartbeat
operator|.
name|run
argument_list|()
expr_stmt|;
name|capability
operator|=
name|checkSubClusterInfo
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|checkClusterMetricsInfo
argument_list|(
name|capability
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Validate sub-cluster deregistration
name|rm
operator|.
name|getFederationStateStoreService
argument_list|()
operator|.
name|deregisterSubCluster
argument_list|(
name|SubClusterDeregisterRequest
operator|.
name|newInstance
argument_list|(
name|subClusterId
argument_list|,
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|)
argument_list|)
expr_stmt|;
name|checkSubClusterInfo
argument_list|(
name|SubClusterState
operator|.
name|SC_UNREGISTERED
argument_list|)
expr_stmt|;
comment|// check after failover
name|explicitFailover
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|capability
operator|=
name|checkSubClusterInfo
argument_list|(
name|SubClusterState
operator|.
name|SC_NEW
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capability
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Heartbeat to see if sub-cluster transitions to running
name|storeHeartbeat
operator|=
name|rm
operator|.
name|getFederationStateStoreService
argument_list|()
operator|.
name|getStateStoreHeartbeatThread
argument_list|()
expr_stmt|;
name|storeHeartbeat
operator|.
name|run
argument_list|()
expr_stmt|;
name|capability
operator|=
name|checkSubClusterInfo
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|checkClusterMetricsInfo
argument_list|(
name|capability
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// heartbeat again after adding a node.
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|storeHeartbeat
operator|.
name|run
argument_list|()
expr_stmt|;
name|capability
operator|=
name|checkSubClusterInfo
argument_list|(
name|SubClusterState
operator|.
name|SC_RUNNING
argument_list|)
expr_stmt|;
name|checkClusterMetricsInfo
argument_list|(
name|capability
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|explicitFailover (MockRM rm)
specifier|private
name|void
name|explicitFailover
parameter_list|(
name|MockRM
name|rm
parameter_list|)
throws|throws
name|IOException
block|{
name|rm
operator|.
name|getAdminService
argument_list|()
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|lastHearbeatTS
operator|=
literal|0
expr_stmt|;
name|stateStore
operator|=
name|rm
operator|.
name|getFederationStateStoreService
argument_list|()
operator|.
name|getStateStoreClient
argument_list|()
expr_stmt|;
block|}
DECL|method|checkClusterMetricsInfo (String capability, int numNodes)
specifier|private
name|void
name|checkClusterMetricsInfo
parameter_list|(
name|String
name|capability
parameter_list|,
name|int
name|numNodes
parameter_list|)
throws|throws
name|JAXBException
block|{
name|ClusterMetricsInfo
name|clusterMetricsInfo
init|=
name|unmarshaller
operator|.
name|unmarshalFromJSON
argument_list|(
operator|new
name|StringReader
argument_list|(
name|capability
argument_list|)
argument_list|,
name|ClusterMetricsInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numNodes
argument_list|,
name|clusterMetricsInfo
operator|.
name|getTotalNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSubClusterInfo (SubClusterState state)
specifier|private
name|String
name|checkSubClusterInfo
parameter_list|(
name|SubClusterState
name|state
parameter_list|)
throws|throws
name|YarnException
throws|,
name|UnknownHostException
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|SubClusterInfo
name|response
init|=
name|stateStore
operator|.
name|getSubCluster
argument_list|(
name|request
argument_list|)
operator|.
name|getSubClusterInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|state
argument_list|,
name|response
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getLastHeartBeat
argument_list|()
operator|>=
name|lastHearbeatTS
argument_list|)
expr_stmt|;
name|String
name|expectedAddress
init|=
operator|(
name|response
operator|.
name|getClientRMServiceAddress
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|)
index|[
literal|0
index|]
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAddress
argument_list|,
operator|(
name|response
operator|.
name|getAMRMServiceAddress
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAddress
argument_list|,
operator|(
name|response
operator|.
name|getRMAdminServiceAddress
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAddress
argument_list|,
operator|(
name|response
operator|.
name|getRMWebServiceAddress
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|lastHearbeatTS
operator|=
name|response
operator|.
name|getLastHeartBeat
argument_list|()
expr_stmt|;
return|return
name|response
operator|.
name|getCapability
argument_list|()
return|;
block|}
block|}
end_class

end_unit

