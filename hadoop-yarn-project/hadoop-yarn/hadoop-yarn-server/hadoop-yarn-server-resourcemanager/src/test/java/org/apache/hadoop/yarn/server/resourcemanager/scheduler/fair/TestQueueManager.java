begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Test the {@link FairScheduler} queue manager correct queue hierarchies  * management (create, delete and type changes).  */
end_comment

begin_class
DECL|class|TestQueueManager
specifier|public
class|class
name|TestQueueManager
block|{
DECL|field|queueManager
specifier|private
name|QueueManager
name|queueManager
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|PlacementManager
name|placementManager
init|=
operator|new
name|PlacementManager
argument_list|()
decl_stmt|;
name|FairSchedulerConfiguration
name|conf
init|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getQueuePlacementManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|placementManager
argument_list|)
expr_stmt|;
name|SystemClock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|scheduler
operator|=
name|mock
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|scheduler
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
comment|// Set up some queues to test default child max resource inheritance
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.test"
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.test.childA"
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.test.childB"
argument_list|)
expr_stmt|;
name|queueManager
operator|=
operator|new
name|QueueManager
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|FSQueueMetrics
operator|.
name|forQueue
argument_list|(
literal|"root"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the leaf to parent queue conversion, excluding the default queue.    */
annotation|@
name|Test
DECL|method|testReloadTurnsLeafQueueIntoParent ()
specifier|public
name|void
name|testReloadTurnsLeafQueueIntoParent
parameter_list|()
block|{
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1"
argument_list|)
expr_stmt|;
comment|// When no apps are running in the leaf queue, should be fine turning it
comment|// into a parent.
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1.queue2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// When leaf queues are empty, should be ok deleting them and
comment|// turning parent into a leaf.
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// When apps exist in leaf queue, we shouldn't be able to create
comment|// children under it, but things should work otherwise.
name|FSLeafQueue
name|q1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q1
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1.queue2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// When apps exist in leaf queues under a parent queue, shouldn't be
comment|// able to turn it into a leaf queue, but things should work otherwise.
name|q1
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1.queue2"
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|q2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|q2
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should never to be able to create a queue under the default queue
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"default.queue3"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default.queue3"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the postponed leaf to parent queue conversion (app running).    */
annotation|@
name|Test
DECL|method|testReloadTurnsLeafToParentWithNoLeaf ()
specifier|public
name|void
name|testReloadTurnsLeafToParentWithNoLeaf
parameter_list|()
block|{
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|scheduler
argument_list|)
decl_stmt|;
comment|// Create a leaf queue1
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.queue1"
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Lets say later on admin makes queue1 a parent queue by
comment|// specifying "type=parent" in the alloc xml and lets say apps running in
comment|// queue1
name|FSLeafQueue
name|q1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q1
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|allocConf
operator|=
operator|new
name|AllocationConfiguration
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.queue1"
argument_list|)
expr_stmt|;
comment|// When allocs are reloaded queue1 shouldn't be converter to parent
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now lets assume apps completed and there are no apps in queue1
name|q1
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// We should see queue1 transform from leaf queue to parent queue.
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// this parent should not have any children
name|assertTrue
argument_list|(
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getChildQueues
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check the queue name parsing (blank space in all forms).    */
annotation|@
name|Test
DECL|method|testCheckQueueNodeName ()
specifier|public
name|void
name|testCheckQueueNodeName
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|" a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"a "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|" a "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"\u00a0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"a\u00a0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"\u00a0a\u00a0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"a b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateConfiguredLeafQueues (QueueManager queueMgr, String... confLeafQueues)
specifier|private
name|void
name|updateConfiguredLeafQueues
parameter_list|(
name|QueueManager
name|queueMgr
parameter_list|,
name|String
modifier|...
name|confLeafQueues
parameter_list|)
block|{
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|scheduler
argument_list|)
decl_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|addAll
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|confLeafQueues
argument_list|)
argument_list|)
expr_stmt|;
name|queueMgr
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test simple leaf queue creation.    */
annotation|@
name|Test
DECL|method|testCreateLeafQueue ()
specifier|public
name|void
name|testCreateLeafQueue
parameter_list|()
block|{
name|FSQueue
name|q1
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
literal|"root.queue1"
argument_list|,
name|FSQueueType
operator|.
name|LEAF
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Leaf queue root.queue1 was not created"
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.queue1"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creation of a leaf queue and its parent.    */
annotation|@
name|Test
DECL|method|testCreateLeafQueueAndParent ()
specifier|public
name|void
name|testCreateLeafQueueAndParent
parameter_list|()
block|{
name|FSQueue
name|q2
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
literal|"root.queue1.queue2"
argument_list|,
name|FSQueueType
operator|.
name|LEAF
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Parent queue root.queue1 was not created"
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Leaf queue root.queue1.queue2 was not created"
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.queue1.queue2"
argument_list|,
name|q2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creation of leaf and parent child queues when the parent queue has    * child defaults set. In this test we rely on the root.test,    * root.test.childA and root.test.childB queues that are created in the    * {@link #setUp()} method.    */
annotation|@
name|Test
DECL|method|testCreateQueueWithChildDefaults ()
specifier|public
name|void
name|testCreateQueueWithChildDefaults
parameter_list|()
block|{
name|queueManager
operator|.
name|getQueue
argument_list|(
literal|"root.test"
argument_list|)
operator|.
name|setMaxChildQueueResource
argument_list|(
operator|new
name|ConfigurableResource
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|256
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FSQueue
name|q1
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
literal|"root.test.childC"
argument_list|,
name|FSQueueType
operator|.
name|LEAF
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Leaf queue root.test.childC was not created"
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childC"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.test.childC"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max resources for root.queue1 were not inherited from "
operator|+
literal|"parent's max child resources"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|256
argument_list|)
argument_list|,
name|q1
operator|.
name|getMaxShare
argument_list|()
argument_list|)
expr_stmt|;
name|FSQueue
name|q2
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
literal|"root.test.childD"
argument_list|,
name|FSQueueType
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Leaf queue root.test.childD was not created"
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.test.childD"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.test.childD"
argument_list|,
name|q2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max resources for root.test.childD were not inherited "
operator|+
literal|"from parent's max child resources"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|256
argument_list|)
argument_list|,
name|q2
operator|.
name|getMaxShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the childA and childB queues weren't impacted
comment|// by the child defaults
name|assertNotNull
argument_list|(
literal|"Leaf queue root.test.childA was not created during setup"
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childA"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max resources for root.test.childA were inherited from "
operator|+
literal|"parent's max child resources"
argument_list|,
name|Resources
operator|.
name|unbounded
argument_list|()
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childA"
argument_list|,
literal|false
argument_list|)
operator|.
name|getMaxShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Leaf queue root.test.childB was not created during setup"
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.test.childB"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Max resources for root.test.childB were inherited from "
operator|+
literal|"parent's max child resources"
argument_list|,
name|Resources
operator|.
name|unbounded
argument_list|()
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.test.childB"
argument_list|,
literal|false
argument_list|)
operator|.
name|getMaxShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creation of a leaf queue with no resource limits.    */
annotation|@
name|Test
DECL|method|testCreateLeafQueueWithDefaults ()
specifier|public
name|void
name|testCreateLeafQueueWithDefaults
parameter_list|()
block|{
name|FSQueue
name|q1
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
literal|"root.queue1"
argument_list|,
name|FSQueueType
operator|.
name|LEAF
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Leaf queue root.queue1 was not created"
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.queue1"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Min default is 0,0
name|assertEquals
argument_list|(
literal|"Min resources were not set to default"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|q1
operator|.
name|getMinShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Max default is unbounded
name|assertEquals
argument_list|(
literal|"Max resources were not set to default"
argument_list|,
name|Resources
operator|.
name|unbounded
argument_list|()
argument_list|,
name|q1
operator|.
name|getMaxShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creation of a simple parent queue.    */
annotation|@
name|Test
DECL|method|testCreateParentQueue ()
specifier|public
name|void
name|testCreateParentQueue
parameter_list|()
block|{
name|FSQueue
name|q1
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
literal|"root.queue1"
argument_list|,
name|FSQueueType
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Parent queue root.queue1 was not created"
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.queue1"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test creation of a parent queue and its parent.    */
annotation|@
name|Test
DECL|method|testCreateParentQueueAndParent ()
specifier|public
name|void
name|testCreateParentQueueAndParent
parameter_list|()
block|{
name|FSQueue
name|q2
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
literal|"root.queue1.queue2"
argument_list|,
name|FSQueueType
operator|.
name|PARENT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Parent queue root.queue1 was not created"
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Leaf queue root.queue1.queue2 was not created"
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.queue1.queue2"
argument_list|,
name|q2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the removal of a dynamic leaf under a hierarchy of static parents.    */
annotation|@
name|Test
DECL|method|testRemovalOfDynamicLeafQueue ()
specifier|public
name|void
name|testRemovalOfDynamicLeafQueue
parameter_list|()
block|{
name|FSLeafQueue
name|q1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childB.dynamic1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.test.childB.dynamic1 was not created"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.test.childB.dynamic1"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.test.childB.dynamic1 is not a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// an application is submitted to root.test.childB.dynamic1
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q1
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// root.test.childB.dynamic1 is not empty and should not be removed
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childB.dynamic1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.test.childB.dynamic1 was deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
comment|// the application finishes, the next removeEmptyDynamicQueues() should
comment|// clean root.test.childB.dynamic1 up, but keep its static parent
name|q1
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childB.dynamic1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Queue root.test.childB.dynamic1 was not deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"The static parent of root.test.childB.dynamic1 was deleted"
argument_list|,
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.test.childB"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the removal of a dynamic parent and its child in one cleanup action.    */
annotation|@
name|Test
DECL|method|testRemovalOfDynamicParentQueue ()
specifier|public
name|void
name|testRemovalOfDynamicParentQueue
parameter_list|()
block|{
name|FSQueue
name|q1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.parent1.dynamic1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.parent1.dynamic1 was not created"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.parent1.dynamic1"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.parent1.dynamic1 is not a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
name|FSQueue
name|p1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.parent1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.parent1 was not created"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.parent1 is not a dynamic queue"
argument_list|,
name|p1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.parent1.dynamic1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|p1
operator|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.parent1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Queue root.parent1.dynamic1 was not deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Queue root.parent1 was not deleted"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the change from dynamic to static for a leaf queue.    */
annotation|@
name|Test
DECL|method|testNonEmptyDynamicQueueBecomingStaticQueue ()
specifier|public
name|void
name|testNonEmptyDynamicQueueBecomingStaticQueue
parameter_list|()
block|{
name|FSLeafQueue
name|q1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.leaf1 was not created"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.leaf1"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.leaf1 is not a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// pretend that we submitted an app to the queue
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q1
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// non-empty queues should not be deleted
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.leaf1 was deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
comment|// next we add leaf1 under root in the allocation config
name|AllocationConfiguration
name|allocConf
init|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.leaf1"
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
comment|// updateAllocationConfiguration() should make root.leaf1 a dynamic queue
name|assertFalse
argument_list|(
literal|"root.leaf1 is not a static queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// application finished now and the queue is empty, but since leaf1 is a
comment|// static queue at this point, hence not affected by
comment|// removeEmptyDynamicQueues()
name|q1
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.leaf1 was deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.leaf1 is not a static queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the change from static to dynamic for a leaf queue.    */
annotation|@
name|Test
DECL|method|testNonEmptyStaticQueueBecomingDynamicQueue ()
specifier|public
name|void
name|testNonEmptyStaticQueueBecomingDynamicQueue
parameter_list|()
block|{
name|FSLeafQueue
name|q1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.test.childA does not exist"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.test.childA"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.test.childA is not a static queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// we submitted an app to the queue
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q1
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// the next removeEmptyDynamicQueues() call should not modify
comment|// root.test.childA
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childA"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.test.childA was deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.test.childA is not a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// next we remove all queues from the allocation config,
comment|// this causes all queues to change to dynamic
name|AllocationConfiguration
name|allocConf
init|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|queueNames
range|:
name|allocConf
operator|.
name|configuredQueues
operator|.
name|values
argument_list|()
control|)
block|{
name|queueManager
operator|.
name|setQueuesToDynamic
argument_list|(
name|queueNames
argument_list|)
expr_stmt|;
name|queueNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childA"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.test.childA was deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.test.childA is not a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// application finished - the queue does not have runnable app
comment|// the next removeEmptyDynamicQueues() call should remove the queues
name|q1
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.test.childA"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Queue root.test.childA was not deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|FSParentQueue
name|p1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Queue root.test was not deleted"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Testing the removal of a dynamic parent queue without a child.    */
annotation|@
name|Test
DECL|method|testRemovalOfChildlessParentQueue ()
specifier|public
name|void
name|testRemovalOfChildlessParentQueue
parameter_list|()
block|{
name|FSParentQueue
name|q1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.test.childB"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.test.childB was not created"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.test.childB"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.test.childB is a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// static queues should not be deleted
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.test.childB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.test.childB was deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
comment|// next we remove root.test.childB from the allocation config
name|AllocationConfiguration
name|allocConf
init|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|remove
argument_list|(
literal|"root.test.childB"
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|setQueuesToDynamic
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"root.test.childB"
argument_list|)
argument_list|)
expr_stmt|;
comment|// the next removeEmptyDynamicQueues() call should clean
comment|// root.test.childB up
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Queue root.leaf1 was not deleted"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if a queue is correctly changed from dynamic to static and vice    * versa.    */
annotation|@
name|Test
DECL|method|testQueueTypeChange ()
specifier|public
name|void
name|testQueueTypeChange
parameter_list|()
block|{
name|FSQueue
name|q1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.parent1.leaf1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.parent1.leaf1 was not created"
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"createQueue() returned wrong queue"
argument_list|,
literal|"root.parent1.leaf1"
argument_list|,
name|q1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.parent1.leaf1 is not a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
name|FSQueue
name|p1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.parent1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue root.parent1 was not created"
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.parent1 is not a dynamic queue"
argument_list|,
name|p1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// adding root.parent1.leaf1 and root.parent1 to the allocation config
name|AllocationConfiguration
name|allocConf
init|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.parent1"
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.parent1.leaf1"
argument_list|)
expr_stmt|;
comment|// updateAllocationConfiguration() should change both queues over to static
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.parent1.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.parent1.leaf1 is not a static queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.parent1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.parent1 is not a static queue"
argument_list|,
name|p1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
comment|// removing root.parent1.leaf1 and root.parent1 from the allocation
comment|// config
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|remove
argument_list|(
literal|"root.parent1"
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|remove
argument_list|(
literal|"root.parent1.leaf1"
argument_list|)
expr_stmt|;
comment|// updateAllocationConfiguration() should change both queues
comment|// to dynamic
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|setQueuesToDynamic
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"root.parent1"
argument_list|,
literal|"root.parent1.leaf1"
argument_list|)
argument_list|)
expr_stmt|;
name|q1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.parent1.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.parent1.leaf1 is not a dynamic queue"
argument_list|,
name|q1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.parent1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.parent1 is not a dynamic queue"
argument_list|,
name|p1
operator|.
name|isDynamic
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that an assigned app flags a queue as being not empty.    */
annotation|@
name|Test
DECL|method|testApplicationAssignmentPreventsRemovalOfDynamicQueue ()
specifier|public
name|void
name|testApplicationAssignmentPreventsRemovalOfDynamicQueue
parameter_list|()
block|{
name|FSLeafQueue
name|q
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"root.leaf1 does not exist"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.leaf1 is not empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// assigning an application (without an appAttempt so far) to the queue
comment|// removeEmptyDynamicQueues() should not remove the queue
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1L
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q
operator|.
name|addAssignedApp
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.leaf1 is empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.leaf1 has been removed"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.leaf1 is empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ActiveUsersManager
name|activeUsersManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the appAttempt is created
comment|// removeEmptyDynamicQueues() should not remove the queue
name|FSAppAttempt
name|appAttempt
init|=
operator|new
name|FSAppAttempt
argument_list|(
name|scheduler
argument_list|,
name|applicationAttemptId
argument_list|,
literal|"a_user"
argument_list|,
name|q
argument_list|,
name|activeUsersManager
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|q
operator|.
name|addApp
argument_list|(
name|appAttempt
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.leaf1 has been removed"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.leaf1 is empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// the appAttempt finished, the queue should be empty
name|q
operator|.
name|removeApp
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.leaf1 is not empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// removeEmptyDynamicQueues() should remove the queue
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.leaf1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"root.leaf1 has not been removed"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test changing a leaf into a parent queue and auto create of the leaf queue    * under the newly created parent.    */
annotation|@
name|Test
DECL|method|testRemovalOfIncompatibleNonEmptyQueue ()
specifier|public
name|void
name|testRemovalOfIncompatibleNonEmptyQueue
parameter_list|()
block|{
name|AllocationConfiguration
name|allocConf
init|=
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
decl_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.a"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocConf
operator|=
name|allocConf
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|q
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.a"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"root.a does not exist"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.a is not empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// we start to run an application on root.a
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.a is empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// root.a should not be removed by removeEmptyDynamicQueues or by
comment|// removePendingIncompatibleQueues
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.a does not exist"
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// let's introduce queue incompatibility
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|remove
argument_list|(
literal|"root.a"
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.a"
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.a.b"
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
comment|// since root.a has running applications, it should be still a leaf queue
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.a has been removed"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.a is empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// removePendingIncompatibleQueues should still keep root.a as a leaf queue
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.a has been removed"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"root.a is empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// when the application finishes, root.a will become a parent queue on next
comment|// config cleanup. The leaf queue will be created below it on reload of the
comment|// config.
name|q
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|FSParentQueue
name|p
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.a"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"root.a does not exist"
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.a.b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.a.b was not created"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to check multiple levels of parent queue removal.    */
annotation|@
name|Test
DECL|method|testRemoveDeepHierarchy ()
specifier|public
name|void
name|testRemoveDeepHierarchy
parameter_list|()
block|{
comment|// create a deeper queue hierarchy
name|FSLeafQueue
name|q
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2.p3.leaf"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"root.p1.p2.p3.leaf does not exist"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.p1.p2.p3.leaf is not empty"
argument_list|,
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add an application to make the queue not empty
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|q
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// remove should not remove the queues
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2.p3.leaf"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.p1.p2.p3.leaf does not exist"
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// Remove the application
name|q
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// Cleanup should remove the whole tree
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|q
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2.p3.leaf"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"root.p1.p2.p3.leaf does exist"
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|FSParentQueue
name|p
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.p1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"root.p1 does exist"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the removal of queues when a parent is shared in the tree. First    * remove one branch then the second branch of the tree.    */
annotation|@
name|Test
DECL|method|testRemoveSplitHierarchy ()
specifier|public
name|void
name|testRemoveSplitHierarchy
parameter_list|()
block|{
comment|// create a deeper queue hierarchy
name|FSLeafQueue
name|leaf1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2-1.leaf-1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"root.p1.p2-1.leaf-1 does not exist"
argument_list|,
name|leaf1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.p1.p2-1.leaf1 is not empty"
argument_list|,
name|leaf1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a split below the first level
name|FSLeafQueue
name|leaf2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2-2.leaf-2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"root.p1.p2-2.leaf2 does not exist"
argument_list|,
name|leaf2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"root.p1.p2-2.leaf2 is not empty"
argument_list|,
name|leaf2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add an application to make one of the queues not empty
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|leaf1
operator|.
name|addAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// remove should not remove the non empty split
name|queueManager
operator|.
name|removePendingIncompatibleQueues
argument_list|()
expr_stmt|;
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|leaf1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2-1.leaf-1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"root.p1.p2-1.leaf-1 does not exist"
argument_list|,
name|leaf1
argument_list|)
expr_stmt|;
name|leaf2
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2-2.leaf-2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"root.p1.p2-2.leaf2 does exist"
argument_list|,
name|leaf2
argument_list|)
expr_stmt|;
name|FSParentQueue
name|p
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.p1.p2-2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"root.p1.p2-2 does exist"
argument_list|,
name|p
argument_list|)
expr_stmt|;
comment|// Remove the application
name|leaf1
operator|.
name|removeAssignedApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// Cleanup should remove the whole tree
name|queueManager
operator|.
name|removeEmptyDynamicQueues
argument_list|()
expr_stmt|;
name|leaf1
operator|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.p1.p2-1.leaf-1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"root.p1.p2-1.leaf-1 does exist"
argument_list|,
name|leaf1
argument_list|)
expr_stmt|;
name|p
operator|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.p1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"root.p1 does exist"
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

