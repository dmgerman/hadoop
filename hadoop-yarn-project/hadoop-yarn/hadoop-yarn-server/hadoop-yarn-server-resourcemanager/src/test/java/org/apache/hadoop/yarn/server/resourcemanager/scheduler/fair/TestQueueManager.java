begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestQueueManager
specifier|public
class|class
name|TestQueueManager
block|{
DECL|field|conf
specifier|private
name|FairSchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|queueManager
specifier|private
name|QueueManager
name|queueManager
decl_stmt|;
DECL|field|notEmptyQueues
specifier|private
name|Set
argument_list|<
name|FSQueue
argument_list|>
name|notEmptyQueues
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
expr_stmt|;
name|FairScheduler
name|scheduler
init|=
name|mock
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SystemClock
name|clock
init|=
operator|new
name|SystemClock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|notEmptyQueues
operator|=
operator|new
name|HashSet
argument_list|<
name|FSQueue
argument_list|>
argument_list|()
expr_stmt|;
name|queueManager
operator|=
operator|new
name|QueueManager
argument_list|(
name|scheduler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|(
name|FSQueue
name|queue
parameter_list|)
block|{
return|return
operator|!
name|notEmptyQueues
operator|.
name|contains
argument_list|(
name|queue
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|FSQueueMetrics
operator|.
name|forQueue
argument_list|(
literal|"root"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReloadTurnsLeafQueueIntoParent ()
specifier|public
name|void
name|testReloadTurnsLeafQueueIntoParent
parameter_list|()
throws|throws
name|Exception
block|{
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1"
argument_list|)
expr_stmt|;
comment|// When no apps are running in the leaf queue, should be fine turning it
comment|// into a parent.
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1.queue2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// When leaf queues are empty, should be ok deleting them and
comment|// turning parent into a leaf.
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// When apps exist in leaf queue, we shouldn't be able to create
comment|// children under it, but things should work otherwise.
name|notEmptyQueues
operator|.
name|add
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1.queue2"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// When apps exist in leaf queues under a parent queue, shouldn't be
comment|// able to turn it into a leaf queue, but things should work otherwise.
name|notEmptyQueues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1.queue2"
argument_list|)
expr_stmt|;
name|notEmptyQueues
operator|.
name|add
argument_list|(
name|queueManager
operator|.
name|getQueue
argument_list|(
literal|"root.queue1"
argument_list|)
argument_list|)
expr_stmt|;
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"queue1"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1.queue2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should never to be able to create a queue under the default queue
name|updateConfiguredLeafQueues
argument_list|(
name|queueManager
argument_list|,
literal|"default.queue3"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default.queue3"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReloadTurnsLeafToParentWithNoLeaf ()
specifier|public
name|void
name|testReloadTurnsLeafToParentWithNoLeaf
parameter_list|()
block|{
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Create a leaf queue1
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.queue1"
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Lets say later on admin makes queue1 a parent queue by
comment|// specifying "type=parent" in the alloc xml and lets say apps running in
comment|// queue1
name|notEmptyQueues
operator|.
name|add
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|allocConf
operator|=
operator|new
name|AllocationConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|add
argument_list|(
literal|"root.queue1"
argument_list|)
expr_stmt|;
comment|// When allocs are reloaded queue1 shouldn't be converter to parent
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now lets assume apps completed and there are no apps in queue1
name|notEmptyQueues
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// We should see queue1 transform from leaf queue to parent queue.
name|queueManager
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// this parent should not have any children
name|assertTrue
argument_list|(
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root.queue1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getChildQueues
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCheckQueueNodeName ()
specifier|public
name|void
name|testCheckQueueNodeName
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"  "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|" a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"a "
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|" a "
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"a b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueManager
operator|.
name|isQueueNameValid
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|updateConfiguredLeafQueues (QueueManager queueMgr, String... confLeafQueues)
specifier|private
name|void
name|updateConfiguredLeafQueues
parameter_list|(
name|QueueManager
name|queueMgr
parameter_list|,
name|String
modifier|...
name|confLeafQueues
parameter_list|)
block|{
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|allocConf
operator|.
name|configuredQueues
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|addAll
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|confLeafQueues
argument_list|)
argument_list|)
expr_stmt|;
name|queueMgr
operator|.
name|updateAllocationConfiguration
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

