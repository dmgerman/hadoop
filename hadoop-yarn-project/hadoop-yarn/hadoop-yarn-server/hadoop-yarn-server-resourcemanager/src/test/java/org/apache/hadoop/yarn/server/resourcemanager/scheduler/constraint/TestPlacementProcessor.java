begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|RejectedSchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|RejectionReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|sleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
import|;
end_import

begin_comment
comment|/**  * This tests end2end workflow of the constraint placement framework.  */
end_comment

begin_class
DECL|class|TestPlacementProcessor
specifier|public
class|class
name|TestPlacementProcessor
block|{
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestPlacementProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|DrainDispatcher
name|dispatcher
decl_stmt|;
annotation|@
name|Before
DECL|method|createAndStartRM ()
specifier|public
name|void
name|createAndStartRM
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|startRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|startRM (final YarnConfiguration conf)
specifier|private
name|void
name|startRM
parameter_list|(
specifier|final
name|YarnConfiguration
name|conf
parameter_list|)
block|{
name|dispatcher
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopRM ()
specifier|public
name|void
name|stopRM
parameter_list|()
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPlacement ()
specifier|public
name|void
name|testPlacement
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|MockNM
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|MockNM
name|nm3
init|=
operator|new
name|MockNM
argument_list|(
literal|"h3:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm3
argument_list|)
expr_stmt|;
name|MockNM
name|nm4
init|=
operator|new
name|MockNM
argument_list|(
literal|"h4:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm4
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm4
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm3
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm4
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// kick the scheduler
while|while
condition|(
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|<
literal|4
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm4
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
name|allocatedContainers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure unique nodes
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodeIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSchedulerRejection ()
specifier|public
name|void
name|testSchedulerRejection
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|MockNM
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|MockNM
name|nm3
init|=
operator|new
name|MockNM
argument_list|(
literal|"h3:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm3
argument_list|)
expr_stmt|;
name|MockNM
name|nm4
init|=
operator|new
name|MockNM
argument_list|(
literal|"h4:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm4
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm4
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm3
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm4
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
comment|// Ask for a container larger than the node
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|5120
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RejectedSchedulingRequest
argument_list|>
name|rejectedReqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|allocCount
init|=
literal|1
decl_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rejectedReqs
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getRejectedSchedulingRequests
argument_list|()
argument_list|)
expr_stmt|;
comment|// kick the scheduler
while|while
condition|(
name|allocCount
operator|<
literal|11
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm4
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rejectedReqs
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getRejectedSchedulingRequests
argument_list|()
argument_list|)
expr_stmt|;
name|allocCount
operator|++
expr_stmt|;
if|if
condition|(
name|rejectedReqs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
name|allocatedContainers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure unique nodes
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RejectedSchedulingRequest
name|rej
init|=
name|rejectedReqs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rej
operator|.
name|getRequest
argument_list|()
operator|.
name|getAllocationRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RejectionReason
operator|.
name|COULD_NOT_SCHEDULE_ON_NODE
argument_list|,
name|rej
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testRePlacementAfterSchedulerRejection ()
specifier|public
name|void
name|testRePlacementAfterSchedulerRejection
parameter_list|()
throws|throws
name|Exception
block|{
name|stopRM
argument_list|()
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_RETRY_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|startRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|MockNM
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|MockNM
name|nm3
init|=
operator|new
name|MockNM
argument_list|(
literal|"h3:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm3
argument_list|)
expr_stmt|;
name|MockNM
name|nm4
init|=
operator|new
name|MockNM
argument_list|(
literal|"h4:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm4
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm4
argument_list|)
expr_stmt|;
name|MockNM
name|nm5
init|=
operator|new
name|MockNM
argument_list|(
literal|"h5:1234"
argument_list|,
literal|8192
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm5
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm3
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm4
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// No not register nm5 yet..
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
comment|// Ask for a container larger than the node
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|5120
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RejectedSchedulingRequest
argument_list|>
name|rejectedReqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|allocCount
init|=
literal|1
decl_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rejectedReqs
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getRejectedSchedulingRequests
argument_list|()
argument_list|)
expr_stmt|;
comment|// Register node5 only after first allocate - so the initial placement
comment|// for the large schedReq goes to some other node..
name|nm5
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// kick the scheduler
while|while
condition|(
name|allocCount
operator|<
literal|11
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm4
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm5
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rejectedReqs
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getRejectedSchedulingRequests
argument_list|()
argument_list|)
expr_stmt|;
name|allocCount
operator|++
expr_stmt|;
if|if
condition|(
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
name|allocatedContainers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure unique nodes
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodeIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPlacementRejection ()
specifier|public
name|void
name|testPlacementRejection
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|MockNM
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|MockNM
name|nm3
init|=
operator|new
name|MockNM
argument_list|(
literal|"h3:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm3
argument_list|)
expr_stmt|;
name|MockNM
name|nm4
init|=
operator|new
name|MockNM
argument_list|(
literal|"h4:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm4
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm4
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm3
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm4
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
comment|// Ask for more containers than nodes
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RejectedSchedulingRequest
argument_list|>
name|rejectedReqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|allocCount
init|=
literal|1
decl_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rejectedReqs
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getRejectedSchedulingRequests
argument_list|()
argument_list|)
expr_stmt|;
comment|// kick the scheduler
while|while
condition|(
name|allocCount
operator|<
literal|11
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm4
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rejectedReqs
operator|.
name|addAll
argument_list|(
name|allocResponse
operator|.
name|getRejectedSchedulingRequests
argument_list|()
argument_list|)
expr_stmt|;
name|allocCount
operator|++
expr_stmt|;
if|if
condition|(
name|rejectedReqs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|allocatedContainers
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
break|break;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodeIds
init|=
name|allocatedContainers
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Ensure unique nodes
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodeIds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RejectedSchedulingRequest
name|rej
init|=
name|rejectedReqs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RejectionReason
operator|.
name|COULD_NOT_PLACE_ON_NODE
argument_list|,
name|rej
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|schedulingRequest ( int priority, long allocReqId, int cores, int mem, String... tags)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|String
modifier|...
name|tags
parameter_list|)
block|{
return|return
name|schedulingRequest
argument_list|(
name|priority
argument_list|,
name|allocReqId
argument_list|,
name|cores
argument_list|,
name|mem
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|tags
argument_list|)
return|;
block|}
DECL|method|schedulingRequest ( int priority, long allocReqId, int cores, int mem, ExecutionType execType, String... tags)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|ExecutionType
name|execType
parameter_list|,
name|String
modifier|...
name|tags
parameter_list|)
block|{
return|return
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
name|allocReqId
argument_list|)
operator|.
name|allocationTags
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tags
argument_list|)
argument_list|)
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|execType
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|mem
argument_list|,
name|cores
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

