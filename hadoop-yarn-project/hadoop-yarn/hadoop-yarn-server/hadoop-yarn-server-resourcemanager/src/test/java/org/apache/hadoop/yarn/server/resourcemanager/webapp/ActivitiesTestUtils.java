begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|ActivityDiagnosticConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|activities
operator|.
name|GenericDiagnosticsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MultivaluedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Some Utils for activities tests.  */
end_comment

begin_class
DECL|class|ActivitiesTestUtils
specifier|public
specifier|final
class|class
name|ActivitiesTestUtils
block|{
DECL|field|TOTAL_RESOURCE_INSUFFICIENT_DIAGNOSTIC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_RESOURCE_INSUFFICIENT_DIAGNOSTIC_PREFIX
init|=
name|ActivityDiagnosticConstant
operator|.
name|NODE_TOTAL_RESOURCE_INSUFFICIENT_FOR_REQUEST
operator|+
literal|", "
operator|+
name|GenericDiagnosticsCollector
operator|.
name|RESOURCE_DIAGNOSTICS_PREFIX
decl_stmt|;
DECL|field|UNMATCHED_PARTITION_OR_PC_DIAGNOSTIC_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|UNMATCHED_PARTITION_OR_PC_DIAGNOSTIC_PREFIX
init|=
name|ActivityDiagnosticConstant
operator|.
name|NODE_DO_NOT_MATCH_PARTITION_OR_PLACEMENT_CONSTRAINTS
operator|+
literal|", "
operator|+
name|GenericDiagnosticsCollector
operator|.
name|PLACEMENT_CONSTRAINT_DIAGNOSTICS_PREFIX
decl_stmt|;
comment|/*    * Field names in response of scheduler/app activities.    */
DECL|field|FN_ACT_ALLOCATIONS
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_ALLOCATIONS
init|=
literal|"allocations"
decl_stmt|;
DECL|field|FN_ACT_DIAGNOSTIC
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_DIAGNOSTIC
init|=
literal|"diagnostic"
decl_stmt|;
DECL|field|FN_ACT_ALLOCATION_STATE
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_ALLOCATION_STATE
init|=
literal|"allocationState"
decl_stmt|;
DECL|field|FN_ACT_FINAL_ALLOCATION_STATE
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_FINAL_ALLOCATION_STATE
init|=
literal|"finalAllocationState"
decl_stmt|;
DECL|field|FN_ACT_NODE_ID
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_NODE_ID
init|=
literal|"nodeId"
decl_stmt|;
DECL|field|FN_ACT_NODE_IDS
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_NODE_IDS
init|=
literal|"nodeIds"
decl_stmt|;
DECL|field|FN_ACT_COUNT
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_COUNT
init|=
literal|"count"
decl_stmt|;
DECL|field|FN_ACT_APP_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_APP_PRIORITY
init|=
literal|"appPriority"
decl_stmt|;
DECL|field|FN_ACT_REQUEST_PRIORITY
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_REQUEST_PRIORITY
init|=
literal|"requestPriority"
decl_stmt|;
DECL|field|FN_ACT_ALLOCATION_REQUEST_ID
specifier|public
specifier|static
specifier|final
name|String
name|FN_ACT_ALLOCATION_REQUEST_ID
init|=
literal|"allocationRequestId"
decl_stmt|;
DECL|field|FN_APP_ACT_CHILDREN
specifier|public
specifier|static
specifier|final
name|String
name|FN_APP_ACT_CHILDREN
init|=
literal|"children"
decl_stmt|;
DECL|field|FN_APP_ACT_ROOT
specifier|public
specifier|static
specifier|final
name|String
name|FN_APP_ACT_ROOT
init|=
literal|"appActivities"
decl_stmt|;
DECL|field|FN_SCHEDULER_ACT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FN_SCHEDULER_ACT_NAME
init|=
literal|"name"
decl_stmt|;
DECL|field|FN_SCHEDULER_ACT_ALLOCATIONS_ROOT
specifier|public
specifier|static
specifier|final
name|String
name|FN_SCHEDULER_ACT_ALLOCATIONS_ROOT
init|=
literal|"root"
decl_stmt|;
DECL|field|FN_SCHEDULER_ACT_CHILDREN
specifier|public
specifier|static
specifier|final
name|String
name|FN_SCHEDULER_ACT_CHILDREN
init|=
literal|"children"
decl_stmt|;
DECL|field|FN_SCHEDULER_ACT_ROOT
specifier|public
specifier|static
specifier|final
name|String
name|FN_SCHEDULER_ACT_ROOT
init|=
literal|"activities"
decl_stmt|;
DECL|method|ActivitiesTestUtils ()
specifier|private
name|ActivitiesTestUtils
parameter_list|()
block|{}
DECL|method|findInAllocations (JSONObject allocationObj, Predicate p)
specifier|public
specifier|static
name|List
argument_list|<
name|JSONObject
argument_list|>
name|findInAllocations
parameter_list|(
name|JSONObject
name|allocationObj
parameter_list|,
name|Predicate
name|p
parameter_list|)
throws|throws
name|JSONException
block|{
name|List
argument_list|<
name|JSONObject
argument_list|>
name|target
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|recursiveFindObj
argument_list|(
name|allocationObj
operator|.
name|getJSONObject
argument_list|(
name|FN_SCHEDULER_ACT_ALLOCATIONS_ROOT
argument_list|)
argument_list|,
name|p
argument_list|,
name|target
argument_list|)
expr_stmt|;
return|return
name|target
return|;
block|}
DECL|method|recursiveFindObj (JSONObject obj, Predicate p, List<JSONObject> target)
specifier|private
specifier|static
name|void
name|recursiveFindObj
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|Predicate
name|p
parameter_list|,
name|List
argument_list|<
name|JSONObject
argument_list|>
name|target
parameter_list|)
throws|throws
name|JSONException
block|{
if|if
condition|(
name|p
operator|.
name|test
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|target
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|.
name|has
argument_list|(
name|FN_SCHEDULER_ACT_CHILDREN
argument_list|)
condition|)
block|{
name|JSONArray
name|childrenObjs
init|=
name|obj
operator|.
name|optJSONArray
argument_list|(
name|FN_SCHEDULER_ACT_CHILDREN
argument_list|)
decl_stmt|;
if|if
condition|(
name|childrenObjs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenObjs
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|recursiveFindObj
argument_list|(
name|childrenObjs
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|,
name|p
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|JSONObject
name|childrenObj
init|=
name|obj
operator|.
name|optJSONObject
argument_list|(
name|FN_SCHEDULER_ACT_CHILDREN
argument_list|)
decl_stmt|;
name|recursiveFindObj
argument_list|(
name|childrenObj
argument_list|,
name|p
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|schedulingRequest (int numContainers, int priority, long allocReqId, int cores, int mem, PlacementConstraint placementConstraintExpression, String... tags)
specifier|public
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|numContainers
parameter_list|,
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|PlacementConstraint
name|placementConstraintExpression
parameter_list|,
name|String
modifier|...
name|tags
parameter_list|)
block|{
return|return
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
name|allocReqId
argument_list|)
operator|.
name|allocationTags
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tags
argument_list|)
argument_list|)
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
name|numContainers
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|mem
argument_list|,
name|cores
argument_list|)
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|placementConstraintExpression
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|verifyNumberOfNodes (JSONObject allocation, int expectValue)
specifier|public
specifier|static
name|void
name|verifyNumberOfNodes
parameter_list|(
name|JSONObject
name|allocation
parameter_list|,
name|int
name|expectValue
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|allocation
operator|.
name|isNull
argument_list|(
name|FN_SCHEDULER_ACT_ALLOCATIONS_ROOT
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"State of allocation is wrong"
argument_list|,
name|expectValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"State of allocation is wrong"
argument_list|,
name|expectValue
argument_list|,
literal|1
operator|+
name|getNumberOfNodes
argument_list|(
name|allocation
operator|.
name|getJSONObject
argument_list|(
name|FN_SCHEDULER_ACT_ALLOCATIONS_ROOT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNumberOfNodes (JSONObject allocation)
specifier|public
specifier|static
name|int
name|getNumberOfNodes
parameter_list|(
name|JSONObject
name|allocation
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|allocation
operator|.
name|isNull
argument_list|(
name|FN_SCHEDULER_ACT_CHILDREN
argument_list|)
condition|)
block|{
name|Object
name|object
init|=
name|allocation
operator|.
name|get
argument_list|(
name|FN_SCHEDULER_ACT_CHILDREN
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|==
name|JSONObject
operator|.
name|class
condition|)
block|{
return|return
literal|1
operator|+
name|getNumberOfNodes
argument_list|(
operator|(
name|JSONObject
operator|)
name|object
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|JSONArray
operator|)
name|object
operator|)
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|count
operator|+=
operator|(
literal|1
operator|+
name|getNumberOfNodes
argument_list|(
operator|(
operator|(
name|JSONArray
operator|)
name|object
operator|)
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
DECL|method|verifyStateOfAllocations (JSONObject allocation, String nameToCheck, String expectState)
specifier|public
specifier|static
name|void
name|verifyStateOfAllocations
parameter_list|(
name|JSONObject
name|allocation
parameter_list|,
name|String
name|nameToCheck
parameter_list|,
name|String
name|expectState
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"State of allocation is wrong"
argument_list|,
name|expectState
argument_list|,
name|allocation
operator|.
name|get
argument_list|(
name|nameToCheck
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyNumberOfAllocations (JSONObject json, int expectValue)
specifier|public
specifier|static
name|void
name|verifyNumberOfAllocations
parameter_list|(
name|JSONObject
name|json
parameter_list|,
name|int
name|expectValue
parameter_list|)
throws|throws
name|Exception
block|{
name|JSONObject
name|activitiesJson
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|has
argument_list|(
name|FN_APP_ACT_ROOT
argument_list|)
condition|)
block|{
name|activitiesJson
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
name|FN_APP_ACT_ROOT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|json
operator|.
name|has
argument_list|(
name|FN_SCHEDULER_ACT_ROOT
argument_list|)
condition|)
block|{
name|activitiesJson
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
name|FN_SCHEDULER_ACT_ROOT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't parse allocations!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|activitiesJson
operator|.
name|isNull
argument_list|(
name|FN_ACT_ALLOCATIONS
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of allocations is wrong"
argument_list|,
name|expectValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|object
init|=
name|activitiesJson
operator|.
name|get
argument_list|(
name|FN_ACT_ALLOCATIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|==
name|JSONObject
operator|.
name|class
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of allocations is wrong"
argument_list|,
name|expectValue
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|==
name|JSONArray
operator|.
name|class
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of allocations is wrong in: "
operator|+
name|object
argument_list|,
name|expectValue
argument_list|,
operator|(
operator|(
name|JSONArray
operator|)
name|object
operator|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyQueueOrder (JSONObject json, String expectOrder)
specifier|public
specifier|static
name|void
name|verifyQueueOrder
parameter_list|(
name|JSONObject
name|json
parameter_list|,
name|String
name|expectOrder
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|order
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|json
operator|.
name|isNull
argument_list|(
name|FN_SCHEDULER_ACT_ALLOCATIONS_ROOT
argument_list|)
condition|)
block|{
name|JSONObject
name|root
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
name|FN_SCHEDULER_ACT_ALLOCATIONS_ROOT
argument_list|)
decl_stmt|;
name|order
operator|=
name|root
operator|.
name|getString
argument_list|(
name|FN_SCHEDULER_ACT_NAME
argument_list|)
operator|+
literal|"-"
operator|+
name|getQueueOrder
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Order of queue is wrong"
argument_list|,
name|expectOrder
argument_list|,
name|order
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|order
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getQueueOrder (JSONObject node)
specifier|public
specifier|static
name|String
name|getQueueOrder
parameter_list|(
name|JSONObject
name|node
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|isNull
argument_list|(
name|FN_SCHEDULER_ACT_CHILDREN
argument_list|)
condition|)
block|{
name|Object
name|children
init|=
name|node
operator|.
name|get
argument_list|(
name|FN_SCHEDULER_ACT_CHILDREN
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|getClass
argument_list|()
operator|==
name|JSONObject
operator|.
name|class
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|JSONObject
operator|)
name|children
operator|)
operator|.
name|isNull
argument_list|(
name|FN_ACT_APP_PRIORITY
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
operator|(
operator|(
name|JSONObject
operator|)
name|children
operator|)
operator|.
name|getString
argument_list|(
name|FN_SCHEDULER_ACT_NAME
argument_list|)
operator|+
literal|"-"
operator|+
name|getQueueOrder
argument_list|(
operator|(
name|JSONObject
operator|)
name|children
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|children
operator|.
name|getClass
argument_list|()
operator|==
name|JSONArray
operator|.
name|class
condition|)
block|{
name|String
name|order
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|JSONArray
operator|)
name|children
operator|)
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|child
init|=
call|(
name|JSONObject
call|)
argument_list|(
operator|(
name|JSONArray
operator|)
name|children
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
operator|.
name|isNull
argument_list|(
name|FN_ACT_APP_PRIORITY
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
name|order
operator|+=
operator|(
name|child
operator|.
name|getString
argument_list|(
name|FN_SCHEDULER_ACT_NAME
argument_list|)
operator|+
literal|"-"
operator|+
name|getQueueOrder
argument_list|(
name|child
argument_list|)
operator|)
expr_stmt|;
block|}
return|return
name|order
return|;
block|}
block|}
return|return
literal|""
return|;
block|}
DECL|method|getFirstSubNodeFromJson (JSONObject json, String... hierarchicalFieldNames)
specifier|public
specifier|static
name|JSONObject
name|getFirstSubNodeFromJson
parameter_list|(
name|JSONObject
name|json
parameter_list|,
name|String
modifier|...
name|hierarchicalFieldNames
parameter_list|)
block|{
return|return
name|getSubNodesFromJson
argument_list|(
name|json
argument_list|,
name|hierarchicalFieldNames
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|method|getSubNodesFromJson (JSONObject json, String... hierarchicalFieldNames)
specifier|public
specifier|static
name|List
argument_list|<
name|JSONObject
argument_list|>
name|getSubNodesFromJson
parameter_list|(
name|JSONObject
name|json
parameter_list|,
name|String
modifier|...
name|hierarchicalFieldNames
parameter_list|)
block|{
name|List
argument_list|<
name|JSONObject
argument_list|>
name|results
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|json
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|hierarchicalFieldNames
control|)
block|{
name|results
operator|=
name|results
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|has
argument_list|(
name|fieldName
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|e
lambda|->
name|getJSONObjects
argument_list|(
name|e
argument_list|,
name|fieldName
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't find hierarchical fields "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|hierarchicalFieldNames
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|results
return|;
block|}
DECL|method|getJSONObjects (JSONObject json, String fieldName)
specifier|private
specifier|static
name|List
argument_list|<
name|JSONObject
argument_list|>
name|getJSONObjects
parameter_list|(
name|JSONObject
name|json
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|List
argument_list|<
name|JSONObject
argument_list|>
name|objects
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|has
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
try|try
block|{
name|Object
name|tmpObj
init|=
name|json
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpObj
operator|.
name|getClass
argument_list|()
operator|==
name|JSONObject
operator|.
name|class
condition|)
block|{
name|objects
operator|.
name|add
argument_list|(
operator|(
name|JSONObject
operator|)
name|tmpObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tmpObj
operator|.
name|getClass
argument_list|()
operator|==
name|JSONArray
operator|.
name|class
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
operator|(
name|JSONArray
operator|)
name|tmpObj
operator|)
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|objects
operator|.
name|add
argument_list|(
operator|(
operator|(
name|JSONArray
operator|)
name|tmpObj
operator|)
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|objects
return|;
block|}
DECL|method|verifyNumberOfAllocationAttempts (JSONObject allocation, int expectValue)
specifier|public
specifier|static
name|void
name|verifyNumberOfAllocationAttempts
parameter_list|(
name|JSONObject
name|allocation
parameter_list|,
name|int
name|expectValue
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|allocation
operator|.
name|isNull
argument_list|(
name|FN_APP_ACT_CHILDREN
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of allocation attempts is wrong"
argument_list|,
name|expectValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|object
init|=
name|allocation
operator|.
name|get
argument_list|(
name|FN_APP_ACT_CHILDREN
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|==
name|JSONObject
operator|.
name|class
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of allocations attempts is wrong"
argument_list|,
name|expectValue
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|object
operator|.
name|getClass
argument_list|()
operator|==
name|JSONArray
operator|.
name|class
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Number of allocations attempts is wrong"
argument_list|,
name|expectValue
argument_list|,
operator|(
operator|(
name|JSONArray
operator|)
name|object
operator|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|requestWebResource (WebResource webResource, MultivaluedMap<String, String> params)
specifier|public
specifier|static
name|JSONObject
name|requestWebResource
parameter_list|(
name|WebResource
name|webResource
parameter_list|,
name|MultivaluedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|webResource
operator|=
name|webResource
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
name|webResource
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * Convert format using {name} (HTTP base) into %s (Java based).    * @param format Initial format using {}.    * @param args Arguments for the format.    * @return New format using %s.    */
DECL|method|format (String format, Object... args)
specifier|public
specifier|static
name|String
name|format
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\{.*?}"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|String
name|newFormat
init|=
name|m
operator|.
name|replaceAll
argument_list|(
literal|"%s"
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
name|newFormat
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
end_class

end_unit

