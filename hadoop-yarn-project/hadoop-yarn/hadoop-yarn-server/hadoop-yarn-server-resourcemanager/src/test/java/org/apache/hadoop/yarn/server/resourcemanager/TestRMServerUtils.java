begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMServerUtils
operator|.
name|RESOURCE_OUTSIDE_ALLOWED_RANGE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|UpdateContainerRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestRMServerUtils
specifier|public
class|class
name|TestRMServerUtils
block|{
annotation|@
name|Test
DECL|method|testValidateAndSplitUpdateResourceRequests ()
specifier|public
name|void
name|testValidateAndSplitUpdateResourceRequests
parameter_list|()
block|{
name|List
argument_list|<
name|UpdateContainerRequest
argument_list|>
name|updateRequests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|containerVersion
init|=
literal|10
decl_stmt|;
name|int
name|resource
init|=
literal|10
decl_stmt|;
name|Resource
name|maxAllocation
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|resource
argument_list|,
name|resource
argument_list|)
decl_stmt|;
name|UpdateContainerRequestPBImpl
name|updateContainerRequestPBFail
init|=
operator|new
name|UpdateContainerRequestPBImpl
argument_list|()
decl_stmt|;
name|updateContainerRequestPBFail
operator|.
name|setContainerVersion
argument_list|(
name|containerVersion
argument_list|)
expr_stmt|;
name|updateContainerRequestPBFail
operator|.
name|setCapability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
name|resource
operator|+
literal|1
argument_list|,
name|resource
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|updateContainerRequestPBFail
operator|.
name|setContainerId
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|containerIdOk
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|capabilityOk
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|resource
operator|-
literal|1
argument_list|,
name|resource
operator|-
literal|1
argument_list|)
decl_stmt|;
name|UpdateContainerRequestPBImpl
name|updateContainerRequestPBOk
init|=
operator|new
name|UpdateContainerRequestPBImpl
argument_list|()
decl_stmt|;
name|updateContainerRequestPBOk
operator|.
name|setContainerVersion
argument_list|(
name|containerVersion
argument_list|)
expr_stmt|;
name|updateContainerRequestPBOk
operator|.
name|setCapability
argument_list|(
name|capabilityOk
argument_list|)
expr_stmt|;
name|updateContainerRequestPBOk
operator|.
name|setContainerUpdateType
argument_list|(
name|INCREASE_RESOURCE
argument_list|)
expr_stmt|;
name|updateContainerRequestPBOk
operator|.
name|setContainerId
argument_list|(
name|containerIdOk
argument_list|)
expr_stmt|;
name|updateRequests
operator|.
name|add
argument_list|(
name|updateContainerRequestPBOk
argument_list|)
expr_stmt|;
name|updateRequests
operator|.
name|add
argument_list|(
name|updateContainerRequestPBFail
argument_list|)
expr_stmt|;
name|Dispatcher
name|dispatcher
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMContainer
name|rmContainer
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|container
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerVersion
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContainer
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNormalizedResource
argument_list|(
name|capabilityOk
argument_list|,
name|maxAllocation
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|capabilityOk
argument_list|)
expr_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|0.5f
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
name|updateRequests
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|UpdateContainerError
argument_list|>
name|updateErrors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ContainerUpdates
name|containerUpdates
init|=
name|RMServerUtils
operator|.
name|validateAndSplitUpdateResourceRequests
argument_list|(
name|rmContext
argument_list|,
name|allocateRequest
argument_list|,
name|maxAllocation
argument_list|,
name|updateErrors
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|updateErrors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
operator|+
literal|1
argument_list|,
name|updateErrors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateContainerRequest
argument_list|()
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|resource
operator|+
literal|1
argument_list|,
name|updateErrors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateContainerRequest
argument_list|()
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RESOURCE_OUTSIDE_ALLOWED_RANGE
argument_list|,
name|updateErrors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containerUpdates
operator|.
name|getIncreaseRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UpdateContainerRequest
name|increaseRequest
init|=
name|containerUpdates
operator|.
name|getIncreaseRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|capabilityOk
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|increaseRequest
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|capabilityOk
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|increaseRequest
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerIdOk
argument_list|,
name|increaseRequest
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueryRMNodes ()
specifier|public
name|void
name|testQueryRMNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|node1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|mock
argument_list|(
name|RMNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|inactiveList
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|rmNode1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
expr_stmt|;
name|inactiveList
operator|.
name|put
argument_list|(
name|node1
argument_list|,
name|rmNode1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getInactiveRMNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|inactiveList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RMNode
argument_list|>
name|result
init|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|rmContext
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|SHUTDOWN
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rmNode1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmNode1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
expr_stmt|;
name|result
operator|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|rmContext
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rmNode1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmNode1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
expr_stmt|;
name|result
operator|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|rmContext
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|LOST
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rmNode1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmNode1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
expr_stmt|;
name|result
operator|=
name|RMServerUtils
operator|.
name|queryRMNodes
argument_list|(
name|rmContext
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|REBOOTED
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rmNode1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicableNodeCountForAMLocality ()
specifier|public
name|void
name|testGetApplicableNodeCountForAMLocality
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|NodeId
argument_list|>
name|rack1Nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|29
condition|;
name|i
operator|++
control|)
block|{
name|rack1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|i
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|node1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|node2
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|rack1Nodes
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNodeIds
argument_list|(
literal|"/rack1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rack1Nodes
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNodeIds
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNodeIds
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|ResourceRequest
name|anyReq
init|=
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|anyReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceRequest
name|rackReq
init|=
name|createResourceRequest
argument_list|(
literal|"/rack1"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|rackReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|anyReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceRequest
name|node1Req
init|=
name|createResourceRequest
argument_list|(
literal|"node1"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|node1Req
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceRequest
name|node2Req
init|=
name|createResourceRequest
argument_list|(
literal|"node2"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|node2Req
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|31
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicableNodeCountForAMLabels ()
specifier|public
name|void
name|testGetApplicableNodeCountForAMLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|NodeId
argument_list|>
name|noLabelNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|80
condition|;
name|i
operator|++
control|)
block|{
name|noLabelNodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|i
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|NodeId
argument_list|>
name|label1Nodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|80
init|;
name|i
operator|<
literal|90
condition|;
name|i
operator|++
control|)
block|{
name|label1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|i
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|label1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host101"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|label1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host102"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|label1NodesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|label1NodesMap
operator|.
name|put
argument_list|(
literal|"label1"
argument_list|,
name|label1Nodes
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|labMan
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMNodeLabelsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|labMan
operator|.
name|getNodesWithoutALabel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|noLabelNodes
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|labMan
operator|.
name|getLabelsToNodes
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"label1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|label1NodesMap
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|labMan
argument_list|)
expr_stmt|;
name|ResourceRequest
name|anyReq
init|=
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|anyReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|anyReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"label1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicableNodeCountForAMLocalityAndLabels ()
specifier|public
name|void
name|testGetApplicableNodeCountForAMLocalityAndLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|NodeId
argument_list|>
name|rack1Nodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|29
condition|;
name|i
operator|++
control|)
block|{
name|rack1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|i
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|node1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|node2
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"node2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|rack1Nodes
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|NodeId
argument_list|>
name|noLabelNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|19
condition|;
name|i
operator|++
control|)
block|{
name|noLabelNodes
operator|.
name|add
argument_list|(
name|rack1Nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|noLabelNodes
operator|.
name|add
argument_list|(
name|node2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|29
init|;
name|i
operator|<
literal|89
condition|;
name|i
operator|++
control|)
block|{
name|noLabelNodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|i
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|NodeId
argument_list|>
name|label1Nodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|label1Nodes
operator|.
name|add
argument_list|(
name|node1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|89
init|;
name|i
operator|<
literal|93
condition|;
name|i
operator|++
control|)
block|{
name|label1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
operator|+
name|i
argument_list|,
literal|1234
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|19
init|;
name|i
operator|<
literal|29
condition|;
name|i
operator|++
control|)
block|{
name|label1Nodes
operator|.
name|add
argument_list|(
name|rack1Nodes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|label1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host101"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|label1Nodes
operator|.
name|add
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host102"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|label1NodesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|label1NodesMap
operator|.
name|put
argument_list|(
literal|"label1"
argument_list|,
name|label1Nodes
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNodeIds
argument_list|(
literal|"/rack1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rack1Nodes
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNodeIds
argument_list|(
literal|"node1"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|scheduler
operator|.
name|getNodeIds
argument_list|(
literal|"node2"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|labMan
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMNodeLabelsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|labMan
operator|.
name|getNodesWithoutALabel
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|noLabelNodes
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|labMan
operator|.
name|getLabelsToNodes
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
literal|"label1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|label1NodesMap
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|labMan
argument_list|)
expr_stmt|;
name|ResourceRequest
name|anyReq
init|=
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|anyReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceRequest
name|rackReq
init|=
name|createResourceRequest
argument_list|(
literal|"/rack1"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|rackReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|anyReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceRequest
name|node1Req
init|=
name|createResourceRequest
argument_list|(
literal|"node1"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|node1Req
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceRequest
name|node2Req
init|=
name|createResourceRequest
argument_list|(
literal|"node2"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|node2Req
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|anyReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"label1"
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"label1"
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"label1"
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"label1"
argument_list|)
expr_stmt|;
name|anyReq
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reqs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|anyReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|rackReq
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|anyReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|node1Req
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|node2Req
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setRelaxLocality
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|rackReq
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node1Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
name|node2Req
operator|.
name|setRelaxLocality
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|RMServerUtils
operator|.
name|getApplicableNodeCountForAM
argument_list|(
name|rmContext
argument_list|,
name|conf
argument_list|,
name|reqs
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createResourceRequest (String resource, boolean relaxLocality, String nodeLabel)
specifier|private
name|ResourceRequest
name|createResourceRequest
parameter_list|(
name|String
name|resource
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
block|{
return|return
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|resource
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
name|relaxLocality
argument_list|,
name|nodeLabel
argument_list|)
return|;
block|}
block|}
end_class

end_unit

