begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.resourcetracker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resourcetracker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|ConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|ConfigurationProviderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ParameterizedSchedulerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
operator|.
name|NodeEventDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestNMReconnect run tests against the scheduler set by  * {@link ParameterizedSchedulerTestBase} which is configured  * in {@link YarnConfiguration}.  */
end_comment

begin_class
DECL|class|TestNMReconnect
specifier|public
class|class
name|TestNMReconnect
extends|extends
name|ParameterizedSchedulerTestBase
block|{
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|rmNodeEvents
specifier|private
name|List
argument_list|<
name|RMNodeEvent
argument_list|>
name|rmNodeEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|RMNodeEvent
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|Dispatcher
name|dispatcher
decl_stmt|;
DECL|field|context
specifier|private
name|RMContextImpl
name|context
decl_stmt|;
DECL|class|TestRMNodeEventDispatcher
specifier|private
class|class
name|TestRMNodeEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMNodeEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|rmNodeEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|resourceTrackerService
name|ResourceTrackerService
name|resourceTrackerService
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Dispatcher that processes events inline
name|dispatcher
operator|=
operator|new
name|InlineDispatcher
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMNodeEventType
operator|.
name|class
argument_list|,
operator|new
name|TestRMNodeEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|RMContextImpl
argument_list|(
name|dispatcher
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
operator|new
name|InlineDispatcher
operator|.
name|EmptyEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMNodeEventType
operator|.
name|class
argument_list|,
operator|new
name|NodeEventDispatcher
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|NMLivelinessMonitor
name|nmLivelinessMonitor
init|=
operator|new
name|NMLivelinessMonitor
argument_list|(
name|dispatcher
argument_list|)
decl_stmt|;
name|nmLivelinessMonitor
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmLivelinessMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|NodesListManager
name|nodesListManager
init|=
operator|new
name|NodesListManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|nodesListManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|containerTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
init|=
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|nmTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceTrackerService
operator|=
operator|new
name|ResourceTrackerService
argument_list|(
name|context
argument_list|,
name|nodesListManager
argument_list|,
name|nmLivelinessMonitor
argument_list|,
name|containerTokenSecretManager
argument_list|,
name|nmTokenSecretManager
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|resourceTrackerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReconnect ()
specifier|public
name|void
name|testReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|hostname1
init|=
literal|"localhost1"
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RegisterNodeManagerRequest
name|request1
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostname1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|request1
operator|.
name|setNodeId
argument_list|(
name|nodeId1
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setHttpPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMNodeEventType
operator|.
name|STARTED
argument_list|,
name|rmNodeEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|rmNodeEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
name|rmNodeEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|rmNodeEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|capability
operator|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
name|rmNodeEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompareRMNodeAfterReconnect ()
specifier|public
name|void
name|testCompareRMNodeAfterReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractYarnScheduler
name|scheduler
init|=
name|getScheduler
argument_list|()
decl_stmt|;
name|Configuration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|ConfigurationProvider
name|configurationProvider
init|=
name|ConfigurationProviderFactory
operator|.
name|getConfigurationProvider
argument_list|(
name|yarnConf
argument_list|)
decl_stmt|;
name|configurationProvider
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|context
operator|.
name|setConfigurationProvider
argument_list|(
name|configurationProvider
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|nlm
init|=
operator|new
name|RMNodeLabelsManager
argument_list|()
decl_stmt|;
name|nlm
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|nlm
operator|.
name|start
argument_list|()
expr_stmt|;
name|context
operator|.
name|setNodeLabelManager
argument_list|(
name|nlm
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|String
name|hostname1
init|=
literal|"localhost1"
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|RegisterNodeManagerRequest
name|request1
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostname1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|request1
operator|.
name|setNodeId
argument_list|(
name|nodeId1
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setHttpPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify Scheduler and RMContext use same RMNode reference.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getRMNode
argument_list|()
operator|==
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|capability
argument_list|)
expr_stmt|;
name|Resource
name|capability1
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|request1
operator|.
name|setResource
argument_list|(
name|capability1
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify Scheduler and RMContext use same RMNode reference
comment|// after reconnect.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getRMNode
argument_list|()
operator|==
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify RMNode's capability is changed.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|context
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId1
argument_list|)
operator|.
name|getTotalCapability
argument_list|()
argument_list|,
name|capability1
argument_list|)
expr_stmt|;
name|nlm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testDecommissioningNodeReconnect ()
specifier|public
name|void
name|testDecommissioningNodeReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeEventType
operator|.
name|GRACEFUL_DECOMMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|RegisterNodeManagerResponse
name|response
init|=
name|nm2
operator|.
name|registerNode
argument_list|()
decl_stmt|;
comment|// not SHUTDOWN
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getNodeAction
argument_list|()
operator|.
name|equals
argument_list|(
name|NodeAction
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testRMNodeStatusAfterReconnect ()
specifier|public
name|void
name|testRMNodeStatusAfterReconnect
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The node(127.0.0.1:1234) reconnected with RM. When it registered with
comment|// RM, RM set its lastNodeHeartbeatResponse's id to 0 asynchronously. But
comment|// the node's heartbeat come before RM succeeded setting the id to 0.
specifier|final
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
literal|3
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMNode
name|rmNode
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node is Not in Running state."
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|,
name|rmNode
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

