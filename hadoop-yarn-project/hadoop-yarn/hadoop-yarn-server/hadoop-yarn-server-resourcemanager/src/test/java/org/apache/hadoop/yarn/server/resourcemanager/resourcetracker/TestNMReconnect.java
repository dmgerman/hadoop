begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.resourcetracker
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resourcetracker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
operator|.
name|NodeEventDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNMReconnect
specifier|public
class|class
name|TestNMReconnect
block|{
DECL|field|recordFactory
specifier|private
specifier|static
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|rmNodeEvent
specifier|private
name|RMNodeEvent
name|rmNodeEvent
init|=
literal|null
decl_stmt|;
DECL|class|TestRMNodeEventDispatcher
specifier|private
class|class
name|TestRMNodeEventDispatcher
implements|implements
name|EventHandler
argument_list|<
name|RMNodeEvent
argument_list|>
block|{
annotation|@
name|Override
DECL|method|handle (RMNodeEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMNodeEvent
name|event
parameter_list|)
block|{
name|rmNodeEvent
operator|=
name|event
expr_stmt|;
block|}
block|}
DECL|field|resourceTrackerService
name|ResourceTrackerService
name|resourceTrackerService
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// Dispatcher that processes events inline
name|Dispatcher
name|dispatcher
init|=
operator|new
name|InlineDispatcher
argument_list|()
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMNodeEventType
operator|.
name|class
argument_list|,
operator|new
name|TestRMNodeEventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|RMContext
name|context
init|=
operator|new
name|RMContextImpl
argument_list|(
name|dispatcher
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
operator|new
name|InlineDispatcher
operator|.
name|EmptyEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMNodeEventType
operator|.
name|class
argument_list|,
operator|new
name|NodeEventDispatcher
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|NMLivelinessMonitor
name|nmLivelinessMonitor
init|=
operator|new
name|NMLivelinessMonitor
argument_list|(
name|dispatcher
argument_list|)
decl_stmt|;
name|nmLivelinessMonitor
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmLivelinessMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|NodesListManager
name|nodesListManager
init|=
operator|new
name|NodesListManager
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|nodesListManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|containerTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
init|=
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|nmTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceTrackerService
operator|=
operator|new
name|ResourceTrackerService
argument_list|(
name|context
argument_list|,
name|nodesListManager
argument_list|,
name|nmLivelinessMonitor
argument_list|,
name|containerTokenSecretManager
argument_list|,
name|nmTokenSecretManager
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReconnect ()
specifier|public
name|void
name|testReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|hostname1
init|=
literal|"localhost1"
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RegisterNodeManagerRequest
name|request1
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostname1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|request1
operator|.
name|setNodeId
argument_list|(
name|nodeId1
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setHttpPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMNodeEventType
operator|.
name|STARTED
argument_list|,
name|rmNodeEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|rmNodeEvent
operator|=
literal|null
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
name|rmNodeEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|rmNodeEvent
operator|=
literal|null
expr_stmt|;
name|resourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|capability
operator|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMNodeEventType
operator|.
name|RECONNECTED
argument_list|,
name|rmNodeEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

