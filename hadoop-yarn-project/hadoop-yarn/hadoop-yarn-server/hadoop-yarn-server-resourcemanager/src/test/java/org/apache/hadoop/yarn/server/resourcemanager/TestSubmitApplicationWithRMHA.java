begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSubmitApplicationWithRMHA
specifier|public
class|class
name|TestSubmitApplicationWithRMHA
extends|extends
name|RMHATestBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSubmitApplicationWithRMHA
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
DECL|method|testHandleRMHABeforeSubmitApplicationCallWithSavedApplicationState ()
name|testHandleRMHABeforeSubmitApplicationCallWithSavedApplicationState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start two RMs, and transit rm1 to active, rm2 to standby
name|startRMs
argument_list|()
expr_stmt|;
comment|// get a new applicationId from rm1
name|ApplicationId
name|appId
init|=
name|rm1
operator|.
name|getNewAppId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
comment|// Do the failover
name|explicitFailover
argument_list|()
expr_stmt|;
comment|// submit the application with previous assigned applicationId
comment|// to current active rm: rm2
name|RMApp
name|app1
init|=
name|rm2
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|configuration
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|appId
argument_list|)
decl_stmt|;
comment|// verify application submission
name|verifySubmitApp
argument_list|(
name|rm2
argument_list|,
name|app1
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySubmitApp (MockRM rm, RMApp app, ApplicationId expectedAppId)
specifier|private
name|void
name|verifySubmitApp
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|ApplicationId
name|expectedAppId
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|maxWaittingTimes
init|=
literal|20
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|YarnApplicationState
name|state
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|.
name|equals
argument_list|(
name|YarnApplicationState
operator|.
name|NEW
argument_list|)
operator|&&
operator|!
name|state
operator|.
name|equals
argument_list|(
name|YarnApplicationState
operator|.
name|NEW_SAVING
argument_list|)
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|count
operator|>
name|maxWaittingTimes
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|// Verify submittion is successful
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|NEW
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getYarnApplicationState
argument_list|()
operator|==
name|YarnApplicationState
operator|.
name|NEW_SAVING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedAppId
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

