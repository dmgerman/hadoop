begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
operator|.
name|YarnConfigurationStore
operator|.
name|LogMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
DECL|class|TestYarnConfigurationStore
specifier|public
class|class
name|TestYarnConfigurationStore
block|{
DECL|field|confStore
specifier|private
name|YarnConfigurationStore
name|confStore
decl_stmt|;
DECL|field|schedConf
specifier|private
name|Configuration
name|schedConf
decl_stmt|;
DECL|field|testUser
specifier|private
specifier|static
specifier|final
name|String
name|testUser
init|=
literal|"testUser"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|schedConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|set
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInMemoryConfigurationStore ()
specifier|public
name|void
name|testInMemoryConfigurationStore
parameter_list|()
block|{
name|confStore
operator|=
operator|new
name|InMemoryConfigurationStore
argument_list|()
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|schedConf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
literal|"keyUpdate1"
argument_list|,
literal|"valUpdate1"
argument_list|)
expr_stmt|;
name|LogMutation
name|mutation1
init|=
operator|new
name|LogMutation
argument_list|(
name|update1
argument_list|,
name|testUser
argument_list|)
decl_stmt|;
name|long
name|id
init|=
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|confStore
operator|.
name|getPendingMutations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valUpdate1"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"keyUpdate1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|confStore
operator|.
name|getPendingMutations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
literal|"keyUpdate2"
argument_list|,
literal|"valUpdate2"
argument_list|)
expr_stmt|;
name|LogMutation
name|mutation2
init|=
operator|new
name|LogMutation
argument_list|(
name|update2
argument_list|,
name|testUser
argument_list|)
decl_stmt|;
name|id
operator|=
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|confStore
operator|.
name|getPendingMutations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
name|id
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Configuration should not be updated"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"keyUpdate2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|confStore
operator|.
name|getPendingMutations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

