begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ResourceRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSchedulerUtils
specifier|public
class|class
name|TestSchedulerUtils
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNormalizeRequest ()
specifier|public
name|void
name|testNormalizeRequest
parameter_list|()
block|{
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
specifier|final
name|int
name|minMemory
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|maxMemory
init|=
literal|8192
decl_stmt|;
name|Resource
name|minResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|minMemory
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|ask
init|=
operator|new
name|ResourceRequestPBImpl
argument_list|()
decl_stmt|;
comment|// case negative memory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// case zero memory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is a multiple of minMemory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|minMemory
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is not a multiple of minMemory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|minMemory
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is equal to max allowed
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is just less than max
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// max is not a multiple of min
name|maxResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|-
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// multiple of minMemory> maxMemory, then reduce to maxMemory
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// ask is more than max
name|maxResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|+
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
literal|null
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNormalizeRequestWithDominantResourceCalculator ()
specifier|public
name|void
name|testNormalizeRequestWithDominantResourceCalculator
parameter_list|()
block|{
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DominantResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|minResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10240
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ResourceRequest
name|ask
init|=
operator|new
name|ResourceRequestPBImpl
argument_list|()
decl_stmt|;
comment|// case negative memory/vcores
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1024
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minResource
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// case zero memory/vcores
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minResource
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// case non-zero memory& zero cores
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1536
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testValidateResourceRequest ()
specifier|public
name|void
name|testValidateResourceRequest
parameter_list|()
block|{
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
comment|// zero memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Zero memory should be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// zero vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Zero vcores should be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// max memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Max memory should be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// max vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Max vcores should not be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// negative memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative memory should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// negative vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative vcores should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// more than max memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
operator|+
literal|1
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"More than max memory should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// more than max vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|validateResourceRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"More than max vcores should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_class

end_unit

