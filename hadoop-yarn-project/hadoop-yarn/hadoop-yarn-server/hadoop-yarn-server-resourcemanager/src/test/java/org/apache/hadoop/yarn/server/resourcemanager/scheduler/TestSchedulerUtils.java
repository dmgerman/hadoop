begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
operator|.
name|GREATER_THEN_MAX_ALLOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
operator|.
name|LESS_THAN_ZERO
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|LocalConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ResourceRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidLabelResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceBlacklistRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|InvalidResourceRequestException
operator|.
name|InvalidResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|resourcetypes
operator|.
name|ResourceTypesTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestAMAuthorization
operator|.
name|MockRMWithAMS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestAMAuthorization
operator|.
name|MyContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|TestSchedulerUtils
specifier|public
class|class
name|TestSchedulerUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSchedulerUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|configuredMaxAllocation
specifier|private
specifier|static
name|Resource
name|configuredMaxAllocation
decl_stmt|;
DECL|class|CustomResourceTypesConfigurationProvider
specifier|private
specifier|static
class|class
name|CustomResourceTypesConfigurationProvider
extends|extends
name|LocalConfigurationProvider
block|{
annotation|@
name|Override
DECL|method|getConfigurationInputStream (Configuration bootstrapConf, String name)
specifier|public
name|InputStream
name|getConfigurationInputStream
parameter_list|(
name|Configuration
name|bootstrapConf
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
if|if
condition|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES_CONFIGURATION_FILE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
literal|"<configuration>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>yarn.resource-types</name>\n"
operator|+
literal|"<value>custom-resource-1,"
operator|+
literal|"custom-resource-2,custom-resource-3</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>yarn.resource-types"
operator|+
literal|".custom-resource-1.units</name>\n"
operator|+
literal|"<value>G</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"<property>\n"
operator|+
literal|"<name>yarn.resource-types"
operator|+
literal|".custom-resource-2.units</name>\n"
operator|+
literal|"<value>G</value>\n"
operator|+
literal|"</property>\n"
operator|+
literal|"</configuration>\n"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getConfigurationInputStream
argument_list|(
name|bootstrapConf
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
block|}
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
init|=
name|getMockRMContext
argument_list|()
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Rule
DECL|field|exception
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|initResourceTypes ()
specifier|private
name|void
name|initResourceTypes
parameter_list|()
block|{
name|Configuration
name|yarnConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
name|CustomResourceTypesConfigurationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|initResourceTypes
argument_list|()
expr_stmt|;
comment|//this needs to be initialized after initResourceTypes is called
name|configuredMaxAllocation
operator|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|8192
argument_list|,
literal|4
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Long
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"custom-resource-1"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|put
argument_list|(
literal|"custom-resource-2"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|put
argument_list|(
literal|"custom-resource-3"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNormalizeRequest ()
specifier|public
name|void
name|testNormalizeRequest
parameter_list|()
block|{
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
specifier|final
name|int
name|minMemory
init|=
literal|1024
decl_stmt|;
specifier|final
name|int
name|maxMemory
init|=
literal|8192
decl_stmt|;
name|Resource
name|minResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|minMemory
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|ask
init|=
operator|new
name|ResourceRequestPBImpl
argument_list|()
decl_stmt|;
comment|// case negative memory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// case zero memory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is a multiple of minMemory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|minMemory
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is not a multiple of minMemory
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|minMemory
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is equal to max allowed
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// case memory is just less than max
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxMemory
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// max is not a multiple of min
name|maxResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|-
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// multiple of minMemory> maxMemory, then reduce to maxMemory
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ask is more than max
name|maxResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
operator|+
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNormalizeRequestWithDominantResourceCalculator ()
specifier|public
name|void
name|testNormalizeRequestWithDominantResourceCalculator
parameter_list|()
block|{
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DominantResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|minResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10240
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ResourceRequest
name|ask
init|=
operator|new
name|ResourceRequestPBImpl
argument_list|()
decl_stmt|;
comment|// case negative memory/vcores
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1024
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minResource
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
comment|// case zero memory/vcores
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minResource
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// case non-zero memory& zero cores
name|ask
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1536
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeRequest
argument_list|(
name|ask
argument_list|,
name|resourceCalculator
argument_list|,
name|minResource
argument_list|,
name|maxResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|ask
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testValidateResourceRequestWithErrorLabelsPermission ()
specifier|public
name|void
name|testValidateResourceRequestWithErrorLabelsPermission
parameter_list|()
throws|throws
name|IOException
block|{
comment|// mock queue and scheduler
name|YarnScheduler
name|scheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queueAccessibleNodeLabels
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|QueueInfo
name|queueInfo
init|=
name|mock
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"queue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queueInfo
operator|.
name|getAccessibleNodeLabels
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueAccessibleNodeLabels
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
comment|// queue has labels, success cases
try|try
block|{
comment|// set queue accessible node labesl to [x, y]
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should be valid when request labels is a subset of queue labels"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// same as above, but cluster node labels don't contains label being
comment|// requested. should fail
try|try
block|{
comment|// set queue accessible node labesl to [x, y]
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{     }
comment|// queue has labels, failed cases (when ask a label not included by queue)
try|try
block|{
comment|// set queue accessible node labesl to [x, y]
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{     }
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we don't allow specify more than two node labels in a single expression
comment|// now
try|try
block|{
comment|// set queue accessible node labesl to [x, y]
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x&& y"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{     }
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// queue doesn't have label, succeed (when request no label)
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
try|try
block|{
comment|// set queue accessible node labels to empty
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should be valid when request labels is empty"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|invalidlabelexception
init|=
literal|false
decl_stmt|;
comment|// queue doesn't have label, failed (when request any label)
try|try
block|{
comment|// set queue accessible node labels to empty
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidLabelResourceRequestException
name|e
parameter_list|)
block|{
name|invalidlabelexception
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{     }
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"InvalidLabelResourceRequestException expected"
argument_list|,
name|invalidlabelexception
argument_list|)
expr_stmt|;
comment|// queue is "*", always succeeded
try|try
block|{
comment|// set queue accessible node labels to empty
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|add
argument_list|(
name|RMNodeLabelsManager
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"z"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should be valid when queue can access any labels"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// same as above, but cluster node labels don't contains label, should fail
try|try
block|{
comment|// set queue accessible node labels to empty
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|add
argument_list|(
name|RMNodeLabelsManager
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{     }
comment|// we don't allow resource name other than ANY and specify label
try|try
block|{
comment|// set queue accessible node labesl to [x, y]
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
literal|"rack"
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{     }
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// we don't allow resource name other than ANY and specify label even if
comment|// queue has accessible label = *
try|try
block|{
comment|// set queue accessible node labesl to *
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|ANY
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
literal|"rack"
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{     }
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq1
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq1
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid label resource request, cluster do not contain , "
operator|+
literal|"label= x"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq1
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq1
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
name|resReq1
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid resource request, node label not enabled but "
operator|+
literal|"request contains label expression"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testValidateResourceRequest ()
specifier|public
name|void
name|testValidateResourceRequest
parameter_list|()
block|{
name|YarnScheduler
name|mockScheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
comment|// zero memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Zero memory should be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// zero vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Zero vcores should be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// max memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Max memory should be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// max vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Max vcores should not be accepted"
argument_list|)
expr_stmt|;
block|}
comment|// negative memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
operator|-
literal|1
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative memory should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|LESS_THAN_ZERO
argument_list|,
name|e
operator|.
name|getInvalidResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// negative vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative vcores should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|LESS_THAN_ZERO
argument_list|,
name|e
operator|.
name|getInvalidResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// more than max memory
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
operator|+
literal|1
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"More than max memory should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|GREATER_THEN_MAX_ALLOCATION
argument_list|,
name|e
operator|.
name|getInvalidResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// more than max vcores
try|try
block|{
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
operator|+
literal|1
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|null
argument_list|,
name|mockScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"More than max vcores should not be accepted"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|GREATER_THEN_MAX_ALLOCATION
argument_list|,
name|e
operator|.
name|getInvalidResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidateResourceBlacklistRequest ()
specifier|public
name|void
name|testValidateResourceBlacklistRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|MyContainerManager
name|containerManager
init|=
operator|new
name|MyContainerManager
argument_list|()
decl_stmt|;
specifier|final
name|MockRMWithAMS
name|rm
init|=
operator|new
name|MockRMWithAMS
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"appname"
argument_list|,
literal|"appuser"
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|waitForLaunchedState
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
comment|// Create a client to the RM.
specifier|final
name|Configuration
name|yarnConf
init|=
name|rm
operator|.
name|getConfig
argument_list|()
decl_stmt|;
specifier|final
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|yarnConf
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|applicationAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
name|containerManager
operator|.
name|getContainerCredentials
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|rmBindAddress
init|=
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|amRMToken
init|=
name|MockRMWithAMS
operator|.
name|setupAndReturnAMRMToken
argument_list|(
name|rmBindAddress
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
argument_list|)
decl_stmt|;
name|currentUser
operator|.
name|addToken
argument_list|(
name|amRMToken
argument_list|)
expr_stmt|;
name|ApplicationMasterProtocol
name|client
init|=
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ApplicationMasterProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationMasterProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ApplicationMasterProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|rmBindAddress
argument_list|,
name|yarnConf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|client
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0.0f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|blacklistRequest
argument_list|)
decl_stmt|;
name|boolean
name|error
init|=
literal|false
decl_stmt|;
try|try
block|{
name|client
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceBlacklistRequestException
name|e
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't not catch InvalidResourceBlacklistRequestException"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForLaunchedState (RMAppAttempt attempt)
specifier|private
name|void
name|waitForLaunchedState
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
operator|!=
name|RMAppAttemptState
operator|.
name|LAUNCHED
operator|&&
name|waitCount
operator|++
operator|<
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for AppAttempt to reach LAUNCHED state. "
operator|+
literal|"Current state is "
operator|+
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComparePriorities ()
specifier|public
name|void
name|testComparePriorities
parameter_list|()
block|{
name|Priority
name|high
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|low
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|high
operator|.
name|compareTo
argument_list|(
name|low
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAbnormalContainerStatus ()
specifier|public
name|void
name|testCreateAbnormalContainerStatus
parameter_list|()
block|{
name|ContainerStatus
name|cd
init|=
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|ABORTED
argument_list|,
name|cd
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreatePreemptedContainerStatus ()
specifier|public
name|void
name|testCreatePreemptedContainerStatus
parameter_list|()
block|{
name|ContainerStatus
name|cd
init|=
name|SchedulerUtils
operator|.
name|createPreemptedContainerStatus
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|PREEMPTED
argument_list|,
name|cd
operator|.
name|getExitStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNormalizeNodeLabelExpression ()
specifier|public
name|void
name|testNormalizeNodeLabelExpression
parameter_list|()
throws|throws
name|IOException
block|{
comment|// mock queue and scheduler
name|YarnScheduler
name|scheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queueAccessibleNodeLabels
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|QueueInfo
name|queueInfo
init|=
name|mock
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"queue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queueInfo
operator|.
name|getAccessibleNodeLabels
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueAccessibleNodeLabels
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queueInfo
operator|.
name|getDefaultNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|" x "
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
comment|// queue has labels, success cases
try|try
block|{
comment|// set queue accessible node labels to [x, y]
name|queueAccessibleNodeLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueAccessibleNodeLabels
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|ResourceRequest
name|resReq
init|=
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|resource
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|resReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|resReq
operator|.
name|setNodeLabelExpression
argument_list|(
literal|" y "
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|normalizeAndvalidateRequest
argument_list|(
name|resReq
argument_list|,
name|maxResource
argument_list|,
literal|"queue"
argument_list|,
name|scheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"y"
argument_list|,
name|resReq
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should be valid when request labels is a subset of queue labels"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustomResourceRequestedUnitIsSmallerThanAvailableUnit ()
specifier|public
name|void
name|testCustomResourceRequestedUnitIsSmallerThanAvailableUnit
parameter_list|()
throws|throws
name|InvalidResourceRequestException
block|{
name|Resource
name|requestedResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|availableResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"0G"
argument_list|)
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|InvalidResourceRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|InvalidResourceRequestExceptionMessageGenerator
operator|.
name|create
argument_list|()
operator|.
name|withRequestedResourceType
argument_list|(
literal|"custom-resource-1"
argument_list|)
operator|.
name|withRequestedResource
argument_list|(
name|requestedResource
argument_list|)
operator|.
name|withAvailableAllocation
argument_list|(
name|availableResource
argument_list|)
operator|.
name|withMaxAllocation
argument_list|(
name|configuredMaxAllocation
argument_list|)
operator|.
name|withInvalidResourceType
argument_list|(
name|GREATER_THEN_MAX_ALLOCATION
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|checkResourceRequestAgainstAvailableResource
argument_list|(
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomResourceRequestedUnitIsSmallerThanAvailableUnit2 ()
specifier|public
name|void
name|testCustomResourceRequestedUnitIsSmallerThanAvailableUnit2
parameter_list|()
block|{
name|Resource
name|requestedResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|availableResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"1G"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|SchedulerUtils
operator|.
name|checkResourceRequestAgainstAvailableResource
argument_list|(
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Resource request should be accepted. Requested: %s, available: %s"
argument_list|,
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustomResourceRequestedUnitIsGreaterThanAvailableUnit ()
specifier|public
name|void
name|testCustomResourceRequestedUnitIsGreaterThanAvailableUnit
parameter_list|()
throws|throws
name|InvalidResourceRequestException
block|{
name|Resource
name|requestedResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"1M"
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|availableResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"120k"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|InvalidResourceRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|InvalidResourceRequestExceptionMessageGenerator
operator|.
name|create
argument_list|()
operator|.
name|withRequestedResourceType
argument_list|(
literal|"custom-resource-1"
argument_list|)
operator|.
name|withRequestedResource
argument_list|(
name|requestedResource
argument_list|)
operator|.
name|withAvailableAllocation
argument_list|(
name|availableResource
argument_list|)
operator|.
name|withMaxAllocation
argument_list|(
name|configuredMaxAllocation
argument_list|)
operator|.
name|withInvalidResourceType
argument_list|(
name|GREATER_THEN_MAX_ALLOCATION
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|checkResourceRequestAgainstAvailableResource
argument_list|(
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCustomResourceRequestedUnitIsGreaterThanAvailableUnit2 ()
specifier|public
name|void
name|testCustomResourceRequestedUnitIsGreaterThanAvailableUnit2
parameter_list|()
block|{
name|Resource
name|requestedResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"11M"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|availableResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"1G"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|SchedulerUtils
operator|.
name|checkResourceRequestAgainstAvailableResource
argument_list|(
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Resource request should be accepted. Requested: %s, available: %s"
argument_list|,
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustomResourceRequestedUnitIsSameAsAvailableUnit ()
specifier|public
name|void
name|testCustomResourceRequestedUnitIsSameAsAvailableUnit
parameter_list|()
block|{
name|Resource
name|requestedResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"11M"
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|availableResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"100M"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|SchedulerUtils
operator|.
name|checkResourceRequestAgainstAvailableResource
argument_list|(
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidResourceRequestException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Resource request should be accepted. Requested: %s, available: %s"
argument_list|,
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCustomResourceRequestedUnitIsSameAsAvailableUnit2 ()
specifier|public
name|void
name|testCustomResourceRequestedUnitIsSameAsAvailableUnit2
parameter_list|()
throws|throws
name|InvalidResourceRequestException
block|{
name|Resource
name|requestedResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"110M"
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|availableResource
init|=
name|ResourceTypesTestHelper
operator|.
name|newResource
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"custom-resource-1"
argument_list|,
literal|"100M"
argument_list|)
argument_list|)
decl_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|InvalidResourceRequestException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
name|InvalidResourceRequestExceptionMessageGenerator
operator|.
name|create
argument_list|()
operator|.
name|withRequestedResourceType
argument_list|(
literal|"custom-resource-1"
argument_list|)
operator|.
name|withRequestedResource
argument_list|(
name|requestedResource
argument_list|)
operator|.
name|withAvailableAllocation
argument_list|(
name|availableResource
argument_list|)
operator|.
name|withInvalidResourceType
argument_list|(
name|GREATER_THEN_MAX_ALLOCATION
argument_list|)
operator|.
name|withMaxAllocation
argument_list|(
name|configuredMaxAllocation
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerUtils
operator|.
name|checkResourceRequestAgainstAvailableResource
argument_list|(
name|requestedResource
argument_list|,
name|availableResource
argument_list|)
expr_stmt|;
block|}
DECL|method|waitSchedulerApplicationAttemptStopped ( AbstractYarnScheduler ys, ApplicationAttemptId attemptId)
specifier|public
specifier|static
name|void
name|waitSchedulerApplicationAttemptStopped
parameter_list|(
name|AbstractYarnScheduler
name|ys
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|SchedulerApplicationAttempt
name|schedulerApp
init|=
name|ys
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|schedulerApp
condition|)
block|{
return|return;
block|}
comment|// Wait at most 5 secs to make sure SchedulerApplicationAttempt stopped
name|int
name|tick
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|tick
operator|<
literal|100
condition|)
block|{
if|if
condition|(
name|schedulerApp
operator|.
name|isStopped
argument_list|()
condition|)
block|{
return|return;
block|}
name|tick
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
comment|// Only print, don't throw exception
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to wait scheduler application attempt stopped."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|SchedulerApplication
argument_list|<
name|SchedulerApplicationAttempt
argument_list|>
DECL|method|verifyAppAddedAndRemovedFromScheduler ( Map<ApplicationId, SchedulerApplication<SchedulerApplicationAttempt>> applications, EventHandler<SchedulerEvent> handler, String queueName)
name|verifyAppAddedAndRemovedFromScheduler
parameter_list|(
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|<
name|SchedulerApplicationAttempt
argument_list|>
argument_list|>
name|applications
parameter_list|,
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|handler
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId
argument_list|,
name|queueName
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
name|SchedulerApplication
argument_list|<
name|SchedulerApplicationAttempt
argument_list|>
name|app
init|=
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
comment|// verify application is added.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|AppRemovedSchedulerEvent
name|appRemoveEvent
init|=
operator|new
name|AppRemovedSchedulerEvent
argument_list|(
name|appId
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
name|handler
operator|.
name|handle
argument_list|(
name|appRemoveEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
DECL|method|getMockRMContext ()
specifier|private
specifier|static
name|RMContext
name|getMockRMContext
parameter_list|()
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|nlm
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|nlm
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nlm
argument_list|)
expr_stmt|;
return|return
name|rmContext
return|;
block|}
DECL|class|InvalidResourceRequestExceptionMessageGenerator
specifier|private
specifier|static
class|class
name|InvalidResourceRequestExceptionMessageGenerator
block|{
DECL|field|sb
specifier|private
name|StringBuilder
name|sb
decl_stmt|;
DECL|field|requestedResource
specifier|private
name|Resource
name|requestedResource
decl_stmt|;
DECL|field|availableAllocation
specifier|private
name|Resource
name|availableAllocation
decl_stmt|;
DECL|field|configuredMaxAllowedAllocation
specifier|private
name|Resource
name|configuredMaxAllowedAllocation
decl_stmt|;
DECL|field|resourceType
specifier|private
name|String
name|resourceType
decl_stmt|;
DECL|field|invalidResourceType
specifier|private
name|InvalidResourceType
name|invalidResourceType
decl_stmt|;
DECL|method|InvalidResourceRequestExceptionMessageGenerator (StringBuilder sb)
name|InvalidResourceRequestExceptionMessageGenerator
parameter_list|(
name|StringBuilder
name|sb
parameter_list|)
block|{
name|this
operator|.
name|sb
operator|=
name|sb
expr_stmt|;
block|}
DECL|method|create ()
specifier|public
specifier|static
name|InvalidResourceRequestExceptionMessageGenerator
name|create
parameter_list|()
block|{
return|return
operator|new
name|InvalidResourceRequestExceptionMessageGenerator
argument_list|(
operator|new
name|StringBuilder
argument_list|()
argument_list|)
return|;
block|}
DECL|method|withRequestedResource ( Resource r)
name|InvalidResourceRequestExceptionMessageGenerator
name|withRequestedResource
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|this
operator|.
name|requestedResource
operator|=
name|r
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withRequestedResourceType ( String rt)
name|InvalidResourceRequestExceptionMessageGenerator
name|withRequestedResourceType
parameter_list|(
name|String
name|rt
parameter_list|)
block|{
name|this
operator|.
name|resourceType
operator|=
name|rt
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withAvailableAllocation ( Resource r)
name|InvalidResourceRequestExceptionMessageGenerator
name|withAvailableAllocation
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|this
operator|.
name|availableAllocation
operator|=
name|r
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|withMaxAllocation ( Resource r)
name|InvalidResourceRequestExceptionMessageGenerator
name|withMaxAllocation
parameter_list|(
name|Resource
name|r
parameter_list|)
block|{
name|this
operator|.
name|configuredMaxAllowedAllocation
operator|=
name|r
expr_stmt|;
return|return
name|this
return|;
block|}
name|InvalidResourceRequestExceptionMessageGenerator
DECL|method|withInvalidResourceType (InvalidResourceType invalidResourceType)
name|withInvalidResourceType
parameter_list|(
name|InvalidResourceType
name|invalidResourceType
parameter_list|)
block|{
name|this
operator|.
name|invalidResourceType
operator|=
name|invalidResourceType
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|build ()
specifier|public
name|String
name|build
parameter_list|()
block|{
if|if
condition|(
name|invalidResourceType
operator|==
name|LESS_THAN_ZERO
condition|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"Invalid resource request! "
operator|+
literal|"Cannot allocate containers as "
operator|+
literal|"requested resource is less than 0! "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Requested resource type=["
argument_list|)
operator|.
name|append
argument_list|(
name|resourceType
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|append
argument_list|(
literal|", Requested resource="
argument_list|)
operator|.
name|append
argument_list|(
name|requestedResource
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|invalidResourceType
operator|==
name|GREATER_THEN_MAX_ALLOCATION
condition|)
block|{
return|return
name|sb
operator|.
name|append
argument_list|(
literal|"Invalid resource request! "
operator|+
literal|"Cannot allocate containers as "
operator|+
literal|"requested resource is greater than "
operator|+
literal|"maximum allowed allocation. "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Requested resource type=["
argument_list|)
operator|.
name|append
argument_list|(
name|resourceType
argument_list|)
operator|.
name|append
argument_list|(
literal|"], "
argument_list|)
operator|.
name|append
argument_list|(
literal|"Requested resource="
argument_list|)
operator|.
name|append
argument_list|(
name|requestedResource
argument_list|)
operator|.
name|append
argument_list|(
literal|", maximum allowed allocation="
argument_list|)
operator|.
name|append
argument_list|(
name|availableAllocation
argument_list|)
operator|.
name|append
argument_list|(
literal|", please note that maximum allowed allocation is "
operator|+
literal|"calculated by scheduler based on maximum resource "
operator|+
literal|"of registered NodeManagers, which might be less "
operator|+
literal|"than configured maximum allocation="
argument_list|)
operator|.
name|append
argument_list|(
name|configuredMaxAllowedAllocation
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Wrong type of InvalidResourceType is "
operator|+
literal|"detected!"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

