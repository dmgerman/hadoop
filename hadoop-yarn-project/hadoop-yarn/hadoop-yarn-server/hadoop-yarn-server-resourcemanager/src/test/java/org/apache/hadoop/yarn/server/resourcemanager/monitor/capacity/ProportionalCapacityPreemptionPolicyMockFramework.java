begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|policy
operator|.
name|QueueOrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|ParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|preemption
operator|.
name|PreemptionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerPreemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
operator|.
name|OrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|ProportionalCapacityPreemptionPolicyMockFramework
specifier|public
class|class
name|ProportionalCapacityPreemptionPolicyMockFramework
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestProportionalCapacityPreemptionPolicyForNodePartitions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT
specifier|final
name|String
name|ROOT
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
decl_stmt|;
DECL|field|nameToCSQueues
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|nameToCSQueues
init|=
literal|null
decl_stmt|;
DECL|field|partitionToResource
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|partitionToResource
init|=
literal|null
decl_stmt|;
DECL|field|nodeIdToSchedulerNodes
name|Map
argument_list|<
name|NodeId
argument_list|,
name|FiCaSchedulerNode
argument_list|>
name|nodeIdToSchedulerNodes
init|=
literal|null
decl_stmt|;
DECL|field|nlm
name|RMNodeLabelsManager
name|nlm
init|=
literal|null
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
init|=
literal|null
decl_stmt|;
DECL|field|rc
name|ResourceCalculator
name|rc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|mClock
name|Clock
name|mClock
init|=
literal|null
decl_stmt|;
DECL|field|conf
name|CapacitySchedulerConfiguration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|cs
name|CapacityScheduler
name|cs
init|=
literal|null
decl_stmt|;
DECL|field|mDisp
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|mDisp
init|=
literal|null
decl_stmt|;
DECL|field|policy
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
literal|null
decl_stmt|;
DECL|field|clusterResource
name|Resource
name|clusterResource
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_MONITORING_INTERVAL
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|// report "ideal" preempt
name|conf
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|TOTAL_PREEMPTION_PER_ROUND
argument_list|,
operator|(
name|float
operator|)
literal|1.0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_NATURAL_TERMINATION_FACTOR
argument_list|,
operator|(
name|float
operator|)
literal|1.0
argument_list|)
expr_stmt|;
name|mClock
operator|=
name|mock
argument_list|(
name|Clock
operator|.
name|class
argument_list|)
expr_stmt|;
name|cs
operator|=
name|mock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getPreemptionManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|PreemptionManager
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nlm
operator|=
name|mock
argument_list|(
name|RMNodeLabelsManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|mDisp
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmContext
operator|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nlm
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|disp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|disp
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mDisp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|partitionToResource
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|nodeIdToSchedulerNodes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|nameToCSQueues
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|buildEnv (String labelsConfig, String nodesConfig, String queuesConfig, String appsConfig)
specifier|public
name|void
name|buildEnv
parameter_list|(
name|String
name|labelsConfig
parameter_list|,
name|String
name|nodesConfig
parameter_list|,
name|String
name|queuesConfig
parameter_list|,
name|String
name|appsConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|buildEnv (String labelsConfig, String nodesConfig, String queuesConfig, String appsConfig, boolean useDominantResourceCalculator)
specifier|public
name|void
name|buildEnv
parameter_list|(
name|String
name|labelsConfig
parameter_list|,
name|String
name|nodesConfig
parameter_list|,
name|String
name|queuesConfig
parameter_list|,
name|String
name|appsConfig
parameter_list|,
name|boolean
name|useDominantResourceCalculator
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|useDominantResourceCalculator
condition|)
block|{
name|when
argument_list|(
name|cs
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DominantResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mockNodeLabelsManager
argument_list|(
name|labelsConfig
argument_list|)
expr_stmt|;
name|mockSchedulerNodes
argument_list|(
name|nodesConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|nodeIdToSchedulerNodes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|when
argument_list|(
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeIdToSchedulerNodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FiCaSchedulerNode
argument_list|>
name|allNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodeIdToSchedulerNodes
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getAllNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allNodes
argument_list|)
expr_stmt|;
name|ParentQueue
name|root
init|=
name|mockQueueHierarchy
argument_list|(
name|queuesConfig
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getRootQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|mockApplications
argument_list|(
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|new
name|ProportionalCapacityPreemptionPolicy
argument_list|(
name|rmContext
argument_list|,
name|cs
argument_list|,
name|mClock
argument_list|)
expr_stmt|;
block|}
DECL|method|mockContainers (String containersConfig, FiCaSchedulerApp app, ApplicationAttemptId attemptId, String queueName, List<RMContainer> reservedContainers, List<RMContainer> liveContainers)
specifier|private
name|void
name|mockContainers
parameter_list|(
name|String
name|containersConfig
parameter_list|,
name|FiCaSchedulerApp
name|app
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
parameter_list|)
block|{
name|int
name|containerId
init|=
literal|1
decl_stmt|;
name|int
name|start
init|=
name|containersConfig
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
name|Resource
name|used
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|pending
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|pri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|containersConfig
operator|.
name|length
argument_list|()
condition|)
block|{
while|while
condition|(
name|start
operator|<
name|containersConfig
operator|.
name|length
argument_list|()
operator|&&
name|containersConfig
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|!=
literal|'('
condition|)
block|{
name|start
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>=
name|containersConfig
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error containers specification, line="
operator|+
name|containersConfig
argument_list|)
throw|;
block|}
name|end
operator|=
name|start
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|end
operator|<
name|containersConfig
operator|.
name|length
argument_list|()
operator|&&
name|containersConfig
operator|.
name|charAt
argument_list|(
name|end
argument_list|)
operator|!=
literal|')'
condition|)
block|{
name|end
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|>=
name|containersConfig
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error containers specification, line="
operator|+
name|containersConfig
argument_list|)
throw|;
block|}
comment|// now we found start/end, get container values
name|String
index|[]
name|values
init|=
name|containersConfig
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
argument_list|<
literal|6
operator|||
name|values
operator|.
name|length
argument_list|>
literal|8
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Format to define container is:"
operator|+
literal|"(priority,resource,host,expression,repeat,reserved, pending)"
argument_list|)
throw|;
block|}
name|pri
operator|.
name|setPriority
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|NodeId
name|host
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|values
index|[
literal|2
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|values
index|[
literal|3
index|]
decl_stmt|;
name|String
name|userName
init|=
literal|"user"
decl_stmt|;
name|int
name|repeat
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|boolean
name|reserved
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|5
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|>=
literal|7
condition|)
block|{
name|Resources
operator|.
name|addTo
argument_list|(
name|pending
argument_list|,
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|8
condition|)
block|{
name|userName
operator|=
name|values
index|[
literal|7
index|]
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeat
condition|;
name|i
operator|++
control|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|used
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pri
argument_list|)
expr_stmt|;
name|SchedulerRequestKey
name|sk
init|=
name|SchedulerRequestKey
operator|.
name|extractFrom
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|RMContainerImpl
name|rmc
init|=
name|mock
argument_list|(
name|RMContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getAllocatedSchedulerKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sk
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
specifier|final
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|cId
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|RMContainer
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|rmc
argument_list|)
operator|.
name|compareTo
argument_list|(
name|any
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerId
operator|==
literal|1
condition|)
block|{
name|when
argument_list|(
name|rmc
operator|.
name|isAMContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAMResource
argument_list|(
name|label
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reserved
condition|)
block|{
name|reservedContainers
operator|.
name|add
argument_list|(
name|rmc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getReservedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|liveContainers
operator|.
name|add
argument_list|(
name|rmc
argument_list|)
expr_stmt|;
block|}
comment|// Add container to scheduler-node
name|addContainerToSchedulerNode
argument_list|(
name|host
argument_list|,
name|rmc
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
comment|// If this is a non-exclusive allocation
name|String
name|partition
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|partition
operator|=
name|nodeIdToSchedulerNodes
operator|.
name|get
argument_list|(
name|host
argument_list|)
operator|.
name|getPartition
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LeafQueue
name|queue
init|=
operator|(
name|LeafQueue
operator|)
name|nameToCSQueues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|ignoreExclusivityContainers
init|=
name|queue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ignoreExclusivityContainers
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|ignoreExclusivityContainers
operator|.
name|put
argument_list|(
name|partition
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ignoreExclusivityContainers
operator|.
name|get
argument_list|(
name|partition
argument_list|)
operator|.
name|add
argument_list|(
name|rmc
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"add container to app="
operator|+
name|attemptId
operator|+
literal|" res="
operator|+
name|res
operator|+
literal|" node="
operator|+
name|host
operator|+
literal|" nodeLabelExpression="
operator|+
name|label
operator|+
literal|" partition="
operator|+
name|partition
argument_list|)
expr_stmt|;
name|containerId
operator|++
expr_stmt|;
block|}
comment|// Some more app specific aggregated data can be better filled here.
name|when
argument_list|(
name|app
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pri
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getCurrentConsumption
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|used
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getCurrentReservation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|pendingForDefaultPartition
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add for default partition for now.
name|pendingForDefaultPartition
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|pending
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getTotalPendingRequestsPerPartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pendingForDefaultPartition
argument_list|)
expr_stmt|;
comment|// need to set pending resource in resource usage as well
name|ResourceUsage
name|ru
init|=
operator|new
name|ResourceUsage
argument_list|()
decl_stmt|;
name|ru
operator|.
name|setUsed
argument_list|(
name|label
argument_list|,
name|used
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppAttemptResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ru
argument_list|)
expr_stmt|;
name|start
operator|=
name|end
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|/**    * Format is:    *<pre>    * queueName\t  // app1    * (priority,resource,host,expression,#repeat,reserved)    * (priority,resource,host,expression,#repeat,reserved);    * queueName\t  // app2    *</pre>    */
DECL|method|mockApplications (String appsConfig)
specifier|private
name|void
name|mockApplications
parameter_list|(
name|String
name|appsConfig
parameter_list|)
block|{
name|int
name|id
init|=
literal|1
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|userMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|LeafQueue
name|queue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|appsConfig
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
name|String
index|[]
name|strs
init|=
name|a
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
name|strs
index|[
literal|0
index|]
decl_stmt|;
comment|// get containers
name|List
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAMResource
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mockContainers
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|,
name|app
argument_list|,
name|appAttemptId
argument_list|,
name|queueName
argument_list|,
name|reservedContainers
argument_list|,
name|liveContainers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Application mock: queue: "
operator|+
name|queueName
operator|+
literal|", appId:"
operator|+
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getLiveContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|liveContainers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reservedContainers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// add to LeafQueue
name|queue
operator|=
operator|(
name|LeafQueue
operator|)
name|nameToCSQueues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|queue
operator|.
name|getAllApplications
argument_list|()
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|users
init|=
name|userMap
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|users
condition|)
block|{
name|users
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|userMap
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|users
argument_list|)
expr_stmt|;
block|}
name|users
operator|.
name|add
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
for|for
control|(
name|String
name|queueName
range|:
name|userMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|queue
operator|=
operator|(
name|LeafQueue
operator|)
name|nameToCSQueues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
comment|// Currently we have user-limit test support only for default label.
name|Resource
name|totResoucePerPartition
init|=
name|partitionToResource
operator|.
name|get
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Resource
name|capacity
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|totResoucePerPartition
argument_list|,
name|queue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|users
init|=
name|userMap
operator|.
name|get
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|userLimit
init|=
name|Resources
operator|.
name|divideAndCeil
argument_list|(
name|rc
argument_list|,
name|capacity
argument_list|,
name|users
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|when
argument_list|(
name|queue
operator|.
name|getUserLimitPerUser
argument_list|(
name|eq
argument_list|(
name|user
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|userLimit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addContainerToSchedulerNode (NodeId nodeId, RMContainer container, boolean isReserved)
specifier|private
name|void
name|addContainerToSchedulerNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|RMContainer
name|container
parameter_list|,
name|boolean
name|isReserved
parameter_list|)
block|{
name|SchedulerNode
name|node
init|=
name|nodeIdToSchedulerNodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
assert|assert
name|node
operator|!=
literal|null
assert|;
if|if
condition|(
name|isReserved
condition|)
block|{
name|when
argument_list|(
name|node
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|subtractFrom
argument_list|(
name|node
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|,
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Format is:    * host1=partition[ res=resource];    * host2=partition[ res=resource];    */
DECL|method|mockSchedulerNodes (String schedulerNodesConfigStr)
specifier|private
name|void
name|mockSchedulerNodes
parameter_list|(
name|String
name|schedulerNodesConfigStr
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|nodesConfigStrArray
init|=
name|schedulerNodesConfigStr
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|nodesConfigStrArray
control|)
block|{
name|String
index|[]
name|arr
init|=
name|p
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|arr
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|arr
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|partition
init|=
name|arr
index|[
literal|0
index|]
operator|.
name|substring
argument_list|(
name|arr
index|[
literal|0
index|]
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|arr
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerNode
name|sn
init|=
name|mock
argument_list|(
name|FiCaSchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sn
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sn
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|Resource
name|totalRes
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|arr
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|String
name|res
init|=
name|arr
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|contains
argument_list|(
literal|"res="
argument_list|)
condition|)
block|{
name|String
name|resSring
init|=
name|res
operator|.
name|substring
argument_list|(
name|res
operator|.
name|indexOf
argument_list|(
literal|"res="
argument_list|)
operator|+
literal|"res="
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|totalRes
operator|=
name|parseResourceFromString
argument_list|(
name|resSring
argument_list|)
expr_stmt|;
block|}
block|}
name|when
argument_list|(
name|sn
operator|.
name|getTotalResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|totalRes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sn
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|clone
argument_list|(
name|totalRes
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO, add settings of killable resources when necessary
name|when
argument_list|(
name|sn
operator|.
name|getTotalKillableResources
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|sn
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|liveContainers
argument_list|)
expr_stmt|;
name|nodeIdToSchedulerNodes
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"add scheduler node, id="
operator|+
name|nodeId
operator|+
literal|", partition="
operator|+
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Format is:    *<pre>    * partition0=total_resource,exclusivity;    * partition1=total_resource,exclusivity;    * ...    *</pre>    */
DECL|method|mockNodeLabelsManager (String nodeLabelsConfigStr)
specifier|private
name|void
name|mockNodeLabelsManager
parameter_list|(
name|String
name|nodeLabelsConfigStr
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|partitionConfigArr
init|=
name|nodeLabelsConfigStr
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|clusterResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|partitionConfigArr
control|)
block|{
name|String
name|partitionName
init|=
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|res
init|=
name|parseResourceFromString
argument_list|(
name|p
operator|.
name|substring
argument_list|(
name|p
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|p
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exclusivity
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|substring
argument_list|(
name|p
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|+
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nlm
operator|.
name|getResourceByLabel
argument_list|(
name|eq
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nlm
operator|.
name|isExclusiveNodeLabel
argument_list|(
name|eq
argument_list|(
name|partitionName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exclusivity
argument_list|)
expr_stmt|;
comment|// add to partition to resource
name|partitionToResource
operator|.
name|put
argument_list|(
name|partitionName
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"add partition="
operator|+
name|partitionName
operator|+
literal|" totalRes="
operator|+
name|res
operator|+
literal|" exclusivity="
operator|+
name|exclusivity
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|clusterResource
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|nlm
operator|.
name|getClusterNodeLabelNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|partitionToResource
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|parseResourceFromString (String p)
specifier|private
name|Resource
name|parseResourceFromString
parameter_list|(
name|String
name|p
parameter_list|)
block|{
name|String
index|[]
name|resource
init|=
name|p
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|Resource
name|res
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|res
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|resource
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|res
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|resource
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|resource
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
comment|/**    * Format is:    *<pre>    * root (<partition-name-1>=[guaranteed max used pending (reserved)],<partition-name-2>=..);    * -A(...);    * --A1(...);    * --A2(...);    * -B...    *</pre>    * ";" splits queues, and there should no empty lines, no extra spaces    *    * For each queue, it has configurations to specify capacities (to each    * partition), format is:    *<pre>    * -<queueName> (<labelName1>=[guaranteed max used pending], \    *<labelName2>=[guaranteed max used pending])    *              {key1=value1,key2=value2};  // Additional configs    *</pre>    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|mockQueueHierarchy (String queueExprs)
specifier|private
name|ParentQueue
name|mockQueueHierarchy
parameter_list|(
name|String
name|queueExprs
parameter_list|)
block|{
name|String
index|[]
name|queueExprArray
init|=
name|queueExprs
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|ParentQueue
name|rootQueue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|queueExprArray
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|q
init|=
name|queueExprArray
index|[
name|idx
index|]
decl_stmt|;
name|CSQueue
name|queue
decl_stmt|;
comment|// Initialize queue
if|if
condition|(
name|isParent
argument_list|(
name|queueExprArray
argument_list|,
name|idx
argument_list|)
condition|)
block|{
name|ParentQueue
name|parentQueue
init|=
name|mock
argument_list|(
name|ParentQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|queue
operator|=
name|parentQueue
expr_stmt|;
name|List
argument_list|<
name|CSQueue
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|QueueOrderingPolicy
name|policy
init|=
name|mock
argument_list|(
name|QueueOrderingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|policy
operator|.
name|getConfigName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|parentQueue
operator|.
name|getQueueOrderingPolicy
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LeafQueue
name|leafQueue
init|=
name|mock
argument_list|(
name|LeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|FiCaSchedulerApp
name|a1
parameter_list|,
name|FiCaSchedulerApp
name|a2
parameter_list|)
block|{
if|if
condition|(
name|a1
operator|.
name|getPriority
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|a1
operator|.
name|getPriority
argument_list|()
operator|.
name|equals
argument_list|(
name|a2
operator|.
name|getPriority
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|a1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
name|int
name|res
init|=
name|a1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|leafQueue
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|apps
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|leafQueue
operator|.
name|getAllApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|apps
argument_list|)
expr_stmt|;
name|OrderingPolicy
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|so
init|=
name|mock
argument_list|(
name|OrderingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|so
operator|.
name|getPreemptionIterator
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
return|return
name|apps
operator|.
name|descendingIterator
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|leafQueue
operator|.
name|getOrderingPolicy
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|so
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|ignorePartitionContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|leafQueue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ignorePartitionContainers
argument_list|)
expr_stmt|;
name|queue
operator|=
name|leafQueue
expr_stmt|;
block|}
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getReadLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lock
operator|.
name|readLock
argument_list|()
argument_list|)
expr_stmt|;
name|setupQueue
argument_list|(
name|queue
argument_list|,
name|q
argument_list|,
name|queueExprArray
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|rootQueue
operator|=
operator|(
name|ParentQueue
operator|)
name|queue
expr_stmt|;
block|}
block|}
return|return
name|rootQueue
return|;
block|}
DECL|method|setupQueue (CSQueue queue, String q, String[] queueExprArray, int idx)
specifier|private
name|void
name|setupQueue
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|String
name|q
parameter_list|,
name|String
index|[]
name|queueExprArray
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** Setup queue, source="
operator|+
name|q
argument_list|)
expr_stmt|;
name|String
name|queuePath
init|=
literal|null
decl_stmt|;
name|int
name|myLevel
init|=
name|getLevel
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|myLevel
condition|)
block|{
comment|// It's root
name|when
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ROOT
argument_list|)
expr_stmt|;
name|queuePath
operator|=
name|ROOT
expr_stmt|;
block|}
name|String
name|queueName
init|=
name|getQueueName
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
comment|// Setup parent queue, and add myself to parentQueue.children-list
name|ParentQueue
name|parentQueue
init|=
name|getParentQueue
argument_list|(
name|queueExprArray
argument_list|,
name|idx
argument_list|,
name|myLevel
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|parentQueue
condition|)
block|{
name|when
argument_list|(
name|queue
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parentQueue
argument_list|)
expr_stmt|;
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
operator|.
name|add
argument_list|(
name|queue
argument_list|)
expr_stmt|;
comment|// Setup my path
name|queuePath
operator|=
name|parentQueue
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|"."
operator|+
name|queueName
expr_stmt|;
block|}
name|when
argument_list|(
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queuePath
argument_list|)
expr_stmt|;
name|QueueCapacities
name|qc
init|=
operator|new
name|QueueCapacities
argument_list|(
literal|0
operator|==
name|myLevel
argument_list|)
decl_stmt|;
name|ResourceUsage
name|ru
init|=
operator|new
name|ResourceUsage
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueCapacities
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ru
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setup queue, name="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" path="
operator|+
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent="
operator|+
operator|(
name|parentQueue
operator|==
literal|null
condition|?
literal|"null"
else|:
name|parentQueue
operator|.
name|getQueueName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// Setup other fields like used resource, guaranteed resource, etc.
name|String
name|capacitySettingStr
init|=
name|q
operator|.
name|substring
argument_list|(
name|q
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|+
literal|1
argument_list|,
name|q
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|capacitySettingStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|String
name|partitionName
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"["
argument_list|)
operator|+
literal|1
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|"]"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// Add a small epsilon to capacities to avoid truncate when doing
comment|// Resources.multiply
name|float
name|epsilon
init|=
literal|1e-6f
decl_stmt|;
name|Resource
name|totResoucePerPartition
init|=
name|partitionToResource
operator|.
name|get
argument_list|(
name|partitionName
argument_list|)
decl_stmt|;
name|float
name|absGuaranteed
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|totResoucePerPartition
argument_list|,
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|totResoucePerPartition
argument_list|)
operator|+
name|epsilon
decl_stmt|;
name|float
name|absMax
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|totResoucePerPartition
argument_list|,
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|totResoucePerPartition
argument_list|)
operator|+
name|epsilon
decl_stmt|;
name|float
name|absUsed
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|totResoucePerPartition
argument_list|,
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|totResoucePerPartition
argument_list|)
operator|+
name|epsilon
decl_stmt|;
name|float
name|used
init|=
name|Resources
operator|.
name|divide
argument_list|(
name|rc
argument_list|,
name|totResoucePerPartition
argument_list|,
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|,
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
operator|+
name|epsilon
decl_stmt|;
name|Resource
name|pending
init|=
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|3
index|]
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
name|qc
operator|.
name|setAbsoluteCapacity
argument_list|(
name|partitionName
argument_list|,
name|absGuaranteed
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setAbsoluteMaximumCapacity
argument_list|(
name|partitionName
argument_list|,
name|absMax
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setAbsoluteUsedCapacity
argument_list|(
name|partitionName
argument_list|,
name|absUsed
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setUsedCapacity
argument_list|(
name|partitionName
argument_list|,
name|used
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getUsedCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|used
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setPending
argument_list|(
name|partitionName
argument_list|,
name|pending
argument_list|)
expr_stmt|;
comment|// Setup reserved resource if it contained by input config
name|Resource
name|reserved
init|=
name|Resources
operator|.
name|none
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|==
literal|5
condition|)
block|{
name|reserved
operator|=
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|4
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setReserved
argument_list|(
name|partitionName
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isParent
argument_list|(
name|queueExprArray
argument_list|,
name|idx
argument_list|)
condition|)
block|{
name|LeafQueue
name|lq
init|=
operator|(
name|LeafQueue
operator|)
name|queue
decl_stmt|;
name|when
argument_list|(
name|lq
operator|.
name|getTotalPendingResourcesConsideringUserLimit
argument_list|(
name|isA
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|lq
operator|.
name|getTotalPendingResourcesConsideringUserLimit
argument_list|(
name|isA
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|subtract
argument_list|(
name|pending
argument_list|,
name|reserved
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ru
operator|.
name|setUsed
argument_list|(
name|partitionName
argument_list|,
name|parseResourceFromString
argument_list|(
name|values
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setup queue="
operator|+
name|queueName
operator|+
literal|" partition="
operator|+
name|partitionName
operator|+
literal|" [abs_guaranteed="
operator|+
name|absGuaranteed
operator|+
literal|",abs_max="
operator|+
name|absMax
operator|+
literal|",abs_used"
operator|+
name|absUsed
operator|+
literal|",pending_resource="
operator|+
name|pending
operator|+
literal|", reserved_resource="
operator|+
name|reserved
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// Setup preemption disabled
name|when
argument_list|(
name|queue
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
operator|.
name|getPreemptionDisabled
argument_list|(
name|queuePath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup other queue configurations
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|otherConfigs
init|=
name|getOtherConfigurations
argument_list|(
name|queueExprArray
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|otherConfigs
operator|.
name|containsKey
argument_list|(
literal|"priority"
argument_list|)
condition|)
block|{
name|when
argument_list|(
name|queue
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|otherConfigs
operator|.
name|get
argument_list|(
literal|"priority"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set queue's priority to 0 by default
name|when
argument_list|(
name|queue
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Setup disable preemption of queues
if|if
condition|(
name|otherConfigs
operator|.
name|containsKey
argument_list|(
literal|"disable_preemption"
argument_list|)
condition|)
block|{
name|when
argument_list|(
name|queue
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|otherConfigs
operator|.
name|get
argument_list|(
literal|"disable_preemption"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nameToCSQueues
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|eq
argument_list|(
name|queueName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get additional queue's configurations    * @param queueExpr queue expr    * @return maps of configs    */
DECL|method|getOtherConfigurations (String queueExpr)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getOtherConfigurations
parameter_list|(
name|String
name|queueExpr
parameter_list|)
block|{
if|if
condition|(
name|queueExpr
operator|.
name|contains
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|int
name|left
init|=
name|queueExpr
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|)
decl_stmt|;
name|int
name|right
init|=
name|queueExpr
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|)
decl_stmt|;
if|if
condition|(
name|right
operator|>
name|left
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|configs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|subStr
init|=
name|queueExpr
operator|.
name|substring
argument_list|(
name|left
operator|+
literal|1
argument_list|,
name|right
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|kv
range|:
name|subStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|kv
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|kv
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|kv
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|kv
operator|.
name|substring
argument_list|(
name|kv
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
name|configs
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configs
return|;
block|}
block|}
return|return
name|Collections
operator|.
name|EMPTY_MAP
return|;
block|}
comment|/**    * Level of a queue is how many "-" at beginning, root's level is 0    */
DECL|method|getLevel (String q)
specifier|private
name|int
name|getLevel
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|int
name|level
init|=
literal|0
decl_stmt|;
comment|// level = how many "-" at beginning
while|while
condition|(
name|level
operator|<
name|q
operator|.
name|length
argument_list|()
operator|&&
name|q
operator|.
name|charAt
argument_list|(
name|level
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|level
operator|++
expr_stmt|;
block|}
return|return
name|level
return|;
block|}
DECL|method|getQueueName (String q)
specifier|private
name|String
name|getQueueName
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
comment|// find first != '-' char
while|while
condition|(
name|idx
operator|<
name|q
operator|.
name|length
argument_list|()
operator|&&
name|q
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|==
name|q
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal input:"
operator|+
name|q
argument_list|)
throw|;
block|}
comment|// name = after '-' and before '('
name|String
name|name
init|=
name|q
operator|.
name|substring
argument_list|(
name|idx
argument_list|,
name|q
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queue name shouldn't be empty:"
operator|+
name|q
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queue name shouldn't contain '.':"
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|name
return|;
block|}
DECL|method|getParentQueue (String[] queueExprArray, int idx, int myLevel)
specifier|private
name|ParentQueue
name|getParentQueue
parameter_list|(
name|String
index|[]
name|queueExprArray
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|myLevel
parameter_list|)
block|{
name|idx
operator|--
expr_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|int
name|level
init|=
name|getLevel
argument_list|(
name|queueExprArray
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|<
name|myLevel
condition|)
block|{
name|String
name|parentQueuName
init|=
name|getQueueName
argument_list|(
name|queueExprArray
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
return|return
operator|(
name|ParentQueue
operator|)
name|nameToCSQueues
operator|.
name|get
argument_list|(
name|parentQueuName
argument_list|)
return|;
block|}
name|idx
operator|--
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get if a queue is ParentQueue    */
DECL|method|isParent (String[] queues, int idx)
specifier|private
name|boolean
name|isParent
parameter_list|(
name|String
index|[]
name|queues
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|int
name|myLevel
init|=
name|getLevel
argument_list|(
name|queues
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
while|while
condition|(
name|idx
operator|<
name|queues
operator|.
name|length
operator|&&
name|getLevel
argument_list|(
name|queues
index|[
name|idx
index|]
argument_list|)
operator|==
name|myLevel
condition|)
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|>=
name|queues
operator|.
name|length
operator|||
name|getLevel
argument_list|(
name|queues
index|[
name|idx
index|]
argument_list|)
operator|<
name|myLevel
condition|)
block|{
comment|// It's a LeafQueue
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|getAppAttemptId (int id)
specifier|public
name|ApplicationAttemptId
name|getAppAttemptId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|appAttemptId
return|;
block|}
DECL|method|checkContainerNodesInApp (FiCaSchedulerApp app, int expectedContainersNumber, String host)
specifier|public
name|void
name|checkContainerNodesInApp
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|int
name|expectedContainersNumber
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|host
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|app
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|num
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|RMContainer
name|c
range|:
name|app
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|num
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedContainersNumber
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
DECL|method|getApp (String queueName, int appId)
specifier|public
name|FiCaSchedulerApp
name|getApp
parameter_list|(
name|String
name|queueName
parameter_list|,
name|int
name|appId
parameter_list|)
block|{
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
operator|)
operator|.
name|getApplications
argument_list|()
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|appId
condition|)
block|{
return|return
name|app
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkAbsCapacities (CSQueue queue, String partition, float guaranteed, float max, float used)
specifier|public
name|void
name|checkAbsCapacities
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|String
name|partition
parameter_list|,
name|float
name|guaranteed
parameter_list|,
name|float
name|max
parameter_list|,
name|float
name|used
parameter_list|)
block|{
name|QueueCapacities
name|qc
init|=
name|queue
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|guaranteed
argument_list|,
name|qc
operator|.
name|getAbsoluteCapacity
argument_list|(
name|partition
argument_list|)
argument_list|,
literal|1e-3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|max
argument_list|,
name|qc
operator|.
name|getAbsoluteMaximumCapacity
argument_list|(
name|partition
argument_list|)
argument_list|,
literal|1e-3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|used
argument_list|,
name|qc
operator|.
name|getAbsoluteUsedCapacity
argument_list|(
name|partition
argument_list|)
argument_list|,
literal|1e-3
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPendingResource (CSQueue queue, String partition, int pending)
specifier|public
name|void
name|checkPendingResource
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|pending
parameter_list|)
block|{
name|ResourceUsage
name|ru
init|=
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pending
argument_list|,
name|ru
operator|.
name|getPending
argument_list|(
name|partition
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPriority (CSQueue queue, int expectedPriority)
specifier|public
name|void
name|checkPriority
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|int
name|expectedPriority
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedPriority
argument_list|,
name|queue
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkReservedResource (CSQueue queue, String partition, int reserved)
specifier|public
name|void
name|checkReservedResource
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|reserved
parameter_list|)
block|{
name|ResourceUsage
name|ru
init|=
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|reserved
argument_list|,
name|ru
operator|.
name|getReserved
argument_list|(
name|partition
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|IsPreemptionRequestForQueueAndNode
specifier|static
class|class
name|IsPreemptionRequestForQueueAndNode
extends|extends
name|ArgumentMatcher
argument_list|<
name|ContainerPreemptEvent
argument_list|>
block|{
DECL|field|appAttId
specifier|private
specifier|final
name|ApplicationAttemptId
name|appAttId
decl_stmt|;
DECL|field|queueName
specifier|private
specifier|final
name|String
name|queueName
decl_stmt|;
DECL|field|nodeId
specifier|private
specifier|final
name|NodeId
name|nodeId
decl_stmt|;
DECL|method|IsPreemptionRequestForQueueAndNode (ApplicationAttemptId appAttId, String queueName, NodeId nodeId)
name|IsPreemptionRequestForQueueAndNode
parameter_list|(
name|ApplicationAttemptId
name|appAttId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
operator|.
name|appAttId
operator|=
name|appAttId
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches (Object o)
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ContainerPreemptEvent
name|cpe
init|=
operator|(
name|ContainerPreemptEvent
operator|)
name|o
decl_stmt|;
return|return
name|appAttId
operator|.
name|equals
argument_list|(
name|cpe
operator|.
name|getAppId
argument_list|()
argument_list|)
operator|&&
name|queueName
operator|.
name|equals
argument_list|(
name|cpe
operator|.
name|getContainer
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|&&
name|nodeId
operator|.
name|equals
argument_list|(
name|cpe
operator|.
name|getContainer
argument_list|()
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|appAttId
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

