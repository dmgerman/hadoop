begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * QueueManager tests that require a real scheduler  */
end_comment

begin_class
DECL|class|TestQueueManagerRealScheduler
specifier|public
class|class
name|TestQueueManagerRealScheduler
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|File
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-queue-mgr"
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|createConfiguration
argument_list|()
expr_stmt|;
name|writeAllocFile
argument_list|(
literal|30
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|ALLOC_FILE
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|writeAllocFile (int defaultFairShareTimeout, int fairShareTimeout)
specifier|private
name|void
name|writeAllocFile
parameter_list|(
name|int
name|defaultFairShareTimeout
parameter_list|,
name|int
name|fairShareTimeout
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>15"
operator|+
literal|"</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>"
operator|+
operator|+
name|defaultFairShareTimeout
operator|+
literal|"</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>"
operator|+
name|fairShareTimeout
operator|+
literal|"</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackwardsCompatiblePreemptionConfiguration ()
specifier|public
name|void
name|testBackwardsCompatiblePreemptionConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Check the min/fair share preemption timeout for each queue
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Lower the fairshare preemption timeouts and verify it is picked
comment|// correctly.
name|writeAllocFile
argument_list|(
literal|25
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

