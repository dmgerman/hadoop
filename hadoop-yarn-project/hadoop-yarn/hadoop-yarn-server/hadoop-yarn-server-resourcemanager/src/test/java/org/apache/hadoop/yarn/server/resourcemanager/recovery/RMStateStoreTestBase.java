begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|ReservationAllocationStateProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystemTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystemUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMDTSecretManagerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|AMRMTokenSecretManagerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|InMemoryReservationAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationAllocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AggregateAppResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_class
DECL|class|RMStateStoreTestBase
specifier|public
class|class
name|RMStateStoreTestBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RMStateStoreTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|TestDispatcher
specifier|static
class|class
name|TestDispatcher
implements|implements
name|Dispatcher
implements|,
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
DECL|field|attemptId
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
DECL|field|notified
name|boolean
name|notified
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|register (Class<? extends Enum> eventType, EventHandler handler)
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|RMAppAttemptEvent
condition|)
block|{
name|RMAppAttemptEvent
name|rmAppAttemptEvent
init|=
operator|(
name|RMAppAttemptEvent
operator|)
name|event
decl_stmt|;
name|assertEquals
argument_list|(
name|attemptId
argument_list|,
name|rmAppAttemptEvent
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|notified
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
DECL|class|StoreStateVerifier
specifier|public
specifier|static
class|class
name|StoreStateVerifier
block|{
DECL|method|afterStoreApp (RMStateStore store, ApplicationId appId)
name|void
name|afterStoreApp
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|ApplicationId
name|appId
parameter_list|)
block|{}
DECL|method|afterStoreAppAttempt (RMStateStore store, ApplicationAttemptId appAttId)
name|void
name|afterStoreAppAttempt
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|ApplicationAttemptId
name|appAttId
parameter_list|)
block|{}
block|}
DECL|interface|RMStateStoreHelper
interface|interface
name|RMStateStoreHelper
block|{
DECL|method|getRMStateStore ()
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|isFinalStateValid ()
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|writeVersion (Version version)
name|void
name|writeVersion
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|getCurrentVersion ()
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|appExists (RMApp app)
name|boolean
name|appExists
parameter_list|(
name|RMApp
name|app
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|method|waitNotify (TestDispatcher dispatcher)
name|void
name|waitNotify
parameter_list|(
name|TestDispatcher
name|dispatcher
parameter_list|)
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|dispatcher
operator|.
name|notified
condition|)
block|{
synchronized|synchronized
init|(
name|dispatcher
init|)
block|{
try|try
block|{
name|dispatcher
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
literal|1000
operator|*
literal|60
condition|)
block|{
name|fail
argument_list|(
literal|"Timed out attempt store notification"
argument_list|)
expr_stmt|;
block|}
block|}
name|dispatcher
operator|.
name|notified
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|storeApp (RMStateStore store, ApplicationId appId, long submitTime, long startTime)
specifier|protected
name|RMApp
name|storeApp
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|RMApp
name|mockApp
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeNewApplication
argument_list|(
name|mockApp
argument_list|)
expr_stmt|;
return|return
name|mockApp
return|;
block|}
DECL|method|storeAttempt (RMStateStore store, ApplicationAttemptId attemptId, String containerIdStr, Token<AMRMTokenIdentifier> appToken, SecretKey clientTokenMasterKey, TestDispatcher dispatcher)
specifier|protected
name|ContainerId
name|storeAttempt
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|appToken
parameter_list|,
name|SecretKey
name|clientTokenMasterKey
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|)
throws|throws
name|Exception
block|{
name|RMAppAttemptMetrics
name|mockRmAppAttemptMetrics
init|=
name|mock
argument_list|(
name|RMAppAttemptMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerPBImpl
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerIdStr
argument_list|)
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|mockAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appToken
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clientTokenMasterKey
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRmAppAttemptMetrics
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRmAppAttemptMetrics
operator|.
name|getAggregateAppResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AggregateAppResourceUsage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
name|store
operator|.
name|storeNewApplicationAttempt
argument_list|(
name|mockAttempt
argument_list|)
expr_stmt|;
name|waitNotify
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|getId
argument_list|()
return|;
block|}
DECL|method|testRMAppStateStore (RMStateStoreHelper stateStoreHelper)
name|void
name|testRMAppStateStore
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|testRMAppStateStore
argument_list|(
name|stateStoreHelper
argument_list|,
operator|new
name|StoreStateVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRMAppStateStore (RMStateStoreHelper stateStoreHelper, StoreStateVerifier verifier)
name|void
name|testRMAppStateStore
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|,
name|StoreStateVerifier
name|verifier
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1234
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|AMRMTokenSecretManager
name|appTokenMgr
init|=
name|spy
argument_list|(
operator|new
name|AMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|MasterKeyData
name|masterKeyData
init|=
name|appTokenMgr
operator|.
name|createNewMasterKey
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|appTokenMgr
operator|.
name|getMasterKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|masterKeyData
argument_list|)
expr_stmt|;
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenMgr
init|=
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
literal|"appattempt_1352994193343_0001_000001"
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId1
init|=
name|attemptId1
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|verifier
operator|.
name|afterStoreApp
argument_list|(
name|store
argument_list|,
name|appId1
argument_list|)
expr_stmt|;
comment|// create application token and client token key for attempt1
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|appAttemptToken1
init|=
name|generateAMRMToken
argument_list|(
name|attemptId1
argument_list|,
name|appTokenMgr
argument_list|)
decl_stmt|;
name|SecretKey
name|clientTokenKey1
init|=
name|clientToAMTokenMgr
operator|.
name|createMasterKey
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId1
init|=
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptId1
argument_list|,
literal|"container_1352994193343_0001_01_000001"
argument_list|,
name|appAttemptToken1
argument_list|,
name|clientTokenKey1
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|String
name|appAttemptIdStr2
init|=
literal|"appattempt_1352994193343_0001_000002"
decl_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|appAttemptIdStr2
argument_list|)
decl_stmt|;
comment|// create application token and client token key for attempt2
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|appAttemptToken2
init|=
name|generateAMRMToken
argument_list|(
name|attemptId2
argument_list|,
name|appTokenMgr
argument_list|)
decl_stmt|;
name|SecretKey
name|clientTokenKey2
init|=
name|clientToAMTokenMgr
operator|.
name|createMasterKey
argument_list|(
name|attemptId2
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId2
init|=
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptId2
argument_list|,
literal|"container_1352994193343_0001_02_000001"
argument_list|,
name|appAttemptToken2
argument_list|,
name|clientTokenKey2
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptIdRemoved
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
literal|"appattempt_1352994193343_0002_000001"
argument_list|)
decl_stmt|;
name|ApplicationId
name|appIdRemoved
init|=
name|attemptIdRemoved
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appIdRemoved
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptIdRemoved
argument_list|,
literal|"container_1352994193343_0002_01_000001"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|verifier
operator|.
name|afterStoreAppAttempt
argument_list|(
name|store
argument_list|,
name|attemptIdRemoved
argument_list|)
expr_stmt|;
name|RMApp
name|mockRemovedApp
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMAppAttemptMetrics
name|mockRmAppAttemptMetrics
init|=
name|mock
argument_list|(
name|RMAppAttemptMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appIdRemoved
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedApp
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedApp
operator|.
name|getAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedApp
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|mockRemovedAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRemovedAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptIdRemoved
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedAttempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRmAppAttemptMetrics
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRmAppAttemptMetrics
operator|.
name|getAggregateAppResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AggregateAppResourceUsage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|attemptIdRemoved
argument_list|,
name|mockRemovedAttempt
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeApplication
argument_list|(
name|mockRemovedApp
argument_list|)
expr_stmt|;
comment|// remove application directory recursively.
name|storeApp
argument_list|(
name|store
argument_list|,
name|appIdRemoved
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptIdRemoved
argument_list|,
literal|"container_1352994193343_0002_01_000001"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeApplication
argument_list|(
name|mockRemovedApp
argument_list|)
expr_stmt|;
comment|// let things settle down
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// give tester a chance to modify app state in the store
name|modifyAppState
argument_list|()
expr_stmt|;
comment|// load state
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|appId1
argument_list|)
decl_stmt|;
comment|// app is loaded
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// app is loaded correctly
name|assertEquals
argument_list|(
name|submitTime
argument_list|,
name|appState
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startTime
argument_list|,
name|appState
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// submission context is loaded correctly
name|assertEquals
argument_list|(
name|appId1
argument_list|,
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
comment|// attempt1 is loaded correctly
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptId1
argument_list|,
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1000
argument_list|,
name|attemptState
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt1 container is loaded correctly
name|assertEquals
argument_list|(
name|containerId1
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt1 client token master key is loaded correctly
name|assertArrayEquals
argument_list|(
name|clientTokenKey1
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|attemptState
operator|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId2
argument_list|)
expr_stmt|;
comment|// attempt2 is loaded correctly
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptId2
argument_list|,
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt2 container is loaded correctly
name|assertEquals
argument_list|(
name|containerId2
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt2 client token master key is loaded correctly
name|assertArrayEquals
argument_list|(
name|clientTokenKey2
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|//******* update application/attempt state *******//
name|ApplicationStateData
name|appState2
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|appState
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|appState
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|appState
operator|.
name|getUser
argument_list|()
argument_list|,
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
literal|"appDiagnostics"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|appState2
operator|.
name|attempts
operator|.
name|putAll
argument_list|(
name|appState
operator|.
name|attempts
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateApplicationState
argument_list|(
name|appState2
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|oldAttemptState
init|=
name|attemptState
decl_stmt|;
name|ApplicationAttemptStateData
name|newAttemptState
init|=
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|oldAttemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|oldAttemptState
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|oldAttemptState
operator|.
name|getAppAttemptTokens
argument_list|()
argument_list|,
name|oldAttemptState
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|"myTrackingUrl"
argument_list|,
literal|"attemptDiagnostics"
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|100
argument_list|,
name|oldAttemptState
operator|.
name|getFinishTime
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateApplicationAttemptState
argument_list|(
name|newAttemptState
argument_list|)
expr_stmt|;
comment|// test updating the state of an app/attempt whose initial state was not
comment|// saved.
name|ApplicationId
name|dummyAppId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|dummyContext
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|dummyContext
operator|.
name|setApplicationId
argument_list|(
name|dummyAppId
argument_list|)
expr_stmt|;
name|ApplicationStateData
name|dummyApp
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|appState
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|appState
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|appState
operator|.
name|getUser
argument_list|()
argument_list|,
name|dummyContext
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|,
literal|"appDiagnostics"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateApplicationState
argument_list|(
name|dummyApp
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|dummyAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|dummyAppId
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|ApplicationAttemptStateData
name|dummyAttempt
init|=
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|dummyAttemptId
argument_list|,
name|oldAttemptState
operator|.
name|getMasterContainer
argument_list|()
argument_list|,
name|oldAttemptState
operator|.
name|getAppAttemptTokens
argument_list|()
argument_list|,
name|oldAttemptState
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|"myTrackingUrl"
argument_list|,
literal|"attemptDiagnostics"
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|111
argument_list|,
name|oldAttemptState
operator|.
name|getFinishTime
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateApplicationAttemptState
argument_list|(
name|dummyAttempt
argument_list|)
expr_stmt|;
comment|// let things settle down
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// check updated application state.
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|newRMState
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|newRMAppState
init|=
name|newRMState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|newRMAppState
operator|.
name|get
argument_list|(
name|dummyApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationStateData
name|updatedAppState
init|=
name|newRMAppState
operator|.
name|get
argument_list|(
name|appId1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|updatedAppState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appState
operator|.
name|getSubmitTime
argument_list|()
argument_list|,
name|updatedAppState
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appState
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|updatedAppState
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appState
operator|.
name|getUser
argument_list|()
argument_list|,
name|updatedAppState
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// new app state fields
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|updatedAppState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"appDiagnostics"
argument_list|,
name|updatedAppState
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234
argument_list|,
name|updatedAppState
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// check updated attempt state
name|assertNotNull
argument_list|(
name|newRMAppState
operator|.
name|get
argument_list|(
name|dummyApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getAttempt
argument_list|(
name|dummyAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|updatedAttemptState
init|=
name|updatedAppState
operator|.
name|getAttempt
argument_list|(
name|newAttemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oldAttemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|updatedAttemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|containerId2
argument_list|,
name|updatedAttemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|clientTokenKey2
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// new attempt state fields
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|updatedAttemptState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"myTrackingUrl"
argument_list|,
name|updatedAttemptState
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"attemptDiagnostics"
argument_list|,
name|updatedAttemptState
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|updatedAttemptState
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|updatedAttemptState
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert store is in expected state after everything is cleaned
name|assertTrue
argument_list|(
name|stateStoreHelper
operator|.
name|isFinalStateValid
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRMDTSecretManagerStateStore ( RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testRMDTSecretManagerStateStore
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
comment|// store RM delegation token;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser1"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|sequenceNumber
init|=
literal|1111
decl_stmt|;
name|dtId1
operator|.
name|setSequenceNumber
argument_list|(
name|sequenceNumber
argument_list|)
expr_stmt|;
name|byte
index|[]
name|tokenBeforeStore
init|=
name|dtId1
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|Long
name|renewDate1
init|=
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|storeRMDelegationToken
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|modifyRMDelegationTokenState
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|token1
init|=
operator|new
name|HashMap
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|token1
operator|.
name|put
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
comment|// store delegation key;
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|(
literal|1234
argument_list|,
literal|4321
argument_list|,
literal|"keyBytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|DelegationKey
argument_list|>
name|keySet
init|=
operator|new
name|HashSet
argument_list|<
name|DelegationKey
argument_list|>
argument_list|()
decl_stmt|;
name|keySet
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeRMDTMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|RMDTSecretManagerState
name|secretManagerState
init|=
name|store
operator|.
name|loadState
argument_list|()
operator|.
name|getRMDTSecretManagerState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token1
argument_list|,
name|secretManagerState
operator|.
name|getTokenState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keySet
argument_list|,
name|secretManagerState
operator|.
name|getMasterKeyState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sequenceNumber
argument_list|,
name|secretManagerState
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|RMDelegationTokenIdentifier
name|tokenAfterStore
init|=
name|secretManagerState
operator|.
name|getTokenState
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|tokenBeforeStore
argument_list|,
name|tokenAfterStore
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// update RM delegation token;
name|renewDate1
operator|=
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateRMDelegationToken
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|token1
operator|.
name|put
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|RMDTSecretManagerState
name|updateSecretManagerState
init|=
name|store
operator|.
name|loadState
argument_list|()
operator|.
name|getRMDTSecretManagerState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token1
argument_list|,
name|updateSecretManagerState
operator|.
name|getTokenState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keySet
argument_list|,
name|updateSecretManagerState
operator|.
name|getMasterKeyState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sequenceNumber
argument_list|,
name|updateSecretManagerState
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// check to delete delegationKey
name|store
operator|.
name|removeRMDTMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|keySet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|RMDTSecretManagerState
name|noKeySecretManagerState
init|=
name|store
operator|.
name|loadState
argument_list|()
operator|.
name|getRMDTSecretManagerState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token1
argument_list|,
name|noKeySecretManagerState
operator|.
name|getTokenState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keySet
argument_list|,
name|noKeySecretManagerState
operator|.
name|getMasterKeyState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sequenceNumber
argument_list|,
name|noKeySecretManagerState
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// check to delete delegationToken
name|store
operator|.
name|removeRMDelegationToken
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
name|RMDTSecretManagerState
name|noKeyAndTokenSecretManagerState
init|=
name|store
operator|.
name|loadState
argument_list|()
operator|.
name|getRMDTSecretManagerState
argument_list|()
decl_stmt|;
name|token1
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|token1
argument_list|,
name|noKeyAndTokenSecretManagerState
operator|.
name|getTokenState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|keySet
argument_list|,
name|noKeyAndTokenSecretManagerState
operator|.
name|getMasterKeyState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|sequenceNumber
argument_list|,
name|noKeySecretManagerState
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|generateAMRMToken ( ApplicationAttemptId attemptId, AMRMTokenSecretManager appTokenMgr)
specifier|protected
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|generateAMRMToken
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|AMRMTokenSecretManager
name|appTokenMgr
parameter_list|)
block|{
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|appToken
init|=
name|appTokenMgr
operator|.
name|createAndGetAMRMToken
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|appToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
literal|"appToken service"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|appToken
return|;
block|}
DECL|method|testCheckVersion (RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testCheckVersion
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
expr_stmt|;
comment|// default version
name|Version
name|defaultVersion
init|=
name|stateStoreHelper
operator|.
name|getCurrentVersion
argument_list|()
decl_stmt|;
name|store
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultVersion
argument_list|,
name|store
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// compatible version
name|Version
name|compatibleVersion
init|=
name|Version
operator|.
name|newInstance
argument_list|(
name|defaultVersion
operator|.
name|getMajorVersion
argument_list|()
argument_list|,
name|defaultVersion
operator|.
name|getMinorVersion
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
name|stateStoreHelper
operator|.
name|writeVersion
argument_list|(
name|compatibleVersion
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|compatibleVersion
argument_list|,
name|store
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
comment|// overwrite the compatible version
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultVersion
argument_list|,
name|store
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
comment|// incompatible version
name|Version
name|incompatibleVersion
init|=
name|Version
operator|.
name|newInstance
argument_list|(
name|defaultVersion
operator|.
name|getMajorVersion
argument_list|()
operator|+
literal|2
argument_list|,
name|defaultVersion
operator|.
name|getMinorVersion
argument_list|()
argument_list|)
decl_stmt|;
name|stateStoreHelper
operator|.
name|writeVersion
argument_list|(
name|incompatibleVersion
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Invalid version, should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t
operator|instanceof
name|RMStateVersionIncompatibleException
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testEpoch (RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testEpoch
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|firstTimeEpoch
init|=
name|store
operator|.
name|getAndIncrementEpoch
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|firstTimeEpoch
argument_list|)
expr_stmt|;
name|long
name|secondTimeEpoch
init|=
name|store
operator|.
name|getAndIncrementEpoch
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|secondTimeEpoch
argument_list|)
expr_stmt|;
name|long
name|thirdTimeEpoch
init|=
name|store
operator|.
name|getAndIncrementEpoch
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|thirdTimeEpoch
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppDeletion (RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testAppDeletion
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
operator|new
name|TestDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
name|appList
init|=
name|createAndStoreApps
argument_list|(
name|stateStoreHelper
argument_list|,
name|store
argument_list|,
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|RMApp
name|app
range|:
name|appList
control|)
block|{
comment|// remove the app
name|store
operator|.
name|removeApplication
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|// wait for app to be removed.
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|stateStoreHelper
operator|.
name|appExists
argument_list|(
name|app
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|createAndStoreApps ( RMStateStoreHelper stateStoreHelper, RMStateStore store, int numApps)
specifier|private
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
name|createAndStoreApps
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|,
name|RMStateStore
name|store
parameter_list|,
name|int
name|numApps
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
name|appList
init|=
operator|new
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numApps
condition|;
name|i
operator|++
control|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1383183338
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|storeApp
argument_list|(
name|store
argument_list|,
name|appId
argument_list|,
literal|123456789
argument_list|,
literal|987654321
argument_list|)
decl_stmt|;
name|appList
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numApps
argument_list|,
name|appList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RMApp
name|app
range|:
name|appList
control|)
block|{
comment|// wait for app to be stored.
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|stateStoreHelper
operator|.
name|appExists
argument_list|(
name|app
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|appList
return|;
block|}
DECL|method|testDeleteStore (RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testDeleteStore
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
name|appList
init|=
name|createAndStoreApps
argument_list|(
name|stateStoreHelper
argument_list|,
name|store
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|store
operator|.
name|deleteStore
argument_list|()
expr_stmt|;
comment|// verify apps deleted
for|for
control|(
name|RMApp
name|app
range|:
name|appList
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|stateStoreHelper
operator|.
name|appExists
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRemoveApplication (RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testRemoveApplication
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|int
name|noOfApps
init|=
literal|2
decl_stmt|;
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
name|appList
init|=
name|createAndStoreApps
argument_list|(
name|stateStoreHelper
argument_list|,
name|store
argument_list|,
name|noOfApps
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp1
init|=
name|appList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|store
operator|.
name|removeApplication
argument_list|(
name|rmApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|stateStoreHelper
operator|.
name|appExists
argument_list|(
name|rmApp1
argument_list|)
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp2
init|=
name|appList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stateStoreHelper
operator|.
name|appExists
argument_list|(
name|rmApp2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|modifyAppState ()
specifier|protected
name|void
name|modifyAppState
parameter_list|()
throws|throws
name|Exception
block|{    }
DECL|method|modifyRMDelegationTokenState ()
specifier|protected
name|void
name|modifyRMDelegationTokenState
parameter_list|()
throws|throws
name|Exception
block|{    }
DECL|method|testAMRMTokenSecretManagerStateStore ( RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testAMRMTokenSecretManagerStateStore
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Start testing"
argument_list|)
expr_stmt|;
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|AMRMTokenSecretManager
name|appTokenMgr
init|=
operator|new
name|AMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|//create and save the first masterkey
name|MasterKeyData
name|firstMasterKeyData
init|=
name|appTokenMgr
operator|.
name|createNewMasterKey
argument_list|()
decl_stmt|;
name|AMRMTokenSecretManagerState
name|state1
init|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|firstMasterKeyData
operator|.
name|getMasterKey
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeOrUpdateAMRMTokenSecretManager
argument_list|(
name|state1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// load state
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|state
operator|.
name|getAMRMTokenSecretManagerState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstMasterKeyData
operator|.
name|getMasterKey
argument_list|()
argument_list|,
name|state
operator|.
name|getAMRMTokenSecretManagerState
argument_list|()
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|state
operator|.
name|getAMRMTokenSecretManagerState
argument_list|()
operator|.
name|getNextMasterKey
argument_list|()
argument_list|)
expr_stmt|;
comment|//create and save the second masterkey
name|MasterKeyData
name|secondMasterKeyData
init|=
name|appTokenMgr
operator|.
name|createNewMasterKey
argument_list|()
decl_stmt|;
name|AMRMTokenSecretManagerState
name|state2
init|=
name|AMRMTokenSecretManagerState
operator|.
name|newInstance
argument_list|(
name|firstMasterKeyData
operator|.
name|getMasterKey
argument_list|()
argument_list|,
name|secondMasterKeyData
operator|.
name|getMasterKey
argument_list|()
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeOrUpdateAMRMTokenSecretManager
argument_list|(
name|state2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// load state
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|state_2
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|state_2
operator|.
name|getAMRMTokenSecretManagerState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|firstMasterKeyData
operator|.
name|getMasterKey
argument_list|()
argument_list|,
name|state_2
operator|.
name|getAMRMTokenSecretManagerState
argument_list|()
operator|.
name|getCurrentMasterKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|secondMasterKeyData
operator|.
name|getMasterKey
argument_list|()
argument_list|,
name|state_2
operator|.
name|getAMRMTokenSecretManagerState
argument_list|()
operator|.
name|getNextMasterKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-create the masterKeyData based on the recovered masterkey
comment|// should have the same secretKey
name|appTokenMgr
operator|.
name|recover
argument_list|(
name|state_2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appTokenMgr
operator|.
name|getCurrnetMasterKeyData
argument_list|()
operator|.
name|getSecretKey
argument_list|()
argument_list|,
name|firstMasterKeyData
operator|.
name|getSecretKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appTokenMgr
operator|.
name|getNextMasterKeyData
argument_list|()
operator|.
name|getSecretKey
argument_list|()
argument_list|,
name|secondMasterKeyData
operator|.
name|getSecretKey
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReservationStateStore ( RMStateStoreHelper stateStoreHelper)
specifier|public
name|void
name|testReservationStateStore
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ReservationId
name|r1
init|=
name|ReservationId
operator|.
name|newInstance
argument_list|(
name|ts
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|1
decl_stmt|;
name|int
index|[]
name|alloc
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
name|ResourceCalculator
name|res
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|minAlloc
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|hasGang
init|=
literal|true
decl_stmt|;
name|String
name|planName
init|=
literal|"dedicated"
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|ReservationSystemTestUtil
operator|.
name|createSimpleReservationDefinition
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|alloc
operator|.
name|length
operator|+
literal|1
argument_list|,
name|alloc
operator|.
name|length
argument_list|)
decl_stmt|;
name|ReservationAllocation
name|allocation
init|=
operator|new
name|InMemoryReservationAllocation
argument_list|(
name|r1
argument_list|,
name|rDef
argument_list|,
literal|"u3"
argument_list|,
name|planName
argument_list|,
literal|0
argument_list|,
literal|0
operator|+
name|alloc
operator|.
name|length
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|generateAllocation
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|,
name|alloc
argument_list|)
argument_list|,
name|res
argument_list|,
name|minAlloc
argument_list|,
name|hasGang
argument_list|)
decl_stmt|;
name|ReservationAllocationStateProto
name|allocationStateProto
init|=
name|ReservationSystemUtil
operator|.
name|buildStateProto
argument_list|(
name|allocation
argument_list|)
decl_stmt|;
name|assertAllocationStateEqual
argument_list|(
name|allocation
argument_list|,
name|allocationStateProto
argument_list|)
expr_stmt|;
comment|// 1. Load empty store and verify no errors
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ReservationId
argument_list|,
name|ReservationAllocationStateProto
argument_list|>
argument_list|>
name|reservationState
init|=
name|state
operator|.
name|getReservationState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservationState
argument_list|)
expr_stmt|;
comment|// 2. Store single reservation and verify
name|String
name|reservationIdName
init|=
name|r1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeNewReservation
argument_list|(
name|allocationStateProto
argument_list|,
name|planName
argument_list|,
name|reservationIdName
argument_list|)
expr_stmt|;
comment|// load state and verify new state
name|validateStoredReservation
argument_list|(
name|stateStoreHelper
argument_list|,
name|dispatcher
argument_list|,
name|rmContext
argument_list|,
name|r1
argument_list|,
name|planName
argument_list|,
name|allocation
argument_list|,
name|allocationStateProto
argument_list|)
expr_stmt|;
comment|// 3. update state test
name|alloc
operator|=
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
expr_stmt|;
name|hasGang
operator|=
literal|false
expr_stmt|;
name|allocation
operator|=
operator|new
name|InMemoryReservationAllocation
argument_list|(
name|r1
argument_list|,
name|rDef
argument_list|,
literal|"u3"
argument_list|,
name|planName
argument_list|,
literal|2
argument_list|,
literal|2
operator|+
name|alloc
operator|.
name|length
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|generateAllocation
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
name|alloc
argument_list|)
argument_list|,
name|res
argument_list|,
name|minAlloc
argument_list|,
name|hasGang
argument_list|)
expr_stmt|;
name|allocationStateProto
operator|=
name|ReservationSystemUtil
operator|.
name|buildStateProto
argument_list|(
name|allocation
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|removeReservation
argument_list|(
name|planName
argument_list|,
name|reservationIdName
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeNewReservation
argument_list|(
name|allocationStateProto
argument_list|,
name|planName
argument_list|,
name|reservationIdName
argument_list|)
expr_stmt|;
comment|// load state and verify updated reservation
name|validateStoredReservation
argument_list|(
name|stateStoreHelper
argument_list|,
name|dispatcher
argument_list|,
name|rmContext
argument_list|,
name|r1
argument_list|,
name|planName
argument_list|,
name|allocation
argument_list|,
name|allocationStateProto
argument_list|)
expr_stmt|;
comment|// 4. add a second one and remove the first one
name|ReservationId
name|r2
init|=
name|ReservationId
operator|.
name|newInstance
argument_list|(
name|ts
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ReservationAllocation
name|allocation2
init|=
operator|new
name|InMemoryReservationAllocation
argument_list|(
name|r2
argument_list|,
name|rDef
argument_list|,
literal|"u3"
argument_list|,
name|planName
argument_list|,
literal|0
argument_list|,
literal|0
operator|+
name|alloc
operator|.
name|length
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|generateAllocation
argument_list|(
literal|0L
argument_list|,
literal|1L
argument_list|,
name|alloc
argument_list|)
argument_list|,
name|res
argument_list|,
name|minAlloc
argument_list|,
name|hasGang
argument_list|)
decl_stmt|;
name|ReservationAllocationStateProto
name|allocationStateProto2
init|=
name|ReservationSystemUtil
operator|.
name|buildStateProto
argument_list|(
name|allocation2
argument_list|)
decl_stmt|;
name|String
name|reservationIdName2
init|=
name|r2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|storeNewReservation
argument_list|(
name|allocationStateProto2
argument_list|,
name|planName
argument_list|,
name|reservationIdName2
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|removeReservation
argument_list|(
name|planName
argument_list|,
name|reservationIdName
argument_list|)
expr_stmt|;
comment|// load state and verify r1 is removed and r2 is still there
name|Map
argument_list|<
name|ReservationId
argument_list|,
name|ReservationAllocationStateProto
argument_list|>
name|reservations
decl_stmt|;
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|state
operator|=
name|store
operator|.
name|loadState
argument_list|()
expr_stmt|;
name|reservationState
operator|=
name|state
operator|.
name|getReservationState
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservationState
argument_list|)
expr_stmt|;
name|reservations
operator|=
name|reservationState
operator|.
name|get
argument_list|(
name|planName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservations
argument_list|)
expr_stmt|;
name|ReservationAllocationStateProto
name|storedReservationAllocation
init|=
name|reservations
operator|.
name|get
argument_list|(
name|r1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Removed reservation should not be available in store"
argument_list|,
name|storedReservationAllocation
argument_list|)
expr_stmt|;
name|storedReservationAllocation
operator|=
name|reservations
operator|.
name|get
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertAllocationStateEqual
argument_list|(
name|allocationStateProto2
argument_list|,
name|storedReservationAllocation
argument_list|)
expr_stmt|;
name|assertAllocationStateEqual
argument_list|(
name|allocation2
argument_list|,
name|storedReservationAllocation
argument_list|)
expr_stmt|;
comment|// 5. remove last reservation removes the plan state
name|rmContext
operator|.
name|getStateStore
argument_list|()
operator|.
name|removeReservation
argument_list|(
name|planName
argument_list|,
name|reservationIdName2
argument_list|)
expr_stmt|;
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|state
operator|=
name|store
operator|.
name|loadState
argument_list|()
expr_stmt|;
name|reservationState
operator|=
name|state
operator|.
name|getReservationState
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservationState
argument_list|)
expr_stmt|;
name|reservations
operator|=
name|reservationState
operator|.
name|get
argument_list|(
name|planName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|reservations
argument_list|)
expr_stmt|;
block|}
DECL|method|validateStoredReservation ( RMStateStoreHelper stateStoreHelper, TestDispatcher dispatcher, RMContext rmContext, ReservationId r1, String planName, ReservationAllocation allocation, ReservationAllocationStateProto allocationStateProto)
specifier|private
name|void
name|validateStoredReservation
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|ReservationId
name|r1
parameter_list|,
name|String
name|planName
parameter_list|,
name|ReservationAllocation
name|allocation
parameter_list|,
name|ReservationAllocationStateProto
name|allocationStateProto
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|ReservationId
argument_list|,
name|ReservationAllocationStateProto
argument_list|>
argument_list|>
name|reservationState
init|=
name|state
operator|.
name|getReservationState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservationState
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ReservationId
argument_list|,
name|ReservationAllocationStateProto
argument_list|>
name|reservations
init|=
name|reservationState
operator|.
name|get
argument_list|(
name|planName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservations
argument_list|)
expr_stmt|;
name|ReservationAllocationStateProto
name|storedReservationAllocation
init|=
name|reservations
operator|.
name|get
argument_list|(
name|r1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|storedReservationAllocation
argument_list|)
expr_stmt|;
name|assertAllocationStateEqual
argument_list|(
name|allocationStateProto
argument_list|,
name|storedReservationAllocation
argument_list|)
expr_stmt|;
name|assertAllocationStateEqual
argument_list|(
name|allocation
argument_list|,
name|storedReservationAllocation
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAllocationStateEqual ( ReservationAllocationStateProto expected, ReservationAllocationStateProto actual)
name|void
name|assertAllocationStateEqual
parameter_list|(
name|ReservationAllocationStateProto
name|expected
parameter_list|,
name|ReservationAllocationStateProto
name|actual
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAcceptanceTimestamp
argument_list|()
argument_list|,
name|actual
operator|.
name|getAcceptanceTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getEndTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getContainsGangs
argument_list|()
argument_list|,
name|actual
operator|.
name|getContainsGangs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getUser
argument_list|()
argument_list|,
name|actual
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReservationDefinition
argument_list|()
argument_list|,
name|actual
operator|.
name|getReservationDefinition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAllocationRequestsList
argument_list|()
argument_list|,
name|actual
operator|.
name|getAllocationRequestsList
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAllocationStateEqual ( ReservationAllocation expected, ReservationAllocationStateProto actual)
name|void
name|assertAllocationStateEqual
parameter_list|(
name|ReservationAllocation
name|expected
parameter_list|,
name|ReservationAllocationStateProto
name|actual
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAcceptanceTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getAcceptanceTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getEndTime
argument_list|()
argument_list|,
name|actual
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|containsGangs
argument_list|()
argument_list|,
name|actual
operator|.
name|getContainsGangs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
operator|.
name|getUser
argument_list|()
argument_list|,
name|actual
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getReservationDefinition
argument_list|()
argument_list|,
name|ReservationSystemUtil
operator|.
name|convertFromProtoFormat
argument_list|(
name|actual
operator|.
name|getReservationDefinition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getAllocationRequests
argument_list|()
argument_list|,
name|ReservationSystemUtil
operator|.
name|toAllocations
argument_list|(
name|actual
operator|.
name|getAllocationRequestsList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

