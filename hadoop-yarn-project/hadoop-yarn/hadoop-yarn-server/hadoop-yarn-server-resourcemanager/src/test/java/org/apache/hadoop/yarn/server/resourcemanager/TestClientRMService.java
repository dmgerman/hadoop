begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ClientRMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestClientRMService
specifier|public
class|class
name|TestClientRMService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|dtsm
specifier|private
specifier|static
name|RMDelegationTokenSecretManager
name|dtsm
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupSecretManager ()
specifier|public
specifier|static
name|void
name|setupSecretManager
parameter_list|()
throws|throws
name|IOException
block|{
name|dtsm
operator|=
operator|new
name|RMDelegationTokenSecretManager
argument_list|(
literal|60000
argument_list|,
literal|60000
argument_list|,
literal|60000
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|dtsm
operator|.
name|startThreads
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownSecretManager ()
specifier|public
specifier|static
name|void
name|teardownSecretManager
parameter_list|()
block|{
if|if
condition|(
name|dtsm
operator|!=
literal|null
condition|)
block|{
name|dtsm
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetClusterNodes ()
specifier|public
name|void
name|testGetClusterNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
block|{
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|rmDTSecretManager
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Add a healthy node
name|MockNM
name|node
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host:1234"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Create a client.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmAddress
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|rmAddress
argument_list|)
expr_stmt|;
name|ClientRMProtocol
name|client
init|=
operator|(
name|ClientRMProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ClientRMProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Make call
name|GetClusterNodesRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetClusterNodesRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
name|client
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
operator|.
name|getNodeReports
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node is expected to be healthy!"
argument_list|,
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeHealthStatus
argument_list|()
operator|.
name|getIsNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now make the node unhealthy.
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Call again
name|nodeReports
operator|=
name|client
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Node is expected to be unhealthy!"
argument_list|,
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeHealthStatus
argument_list|()
operator|.
name|getIsNodeHealthy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationReport ()
specifier|public
name|void
name|testGetApplicationReport
parameter_list|()
throws|throws
name|YarnRemoteException
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetApplicationReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|GetApplicationReportResponse
name|applicationReport
init|=
name|rmService
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"It should return null as application report for absent application."
argument_list|,
name|applicationReport
operator|.
name|getApplicationReport
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfo ()
specifier|public
name|void
name|testGetQueueInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GetQueueInfoRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetQueueInfoRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setQueueName
argument_list|(
literal|"testqueue"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIncludeApplications
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GetQueueInfoResponse
name|queueInfo
init|=
name|rmService
operator|.
name|getQueueInfo
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applications
init|=
name|queueInfo
operator|.
name|getQueueInfo
argument_list|()
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|applications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setQueueName
argument_list|(
literal|"nonexistentqueue"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIncludeApplications
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// should not throw exception on nonexistent queue
name|queueInfo
operator|=
name|rmService
operator|.
name|getQueueInfo
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
DECL|field|owner
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|owner
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"owner"
argument_list|)
decl_stmt|;
DECL|field|other
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|other
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testTokenRenewalByOwner ()
specifier|public
name|void
name|testTokenRenewalByOwner
parameter_list|()
throws|throws
name|Exception
block|{
name|owner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|owner
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenRenewalWrongUser ()
specifier|public
name|void
name|testTokenRenewalWrongUser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|owner
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Client "
operator|+
name|owner
operator|.
name|getUserName
argument_list|()
operator|+
literal|" tries to renew a token with renewer specified as "
operator|+
name|other
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"renew should have failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenRenewalByLoginUser ()
specifier|public
name|void
name|testTokenRenewalByLoginUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|checkTokenRenewal
argument_list|(
name|owner
argument_list|,
name|other
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTokenRenewal (UserGroupInformation owner, UserGroupInformation renewer)
specifier|private
name|void
name|checkTokenRenewal
parameter_list|(
name|UserGroupInformation
name|owner
parameter_list|,
name|UserGroupInformation
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnRemoteException
block|{
name|RMDelegationTokenIdentifier
name|tokenIdentifier
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
name|owner
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
name|renewer
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|?
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|tokenIdentifier
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|DelegationToken
name|dToken
init|=
name|BuilderUtils
operator|.
name|newDelegationToken
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|token
operator|.
name|getKind
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|token
operator|.
name|getService
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|RenewDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RenewDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setDelegationToken
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dtsm
argument_list|)
decl_stmt|;
name|rmService
operator|.
name|renewDelegationToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|testAppSubmit ()
specifier|public
name|void
name|testAppSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mockYarnScheduler
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|RMStateStore
name|stateStore
init|=
name|mock
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|RMAppManager
name|appManager
init|=
operator|new
name|RMAppManager
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{}
block|}
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|appManager
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// without name and queue
name|ApplicationId
name|appId1
init|=
name|getApplicationId
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|SubmitApplicationRequest
name|submitRequest1
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
name|RMApp
name|app1
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app doesn't exist"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app name doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_NAME
argument_list|,
name|app1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app queue doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|,
name|app1
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// with name and queue
name|String
name|name
init|=
name|MockApps
operator|.
name|newAppName
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|MockApps
operator|.
name|newQueue
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|getApplicationId
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|SubmitApplicationRequest
name|submitRequest2
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId2
argument_list|,
name|name
argument_list|,
name|queue
argument_list|)
decl_stmt|;
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
name|RMApp
name|app2
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app doesn't exist"
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app name doesn't match"
argument_list|,
name|name
argument_list|,
name|app2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app queue doesn't match"
argument_list|,
name|queue
argument_list|,
name|app2
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// duplicate appId
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The thrown exception is not expected."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Cannot add a duplicate!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|4000
argument_list|)
DECL|method|testConcurrentAppSubmit ()
specifier|public
name|void
name|testConcurrentAppSubmit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|BrokenBarrierException
throws|,
name|YarnRemoteException
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mockYarnScheduler
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|RMStateStore
name|stateStore
init|=
name|mock
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|RMAppManager
name|appManager
init|=
operator|new
name|RMAppManager
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId1
init|=
name|getApplicationId
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId2
init|=
name|getApplicationId
argument_list|(
literal|101
argument_list|)
decl_stmt|;
specifier|final
name|SubmitApplicationRequest
name|submitRequest1
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|SubmitApplicationRequest
name|submitRequest2
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|startBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|endBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|eventHandler
init|=
operator|new
name|EventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|rawEvent
parameter_list|)
block|{
if|if
condition|(
name|rawEvent
operator|instanceof
name|RMAppEvent
condition|)
block|{
name|RMAppEvent
name|event
init|=
operator|(
name|RMAppEvent
operator|)
name|rawEvent
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId1
argument_list|)
condition|)
block|{
try|try
block|{
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|endBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Broken Barrier"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while awaiting barriers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
specifier|final
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|appManager
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// submit an app and wait for it to block while in app submission
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit another app, so go through while the first app is blocked
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest2
argument_list|)
expr_stmt|;
name|endBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|mockSubmitAppRequest (ApplicationId appId, String name, String queue)
specifier|private
name|SubmitApplicationRequest
name|mockSubmitAppRequest
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|String
name|user
init|=
name|MockApps
operator|.
name|newUserName
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|amContainerSpec
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|submissionContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainerSpec
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|SubmitApplicationRequest
name|submitRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|submitRequest
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|submissionContext
argument_list|)
expr_stmt|;
return|return
name|submitRequest
return|;
block|}
DECL|method|mockRMContext (YarnScheduler yarnScheduler, RMContext rmContext)
specifier|private
name|void
name|mockRMContext
parameter_list|(
name|YarnScheduler
name|yarnScheduler
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Dispatcher
name|dispatcher
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|QueueInfo
name|queInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|queInfo
operator|.
name|setQueueName
argument_list|(
literal|"testqueue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getQueueInfo
argument_list|(
name|eq
argument_list|(
literal|"testqueue"
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getQueueInfo
argument_list|(
name|eq
argument_list|(
literal|"nonexistentqueue"
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"queue does not exist"
argument_list|)
argument_list|)
expr_stmt|;
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|getRMApps
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|apps
argument_list|)
expr_stmt|;
block|}
DECL|method|getRMApps ( RMContext rmContext, YarnScheduler yarnScheduler)
specifier|private
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|getRMApps
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|yarnScheduler
parameter_list|)
block|{
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId1
init|=
name|getApplicationId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId2
init|=
name|getApplicationId
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId3
init|=
name|getApplicationId
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|applicationId1
argument_list|,
name|getRMApp
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|applicationId1
argument_list|,
name|config
argument_list|,
literal|"testqueue"
argument_list|)
argument_list|)
expr_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|applicationId2
argument_list|,
name|getRMApp
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|applicationId2
argument_list|,
name|config
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|applicationId3
argument_list|,
name|getRMApp
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|applicationId3
argument_list|,
name|config
argument_list|,
literal|"testqueue"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|apps
return|;
block|}
DECL|method|getApplicationId (int id)
specifier|private
name|ApplicationId
name|getApplicationId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|applicationId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|applicationId
operator|.
name|setClusterTimestamp
argument_list|(
literal|123456
argument_list|)
expr_stmt|;
name|applicationId
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|applicationId
return|;
block|}
DECL|method|getRMApp (RMContext rmContext, YarnScheduler yarnScheduler, ApplicationId applicationId3, YarnConfiguration config, String queueName)
specifier|private
name|RMAppImpl
name|getRMApp
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|yarnScheduler
parameter_list|,
name|ApplicationId
name|applicationId3
parameter_list|,
name|YarnConfiguration
name|config
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|asContext
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|asContext
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
operator|new
name|RMAppImpl
argument_list|(
name|applicationId3
argument_list|,
name|rmContext
argument_list|,
name|config
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|queueName
argument_list|,
name|asContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mockYarnScheduler ()
specifier|private
specifier|static
name|YarnScheduler
name|mockYarnScheduler
parameter_list|()
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|yarnScheduler
return|;
block|}
block|}
end_class

end_unit

