begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ApplicationsRequestScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationAttemptsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainerReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetContainersResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetLabelsToNodesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNodesToLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetQueueInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|MoveApplicationAcrossQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateApplicationPriorityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ahs
operator|.
name|RMApplicationHistoryWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSystemTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerAppReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|timelineservice
operator|.
name|RMTimelineCollectorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|UTCClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestClientRMService
specifier|public
class|class
name|TestClientRMService
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestClientRMService
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|appType
specifier|private
name|String
name|appType
init|=
literal|"MockApp"
decl_stmt|;
DECL|field|QUEUE_1
specifier|private
specifier|final
specifier|static
name|String
name|QUEUE_1
init|=
literal|"Q-1"
decl_stmt|;
DECL|field|QUEUE_2
specifier|private
specifier|final
specifier|static
name|String
name|QUEUE_2
init|=
literal|"Q-2"
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetClusterNodes ()
specifier|public
name|void
name|testGetClusterNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
block|{
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMNodeLabelsManager
name|labelsMgr
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|labelsMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a healthy node with label = x
name|MockNM
name|node
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|labelsMgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Add and lose a node with label = y
name|MockNM
name|lostNode
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host2:1235"
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|rm
operator|.
name|sendNodeStarted
argument_list|(
name|lostNode
argument_list|)
expr_stmt|;
name|lostNode
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|lostNode
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|sendNodeLost
argument_list|(
name|lostNode
argument_list|)
expr_stmt|;
comment|// Create a client.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmAddress
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|rmAddress
argument_list|)
expr_stmt|;
name|ApplicationClientProtocol
name|client
init|=
operator|(
name|ApplicationClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Make call
name|GetClusterNodesRequest
name|request
init|=
name|GetClusterNodesRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
name|client
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
operator|.
name|getNodeReports
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotSame
argument_list|(
literal|"Node is expected to be healthy!"
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check node's label = x
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now make the node unhealthy.
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
expr_stmt|;
comment|// Call again
name|nodeReports
operator|=
name|client
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unhealthy nodes should not show up by default"
argument_list|,
literal|0
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change label of host1 to y
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|labelsMgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// Now query for UNHEALTHY nodes
name|request
operator|=
name|GetClusterNodesRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|NodeState
operator|.
name|UNHEALTHY
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|=
name|client
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node is expected to be unhealthy!"
argument_list|,
name|NodeState
operator|.
name|UNHEALTHY
argument_list|,
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeReports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove labels of host1
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|labelsMgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// Query all states should return all nodes
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host3:1236"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|request
operator|=
name|GetClusterNodesRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|nodeReports
operator|=
name|client
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
operator|.
name|getNodeReports
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// All host1-3's label should be empty (instead of null)
for|for
control|(
name|NodeReport
name|report
range|:
name|nodeReports
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|report
operator|.
name|getNodeLabels
argument_list|()
operator|!=
literal|null
operator|&&
name|report
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rpc
operator|.
name|stopProxy
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonExistingApplicationReport ()
specifier|public
name|void
name|testNonExistingApplicationReport
parameter_list|()
throws|throws
name|YarnException
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetApplicationReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rmService
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Application with id '"
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
operator|+
literal|"' doesn't exist in RM."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetApplicationReport ()
specifier|public
name|void
name|testGetApplicationReport
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId1
init|=
name|getApplicationId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ApplicationACLsManager
name|mockAclsManager
init|=
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAclsManager
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|null
argument_list|,
name|appId1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mockAclsManager
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetApplicationReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appId1
argument_list|)
expr_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|rmService
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|response
operator|.
name|getApplicationReport
argument_list|()
decl_stmt|;
name|ApplicationResourceUsageReport
name|usageReport
init|=
name|report
operator|.
name|getApplicationResourceUsageReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|usageReport
operator|.
name|getMemorySeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|usageReport
operator|.
name|getVcoreSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<Not set>"
argument_list|,
name|report
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<Not set>"
argument_list|,
name|report
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
comment|// if application has am node label set to blank
name|ApplicationId
name|appId2
init|=
name|getApplicationId
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAclsManager
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|null
argument_list|,
name|appId2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appId2
argument_list|)
expr_stmt|;
name|response
operator|=
name|rmService
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|report
operator|=
name|response
operator|.
name|getApplicationReport
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeLabel
operator|.
name|DEFAULT_NODE_LABEL_PARTITION
argument_list|,
name|report
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeLabel
operator|.
name|NODE_LABEL_EXPRESSION_NOT_SET
argument_list|,
name|report
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
comment|// if application has am node label set to blank
name|ApplicationId
name|appId3
init|=
name|getApplicationId
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAclsManager
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|null
argument_list|,
name|appId3
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|appId3
argument_list|)
expr_stmt|;
name|response
operator|=
name|rmService
operator|.
name|getApplicationReport
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|report
operator|=
name|response
operator|.
name|getApplicationReport
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"high-mem"
argument_list|,
name|report
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"high-mem"
argument_list|,
name|report
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
comment|// if application id is null
name|GetApplicationReportRequest
name|invalidRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|invalidRequest
operator|.
name|setApplicationId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|rmService
operator|.
name|getApplicationReport
argument_list|(
name|invalidRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// rmService should return a ApplicationNotFoundException
comment|// when a null application id is provided
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|ApplicationNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rmService
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttemptReport ()
specifier|public
name|void
name|testGetApplicationAttemptReport
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ClientRMService
name|rmService
init|=
name|createRMService
argument_list|()
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetApplicationAttemptReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationAttemptReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
try|try
block|{
name|GetApplicationAttemptReportResponse
name|response
init|=
name|rmService
operator|.
name|getApplicationAttemptReport
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attemptId
argument_list|,
name|response
operator|.
name|getApplicationAttemptReport
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetApplicationResourceUsageReportDummy ()
specifier|public
name|void
name|testGetApplicationResourceUsageReportDummy
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|getApplicationAttemptId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|YarnScheduler
name|yarnScheduler
init|=
name|mockYarnScheduler
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|asContext
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|RMAppAttemptImpl
name|rmAppAttemptImpl
init|=
operator|new
name|RMAppAttemptImpl
argument_list|(
name|attemptId
argument_list|,
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|asContext
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationResourceUsageReport
name|report
init|=
name|rmAppAttemptImpl
operator|.
name|getApplicationResourceUsageReport
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|report
argument_list|,
name|RMServerUtils
operator|.
name|DUMMY_APPLICATION_RESOURCE_USAGE_REPORT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplicationAttempts ()
specifier|public
name|void
name|testGetApplicationAttempts
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ClientRMService
name|rmService
init|=
name|createRMService
argument_list|()
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetApplicationAttemptsRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetApplicationAttemptsRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationId
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|GetApplicationAttemptsResponse
name|response
init|=
name|rmService
operator|.
name|getApplicationAttempts
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getApplicationAttemptList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attemptId
argument_list|,
name|response
operator|.
name|getApplicationAttemptList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetContainerReport ()
specifier|public
name|void
name|testGetContainerReport
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ClientRMService
name|rmService
init|=
name|createRMService
argument_list|()
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetContainerReportRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainerReportRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|request
operator|.
name|setContainerId
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
try|try
block|{
name|GetContainerReportResponse
name|response
init|=
name|rmService
operator|.
name|getContainerReport
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
argument_list|,
name|response
operator|.
name|getContainerReport
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetContainers ()
specifier|public
name|void
name|testGetContainers
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ClientRMService
name|rmService
init|=
name|createRMService
argument_list|()
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|GetContainersRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetContainersRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|request
operator|.
name|setApplicationAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
try|try
block|{
name|GetContainersResponse
name|response
init|=
name|rmService
operator|.
name|getContainers
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
argument_list|,
name|response
operator|.
name|getContainerList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createRMService ()
specifier|public
name|ClientRMService
name|createRMService
parameter_list|()
throws|throws
name|IOException
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mockYarnScheduler
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|getRMApps
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|apps
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
name|RMAppManager
name|appManager
init|=
operator|new
name|RMAppManager
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
name|ApplicationACLsManager
name|mockAclsManager
init|=
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueueACLsManager
name|mockQueueACLsManager
init|=
name|mock
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockQueueACLsManager
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|QueueACL
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|appManager
argument_list|,
name|mockAclsManager
argument_list|,
name|mockQueueACLsManager
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testForceKillNonExistingApplication ()
specifier|public
name|void
name|testForceKillNonExistingApplication
parameter_list|()
throws|throws
name|YarnException
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|KillApplicationRequest
name|request
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
try|try
block|{
name|rmService
operator|.
name|forceKillApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Trying to kill an absent "
operator|+
literal|"application "
operator|+
name|request
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testForceKillApplication ()
specifier|public
name|void
name|testForceKillApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MockRM
operator|.
name|ENABLE_WEBAPP
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|ClientRMService
name|rmService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|GetApplicationsRequest
name|getRequest
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
argument_list|)
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of apps in the RM"
argument_list|,
literal|0
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KillApplicationRequest
name|killRequest1
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|diagnostic
init|=
literal|"message1"
decl_stmt|;
name|killRequest1
operator|.
name|setDiagnostics
argument_list|(
name|diagnostic
argument_list|)
expr_stmt|;
name|KillApplicationRequest
name|killRequest2
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|killAttemptCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|KillApplicationResponse
name|killResponse1
init|=
name|rmService
operator|.
name|forceKillApplication
argument_list|(
name|killRequest1
argument_list|)
decl_stmt|;
name|killAttemptCount
operator|++
expr_stmt|;
if|if
condition|(
name|killResponse1
operator|.
name|getIsKillCompleted
argument_list|()
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Kill attempt count should be greater than 1 for managed AMs"
argument_list|,
name|killAttemptCount
operator|>
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of apps in the RM"
argument_list|,
literal|1
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Diagnostic message is incorrect"
argument_list|,
name|app1
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|diagnostic
argument_list|)
argument_list|)
expr_stmt|;
name|KillApplicationResponse
name|killResponse2
init|=
name|rmService
operator|.
name|forceKillApplication
argument_list|(
name|killRequest2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Killing UnmanagedAM should falsely acknowledge true"
argument_list|,
name|killResponse2
operator|.
name|getIsKillCompleted
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|2
operator|==
name|rmService
operator|.
name|getApplications
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Incorrect number of apps in the RM"
argument_list|,
literal|2
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|getRequest
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ApplicationNotFoundException
operator|.
name|class
argument_list|)
DECL|method|testMoveAbsentApplication ()
specifier|public
name|void
name|testMoveAbsentApplication
parameter_list|()
throws|throws
name|YarnException
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|MoveApplicationAcrossQueuesRequest
name|request
init|=
name|MoveApplicationAcrossQueuesRequest
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|"newqueue"
argument_list|)
decl_stmt|;
name|rmService
operator|.
name|moveApplicationAcrossQueues
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetQueueInfo ()
specifier|public
name|void
name|testGetQueueInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|ApplicationACLsManager
name|mockAclsManager
init|=
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueueACLsManager
name|mockQueueACLsManager
init|=
name|mock
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockQueueACLsManager
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|QueueACL
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAclsManager
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ApplicationAccessType
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mockAclsManager
argument_list|,
name|mockQueueACLsManager
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|GetQueueInfoRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|GetQueueInfoRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setQueueName
argument_list|(
literal|"testqueue"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIncludeApplications
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GetQueueInfoResponse
name|queueInfo
init|=
name|rmService
operator|.
name|getQueueInfo
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applications
init|=
name|queueInfo
operator|.
name|getQueueInfo
argument_list|()
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|applications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setQueueName
argument_list|(
literal|"nonexistentqueue"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIncludeApplications
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// should not throw exception on nonexistent queue
name|queueInfo
operator|=
name|rmService
operator|.
name|getQueueInfo
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Case where user does not have application access
name|ApplicationACLsManager
name|mockAclsManager1
init|=
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueueACLsManager
name|mockQueueACLsManager1
init|=
name|mock
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockQueueACLsManager1
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|QueueACL
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAclsManager1
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ApplicationAccessType
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|,
name|any
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService1
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mockAclsManager1
argument_list|,
name|mockQueueACLsManager1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|setQueueName
argument_list|(
literal|"testqueue"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setIncludeApplications
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|GetQueueInfoResponse
name|queueInfo1
init|=
name|rmService1
operator|.
name|getQueueInfo
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|applications1
init|=
name|queueInfo1
operator|.
name|getQueueInfo
argument_list|()
operator|.
name|getApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applications1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|testAppSubmit ()
specifier|public
name|void
name|testAppSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mockYarnScheduler
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|RMStateStore
name|stateStore
init|=
name|mock
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|RMAppManager
name|appManager
init|=
operator|new
name|RMAppManager
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{}
block|}
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|mock
argument_list|(
name|RMTimelineCollectorManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|rmContext
argument_list|)
operator|.
name|getRMTimelineCollectorManager
argument_list|()
expr_stmt|;
name|ApplicationId
name|appId1
init|=
name|getApplicationId
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|ApplicationACLsManager
name|mockAclsManager
init|=
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAclsManager
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|null
argument_list|,
name|appId1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QueueACLsManager
name|mockQueueACLsManager
init|=
name|mock
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockQueueACLsManager
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|QueueACL
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|appManager
argument_list|,
name|mockAclsManager
argument_list|,
name|mockQueueACLsManager
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
comment|// without name and queue
name|SubmitApplicationRequest
name|submitRequest1
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
name|RMApp
name|app1
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app doesn't exist"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app name doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_APPLICATION_NAME
argument_list|,
name|app1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app queue doesn't match"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|,
name|app1
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// with name and queue
name|String
name|name
init|=
name|MockApps
operator|.
name|newAppName
argument_list|()
decl_stmt|;
name|String
name|queue
init|=
name|MockApps
operator|.
name|newQueue
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId2
init|=
name|getApplicationId
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|SubmitApplicationRequest
name|submitRequest2
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId2
argument_list|,
name|name
argument_list|,
name|queue
argument_list|)
decl_stmt|;
name|submitRequest2
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|setApplicationType
argument_list|(
literal|"matchType"
argument_list|)
expr_stmt|;
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
name|RMApp
name|app2
init|=
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app doesn't exist"
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app name doesn't match"
argument_list|,
name|name
argument_list|,
name|app2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"app queue doesn't match"
argument_list|,
name|queue
argument_list|,
name|app2
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// duplicate appId
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception is not expected."
argument_list|)
expr_stmt|;
block|}
name|GetApplicationsRequest
name|getAllAppsRequest
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|GetApplicationsResponse
name|getAllApplicationsResponse
init|=
name|rmService
operator|.
name|getApplications
argument_list|(
name|getAllAppsRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getAllApplicationsResponse
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appTypes
operator|.
name|add
argument_list|(
literal|"matchType"
argument_list|)
expr_stmt|;
name|getAllAppsRequest
operator|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|appTypes
argument_list|)
expr_stmt|;
name|getAllApplicationsResponse
operator|=
name|rmService
operator|.
name|getApplications
argument_list|(
name|getAllAppsRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getAllApplicationsResponse
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appId2
argument_list|,
name|getAllApplicationsResponse
operator|.
name|getApplicationList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetApplications ()
specifier|public
name|void
name|testGetApplications
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|/**      * 1. Submit 3 applications alternately in two queues      * 2. Test each of the filters      */
comment|// Basic setup
name|YarnScheduler
name|yarnScheduler
init|=
name|mockYarnScheduler
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|RMStateStore
name|stateStore
init|=
name|mock
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|mock
argument_list|(
name|RMTimelineCollectorManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|rmContext
argument_list|)
operator|.
name|getRMTimelineCollectorManager
argument_list|()
expr_stmt|;
name|RMAppManager
name|appManager
init|=
operator|new
name|RMAppManager
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|<
name|Event
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{}
block|}
argument_list|)
expr_stmt|;
name|ApplicationACLsManager
name|mockAclsManager
init|=
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|QueueACLsManager
name|mockQueueACLsManager
init|=
name|mock
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockQueueACLsManager
operator|.
name|checkAccess
argument_list|(
name|any
argument_list|(
name|UserGroupInformation
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|QueueACL
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|appManager
argument_list|,
name|mockAclsManager
argument_list|,
name|mockQueueACLsManager
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize appnames and queues
name|String
index|[]
name|queues
init|=
block|{
name|QUEUE_1
block|,
name|QUEUE_2
block|}
decl_stmt|;
name|String
index|[]
name|appNames
init|=
block|{
name|MockApps
operator|.
name|newAppName
argument_list|()
block|,
name|MockApps
operator|.
name|newAppName
argument_list|()
block|,
name|MockApps
operator|.
name|newAppName
argument_list|()
block|}
decl_stmt|;
name|ApplicationId
index|[]
name|appIds
init|=
block|{
name|getApplicationId
argument_list|(
literal|101
argument_list|)
block|,
name|getApplicationId
argument_list|(
literal|102
argument_list|)
block|,
name|getApplicationId
argument_list|(
literal|103
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tags
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Tag1"
argument_list|,
literal|"Tag2"
argument_list|,
literal|"Tag3"
argument_list|)
decl_stmt|;
name|long
index|[]
name|submitTimeMillis
init|=
operator|new
name|long
index|[
literal|3
index|]
decl_stmt|;
comment|// Submit applications
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|appIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ApplicationId
name|appId
init|=
name|appIds
index|[
name|i
index|]
decl_stmt|;
name|when
argument_list|(
name|mockAclsManager
operator|.
name|checkAccess
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|null
argument_list|,
name|appId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SubmitApplicationRequest
name|submitRequest
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId
argument_list|,
name|appNames
index|[
name|i
index|]
argument_list|,
name|queues
index|[
name|i
operator|%
name|queues
operator|.
name|length
index|]
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|tags
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest
argument_list|)
expr_stmt|;
name|submitTimeMillis
index|[
name|i
index|]
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|// Test different cases of ClientRMService#getApplications()
name|GetApplicationsRequest
name|request
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect total number of apps"
argument_list|,
literal|6
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check limit
name|request
operator|.
name|setLimit
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Failed to limit applications"
argument_list|,
literal|1
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check start range
name|request
operator|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|request
operator|.
name|setStartRange
argument_list|(
name|submitTimeMillis
index|[
literal|0
index|]
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 applications are submitted after first timeMills
name|assertEquals
argument_list|(
literal|"Incorrect number of matching start range"
argument_list|,
literal|2
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 application is submitted after the second timeMills
name|request
operator|.
name|setStartRange
argument_list|(
name|submitTimeMillis
index|[
literal|1
index|]
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of matching start range"
argument_list|,
literal|1
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// no application is submitted after the third timeMills
name|request
operator|.
name|setStartRange
argument_list|(
name|submitTimeMillis
index|[
literal|2
index|]
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of matching start range"
argument_list|,
literal|0
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check queue
name|request
operator|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queueSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQueues
argument_list|(
name|queueSet
argument_list|)
expr_stmt|;
name|queueSet
operator|.
name|add
argument_list|(
name|queues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of applications in queue"
argument_list|,
literal|2
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of applications in queue"
argument_list|,
literal|2
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|,
literal|false
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queueSet
operator|.
name|add
argument_list|(
name|queues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of applications in queue"
argument_list|,
literal|3
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check user
name|request
operator|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|userSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|request
operator|.
name|setUsers
argument_list|(
name|userSet
argument_list|)
expr_stmt|;
name|userSet
operator|.
name|add
argument_list|(
literal|"random-user-name"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of applications for user"
argument_list|,
literal|0
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|userSet
operator|.
name|add
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of applications for user"
argument_list|,
literal|3
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check tags
name|request
operator|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|ApplicationsRequestScope
operator|.
name|ALL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tagSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|request
operator|.
name|setApplicationTags
argument_list|(
name|tagSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of matching tags"
argument_list|,
literal|6
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tagSet
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApplicationTags
argument_list|(
name|tagSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of matching tags"
argument_list|,
literal|3
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tagSet
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tags
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApplicationTags
argument_list|(
name|tagSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of matching tags"
argument_list|,
literal|2
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tagSet
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tags
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setApplicationTags
argument_list|(
name|tagSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of matching tags"
argument_list|,
literal|1
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check scope
name|request
operator|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|ApplicationsRequestScope
operator|.
name|VIEWABLE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of applications for the scope"
argument_list|,
literal|6
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|ApplicationsRequestScope
operator|.
name|OWN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of applications for the scope"
argument_list|,
literal|3
argument_list|,
name|rmService
operator|.
name|getApplications
argument_list|(
name|request
argument_list|)
operator|.
name|getApplicationList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|4000
argument_list|)
DECL|method|testConcurrentAppSubmit ()
specifier|public
name|void
name|testConcurrentAppSubmit
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|BrokenBarrierException
throws|,
name|YarnException
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mockYarnScheduler
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|mockRMContext
argument_list|(
name|yarnScheduler
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|RMStateStore
name|stateStore
init|=
name|mock
argument_list|(
name|RMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stateStore
argument_list|)
expr_stmt|;
name|RMAppManager
name|appManager
init|=
operator|new
name|RMAppManager
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|mock
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId1
init|=
name|getApplicationId
argument_list|(
literal|100
argument_list|)
decl_stmt|;
specifier|final
name|ApplicationId
name|appId2
init|=
name|getApplicationId
argument_list|(
literal|101
argument_list|)
decl_stmt|;
specifier|final
name|SubmitApplicationRequest
name|submitRequest1
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|SubmitApplicationRequest
name|submitRequest2
init|=
name|mockSubmitAppRequest
argument_list|(
name|appId2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|startBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|endBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|EventHandler
name|eventHandler
init|=
operator|new
name|EventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|rawEvent
parameter_list|)
block|{
if|if
condition|(
name|rawEvent
operator|instanceof
name|RMAppEvent
condition|)
block|{
name|RMAppEvent
name|event
init|=
operator|(
name|RMAppEvent
operator|)
name|rawEvent
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId1
argument_list|)
condition|)
block|{
try|try
block|{
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|endBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Broken Barrier"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while awaiting barriers"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
name|mock
argument_list|(
name|RMTimelineCollectorManager
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|rmContext
argument_list|)
operator|.
name|getRMTimelineCollectorManager
argument_list|()
expr_stmt|;
specifier|final
name|ClientRMService
name|rmService
init|=
operator|new
name|ClientRMService
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|appManager
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmService
operator|.
name|init
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit an app and wait for it to block while in app submission
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
decl||
name|IOException
name|e
parameter_list|)
block|{}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit another app, so go through while the first app is blocked
name|startBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|rmService
operator|.
name|submitApplication
argument_list|(
name|submitRequest2
argument_list|)
expr_stmt|;
name|endBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
DECL|method|mockSubmitAppRequest (ApplicationId appId, String name, String queue)
specifier|private
name|SubmitApplicationRequest
name|mockSubmitAppRequest
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
return|return
name|mockSubmitAppRequest
argument_list|(
name|appId
argument_list|,
name|name
argument_list|,
name|queue
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|mockSubmitAppRequest (ApplicationId appId, String name, String queue, Set<String> tags)
specifier|private
name|SubmitApplicationRequest
name|mockSubmitAppRequest
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|queue
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|mockSubmitAppRequest
argument_list|(
name|appId
argument_list|,
name|name
argument_list|,
name|queue
argument_list|,
name|tags
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
DECL|method|mockSubmitAppRequest (ApplicationId appId, String name, String queue, Set<String> tags, boolean unmanaged)
specifier|private
name|SubmitApplicationRequest
name|mockSubmitAppRequest
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|queue
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|,
name|boolean
name|unmanaged
parameter_list|)
block|{
name|ContainerLaunchContext
name|amContainerSpec
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|submissionContext
operator|.
name|setAMContainerSpec
argument_list|(
name|amContainerSpec
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationType
argument_list|(
name|appType
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setApplicationTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setUnmanagedAM
argument_list|(
name|unmanaged
argument_list|)
expr_stmt|;
name|SubmitApplicationRequest
name|submitRequest
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|submitRequest
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|submissionContext
argument_list|)
expr_stmt|;
return|return
name|submitRequest
return|;
block|}
DECL|method|mockRMContext (YarnScheduler yarnScheduler, RMContext rmContext)
specifier|private
name|void
name|mockRMContext
parameter_list|(
name|YarnScheduler
name|yarnScheduler
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Dispatcher
name|dispatcher
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|EventHandler
name|eventHandler
init|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|dispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|eventHandler
argument_list|)
expr_stmt|;
name|QueueInfo
name|queInfo
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|QueueInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|queInfo
operator|.
name|setQueueName
argument_list|(
literal|"testqueue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getQueueInfo
argument_list|(
name|eq
argument_list|(
literal|"testqueue"
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queInfo
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getQueueInfo
argument_list|(
name|eq
argument_list|(
literal|"nonexistentqueue"
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"queue does not exist"
argument_list|)
argument_list|)
expr_stmt|;
name|RMApplicationHistoryWriter
name|writer
init|=
name|mock
argument_list|(
name|RMApplicationHistoryWriter
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApplicationHistoryWriter
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|SystemMetricsPublisher
name|publisher
init|=
name|mock
argument_list|(
name|SystemMetricsPublisher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getSystemMetricsPublisher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
name|getRMApps
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|apps
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getAppsInQueue
argument_list|(
name|eq
argument_list|(
literal|"testqueue"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getSchedulerApps
argument_list|(
name|apps
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|rs
init|=
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
DECL|method|getRMApps ( RMContext rmContext, YarnScheduler yarnScheduler)
specifier|private
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|getRMApps
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|yarnScheduler
parameter_list|)
block|{
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationId
name|applicationId1
init|=
name|getApplicationId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId2
init|=
name|getApplicationId
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId3
init|=
name|getApplicationId
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|config
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|applicationId1
argument_list|,
name|getRMApp
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|applicationId1
argument_list|,
name|config
argument_list|,
literal|"testqueue"
argument_list|,
literal|10
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|applicationId2
argument_list|,
name|getRMApp
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|applicationId2
argument_list|,
name|config
argument_list|,
literal|"a"
argument_list|,
literal|20
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|apps
operator|.
name|put
argument_list|(
name|applicationId3
argument_list|,
name|getRMApp
argument_list|(
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
name|applicationId3
argument_list|,
name|config
argument_list|,
literal|"testqueue"
argument_list|,
literal|40
argument_list|,
literal|5
argument_list|,
literal|"high-mem"
argument_list|,
literal|"high-mem"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|apps
return|;
block|}
DECL|method|getSchedulerApps ( Map<ApplicationId, RMApp> apps)
specifier|private
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|getSchedulerApps
parameter_list|(
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|apps
parameter_list|)
block|{
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|schedApps
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationAttemptId
argument_list|>
argument_list|()
decl_stmt|;
comment|// Return app IDs for the apps in testqueue (as defined in getRMApps)
name|schedApps
operator|.
name|add
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|getApplicationId
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|schedApps
operator|.
name|add
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|getApplicationId
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|schedApps
return|;
block|}
DECL|method|getApplicationId (int id)
specifier|private
specifier|static
name|ApplicationId
name|getApplicationId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|getApplicationAttemptId (int id)
specifier|private
specifier|static
name|ApplicationAttemptId
name|getApplicationAttemptId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
return|return
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|getApplicationId
argument_list|(
name|id
argument_list|)
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|getRMApp (RMContext rmContext, YarnScheduler yarnScheduler, ApplicationId applicationId3, YarnConfiguration config, String queueName, final long memorySeconds, final long vcoreSeconds, String appNodeLabelExpression, String amNodeLabelExpression)
specifier|private
name|RMAppImpl
name|getRMApp
parameter_list|(
name|RMContext
name|rmContext
parameter_list|,
name|YarnScheduler
name|yarnScheduler
parameter_list|,
name|ApplicationId
name|applicationId3
parameter_list|,
name|YarnConfiguration
name|config
parameter_list|,
name|String
name|queueName
parameter_list|,
specifier|final
name|long
name|memorySeconds
parameter_list|,
specifier|final
name|long
name|vcoreSeconds
parameter_list|,
name|String
name|appNodeLabelExpression
parameter_list|,
name|String
name|amNodeLabelExpression
parameter_list|)
block|{
name|ApplicationSubmissionContext
name|asContext
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|asContext
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|asContext
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appNodeLabelExpression
argument_list|)
expr_stmt|;
name|RMAppImpl
name|app
init|=
name|spy
argument_list|(
operator|new
name|RMAppImpl
argument_list|(
name|applicationId3
argument_list|,
name|rmContext
argument_list|,
name|config
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|queueName
argument_list|,
name|asContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|,
name|BuilderUtils
operator|.
name|newResourceRequest
argument_list|(
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ApplicationReport
name|createAndGetApplicationReport
parameter_list|(
name|String
name|clientUserName
parameter_list|,
name|boolean
name|allowAccess
parameter_list|)
block|{
name|ApplicationReport
name|report
init|=
name|super
operator|.
name|createAndGetApplicationReport
argument_list|(
name|clientUserName
argument_list|,
name|allowAccess
argument_list|)
decl_stmt|;
name|ApplicationResourceUsageReport
name|usageReport
init|=
name|report
operator|.
name|getApplicationResourceUsageReport
argument_list|()
decl_stmt|;
name|usageReport
operator|.
name|setMemorySeconds
argument_list|(
name|memorySeconds
argument_list|)
expr_stmt|;
name|usageReport
operator|.
name|setVcoreSeconds
argument_list|(
name|vcoreSeconds
argument_list|)
expr_stmt|;
name|report
operator|.
name|setApplicationResourceUsageReport
argument_list|(
name|usageReport
argument_list|)
expr_stmt|;
return|return
name|report
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|app
operator|.
name|getAMResourceRequest
argument_list|()
operator|.
name|setNodeLabelExpression
argument_list|(
name|amNodeLabelExpression
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMAppAttemptImpl
name|rmAppAttemptImpl
init|=
name|spy
argument_list|(
operator|new
name|RMAppAttemptImpl
argument_list|(
name|attemptId
argument_list|,
name|rmContext
argument_list|,
name|yarnScheduler
argument_list|,
literal|null
argument_list|,
name|asContext
argument_list|,
name|config
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMContainerImpl
name|containerimpl
init|=
name|spy
argument_list|(
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|attemptId
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
argument_list|()
decl_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|rmAppAttemptImpl
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmAppAttemptImpl
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmAppAttemptImpl
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|rs
init|=
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|any
argument_list|(
name|ContainerId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerimpl
argument_list|)
expr_stmt|;
name|SchedulerAppReport
name|sAppReport
init|=
name|mock
argument_list|(
name|SchedulerAppReport
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerAppInfo
argument_list|(
name|any
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sAppReport
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|rmContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|rmContainers
operator|.
name|add
argument_list|(
name|containerimpl
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerAppInfo
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContainers
argument_list|)
expr_stmt|;
name|ContainerStatus
name|cs
init|=
name|mock
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerimpl
operator|.
name|getFinishedStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerimpl
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"N/A"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerimpl
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|containerimpl
operator|.
name|getContainerState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
DECL|method|mockYarnScheduler ()
specifier|private
specifier|static
name|YarnScheduler
name|mockYarnScheduler
parameter_list|()
block|{
name|YarnScheduler
name|yarnScheduler
init|=
name|mock
argument_list|(
name|YarnScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getAppsInQueue
argument_list|(
name|QUEUE_1
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getApplicationAttemptId
argument_list|(
literal|101
argument_list|)
argument_list|,
name|getApplicationAttemptId
argument_list|(
literal|102
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getAppsInQueue
argument_list|(
name|QUEUE_2
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getApplicationAttemptId
argument_list|(
literal|103
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|getApplicationAttemptId
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getAppResourceUsageReport
argument_list|(
name|attemptId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ResourceCalculator
name|rs
init|=
name|mock
argument_list|(
name|ResourceCalculator
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|yarnScheduler
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rs
argument_list|)
expr_stmt|;
return|return
name|yarnScheduler
return|;
block|}
DECL|method|setupResourceManager ()
specifier|private
name|ResourceManager
name|setupResourceManager
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|ReservationSystemTestUtil
operator|.
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1"
argument_list|,
literal|102400
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// allow plan follower to synchronize
name|Thread
operator|.
name|sleep
argument_list|(
literal|1050
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rm
return|;
block|}
DECL|method|submitReservationTestHelper ( ClientRMService clientService, long arrival, long deadline, long duration)
specifier|private
name|ReservationSubmissionRequest
name|submitReservationTestHelper
parameter_list|(
name|ClientRMService
name|clientService
parameter_list|,
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
name|ReservationSubmissionResponse
name|sResponse
init|=
literal|null
decl_stmt|;
name|GetNewReservationRequest
name|newReservationRequest
init|=
name|GetNewReservationRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|ReservationId
name|reservationID
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reservationID
operator|=
name|clientService
operator|.
name|getNewReservation
argument_list|(
name|newReservationRequest
argument_list|)
operator|.
name|getReservationId
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReservationSubmissionRequest
name|sRequest
init|=
name|ReservationSystemTestUtil
operator|.
name|createSimpleReservationRequest
argument_list|(
name|reservationID
argument_list|,
literal|4
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
try|try
block|{
name|sResponse
operator|=
name|clientService
operator|.
name|submitReservation
argument_list|(
name|sRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sResponse
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|reservationID
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Submit reservation response: "
operator|+
name|reservationID
argument_list|)
expr_stmt|;
return|return
name|sRequest
return|;
block|}
annotation|@
name|Test
DECL|method|testCreateReservation ()
specifier|public
name|void
name|testCreateReservation
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|setupResourceManager
argument_list|()
decl_stmt|;
name|ClientRMService
name|clientService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|clientService
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// Submit the reservation again with the same request and make sure it
comment|// passes.
try|try
block|{
name|clientService
operator|.
name|submitReservation
argument_list|(
name|sRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Submit the reservation with the same reservation id but different
comment|// reservation definition, and ensure YarnException is thrown.
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|sRequest
operator|.
name|getReservationDefinition
argument_list|()
decl_stmt|;
name|rDef
operator|.
name|setArrival
argument_list|(
name|arrival
operator|+
name|duration
argument_list|)
expr_stmt|;
name|sRequest
operator|.
name|setReservationDefinition
argument_list|(
name|rDef
argument_list|)
expr_stmt|;
try|try
block|{
name|clientService
operator|.
name|submitReservation
argument_list|(
name|sRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Reservation submission should fail if a duplicate "
operator|+
literal|"reservation id is used, but the reservation definition has been "
operator|+
literal|"updated."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|YarnException
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateReservation ()
specifier|public
name|void
name|testUpdateReservation
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|setupResourceManager
argument_list|()
decl_stmt|;
name|ClientRMService
name|clientService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|clientService
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
name|sRequest
operator|.
name|getReservationDefinition
argument_list|()
decl_stmt|;
name|ReservationRequest
name|rr
init|=
name|rDef
operator|.
name|getReservationRequests
argument_list|()
operator|.
name|getReservationResources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|rr
operator|.
name|setNumContainers
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|duration
operator|=
literal|30000
expr_stmt|;
name|deadline
operator|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
expr_stmt|;
name|rr
operator|.
name|setDuration
argument_list|(
name|duration
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setArrival
argument_list|(
name|arrival
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setDeadline
argument_list|(
name|deadline
argument_list|)
expr_stmt|;
name|ReservationUpdateRequest
name|uRequest
init|=
name|ReservationUpdateRequest
operator|.
name|newInstance
argument_list|(
name|rDef
argument_list|,
name|reservationID
argument_list|)
decl_stmt|;
name|ReservationUpdateResponse
name|uResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|uResponse
operator|=
name|clientService
operator|.
name|updateReservation
argument_list|(
name|uRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|uResponse
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Update reservation response: "
operator|+
name|uResponse
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListReservationsByReservationId ()
specifier|public
name|void
name|testListReservationsByReservationId
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|setupResourceManager
argument_list|()
decl_stmt|;
name|ClientRMService
name|clientService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|clientService
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationListResponse
name|response
init|=
literal|null
decl_stmt|;
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
name|reservationID
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reservationID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourceAllocationRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListReservationsByTimeInterval ()
specifier|public
name|void
name|testListReservationsByTimeInterval
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|setupResourceManager
argument_list|()
decl_stmt|;
name|ClientRMService
name|clientService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|clientService
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// List reservations, search by a point in time within the reservation
comment|// range.
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
name|arrival
operator|+
name|duration
operator|/
literal|2
argument_list|,
name|arrival
operator|+
name|duration
operator|/
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reservationID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// List reservations, search by time within reservation interval.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|reservationID
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the full resource allocations exist.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourceAllocationRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Verify that the full RDL is returned.
name|ReservationRequests
name|reservationRequests
init|=
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationDefinition
argument_list|()
operator|.
name|getReservationRequests
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reservationRequests
operator|.
name|getInterpreter
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R_ALL"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reservationRequests
operator|.
name|getReservationResources
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDuration
argument_list|()
operator|==
name|duration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListReservationsByInvalidTimeInterval ()
specifier|public
name|void
name|testListReservationsByInvalidTimeInterval
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|setupResourceManager
argument_list|()
decl_stmt|;
name|ClientRMService
name|clientService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|clientService
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// List reservations, search by invalid end time == -1.
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|sRequest
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// List reservations, search by invalid end time< -1.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|,
operator|-
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|sRequest
operator|.
name|getReservationId
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListReservationsByTimeIntervalContainingNoReservations ()
specifier|public
name|void
name|testListReservationsByTimeIntervalContainingNoReservations
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|setupResourceManager
argument_list|()
decl_stmt|;
name|ClientRMService
name|clientService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|clientService
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
comment|// List reservations, search by very large start time.
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|duration
operator|=
literal|30000
expr_stmt|;
name|deadline
operator|=
name|sRequest
operator|.
name|getReservationDefinition
argument_list|()
operator|.
name|getDeadline
argument_list|()
expr_stmt|;
comment|// List reservations, search by start time after the reservation
comment|// end time.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
name|deadline
operator|+
name|duration
argument_list|,
name|deadline
operator|+
literal|2
operator|*
name|duration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|arrival
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
comment|// List reservations, search by end time before the reservation start
comment|// time.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|arrival
operator|-
name|duration
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// List reservations, search by very small end time.
name|request
operator|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure all reservations are filtered out.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationDelete ()
specifier|public
name|void
name|testReservationDelete
parameter_list|()
block|{
name|ResourceManager
name|rm
init|=
name|setupResourceManager
argument_list|()
decl_stmt|;
name|ClientRMService
name|clientService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|Clock
name|clock
init|=
operator|new
name|UTCClock
argument_list|()
decl_stmt|;
name|long
name|arrival
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|duration
init|=
literal|60000
decl_stmt|;
name|long
name|deadline
init|=
call|(
name|long
call|)
argument_list|(
name|arrival
operator|+
literal|1.05
operator|*
name|duration
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|sRequest
init|=
name|submitReservationTestHelper
argument_list|(
name|clientService
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|sRequest
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
comment|// Delete the reservation
name|ReservationDeleteRequest
name|dRequest
init|=
name|ReservationDeleteRequest
operator|.
name|newInstance
argument_list|(
name|reservationID
argument_list|)
decl_stmt|;
name|ReservationDeleteResponse
name|dResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|dResponse
operator|=
name|clientService
operator|.
name|deleteReservation
argument_list|(
name|dRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|dResponse
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Delete reservation response: "
operator|+
name|dResponse
argument_list|)
expr_stmt|;
comment|// List reservations, search by non-existent reservationID
name|ReservationListRequest
name|request
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|,
name|reservationID
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ReservationListResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|clientService
operator|.
name|listReservations
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetNodeLabels ()
specifier|public
name|void
name|testGetNodeLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
block|{
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|NodeLabel
name|labelX
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeLabel
name|labelY
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|labelsMgr
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|labelsMgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|labelX
argument_list|,
name|labelY
argument_list|)
argument_list|)
expr_stmt|;
name|NodeId
name|node1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|node2
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node2
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|labelsMgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// Create a client.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmAddress
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|rmAddress
argument_list|)
expr_stmt|;
name|ApplicationClientProtocol
name|client
init|=
operator|(
name|ApplicationClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Get node labels collection
name|GetClusterNodeLabelsResponse
name|response
init|=
name|client
operator|.
name|getClusterNodeLabels
argument_list|(
name|GetClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|labelX
argument_list|,
name|labelY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get node labels mapping
name|GetNodesToLabelsResponse
name|response1
init|=
name|client
operator|.
name|getNodeToLabels
argument_list|(
name|GetNodesToLabelsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|NodeLabel
argument_list|>
argument_list|>
name|nodeToLabels
init|=
name|response1
operator|.
name|getNodeToLabels
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeToLabels
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeToLabels
operator|.
name|get
argument_list|(
name|node1
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|labelX
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeToLabels
operator|.
name|get
argument_list|(
name|node2
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|labelY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify whether labelX's exclusivity is false
for|for
control|(
name|NodeLabel
name|x
range|:
name|nodeToLabels
operator|.
name|get
argument_list|(
name|node1
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|x
operator|.
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify whether labelY's exclusivity is true
for|for
control|(
name|NodeLabel
name|y
range|:
name|nodeToLabels
operator|.
name|get
argument_list|(
name|node2
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|y
operator|.
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Below label "x" is not present in the response as exclusivity is true
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nodeToLabels
operator|.
name|get
argument_list|(
name|node1
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|stopProxy
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetLabelsToNodes ()
specifier|public
name|void
name|testGetLabelsToNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
block|{
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|NodeLabel
name|labelX
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeLabel
name|labelY
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"y"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NodeLabel
name|labelZ
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"z"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|labelsMgr
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|labelsMgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|labelX
argument_list|,
name|labelY
argument_list|,
name|labelZ
argument_list|)
argument_list|)
expr_stmt|;
name|NodeId
name|node1A
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|node1B
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
name|NodeId
name|node2A
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|node3A
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|node3B
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node1A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node1B
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node2A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node3A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|node3B
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|labelsMgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|map
argument_list|)
expr_stmt|;
comment|// Create a client.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmAddress
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|rmAddress
argument_list|)
expr_stmt|;
name|ApplicationClientProtocol
name|client
init|=
operator|(
name|ApplicationClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Get node labels collection
name|GetClusterNodeLabelsResponse
name|response
init|=
name|client
operator|.
name|getClusterNodeLabels
argument_list|(
name|GetClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|labelX
argument_list|,
name|labelY
argument_list|,
name|labelZ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get labels to nodes mapping
name|GetLabelsToNodesResponse
name|response1
init|=
name|client
operator|.
name|getLabelsToNodes
argument_list|(
name|GetLabelsToNodesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|labelsToNodes
init|=
name|response1
operator|.
name|getLabelsToNodes
argument_list|()
decl_stmt|;
comment|// Verify whether all NodeLabel's exclusivity are false
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|nltn
range|:
name|labelsToNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nltn
operator|.
name|getKey
argument_list|()
operator|.
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsToNodes
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|labelX
argument_list|,
name|labelY
argument_list|,
name|labelZ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsToNodes
operator|.
name|get
argument_list|(
name|labelX
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|node1A
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsToNodes
operator|.
name|get
argument_list|(
name|labelY
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|node2A
argument_list|,
name|node3A
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsToNodes
operator|.
name|get
argument_list|(
name|labelZ
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|node1B
argument_list|,
name|node3B
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get labels to nodes mapping for specific labels
name|Set
argument_list|<
name|String
argument_list|>
name|setlabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"x"
block|,
literal|"z"
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|GetLabelsToNodesResponse
name|response2
init|=
name|client
operator|.
name|getLabelsToNodes
argument_list|(
name|GetLabelsToNodesRequest
operator|.
name|newInstance
argument_list|(
name|setlabels
argument_list|)
argument_list|)
decl_stmt|;
name|labelsToNodes
operator|=
name|response2
operator|.
name|getLabelsToNodes
argument_list|()
expr_stmt|;
comment|// Verify whether all NodeLabel's exclusivity are false
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|NodeLabel
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|nltn
range|:
name|labelsToNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|nltn
operator|.
name|getKey
argument_list|()
operator|.
name|isExclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsToNodes
operator|.
name|keySet
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|labelX
argument_list|,
name|labelZ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsToNodes
operator|.
name|get
argument_list|(
name|labelX
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|node1A
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelsToNodes
operator|.
name|get
argument_list|(
name|labelZ
argument_list|)
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|node1B
argument_list|,
name|node3B
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|labelsToNodes
operator|.
name|get
argument_list|(
name|labelY
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|stopProxy
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testUpdateApplicationPriorityRequest ()
specifier|public
name|void
name|testUpdateApplicationPriorityRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxPriority
init|=
literal|10
decl_stmt|;
name|int
name|appPriority
init|=
literal|5
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
name|maxPriority
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Start app1 with appPriority 5
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|appPriority
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect priority has been set to application"
argument_list|,
name|appPriority
argument_list|,
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|appPriority
operator|=
literal|11
expr_stmt|;
name|ClientRMService
name|rmService
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|testApplicationPriorityUpdation
argument_list|(
name|rmService
argument_list|,
name|app1
argument_list|,
name|appPriority
argument_list|,
name|maxPriority
argument_list|)
expr_stmt|;
name|appPriority
operator|=
literal|9
expr_stmt|;
name|testApplicationPriorityUpdation
argument_list|(
name|rmService
argument_list|,
name|app1
argument_list|,
name|appPriority
argument_list|,
name|appPriority
argument_list|)
expr_stmt|;
name|rm
operator|.
name|killApp
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// Update priority request for invalid application id.
name|ApplicationId
name|invalidAppId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|123456789L
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|UpdateApplicationPriorityRequest
name|updateRequest
init|=
name|UpdateApplicationPriorityRequest
operator|.
name|newInstance
argument_list|(
name|invalidAppId
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|appPriority
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|rmService
operator|.
name|updateApplicationPriority
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"ApplicationNotFoundException should be thrown "
operator|+
literal|"for invalid application id"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationNotFoundException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
name|updateRequest
operator|=
name|UpdateApplicationPriorityRequest
operator|.
name|newInstance
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect priority has been set to application"
argument_list|,
name|appPriority
argument_list|,
name|rmService
operator|.
name|updateApplicationPriority
argument_list|(
name|updateRequest
argument_list|)
operator|.
name|getApplicationPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testApplicationPriorityUpdation (ClientRMService rmService, RMApp app1, int tobeUpdatedPriority, int expected)
specifier|private
name|void
name|testApplicationPriorityUpdation
parameter_list|(
name|ClientRMService
name|rmService
parameter_list|,
name|RMApp
name|app1
parameter_list|,
name|int
name|tobeUpdatedPriority
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|UpdateApplicationPriorityRequest
name|updateRequest
init|=
name|UpdateApplicationPriorityRequest
operator|.
name|newInstance
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
name|tobeUpdatedPriority
argument_list|)
argument_list|)
decl_stmt|;
name|UpdateApplicationPriorityResponse
name|updateApplicationPriority
init|=
name|rmService
operator|.
name|updateApplicationPriority
argument_list|(
name|updateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect priority has been set to application"
argument_list|,
name|expected
argument_list|,
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Incorrect priority has been returned"
argument_list|,
name|expected
argument_list|,
name|updateApplicationPriority
operator|.
name|getApplicationPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createExcludeFile (String filename)
specifier|private
name|void
name|createExcludeFile
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"decommisssionedHost"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMStartWithDecommissionedNode ()
specifier|public
name|void
name|testRMStartWithDecommissionedNode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|excludeFile
init|=
literal|"excludeFile"
decl_stmt|;
name|createExcludeFile
argument_list|(
name|excludeFile
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|excludeFile
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmAddress
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connecting to ResourceManager at "
operator|+
name|rmAddress
argument_list|)
expr_stmt|;
name|ApplicationClientProtocol
name|client
init|=
operator|(
name|ApplicationClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Make call
name|GetClusterNodesRequest
name|request
init|=
name|GetClusterNodesRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|allOf
argument_list|(
name|NodeState
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeReport
argument_list|>
name|nodeReports
init|=
name|client
operator|.
name|getClusterNodes
argument_list|(
name|request
argument_list|)
operator|.
name|getNodeReports
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeReports
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rpc
operator|.
name|stopProxy
argument_list|(
name|client
argument_list|,
name|conf
argument_list|)
expr_stmt|;
operator|new
name|File
argument_list|(
name|excludeFile
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

