begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.ahs
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ahs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|ApplicationHistoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|MemoryApplicationHistoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationAttemptHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ApplicationHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|records
operator|.
name|ContainerHistoryData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMApplicationHistoryWriter
specifier|public
class|class
name|TestRMApplicationHistoryWriter
block|{
DECL|field|MAX_RETRIES
specifier|private
specifier|static
name|int
name|MAX_RETRIES
init|=
literal|10
decl_stmt|;
DECL|field|writer
specifier|private
name|RMApplicationHistoryWriter
name|writer
decl_stmt|;
DECL|field|store
specifier|private
name|ApplicationHistoryStore
name|store
decl_stmt|;
DECL|field|dispatchers
specifier|private
name|List
argument_list|<
name|CounterDispatcher
argument_list|>
name|dispatchers
init|=
operator|new
name|ArrayList
argument_list|<
name|CounterDispatcher
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|store
operator|=
operator|new
name|MemoryApplicationHistoryStore
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|APPLICATION_HISTORY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|=
operator|new
name|RMApplicationHistoryWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ApplicationHistoryStore
name|createApplicationHistoryStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|store
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|MultiThreadedDispatcher
name|dispatcher
init|=
operator|new
name|MultiThreadedDispatcher
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HISTORY_WRITER_MULTI_THREADED_DISPATCHER_POOL_SIZE
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_HISTORY_WRITER_MULTI_THREADED_DISPATCHER_POOL_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|setDrainEventsOnStop
argument_list|()
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
class|class
name|MultiThreadedDispatcher
extends|extends
name|RMApplicationHistoryWriter
operator|.
name|MultiThreadedDispatcher
block|{
specifier|public
name|MultiThreadedDispatcher
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|super
argument_list|(
name|num
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AsyncDispatcher
name|createDispatcher
parameter_list|()
block|{
name|CounterDispatcher
name|dispatcher
init|=
operator|new
name|CounterDispatcher
argument_list|()
decl_stmt|;
name|dispatchers
operator|.
name|add
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
return|return
name|dispatcher
return|;
block|}
block|}
block|}
expr_stmt|;
name|writer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|writer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|writer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|createRMApp (ApplicationId appId)
specifier|private
specifier|static
name|RMApp
name|createRMApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|RMApp
name|app
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test app"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test app type"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test user"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test queue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|2L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"test diagnostics info"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
DECL|method|createRMAppAttempt ( ApplicationAttemptId appAttemptId)
specifier|private
specifier|static
name|RMAppAttempt
name|createRMAppAttempt
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test host"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|100
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test diagnostics info"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test url"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
return|return
name|appAttempt
return|;
block|}
DECL|method|createRMContainer (ContainerId containerId)
specifier|private
specifier|static
name|RMContainer
name|createRMContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|)
block|{
name|RMContainer
name|container
init|=
name|mock
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"test host"
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getAllocatedPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getCreationTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test diagnostics info"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getLogURL
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test log url"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getContainerState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
annotation|@
name|Test
DECL|method|testWriteApplication ()
specifier|public
name|void
name|testWriteApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|RMApp
name|app
init|=
name|createRMApp
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|applicationStarted
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|ApplicationHistoryData
name|appHD
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_RETRIES
condition|;
operator|++
name|i
control|)
block|{
name|appHD
operator|=
name|store
operator|.
name|getApplication
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appHD
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appHD
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test app"
argument_list|,
name|appHD
operator|.
name|getApplicationName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test app type"
argument_list|,
name|appHD
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test user"
argument_list|,
name|appHD
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test queue"
argument_list|,
name|appHD
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|appHD
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|appHD
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|applicationFinished
argument_list|(
name|app
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_RETRIES
condition|;
operator|++
name|i
control|)
block|{
name|appHD
operator|=
name|store
operator|.
name|getApplication
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appHD
operator|.
name|getYarnApplicationState
argument_list|()
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|appHD
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test diagnostics info"
argument_list|,
name|appHD
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
name|appHD
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|appHD
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteApplicationAttempt ()
specifier|public
name|void
name|testWriteApplicationAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|createRMAppAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|applicationAttemptStarted
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|ApplicationAttemptHistoryData
name|appAttemptHD
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_RETRIES
condition|;
operator|++
name|i
control|)
block|{
name|appAttemptHD
operator|=
name|store
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appAttemptHD
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appAttemptHD
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test host"
argument_list|,
name|appAttemptHD
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|100
argument_list|,
name|appAttemptHD
operator|.
name|getRPCPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|appAttemptHD
operator|.
name|getMasterContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|applicationAttemptFinished
argument_list|(
name|appAttempt
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_RETRIES
condition|;
operator|++
name|i
control|)
block|{
name|appAttemptHD
operator|=
name|store
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|appAttemptHD
operator|.
name|getYarnApplicationAttemptState
argument_list|()
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test diagnostics info"
argument_list|,
name|appAttemptHD
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test url"
argument_list|,
name|appAttemptHD
operator|.
name|getTrackingURL
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|,
name|appAttemptHD
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|FINISHED
argument_list|,
name|appAttemptHD
operator|.
name|getYarnApplicationAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWriteContainer ()
specifier|public
name|void
name|testWriteContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|RMContainer
name|container
init|=
name|createRMContainer
argument_list|(
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|containerStarted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|ContainerHistoryData
name|containerHD
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_RETRIES
condition|;
operator|++
name|i
control|)
block|{
name|containerHD
operator|=
name|store
operator|.
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerHD
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerHD
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"test host"
argument_list|,
operator|-
literal|100
argument_list|)
argument_list|,
name|containerHD
operator|.
name|getAssignedNode
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|containerHD
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
name|containerHD
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|container
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|containerFinished
argument_list|(
name|container
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_RETRIES
condition|;
operator|++
name|i
control|)
block|{
name|containerHD
operator|=
name|store
operator|.
name|getContainer
argument_list|(
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerHD
operator|.
name|getContainerState
argument_list|()
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"test diagnostics info"
argument_list|,
name|containerHD
operator|.
name|getDiagnosticsInfo
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|containerHD
operator|.
name|getContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
name|containerHD
operator|.
name|getContainerState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelWrite ()
specifier|public
name|void
name|testParallelWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|appIds
init|=
operator|new
name|ArrayList
argument_list|<
name|ApplicationId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|appIds
operator|.
name|add
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|createRMApp
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|writer
operator|.
name|applicationStarted
argument_list|(
name|app
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
literal|10
condition|;
operator|++
name|j
control|)
block|{
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|createRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|writer
operator|.
name|applicationAttemptStarted
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|1
init|;
name|k
operator|<=
literal|10
condition|;
operator|++
name|k
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|RMContainer
name|container
init|=
name|createRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|writer
operator|.
name|containerStarted
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|writer
operator|.
name|containerFinished
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|applicationAttemptFinished
argument_list|(
name|appAttempt
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|applicationFinished
argument_list|(
name|app
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_RETRIES
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|allEventsHandled
argument_list|(
literal|20
operator|*
literal|10
operator|*
literal|10
operator|+
literal|20
operator|*
literal|10
operator|+
literal|20
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allEventsHandled
argument_list|(
literal|20
operator|*
literal|10
operator|*
literal|10
operator|+
literal|20
operator|*
literal|10
operator|+
literal|20
argument_list|)
argument_list|)
expr_stmt|;
comment|// Validate all events of one application are handled by one dispatcher
for|for
control|(
name|ApplicationId
name|appId
range|:
name|appIds
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|handledByOne
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|allEventsHandled (int expected)
specifier|private
name|boolean
name|allEventsHandled
parameter_list|(
name|int
name|expected
parameter_list|)
block|{
name|int
name|actual
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CounterDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
for|for
control|(
name|Integer
name|count
range|:
name|dispatcher
operator|.
name|counts
operator|.
name|values
argument_list|()
control|)
block|{
name|actual
operator|+=
name|count
expr_stmt|;
block|}
block|}
return|return
name|actual
operator|==
name|expected
return|;
block|}
annotation|@
name|Test
DECL|method|testRMWritingMassiveHistory ()
specifier|public
name|void
name|testRMWritingMassiveHistory
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. Show RM can run with writing history data
comment|// 2. Test additional workload of processing history events
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// don't process history events
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMApplicationHistoryWriter
name|createRMApplicationHistoryWriter
parameter_list|()
block|{
return|return
operator|new
name|RMApplicationHistoryWriter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|applicationStarted
parameter_list|(
name|RMApp
name|app
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|applicationFinished
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|RMAppState
name|finalState
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|applicationAttemptStarted
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|applicationAttemptFinished
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|RMAppAttemptState
name|finalState
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|containerStarted
parameter_list|(
name|RMContainer
name|container
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|containerFinished
parameter_list|(
name|RMContainer
name|container
parameter_list|)
block|{           }
block|}
return|;
block|}
block|}
decl_stmt|;
name|long
name|startTime1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|testRMWritingMassiveHistory
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|long
name|finishTime1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|elapsedTime1
init|=
name|finishTime1
operator|-
name|startTime1
decl_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|long
name|startTime2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|testRMWritingMassiveHistory
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|long
name|finishTime2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|elapsedTime2
init|=
name|finishTime2
operator|-
name|startTime2
decl_stmt|;
comment|// No more than 10% additional workload
comment|// Should be much less, but computation time is fluctuated
name|Assert
operator|.
name|assertTrue
argument_list|(
name|elapsedTime2
operator|-
name|elapsedTime1
operator|<
name|elapsedTime1
operator|/
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|testRMWritingMassiveHistory (MockRM rm)
specifier|private
name|void
name|testRMWritingMassiveHistory
parameter_list|(
name|MockRM
name|rm
parameter_list|)
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|1024
operator|*
literal|10100
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|int
name|request
init|=
literal|10000
decl_stmt|;
name|am
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
name|request
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|am
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
name|int
name|allocatedSize
init|=
name|allocated
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocatedSize
operator|<
name|request
operator|&&
name|waitCount
operator|++
operator|<
literal|200
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|am
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|allocatedSize
operator|+=
name|allocated
operator|.
name|size
argument_list|()
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|request
argument_list|,
name|allocatedSize
argument_list|)
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|resp
init|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|cleaned
init|=
name|resp
operator|.
name|getContainersToCleanup
argument_list|()
decl_stmt|;
name|int
name|cleanedSize
init|=
name|cleaned
operator|.
name|size
argument_list|()
decl_stmt|;
name|waitCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|cleanedSize
operator|<
name|allocatedSize
operator|&&
name|waitCount
operator|++
operator|<
literal|200
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|resp
operator|=
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cleaned
operator|=
name|resp
operator|.
name|getContainersToCleanup
argument_list|()
expr_stmt|;
name|cleanedSize
operator|+=
name|cleaned
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocatedSize
argument_list|,
name|cleanedSize
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|handledByOne (ApplicationId appId)
specifier|private
name|boolean
name|handledByOne
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CounterDispatcher
name|dispatcher
range|:
name|dispatchers
control|)
block|{
if|if
condition|(
name|dispatcher
operator|.
name|counts
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
block|}
block|}
return|return
name|count
operator|==
literal|1
return|;
block|}
DECL|class|CounterDispatcher
specifier|private
specifier|static
class|class
name|CounterDispatcher
extends|extends
name|AsyncDispatcher
block|{
DECL|field|counts
specifier|private
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|dispatch (Event event)
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|WritingApplicationHistoryEvent
condition|)
block|{
name|WritingApplicationHistoryEvent
name|ashEvent
init|=
operator|(
name|WritingApplicationHistoryEvent
operator|)
name|event
decl_stmt|;
switch|switch
condition|(
name|ashEvent
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|APP_START
case|:
name|incrementCounts
argument_list|(
operator|(
operator|(
name|WritingApplicationStartEvent
operator|)
name|event
operator|)
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_FINISH
case|:
name|incrementCounts
argument_list|(
operator|(
operator|(
name|WritingApplicationFinishEvent
operator|)
name|event
operator|)
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_START
case|:
name|incrementCounts
argument_list|(
operator|(
operator|(
name|WritingApplicationAttemptStartEvent
operator|)
name|event
operator|)
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|APP_ATTEMPT_FINISH
case|:
name|incrementCounts
argument_list|(
operator|(
operator|(
name|WritingApplicationAttemptFinishEvent
operator|)
name|event
operator|)
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_START
case|:
name|incrementCounts
argument_list|(
operator|(
operator|(
name|WritingContainerStartEvent
operator|)
name|event
operator|)
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONTAINER_FINISH
case|:
name|incrementCounts
argument_list|(
operator|(
operator|(
name|WritingContainerFinishEvent
operator|)
name|event
operator|)
operator|.
name|getContainerId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|super
operator|.
name|dispatch
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|method|incrementCounts (ApplicationId appId)
specifier|private
name|void
name|incrementCounts
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|Integer
name|val
init|=
name|counts
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|counts
operator|.
name|put
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|counts
operator|.
name|put
argument_list|(
name|appId
argument_list|,
name|val
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

