begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerRecoveryProtos
operator|.
name|EpochProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServiceProtos
operator|.
name|AllocateResponseProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Simple test to verify the protos generated are valid  */
end_comment

begin_class
DECL|class|TestProtos
specifier|public
class|class
name|TestProtos
block|{
annotation|@
name|Test
DECL|method|testProtoCanBePrinted ()
specifier|public
name|void
name|testProtoCanBePrinted
parameter_list|()
throws|throws
name|Exception
block|{
name|EpochProto
name|proto
init|=
name|EpochProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|setEpoch
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|protoString
init|=
name|proto
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|protoString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testProtoAllocateResponse ()
specifier|public
name|void
name|testProtoAllocateResponse
parameter_list|()
block|{
name|AllocateResponseProto
name|proto
init|=
name|AllocateResponseProto
operator|.
name|getDefaultInstance
argument_list|()
decl_stmt|;
name|AllocateResponsePBImpl
name|alloc
init|=
operator|new
name|AllocateResponsePBImpl
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NMToken
argument_list|>
name|nmTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|alloc
operator|.
name|setNMTokens
argument_list|(
name|nmTokens
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

