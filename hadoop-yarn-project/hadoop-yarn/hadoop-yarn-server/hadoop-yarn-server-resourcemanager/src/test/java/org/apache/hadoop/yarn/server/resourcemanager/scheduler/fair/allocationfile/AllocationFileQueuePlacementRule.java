begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.allocationfile
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|allocationfile
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Helper class for {@link AllocationFileWriter} to manage  * queue placement rules.  */
end_comment

begin_class
DECL|class|AllocationFileQueuePlacementRule
specifier|public
class|class
name|AllocationFileQueuePlacementRule
block|{
DECL|enum|RuleName
specifier|public
enum|enum
name|RuleName
block|{
DECL|enumConstant|DEFAULT
name|DEFAULT
argument_list|(
literal|"default"
argument_list|)
block|,
DECL|enumConstant|SPECIFIED
name|SPECIFIED
argument_list|(
literal|"specified"
argument_list|)
block|,
DECL|enumConstant|REJECT
name|REJECT
argument_list|(
literal|"reject"
argument_list|)
block|,
DECL|enumConstant|NESTED
name|NESTED
argument_list|(
literal|"nestedUserQueue"
argument_list|)
block|,
DECL|enumConstant|PRIMARY_GROUP
name|PRIMARY_GROUP
argument_list|(
literal|"primaryGroup"
argument_list|)
block|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|method|RuleName (String name)
name|RuleName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
DECL|field|name
specifier|private
name|RuleName
name|name
decl_stmt|;
DECL|field|create
specifier|private
name|boolean
name|create
init|=
literal|true
decl_stmt|;
DECL|field|queue
specifier|private
name|String
name|queue
decl_stmt|;
DECL|field|nestedRules
specifier|private
name|List
argument_list|<
name|AllocationFileQueuePlacementRule
argument_list|>
name|nestedRules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
DECL|method|AllocationFileQueuePlacementRule (RuleName name)
specifier|public
name|AllocationFileQueuePlacementRule
parameter_list|(
name|RuleName
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|create (boolean shouldCreate)
specifier|public
name|AllocationFileQueuePlacementRule
name|create
parameter_list|(
name|boolean
name|shouldCreate
parameter_list|)
block|{
name|this
operator|.
name|create
operator|=
name|shouldCreate
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|queue (String selectedQueue)
specifier|public
name|AllocationFileQueuePlacementRule
name|queue
parameter_list|(
name|String
name|selectedQueue
parameter_list|)
block|{
name|this
operator|.
name|queue
operator|=
name|selectedQueue
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addNestedRule ( AllocationFileQueuePlacementRule rule)
specifier|public
name|AllocationFileQueuePlacementRule
name|addNestedRule
parameter_list|(
name|AllocationFileQueuePlacementRule
name|rule
parameter_list|)
block|{
name|this
operator|.
name|nestedRules
operator|.
name|add
argument_list|(
name|rule
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|render ()
specifier|public
name|String
name|render
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|addStartTag
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|addNestedRules
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|addEndTag
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|addStartTag (PrintWriter pw)
specifier|private
name|void
name|addStartTag
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"<rule name=\""
operator|+
name|name
operator|.
name|toString
argument_list|()
operator|+
literal|"\" create=\""
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|create
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"queue=\""
operator|+
name|queue
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
DECL|method|addNestedRules (PrintWriter pw)
specifier|private
name|void
name|addNestedRules
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
if|if
condition|(
name|nestedRules
operator|!=
literal|null
operator|&&
operator|!
name|nestedRules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AllocationFileQueuePlacementRule
name|rule
range|:
name|nestedRules
control|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|rule
operator|.
name|render
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addEndTag (PrintWriter pw)
specifier|private
name|void
name|addEndTag
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

