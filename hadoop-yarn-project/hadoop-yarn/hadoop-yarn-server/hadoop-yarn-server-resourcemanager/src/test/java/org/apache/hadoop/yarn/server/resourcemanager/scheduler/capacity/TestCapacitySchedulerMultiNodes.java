begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|MultiNodeSorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
operator|.
name|MultiNodeSortingManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for Multi Node scheduling related tests.  */
end_comment

begin_class
DECL|class|TestCapacitySchedulerMultiNodes
specifier|public
class|class
name|TestCapacitySchedulerMultiNodes
extends|extends
name|CapacitySchedulerTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCapacitySchedulerMultiNodes
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|CapacitySchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|POLICY_CLASS_NAME
specifier|private
specifier|static
specifier|final
name|String
name|POLICY_CLASS_NAME
init|=
literal|"org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement.ResourceUsageMultiNodeLookupPolicy"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|config
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|RESOURCE_CALCULATOR_CLASS
argument_list|,
name|DominantResourceCalculator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_SORTING_POLICIES
argument_list|,
literal|"resource-based"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_SORTING_POLICY_NAME
argument_list|,
literal|"resource-based"
argument_list|)
expr_stmt|;
name|String
name|policyName
init|=
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_SORTING_POLICY_NAME
operator|+
literal|".resource-based"
operator|+
literal|".class"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|policyName
argument_list|,
name|POLICY_CLASS_NAME
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MULTI_NODE_PLACEMENT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"yarn.scheduler.minimum-allocation-mb"
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"yarn.scheduler.minimum-allocation-vcores"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiNodeSorterForScheduling ()
specifier|public
name|void
name|testMultiNodeSorterForScheduling
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1235"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1236"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1237"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|waitforNMRegistered
argument_list|(
name|scheduler
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|MultiNodeSortingManager
argument_list|<
name|SchedulerNode
argument_list|>
name|mns
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getMultiNodeSortingManager
argument_list|()
decl_stmt|;
name|MultiNodeSorter
argument_list|<
name|SchedulerNode
argument_list|>
name|sorter
init|=
name|mns
operator|.
name|getMultiNodePolicy
argument_list|(
name|POLICY_CLASS_NAME
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|reSortClusterNodes
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|SchedulerNode
argument_list|>
name|nodes
init|=
name|sorter
operator|.
name|getMultiNodeLookupPolicy
argument_list|()
operator|.
name|getNodesPerPartition
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiNodeSorterForSchedulingWithOrdering ()
specifier|public
name|void
name|testMultiNodeSorterForSchedulingWithOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:1235"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.3:1236"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.4:1237"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|waitforNMRegistered
argument_list|(
name|scheduler
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|MultiNodeSortingManager
argument_list|<
name|SchedulerNode
argument_list|>
name|mns
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getMultiNodeSortingManager
argument_list|()
decl_stmt|;
name|MultiNodeSorter
argument_list|<
name|SchedulerNode
argument_list|>
name|sorter
init|=
name|mns
operator|.
name|getMultiNodePolicy
argument_list|(
name|POLICY_CLASS_NAME
argument_list|)
decl_stmt|;
name|sorter
operator|.
name|reSortClusterNodes
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|SchedulerNode
argument_list|>
name|nodes
init|=
name|sorter
operator|.
name|getMultiNodeLookupPolicy
argument_list|()
operator|.
name|getNodesPerPartition
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|,
literal|"app-1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|SchedulerNodeReport
name|reportNm1
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// check node report
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|reportNm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|reportNm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ideally thread will invoke this, but thread operates every 1sec.
comment|// Hence forcefully recompute nodes.
name|sorter
operator|.
name|reSortClusterNodes
argument_list|()
expr_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app-2"
argument_list|,
literal|"user2"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|SchedulerNodeReport
name|reportNm2
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// check node report
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|reportNm2
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
name|reportNm2
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ideally thread will invoke this, but thread operates every 1sec.
comment|// Hence forcefully recompute nodes.
name|sorter
operator|.
name|reSortClusterNodes
argument_list|()
expr_stmt|;
comment|// Node1 and Node2 are now having used resources. Hence ensure these 2 comes
comment|// latter in the list.
name|nodes
operator|=
name|sorter
operator|.
name|getMultiNodeLookupPolicy
argument_list|()
operator|.
name|getNodesPerPartition
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeId
argument_list|>
name|currentNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|currentNodes
operator|.
name|add
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|currentNodes
operator|.
name|add
argument_list|(
name|nm4
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|currentNodes
operator|.
name|add
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|currentNodes
operator|.
name|add
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|SchedulerNode
argument_list|>
name|it
init|=
name|nodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|SchedulerNode
name|current
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|current
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|currentNodes
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

