begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
operator|.
name|YarnConfigurationStore
operator|.
name|LogMutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests {@link FSSchedulerConfigurationStore}.  */
end_comment

begin_class
DECL|class|TestFSSchedulerConfigurationStore
specifier|public
class|class
name|TestFSSchedulerConfigurationStore
block|{
DECL|field|configurationStore
specifier|private
name|FSSchedulerConfigurationStore
name|configurationStore
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|testSchedulerConfigurationDir
specifier|private
name|File
name|testSchedulerConfigurationDir
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|configurationStore
operator|=
operator|new
name|FSSchedulerConfigurationStore
argument_list|()
expr_stmt|;
name|testSchedulerConfigurationDir
operator|=
operator|new
name|File
argument_list|(
name|TestFSSchedulerConfigurationStore
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|""
argument_list|)
operator|.
name|getPath
argument_list|()
operator|+
name|FSSchedulerConfigurationStore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|testSchedulerConfigurationDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_FS_PATH
argument_list|,
name|testSchedulerConfigurationDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeConf (Configuration config)
specifier|private
name|void
name|writeConf
parameter_list|(
name|Configuration
name|config
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fileSystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|new
name|Configuration
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|schedulerConfigurationFile
init|=
name|YarnConfiguration
operator|.
name|CS_CONFIGURATION_FILE
operator|+
literal|"."
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|FSDataOutputStream
name|outputStream
init|=
name|fileSystem
operator|.
name|create
argument_list|(
operator|new
name|Path
argument_list|(
name|testSchedulerConfigurationDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|schedulerConfigurationFile
argument_list|)
argument_list|)
decl_stmt|;
name|config
operator|.
name|writeXml
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|testSchedulerConfigurationDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|confirmMutationWithValid ()
specifier|public
name|void
name|confirmMutationWithValid
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_FS_MAX_VERSION
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"c"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|storeConf
init|=
name|configurationStore
operator|.
name|retrieve
argument_list|()
decl_stmt|;
name|compareConfig
argument_list|(
name|conf
argument_list|,
name|storeConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|updates
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updates
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"bb"
argument_list|)
expr_stmt|;
name|Configuration
name|expectConfig
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|expectConfig
operator|.
name|unset
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|expectConfig
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"bb"
argument_list|)
expr_stmt|;
name|LogMutation
name|logMutation
init|=
operator|new
name|LogMutation
argument_list|(
name|updates
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|configurationStore
operator|.
name|logMutation
argument_list|(
name|logMutation
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|storeConf
operator|=
name|configurationStore
operator|.
name|retrieve
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|storeConf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bb"
argument_list|,
name|storeConf
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|storeConf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|compareConfig
argument_list|(
name|expectConfig
argument_list|,
name|storeConf
argument_list|)
expr_stmt|;
name|updates
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"bbb"
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|logMutation
argument_list|(
name|logMutation
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|storeConf
operator|=
name|configurationStore
operator|.
name|retrieve
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|storeConf
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|storeConf
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|storeConf
operator|.
name|get
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|confirmMutationWithInValid ()
specifier|public
name|void
name|confirmMutationWithInValid
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"c"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|storeConf
init|=
name|configurationStore
operator|.
name|retrieve
argument_list|()
decl_stmt|;
name|compareConfig
argument_list|(
name|conf
argument_list|,
name|storeConf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updates
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|updates
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updates
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
literal|"bb"
argument_list|)
expr_stmt|;
name|LogMutation
name|logMutation
init|=
operator|new
name|LogMutation
argument_list|(
name|updates
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|configurationStore
operator|.
name|logMutation
argument_list|(
name|logMutation
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|confirmMutation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|storeConf
operator|=
name|configurationStore
operator|.
name|retrieve
argument_list|()
expr_stmt|;
name|compareConfig
argument_list|(
name|conf
argument_list|,
name|storeConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|retrieve ()
specifier|public
name|void
name|retrieve
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|schedulerConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|schedulerConf
operator|.
name|set
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|schedulerConf
operator|.
name|setLong
argument_list|(
literal|"long"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|schedulerConf
operator|.
name|setBoolean
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeConf
argument_list|(
name|schedulerConf
argument_list|)
expr_stmt|;
name|configurationStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Configuration
name|storedConfig
init|=
name|configurationStore
operator|.
name|retrieve
argument_list|()
decl_stmt|;
name|compareConfig
argument_list|(
name|schedulerConf
argument_list|,
name|storedConfig
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|checkVersion ()
specifier|public
name|void
name|checkVersion
parameter_list|()
block|{
try|try
block|{
name|configurationStore
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"checkVersion throw exception"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareConfig (Configuration schedulerConf, Configuration storedConfig)
specifier|private
name|void
name|compareConfig
parameter_list|(
name|Configuration
name|schedulerConf
parameter_list|,
name|Configuration
name|storedConfig
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|schedulerConf
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|schedulerConf
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|storedConfig
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|storedConfig
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|storedConfig
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|schedulerConf
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

