begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestCSQueueUtils
specifier|public
class|class
name|TestCSQueueUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCSQueueUtils
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|int
name|GB
init|=
literal|1024
decl_stmt|;
annotation|@
name|Test
DECL|method|testAbsoluteMaxAvailCapacityInvalidDivisor ()
specifier|public
name|void
name|testAbsoluteMaxAvailCapacityInvalidDivisor
parameter_list|()
throws|throws
name|Exception
block|{
name|runInvalidDivisorTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runInvalidDivisorTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runInvalidDivisorTest (boolean useDominant)
specifier|public
name|void
name|runInvalidDivisorTest
parameter_list|(
name|boolean
name|useDominant
parameter_list|)
throws|throws
name|Exception
block|{
name|ResourceCalculator
name|resourceCalculator
decl_stmt|;
name|Resource
name|clusterResource
decl_stmt|;
if|if
condition|(
name|useDominant
condition|)
block|{
name|resourceCalculator
operator|=
operator|new
name|DominantResourceCalculator
argument_list|()
expr_stmt|;
name|clusterResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resourceCalculator
operator|=
operator|new
name|DefaultResourceCalculator
argument_list|()
expr_stmt|;
name|clusterResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|)
expr_stmt|;
block|}
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerContext
name|csContext
init|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L1Q1
init|=
literal|"L1Q1"
decl_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|L1Q1
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L1Q1P
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|L1Q1
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|L1Q1P
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacity
argument_list|(
name|L1Q1P
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|ParentQueue
name|root
init|=
operator|new
name|ParentQueue
argument_list|(
name|csContext
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LeafQueue
name|l1q1
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|L1Q1
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t1 root "
operator|+
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t1 l1q1 "
operator|+
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l1q1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l1q1
argument_list|)
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbsoluteMaxAvailCapacityNoUse ()
specifier|public
name|void
name|testAbsoluteMaxAvailCapacityNoUse
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerContext
name|csContext
init|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L1Q1
init|=
literal|"L1Q1"
decl_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|L1Q1
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L1Q1P
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|L1Q1
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|L1Q1P
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacity
argument_list|(
name|L1Q1P
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|ParentQueue
name|root
init|=
operator|new
name|ParentQueue
argument_list|(
name|csContext
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LeafQueue
name|l1q1
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|L1Q1
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t1 root "
operator|+
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t1 l1q1 "
operator|+
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l1q1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|root
argument_list|)
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.9f
argument_list|,
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l1q1
argument_list|)
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAbsoluteMaxAvailCapacityWithUse ()
specifier|public
name|void
name|testAbsoluteMaxAvailCapacityWithUse
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerContext
name|csContext
init|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L1Q1
init|=
literal|"L1Q1"
decl_stmt|;
specifier|final
name|String
name|L1Q2
init|=
literal|"L1Q2"
decl_stmt|;
specifier|final
name|String
name|L2Q1
init|=
literal|"L2Q1"
decl_stmt|;
specifier|final
name|String
name|L2Q2
init|=
literal|"L2Q2"
decl_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|L1Q1
block|,
name|L1Q2
block|,
name|L2Q1
block|,
name|L2Q2
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L1Q1P
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|L1Q1
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|L1Q1P
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacity
argument_list|(
name|L1Q1P
argument_list|,
literal|80
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L1Q2P
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|L1Q2
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|L1Q2P
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacity
argument_list|(
name|L1Q2P
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L2Q1P
init|=
name|L1Q1P
operator|+
literal|"."
operator|+
name|L2Q1
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|L2Q1P
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacity
argument_list|(
name|L2Q1P
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|L2Q2P
init|=
name|L1Q1P
operator|+
literal|"."
operator|+
name|L2Q2
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|L2Q2P
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setMaximumCapacity
argument_list|(
name|L2Q2P
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|float
name|result
decl_stmt|;
name|ParentQueue
name|root
init|=
operator|new
name|ParentQueue
argument_list|(
name|csContext
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LeafQueue
name|l1q1
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|L1Q1
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LeafQueue
name|l1q2
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|L1Q2
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LeafQueue
name|l2q2
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|L2Q2
argument_list|,
name|l1q1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LeafQueue
name|l2q1
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|L2Q1
argument_list|,
name|l1q1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//no usage, all based on maxCapacity (prior behavior)
name|result
operator|=
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l2q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.4f
argument_list|,
name|result
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t2 l2q2 "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|//some usage, but below the base capacity
name|Resources
operator|.
name|addTo
argument_list|(
name|root
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|l1q2
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l2q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.4f
argument_list|,
name|result
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t2 l2q2 "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|//usage gt base on parent sibling
name|Resources
operator|.
name|addTo
argument_list|(
name|root
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.3f
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|l1q2
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.3f
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l2q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|result
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t2 l2q2 "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|//same as last, but with usage also on direct parent
name|Resources
operator|.
name|addTo
argument_list|(
name|root
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|l1q1
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.1f
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l2q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|result
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t2 l2q2 "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|//add to direct sibling, below the threshold of effect at present
name|Resources
operator|.
name|addTo
argument_list|(
name|root
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|l1q1
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|l2q1
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l2q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.3f
argument_list|,
name|result
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t2 l2q2 "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|//add to direct sibling, now above the threshold of effect
comment|//(it's cumulative with prior tests)
name|Resources
operator|.
name|addTo
argument_list|(
name|root
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|l1q1
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|l2q1
operator|.
name|getUsedResources
argument_list|()
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|clusterResource
argument_list|,
literal|0.2f
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|CSQueueUtils
operator|.
name|getAbsoluteMaxAvailCapacity
argument_list|(
name|resourceCalculator
argument_list|,
name|clusterResource
argument_list|,
name|l2q2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.1f
argument_list|,
name|result
argument_list|,
literal|0.000001f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"t2 l2q2 "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

