begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|DecommissioningNodesWatcher
operator|.
name|DecommissioningNodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeStatusEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class tests DecommissioningNodesWatcher.  */
end_comment

begin_class
DECL|class|TestDecommissioningNodesWatcher
specifier|public
class|class
name|TestDecommissioningNodesWatcher
block|{
DECL|field|rm
specifier|private
name|MockRM
name|rm
decl_stmt|;
annotation|@
name|Test
DECL|method|testDecommissioningNodesWatcher ()
specifier|public
name|void
name|testDecommissioningNodesWatcher
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DecommissioningNodesWatcher
name|watcher
init|=
operator|new
name|DecommissioningNodesWatcher
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|RMNodeImpl
name|node1
init|=
operator|(
name|RMNodeImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|NodeId
name|id1
init|=
name|nm1
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|NodeStatus
name|nodeStatus
init|=
name|createNodeStatus
argument_list|(
name|id1
argument_list|,
name|app
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup nm1 as DECOMMISSIONING for DecommissioningNodesWatcher.
name|rm
operator|.
name|sendNodeGracefulDecommission
argument_list|(
name|nm1
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
comment|// Update status with decreasing number of running containers until 0.
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|id1
argument_list|,
name|app
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|update
argument_list|(
name|node1
argument_list|,
name|nodeStatus
argument_list|)
expr_stmt|;
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|id1
argument_list|,
name|app
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|update
argument_list|(
name|node1
argument_list|,
name|nodeStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|checkReadyToBeDecommissioned
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|id1
argument_list|,
name|app
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|update
argument_list|(
name|node1
argument_list|,
name|nodeStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DecommissioningNodeStatus
operator|.
name|WAIT_CONTAINER
argument_list|,
name|watcher
operator|.
name|checkDecommissioningStatus
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|id1
argument_list|,
name|app
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|update
argument_list|(
name|node1
argument_list|,
name|nodeStatus
argument_list|)
expr_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DecommissioningNodeStatus
operator|.
name|WAIT_APP
argument_list|,
name|watcher
operator|.
name|checkDecommissioningStatus
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set app to be FINISHED and verified DecommissioningNodeStatus is READY.
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|update
argument_list|(
name|node1
argument_list|,
name|nodeStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DecommissioningNodeStatus
operator|.
name|READY
argument_list|,
name|watcher
operator|.
name|checkDecommissioningStatus
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDecommissioningNodesWatcherWithPreviousRunningApps ()
specifier|public
name|void
name|testDecommissioningNodesWatcherWithPreviousRunningApps
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DecommissioningNodesWatcher
name|watcher
init|=
operator|new
name|DecommissioningNodesWatcher
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"host1:1234"
argument_list|,
literal|10240
argument_list|)
decl_stmt|;
name|RMNodeImpl
name|node1
init|=
operator|(
name|RMNodeImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|NodeId
name|id1
init|=
name|nm1
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|NodeStatus
name|nodeStatus
init|=
name|createNodeStatus
argument_list|(
name|id1
argument_list|,
name|app
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|node1
operator|.
name|getRunningApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// update node with 0 running containers
name|nodeStatus
operator|=
name|createNodeStatus
argument_list|(
name|id1
argument_list|,
name|app
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|node1
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStatusEvent
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeStatus
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|node1
operator|.
name|getRunningApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup nm1 as DECOMMISSIONING for DecommissioningNodesWatcher. Right now
comment|// there is no container running on the node.
name|rm
operator|.
name|sendNodeGracefulDecommission
argument_list|(
name|nm1
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|id1
argument_list|,
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
comment|// we should still get WAIT_APP as container for a running app previously
comment|// ran on this node.
name|watcher
operator|.
name|update
argument_list|(
name|node1
argument_list|,
name|nodeStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|watcher
operator|.
name|checkReadyToBeDecommissioned
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DecommissioningNodeStatus
operator|.
name|WAIT_APP
argument_list|,
name|watcher
operator|.
name|checkDecommissioningStatus
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set app to be FINISHED and verified DecommissioningNodeStatus is READY.
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|,
name|am
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|node1
operator|.
name|getRunningApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|update
argument_list|(
name|node1
argument_list|,
name|nodeStatus
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DecommissioningNodeStatus
operator|.
name|READY
argument_list|,
name|watcher
operator|.
name|checkDecommissioningStatus
argument_list|(
name|id1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createNodeStatus ( NodeId nodeId, RMApp app, int numRunningContainers)
specifier|private
name|NodeStatus
name|createNodeStatus
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|int
name|numRunningContainers
parameter_list|)
block|{
return|return
name|NodeStatus
operator|.
name|newInstance
argument_list|(
name|nodeId
argument_list|,
literal|0
argument_list|,
name|getContainerStatuses
argument_list|(
name|app
argument_list|,
name|numRunningContainers
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|NodeHealthStatus
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|1000
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// Get mocked ContainerStatus for bunch of containers,
comment|// where numRunningContainers are RUNNING.
DECL|method|getContainerStatuses ( RMApp app, int numRunningContainers)
specifier|private
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|getContainerStatuses
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|int
name|numRunningContainers
parameter_list|)
block|{
comment|// Total 3 containers
specifier|final
name|int
name|total
init|=
literal|3
decl_stmt|;
name|numRunningContainers
operator|=
name|Math
operator|.
name|min
argument_list|(
name|total
argument_list|,
name|numRunningContainers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|output
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|ContainerState
name|cstate
init|=
operator|(
name|i
operator|>=
name|numRunningContainers
operator|)
condition|?
name|ContainerState
operator|.
name|COMPLETE
else|:
name|ContainerState
operator|.
name|RUNNING
decl_stmt|;
name|output
operator|.
name|add
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
name|i
argument_list|)
argument_list|,
name|cstate
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|output
return|;
block|}
block|}
end_class

end_unit

