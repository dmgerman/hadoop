begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|assertResponseStatusCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GuiceServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|UniformInterfaceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|core
operator|.
name|util
operator|.
name|MultivaluedMapImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
DECL|class|TestRMWebServicesApps
specifier|public
class|class
name|TestRMWebServicesApps
extends|extends
name|JerseyTestBase
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|CONTAINER_MB
specifier|private
specifier|static
specifier|final
name|int
name|CONTAINER_MB
init|=
literal|1024
decl_stmt|;
DECL|class|WebServletModule
specifier|private
specifier|static
class|class
name|WebServletModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
static|static
block|{
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TestRMWebServicesApps ()
specifier|public
name|TestRMWebServicesApps
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApps ()
specifier|public
name|void
name|testApps
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppsHelper
argument_list|(
literal|"apps"
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsSlash ()
specifier|public
name|void
name|testAppsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppsHelper
argument_list|(
literal|"apps/"
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsDefault ()
specifier|public
name|void
name|testAppsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppsHelper
argument_list|(
literal|"apps/"
argument_list|,
name|app1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsXML ()
specifier|public
name|void
name|testAppsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodesApps
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodesApps
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppsXML
argument_list|(
name|nodes
argument_list|,
name|app1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRunningApp ()
specifier|public
name|void
name|testRunningApp
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|amNodeManager
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4096
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodesApps
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodesApps
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppsXML
argument_list|(
name|nodes
argument_list|,
name|app1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testAppsHelper
argument_list|(
literal|"apps/"
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsXMLMulti ()
specifier|public
name|void
name|testAppsXMLMulti
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|,
literal|"testwordcount2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodesApps
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodesApps
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppsHelper (String path, RMApp app, String media)
specifier|public
name|void
name|testAppsHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|testAppsHelper
argument_list|(
name|path
argument_list|,
name|app
argument_list|,
name|media
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppsHelper (String path, RMApp app, String media, boolean hasResourceReq)
specifier|public
name|void
name|testAppsHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|String
name|media
parameter_list|,
name|boolean
name|hasResourceReq
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfo
argument_list|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app
argument_list|,
name|hasResourceReq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryState ()
specifier|public
name|void
name|testAppsQueryState
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfo
argument_list|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStates ()
specifier|public
name|void
name|testAppsQueryStates
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|RMApp
name|killedApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|rm
operator|.
name|killApp
argument_list|(
name|killedApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MultivaluedMapImpl
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"state not equal to ACCEPTED"
argument_list|,
literal|"ACCEPTED"
argument_list|,
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|params
operator|=
operator|new
name|MultivaluedMapImpl
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"both app states of ACCEPTED and KILLED are not present"
argument_list|,
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"KILLED"
argument_list|)
operator|)
operator|||
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"KILLED"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStatesComma ()
specifier|public
name|void
name|testAppsQueryStatesComma
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|RMApp
name|killedApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|rm
operator|.
name|killApp
argument_list|(
name|killedApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|MultivaluedMapImpl
name|params
init|=
operator|new
name|MultivaluedMapImpl
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"state not equal to ACCEPTED"
argument_list|,
literal|"ACCEPTED"
argument_list|,
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|params
operator|=
operator|new
name|MultivaluedMapImpl
argument_list|()
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParams
argument_list|(
name|params
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"both app states of ACCEPTED and KILLED are not present"
argument_list|,
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"KILLED"
argument_list|)
operator|)
operator|||
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"KILLED"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStatesNone ()
specifier|public
name|void
name|testAppsQueryStatesNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not empty"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStateNone ()
specifier|public
name|void
name|testAppsQueryStateNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
name|YarnApplicationState
operator|.
name|RUNNING
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not empty"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStatesInvalid ()
specifier|public
name|void
name|testAppsQueryStatesInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"states"
argument_list|,
literal|"INVALID_test"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid state query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringContains
argument_list|(
literal|"exception message"
argument_list|,
literal|"Invalid application-state INVALID_test"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStateInvalid ()
specifier|public
name|void
name|testAppsQueryStateInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"state"
argument_list|,
literal|"INVALID_test"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid state query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringContains
argument_list|(
literal|"exception message"
argument_list|,
literal|"Invalid application-state INVALID_test"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinalStatus ()
specifier|public
name|void
name|testAppsQueryFinalStatus
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finalStatus"
argument_list|,
name|FinalApplicationStatus
operator|.
name|UNDEFINED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|json
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfo
argument_list|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
argument_list|,
name|app1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinalStatusNone ()
specifier|public
name|void
name|testAppsQueryFinalStatusNone
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finalStatus"
argument_list|,
name|FinalApplicationStatus
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not null"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinalStatusInvalid ()
specifier|public
name|void
name|testAppsQueryFinalStatusInvalid
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finalStatus"
argument_list|,
literal|"INVALID_test"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid state query"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringContains
argument_list|(
literal|"exception message"
argument_list|,
literal|"org.apache.hadoop.yarn.api.records.FinalApplicationStatus.INVALID_test"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"IllegalArgumentException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"java.lang.IllegalArgumentException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAppsQueryUser ()
specifier|public
name|void
name|testAppsQueryUser
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user"
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryQueue ()
specifier|public
name|void
name|testAppsQueryQueue
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"queue"
argument_list|,
literal|"default"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryLimit ()
specifier|public
name|void
name|testAppsQueryLimit
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"limit"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartBegin ()
specifier|public
name|void
name|testAppsQueryStartBegin
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartBeginSome ()
specifier|public
name|void
name|testAppsQueryStartBeginSome
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartEnd ()
specifier|public
name|void
name|testAppsQueryStartEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"apps is not empty"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|json
operator|.
name|get
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryStartBeginEnd ()
specifier|public
name|void
name|testAppsQueryStartBeginEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"startedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinishBegin ()
specifier|public
name|void
name|testAppsQueryFinishBegin
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinishEnd ()
specifier|public
name|void
name|testAppsQueryFinishEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryFinishBeginEnd ()
specifier|public
name|void
name|testAppsQueryFinishBeginEnd
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeBegin"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|start
argument_list|)
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"finishedTimeEnd"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|end
argument_list|)
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppsQueryAppTypes ()
specifier|public
name|void
name|testAppsQueryAppTypes
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|"NON-YARN"
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"MAPREDUCE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|apps
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|array
init|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MAPREDUCE"
argument_list|,
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"YARN"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"MAPREDUCE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"MAPREDUCE"
argument_list|)
operator|)
operator|||
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"MAPREDUCE"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"YARN,NON-YARN"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
operator|||
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|""
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"YARN,NON-YARN"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"MAPREDUCE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"YARN"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|""
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"YARN"
argument_list|,
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|",,, ,, YARN ,, ,"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"YARN"
argument_list|,
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|",,, ,,  ,, ,"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"YARN, ,NON-YARN, ,,"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
operator|||
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"NON-YARN"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|" YARN, ,  ,,,"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"MAPREDUCE , ,, ,"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|apps
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|apps
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|=
name|apps
operator|.
name|getJSONArray
argument_list|(
literal|"app"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|array
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"MAPREDUCE"
argument_list|)
operator|)
operator|||
operator|(
name|array
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"YARN"
argument_list|)
operator|&&
name|array
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"MAPREDUCE"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppStatistics ()
specifier|public
name|void
name|testAppStatistics
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// finish App
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|()
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|"OTHER"
argument_list|)
expr_stmt|;
comment|// zero type, zero state
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appstatistics"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|appsStatInfo
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"appStatInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|appsStatInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|statItems
init|=
name|appsStatInfo
operator|.
name|getJSONArray
argument_list|(
literal|"statItem"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
name|YarnApplicationState
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
name|statItems
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|YarnApplicationState
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"FINISHED"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// zero type, one state
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appstatistics"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|appsStatInfo
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"appStatInfo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|appsStatInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|statItems
operator|=
name|appsStatInfo
operator|.
name|getJSONArray
argument_list|(
literal|"statItem"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|statItems
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ACCEPTED"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
comment|// one type, zero state
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appstatistics"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"MAPREDUCE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|appsStatInfo
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"appStatInfo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|appsStatInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|statItems
operator|=
name|appsStatInfo
operator|.
name|getJSONArray
argument_list|(
literal|"statItem"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
name|YarnApplicationState
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|,
name|statItems
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|YarnApplicationState
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
literal|"mapreduce"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"FINISHED"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// two types, zero state
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appstatistics"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"MAPREDUCE,OTHER"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|exception
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringContains
argument_list|(
literal|"exception message"
argument_list|,
literal|"we temporarily support at most one applicationType"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"exception className"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|className
argument_list|)
expr_stmt|;
comment|// one type, two states
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appstatistics"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"states"
argument_list|,
name|YarnApplicationState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|YarnApplicationState
operator|.
name|ACCEPTED
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"applicationTypes"
argument_list|,
literal|"MAPREDUCE"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|appsStatInfo
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"appStatInfo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|appsStatInfo
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|statItems
operator|=
name|appsStatInfo
operator|.
name|getJSONArray
argument_list|(
literal|"statItem"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|statItems
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|statItem1
init|=
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JSONObject
name|statItem2
init|=
name|statItems
operator|.
name|getJSONObject
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|statItem1
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
operator|&&
name|statItem2
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"FINISHED"
argument_list|)
operator|)
operator|||
operator|(
name|statItem2
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"ACCEPTED"
argument_list|)
operator|&&
name|statItem1
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"FINISHED"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mapreduce"
argument_list|,
name|statItem1
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|statItem1
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mapreduce"
argument_list|,
name|statItem2
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|statItem2
operator|.
name|getString
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
comment|// invalid state
name|r
operator|=
name|resource
argument_list|()
expr_stmt|;
name|response
operator|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appstatistics"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"states"
argument_list|,
literal|"wrong_state"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|json
operator|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
expr_stmt|;
name|type
operator|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
expr_stmt|;
name|className
operator|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringContains
argument_list|(
literal|"exception message"
argument_list|,
literal|"Invalid application-state wrong_state"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"exception className"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSingleApp ()
specifier|public
name|void
name|testSingleApp
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testSingleAppsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnmarshalAppInfo ()
specifier|public
name|void
name|testUnmarshalAppInfo
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppInfo
name|appInfo
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|AppInfo
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Check only a few values; all are validated in testSingleApp.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|appInfo
operator|.
name|getAppId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|app1
operator|.
name|getName
argument_list|()
argument_list|,
name|appInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|app1
operator|.
name|createApplicationState
argument_list|()
argument_list|,
name|appInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|app1
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|appInfo
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppsSlash ()
specifier|public
name|void
name|testSingleAppsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testSingleAppsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppsDefault ()
specifier|public
name|void
name|testSingleAppsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testSingleAppsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|,
name|app1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidApp ()
specifier|public
name|void
name|testInvalidApp
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"application_invalid_12"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid appid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.IllegalArgumentException: Invalid ApplicationId:"
operator|+
literal|" application_invalid_12"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNonexistApp ()
specifier|public
name|void
name|testNonexistApp
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"application_00000_0099"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid appid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: app with id: application_00000_0099 not found"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSingleAppsHelper (String path, RMApp app, String media)
specifier|public
name|void
name|testSingleAppsHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfo
argument_list|(
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"app"
argument_list|)
argument_list|,
name|app
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppsXML ()
specifier|public
name|void
name|testSingleAppsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"app"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppsXML
argument_list|(
name|nodes
argument_list|,
name|app1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyAppsXML (NodeList nodes, RMApp app, boolean hasResourceReq)
specifier|public
name|void
name|verifyAppsXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|boolean
name|hasResourceReq
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyAppInfoGeneric
argument_list|(
name|app
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"user"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"applicationType"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"queue"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"priority"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"finalStatus"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"progress"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"trackingUI"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"diagnostics"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"clusterId"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"startedTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"finishedTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"elapsedTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"amHostHttpAddress"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"amContainerLogs"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"allocatedMB"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"allocatedVCores"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"runningContainers"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"queueUsagePercentage"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"clusterUsagePercentage"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"preemptedResourceMB"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"preemptedResourceVCores"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"numNonAMContainerPreempted"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"numAMContainerPreempted"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"logAggregationStatus"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlBoolean
argument_list|(
name|element
argument_list|,
literal|"unmanagedApplication"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"appNodeLabelExpression"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"amNodeLabelExpression"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"amRPCAddress"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasResourceReq
condition|)
block|{
name|assertEquals
argument_list|(
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"resourceRequests"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Element
name|resourceRequests
init|=
operator|(
name|Element
operator|)
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"resourceRequests"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|capability
init|=
operator|(
name|Element
operator|)
name|resourceRequests
operator|.
name|getElementsByTagName
argument_list|(
literal|"capability"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rr
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|verifyResourceRequestsGeneric
argument_list|(
name|rr
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|resourceRequests
argument_list|,
literal|"nodeLabelExpression"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|resourceRequests
argument_list|,
literal|"numContainers"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlBoolean
argument_list|(
name|resourceRequests
argument_list|,
literal|"relaxLocality"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|resourceRequests
argument_list|,
literal|"priority"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|resourceRequests
argument_list|,
literal|"resourceName"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|capability
argument_list|,
literal|"memory"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|capability
argument_list|,
literal|"vCores"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|resourceRequests
argument_list|,
literal|"executionType"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlBoolean
argument_list|(
name|resourceRequests
argument_list|,
literal|"enforceExecutionType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyAppInfo (JSONObject info, RMApp app, boolean hasResourceReqs)
specifier|public
name|void
name|verifyAppInfo
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|boolean
name|hasResourceReqs
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|int
name|expectedNumberOfElements
init|=
literal|34
operator|+
operator|(
name|hasResourceReqs
condition|?
literal|2
else|:
literal|0
operator|)
decl_stmt|;
name|String
name|appNodeLabelExpression
init|=
literal|null
decl_stmt|;
name|String
name|amNodeLabelExpression
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|expectedNumberOfElements
operator|++
expr_stmt|;
name|appNodeLabelExpression
operator|=
name|info
operator|.
name|getString
argument_list|(
literal|"appNodeLabelExpression"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|app
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabelExpression
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|expectedNumberOfElements
operator|++
expr_stmt|;
name|amNodeLabelExpression
operator|=
name|info
operator|.
name|getString
argument_list|(
literal|"amNodeLabelExpression"
argument_list|)
expr_stmt|;
block|}
name|String
name|amRPCAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|AppInfo
operator|.
name|getAmRPCAddressFromRMAppAttempt
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|expectedNumberOfElements
operator|++
expr_stmt|;
name|amRPCAddress
operator|=
name|info
operator|.
name|getString
argument_list|(
literal|"amRPCAddress"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
name|expectedNumberOfElements
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppInfoGeneric
argument_list|(
name|app
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"applicationType"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"queue"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"priority"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"finalStatus"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"progress"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"trackingUI"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"diagnostics"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"clusterId"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"startedTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"finishedTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"elapsedTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"amHostHttpAddress"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"amContainerLogs"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"allocatedMB"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"allocatedVCores"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"runningContainers"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"queueUsagePercentage"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"clusterUsagePercentage"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"preemptedResourceMB"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"preemptedResourceVCores"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"numNonAMContainerPreempted"
argument_list|)
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"numAMContainerPreempted"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"logAggregationStatus"
argument_list|)
argument_list|,
name|info
operator|.
name|getBoolean
argument_list|(
literal|"unmanagedApplication"
argument_list|)
argument_list|,
name|appNodeLabelExpression
argument_list|,
name|amNodeLabelExpression
argument_list|,
name|amRPCAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasResourceReqs
condition|)
block|{
name|verifyResourceRequests
argument_list|(
name|info
operator|.
name|getJSONArray
argument_list|(
literal|"resourceRequests"
argument_list|)
argument_list|,
name|app
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAppInfoGeneric (RMApp app, String id, String user, String name, String applicationType, String queue, int prioirty, String state, String finalStatus, float progress, String trackingUI, String diagnostics, long clusterId, long startedTime, long finishedTime, long elapsedTime, String amHostHttpAddress, String amContainerLogs, int allocatedMB, int allocatedVCores, int numContainers, float queueUsagePerc, float clusterUsagePerc, int preemptedResourceMB, int preemptedResourceVCores, int numNonAMContainerPreempted, int numAMContainerPreempted, String logAggregationStatus, boolean unmanagedApplication, String appNodeLabelExpression, String amNodeLabelExpression, String amRPCAddress)
specifier|public
name|void
name|verifyAppInfoGeneric
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|applicationType
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|prioirty
parameter_list|,
name|String
name|state
parameter_list|,
name|String
name|finalStatus
parameter_list|,
name|float
name|progress
parameter_list|,
name|String
name|trackingUI
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|long
name|clusterId
parameter_list|,
name|long
name|startedTime
parameter_list|,
name|long
name|finishedTime
parameter_list|,
name|long
name|elapsedTime
parameter_list|,
name|String
name|amHostHttpAddress
parameter_list|,
name|String
name|amContainerLogs
parameter_list|,
name|int
name|allocatedMB
parameter_list|,
name|int
name|allocatedVCores
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|float
name|queueUsagePerc
parameter_list|,
name|float
name|clusterUsagePerc
parameter_list|,
name|int
name|preemptedResourceMB
parameter_list|,
name|int
name|preemptedResourceVCores
parameter_list|,
name|int
name|numNonAMContainerPreempted
parameter_list|,
name|int
name|numAMContainerPreempted
parameter_list|,
name|String
name|logAggregationStatus
parameter_list|,
name|boolean
name|unmanagedApplication
parameter_list|,
name|String
name|appNodeLabelExpression
parameter_list|,
name|String
name|amNodeLabelExpression
parameter_list|,
name|String
name|amRPCAddress
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"id"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"user"
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"name"
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"applicationType"
argument_list|,
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|applicationType
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"queue"
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"priority doesn't match"
argument_list|,
literal|0
argument_list|,
name|prioirty
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"state"
argument_list|,
name|app
operator|.
name|getState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"finalStatus"
argument_list|,
name|app
operator|.
name|getFinalApplicationStatus
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|finalStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"progress doesn't match"
argument_list|,
literal|0
argument_list|,
name|progress
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"UNASSIGNED"
operator|.
name|equals
argument_list|(
name|trackingUI
argument_list|)
condition|)
block|{
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"trackingUI"
argument_list|,
literal|"UNASSIGNED"
argument_list|,
name|trackingUI
argument_list|)
expr_stmt|;
block|}
name|WebServicesTestUtils
operator|.
name|checkStringEqual
argument_list|(
literal|"diagnostics"
argument_list|,
name|app
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|diagnostics
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"clusterId doesn't match"
argument_list|,
name|ResourceManager
operator|.
name|getClusterTimeStamp
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"startedTime doesn't match"
argument_list|,
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|startedTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"finishedTime doesn't match"
argument_list|,
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|finishedTime
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"elapsed time not greater than 0"
argument_list|,
name|elapsedTime
operator|>
literal|0
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"amHostHttpAddress"
argument_list|,
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|amHostHttpAddress
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"amContainerLogs doesn't match"
argument_list|,
name|amContainerLogs
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"amContainerLogs doesn't contain user info"
argument_list|,
name|amContainerLogs
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocatedMB doesn't match"
argument_list|,
literal|1024
argument_list|,
name|allocatedMB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"allocatedVCores doesn't match"
argument_list|,
literal|1
argument_list|,
name|allocatedVCores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queueUsagePerc doesn't match"
argument_list|,
literal|50.0f
argument_list|,
name|queueUsagePerc
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"clusterUsagePerc doesn't match"
argument_list|,
literal|50.0f
argument_list|,
name|clusterUsagePerc
argument_list|,
literal|0.01f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numContainers doesn't match"
argument_list|,
literal|1
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptedResourceMB doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getResourcePreempted
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|preemptedResourceMB
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptedResourceVCores doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getResourcePreempted
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|preemptedResourceVCores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numNonAMContainerPreempted doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getNumNonAMContainersPreempted
argument_list|()
argument_list|,
name|numNonAMContainerPreempted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numAMContainerPreempted doesn't match"
argument_list|,
name|app
operator|.
name|getRMAppMetrics
argument_list|()
operator|.
name|getNumAMContainersPreempted
argument_list|()
argument_list|,
name|numAMContainerPreempted
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Log aggregation Status doesn't match"
argument_list|,
name|app
operator|.
name|getLogAggregationStatusForAppReport
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|logAggregationStatus
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unmanagedApplication doesn't match"
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getUnmanagedAM
argument_list|()
argument_list|,
name|unmanagedApplication
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unmanagedApplication doesn't match"
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|appNodeLabelExpression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unmanagedApplication doesn't match"
argument_list|,
name|app
operator|.
name|getAMResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|amNodeLabelExpression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"amRPCAddress"
argument_list|,
name|AppInfo
operator|.
name|getAmRPCAddressFromRMAppAttempt
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
argument_list|,
name|amRPCAddress
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyResourceRequests (JSONArray resourceRequest, RMApp app)
specifier|public
name|void
name|verifyResourceRequests
parameter_list|(
name|JSONArray
name|resourceRequest
parameter_list|,
name|RMApp
name|app
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONObject
name|requestInfo
init|=
name|resourceRequest
operator|.
name|getJSONObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rr
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|verifyResourceRequestsGeneric
argument_list|(
name|rr
argument_list|,
name|requestInfo
operator|.
name|getString
argument_list|(
literal|"nodeLabelExpression"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getInt
argument_list|(
literal|"numContainers"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getBoolean
argument_list|(
literal|"relaxLocality"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getInt
argument_list|(
literal|"priority"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getString
argument_list|(
literal|"resourceName"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getJSONObject
argument_list|(
literal|"capability"
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"memory"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getJSONObject
argument_list|(
literal|"capability"
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"vCores"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getJSONObject
argument_list|(
literal|"executionTypeRequest"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"executionType"
argument_list|)
argument_list|,
name|requestInfo
operator|.
name|getJSONObject
argument_list|(
literal|"executionTypeRequest"
argument_list|)
operator|.
name|getBoolean
argument_list|(
literal|"enforceExecutionType"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyResourceRequestsGeneric (ResourceRequest request, String nodeLabelExpression, int numContainers, boolean relaxLocality, int priority, String resourceName, long memory, long vCores, String executionType, boolean enforceExecutionType)
specifier|public
name|void
name|verifyResourceRequestsGeneric
parameter_list|(
name|ResourceRequest
name|request
parameter_list|,
name|String
name|nodeLabelExpression
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|boolean
name|relaxLocality
parameter_list|,
name|int
name|priority
parameter_list|,
name|String
name|resourceName
parameter_list|,
name|long
name|memory
parameter_list|,
name|long
name|vCores
parameter_list|,
name|String
name|executionType
parameter_list|,
name|boolean
name|enforceExecutionType
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"nodeLabelExpression doesn't match"
argument_list|,
name|request
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|,
name|nodeLabelExpression
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numContainers doesn't match"
argument_list|,
name|request
operator|.
name|getNumContainers
argument_list|()
argument_list|,
name|numContainers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"relaxLocality doesn't match"
argument_list|,
name|request
operator|.
name|getRelaxLocality
argument_list|()
argument_list|,
name|relaxLocality
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"priority does not match"
argument_list|,
name|request
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"resourceName does not match"
argument_list|,
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|resourceName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"memory does not match"
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"vCores does not match"
argument_list|,
name|request
operator|.
name|getCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|vCores
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"executionType does not match"
argument_list|,
name|request
operator|.
name|getExecutionTypeRequest
argument_list|()
operator|.
name|getExecutionType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|executionType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"enforceExecutionType does not match"
argument_list|,
name|request
operator|.
name|getExecutionTypeRequest
argument_list|()
operator|.
name|getEnforceExecutionType
argument_list|()
argument_list|,
name|enforceExecutionType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAttempts ()
specifier|public
name|void
name|testAppAttempts
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppAttemptsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testMultipleAppAttempts ()
specifier|public
name|void
name|testMultipleAppAttempts
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|amNodeManager
argument_list|)
decl_stmt|;
name|int
name|maxAppAttempts
init|=
name|rm
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|maxAppAttempts
operator|>
literal|1
argument_list|)
expr_stmt|;
name|int
name|numAttempt
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
if|if
condition|(
name|numAttempt
operator|==
name|maxAppAttempts
condition|)
block|{
name|rm
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// wait for app to start a new attempt.
name|rm
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|am
operator|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|amNodeManager
argument_list|)
expr_stmt|;
name|numAttempt
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"incorrect number of attempts"
argument_list|,
name|maxAppAttempts
argument_list|,
name|app1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|testAppAttemptsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAttemptsSlash ()
specifier|public
name|void
name|testAppAttemptsSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppAttemptsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|,
name|app1
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAttemtpsDefault ()
specifier|public
name|void
name|testAppAttemtpsDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testAppAttemptsHelper
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
argument_list|,
name|app1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidAppIdGetAttempts ()
specifier|public
name|void
name|testInvalidAppIdGetAttempts
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"application_invalid_12"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid appAttempt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.IllegalArgumentException: Invalid ApplicationId:"
operator|+
literal|" application_invalid_12"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidAppAttemptId ()
specifier|public
name|void
name|testInvalidAppAttemptId
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempt_invalid_12_000001"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid appAttempt"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.IllegalArgumentException: Invalid AppAttemptId:"
operator|+
literal|" appattempt_invalid_12_000001"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"BadRequestException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.BadRequestException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNonexistAppAttempts ()
specifier|public
name|void
name|testNonexistAppAttempts
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
try|try
block|{
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
literal|"application_00000_0099"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception on invalid appid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UniformInterfaceException
name|ue
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|ue
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|msg
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|exception
init|=
name|msg
operator|.
name|getJSONObject
argument_list|(
literal|"RemoteException"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|exception
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"exception"
argument_list|)
decl_stmt|;
name|String
name|classname
init|=
name|exception
operator|.
name|getString
argument_list|(
literal|"javaClassName"
argument_list|)
decl_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception message"
argument_list|,
literal|"java.lang.Exception: app with id: application_00000_0099 not found"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception type"
argument_list|,
literal|"NotFoundException"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"exception classname"
argument_list|,
literal|"org.apache.hadoop.yarn.webapp.NotFoundException"
argument_list|,
name|classname
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAppAttemptsHelper (String path, RMApp app, String media)
specifier|public
name|void
name|testAppAttemptsHelper
parameter_list|(
name|String
name|path
parameter_list|,
name|RMApp
name|app
parameter_list|,
name|String
name|media
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|accept
argument_list|(
name|media
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|jsonAppAttempts
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"appAttempts"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|jsonAppAttempts
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|jsonArray
init|=
name|jsonAppAttempts
operator|.
name|getJSONArray
argument_list|(
literal|"appAttempt"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|RMAppAttempt
argument_list|>
name|attempts
init|=
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|,
name|jsonArray
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify these parallel arrays are the same
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMAppAttempt
name|attempt
range|:
name|attempts
control|)
block|{
name|verifyAppAttemptsInfo
argument_list|(
name|jsonArray
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|,
name|attempt
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAppAttemptsXML ()
specifier|public
name|void
name|testAppAttemptsXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"testwordcount"
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|path
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
literal|"appattempts"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"appAttempts"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|attempt
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"appAttempt"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|attempt
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppAttemptsXML
argument_list|(
name|attempt
argument_list|,
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyAppAttemptsXML (NodeList nodes, RMAppAttempt appAttempt, String user)
specifier|public
name|void
name|verifyAppAttemptsXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|,
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyAppAttemptInfoGeneric
argument_list|(
name|appAttempt
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"startTime"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"containerId"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"nodeHttpAddress"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"nodeId"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"logsLink"
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAppAttemptsInfo (JSONObject info, RMAppAttempt appAttempt, String user)
specifier|public
name|void
name|verifyAppAttemptsInfo
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|10
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppAttemptInfoGeneric
argument_list|(
name|appAttempt
argument_list|,
name|info
operator|.
name|getInt
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|info
operator|.
name|getLong
argument_list|(
literal|"startTime"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"containerId"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"nodeHttpAddress"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"nodeId"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"logsLink"
argument_list|)
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAppAttemptInfoGeneric (RMAppAttempt appAttempt, int id, long startTime, String containerId, String nodeHttpAddress, String nodeId, String logsLink, String user)
specifier|public
name|void
name|verifyAppAttemptInfoGeneric
parameter_list|(
name|RMAppAttempt
name|appAttempt
parameter_list|,
name|int
name|id
parameter_list|,
name|long
name|startTime
parameter_list|,
name|String
name|containerId
parameter_list|,
name|String
name|nodeHttpAddress
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|String
name|logsLink
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"id doesn't match"
argument_list|,
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
operator|.
name|getAttemptId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"startedTime doesn't match"
argument_list|,
name|appAttempt
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"containerId"
argument_list|,
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|containerId
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"nodeHttpAddress"
argument_list|,
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeHttpAddress
argument_list|()
argument_list|,
name|nodeHttpAddress
argument_list|)
expr_stmt|;
name|WebServicesTestUtils
operator|.
name|checkStringMatch
argument_list|(
literal|"nodeId"
argument_list|,
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"logsLink doesn't match "
argument_list|,
name|logsLink
operator|.
name|startsWith
argument_list|(
literal|"http://"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"logsLink doesn't contain user info"
argument_list|,
name|logsLink
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

