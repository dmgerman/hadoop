begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|math
operator|.
name|RandomUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|ApplicationPlacementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserGroupMappingPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ContainerUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerDynamicEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|queuemanagement
operator|.
name|GuaranteedOrZeroCapacityOverTimePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|QueueEntitlement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueueUtils
operator|.
name|EPSILON
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|DOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|FAIR_APP_ORDERING_POLICY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|TestCapacitySchedulerAutoCreatedQueueBase
specifier|public
class|class
name|TestCapacitySchedulerAutoCreatedQueueBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCapacitySchedulerAutoCreatedQueueBase
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|public
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|NULL_UPDATE_REQUESTS
specifier|public
specifier|final
specifier|static
name|ContainerUpdates
name|NULL_UPDATE_REQUESTS
init|=
operator|new
name|ContainerUpdates
argument_list|()
decl_stmt|;
DECL|field|A
specifier|public
specifier|static
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
DECL|field|B
specifier|public
specifier|static
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
DECL|field|C
specifier|public
specifier|static
specifier|final
name|String
name|C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
decl_stmt|;
DECL|field|D
specifier|public
specifier|static
specifier|final
name|String
name|D
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".d"
decl_stmt|;
DECL|field|E
specifier|public
specifier|static
specifier|final
name|String
name|E
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".e"
decl_stmt|;
DECL|field|A1
specifier|public
specifier|static
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
DECL|field|A2
specifier|public
specifier|static
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
DECL|field|B1
specifier|public
specifier|static
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
DECL|field|B2
specifier|public
specifier|static
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
DECL|field|B3
specifier|public
specifier|static
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
DECL|field|C1
specifier|public
specifier|static
specifier|final
name|String
name|C1
init|=
name|C
operator|+
literal|".c1"
decl_stmt|;
DECL|field|C2
specifier|public
specifier|static
specifier|final
name|String
name|C2
init|=
name|C
operator|+
literal|".c2"
decl_stmt|;
DECL|field|C3
specifier|public
specifier|static
specifier|final
name|String
name|C3
init|=
name|C
operator|+
literal|".c3"
decl_stmt|;
DECL|field|A_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|A_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|B_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|B_CAPACITY
init|=
literal|40f
decl_stmt|;
DECL|field|C_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|C_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|D_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|D_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|A1_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|A1_CAPACITY
init|=
literal|30
decl_stmt|;
DECL|field|A2_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|A2_CAPACITY
init|=
literal|70
decl_stmt|;
DECL|field|B1_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|B1_CAPACITY
init|=
literal|60f
decl_stmt|;
DECL|field|B2_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|B2_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|B3_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|B3_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|C1_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|C1_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|C2_CAPACITY
specifier|public
specifier|static
specifier|final
name|float
name|C2_CAPACITY
init|=
literal|20f
decl_stmt|;
DECL|field|NODE_MEMORY
specifier|public
specifier|static
specifier|final
name|int
name|NODE_MEMORY
init|=
literal|16
decl_stmt|;
DECL|field|NODE1_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|NODE1_VCORES
init|=
literal|16
decl_stmt|;
DECL|field|NODE2_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|NODE2_VCORES
init|=
literal|32
decl_stmt|;
DECL|field|NODE3_VCORES
specifier|public
specifier|static
specifier|final
name|int
name|NODE3_VCORES
init|=
literal|48
decl_stmt|;
DECL|field|USER
specifier|public
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user_"
decl_stmt|;
DECL|field|USER0
specifier|public
specifier|static
specifier|final
name|String
name|USER0
init|=
name|USER
operator|+
literal|0
decl_stmt|;
DECL|field|USER1
specifier|public
specifier|static
specifier|final
name|String
name|USER1
init|=
name|USER
operator|+
literal|1
decl_stmt|;
DECL|field|USER2
specifier|public
specifier|static
specifier|final
name|String
name|USER2
init|=
name|USER
operator|+
literal|2
decl_stmt|;
DECL|field|USER3
specifier|public
specifier|static
specifier|final
name|String
name|USER3
init|=
name|USER
operator|+
literal|3
decl_stmt|;
DECL|field|PARENT_QUEUE
specifier|public
specifier|static
specifier|final
name|String
name|PARENT_QUEUE
init|=
literal|"c"
decl_stmt|;
DECL|field|accessibleNodeLabelsOnC
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|accessibleNodeLabelsOnC
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|NODEL_LABEL_GPU
specifier|public
specifier|static
specifier|final
name|String
name|NODEL_LABEL_GPU
init|=
literal|"GPU"
decl_stmt|;
DECL|field|NODEL_LABEL_SSD
specifier|public
specifier|static
specifier|final
name|String
name|NODEL_LABEL_SSD
init|=
literal|"SSD"
decl_stmt|;
DECL|field|mockRM
specifier|protected
name|MockRM
name|mockRM
init|=
literal|null
decl_stmt|;
DECL|field|nm1
specifier|protected
name|MockNM
name|nm1
init|=
literal|null
decl_stmt|;
DECL|field|nm2
specifier|protected
name|MockNM
name|nm2
init|=
literal|null
decl_stmt|;
DECL|field|nm3
specifier|protected
name|MockNM
name|nm3
init|=
literal|null
decl_stmt|;
DECL|field|cs
specifier|protected
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|tcs
specifier|private
specifier|final
name|TestCapacityScheduler
name|tcs
init|=
operator|new
name|TestCapacityScheduler
argument_list|()
decl_stmt|;
DECL|field|dispatcher
specifier|protected
name|SpyDispatcher
name|dispatcher
decl_stmt|;
DECL|field|rmAppEventEventHandler
specifier|private
specifier|static
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|rmAppEventEventHandler
decl_stmt|;
DECL|class|SpyDispatcher
specifier|public
specifier|static
class|class
name|SpyDispatcher
extends|extends
name|AsyncDispatcher
block|{
DECL|field|eventQueue
specifier|public
specifier|static
name|BlockingQueue
argument_list|<
name|Event
argument_list|>
name|eventQueue
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|class|SpyRMAppEventHandler
specifier|public
specifier|static
class|class
name|SpyRMAppEventHandler
implements|implements
name|EventHandler
argument_list|<
name|Event
argument_list|>
block|{
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|eventQueue
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|dispatch (Event event)
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|eventQueue
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
argument_list|<
name|Event
argument_list|>
name|getEventHandler
parameter_list|()
block|{
return|return
name|rmAppEventEventHandler
return|;
block|}
DECL|method|spyOnNextEvent (Event expectedEvent, long timeout)
name|void
name|spyOnNextEvent
parameter_list|(
name|Event
name|expectedEvent
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Event
name|event
init|=
name|eventQueue
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedEvent
operator|.
name|getType
argument_list|()
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedEvent
operator|.
name|getClass
argument_list|()
argument_list|,
name|event
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|setupQueueMappings
argument_list|(
name|conf
argument_list|,
name|PARENT_QUEUE
argument_list|,
literal|true
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
operator|new
name|SpyDispatcher
argument_list|()
expr_stmt|;
name|rmAppEventEventHandler
operator|=
operator|new
name|SpyDispatcher
operator|.
name|SpyRMAppEventHandler
argument_list|()
expr_stmt|;
name|dispatcher
operator|.
name|register
argument_list|(
name|RMAppEventType
operator|.
name|class
argument_list|,
name|rmAppEventEventHandler
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|mgr
init|=
name|setupNodeLabelManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|mockRM
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
expr_stmt|;
name|cs
operator|=
operator|(
name|CapacityScheduler
operator|)
name|mockRM
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|cs
operator|.
name|updatePlacementRules
argument_list|()
expr_stmt|;
name|mockRM
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|setupNodes
argument_list|(
name|mockRM
argument_list|)
expr_stmt|;
block|}
DECL|method|setupNodes (MockRM newMockRM)
specifier|protected
name|void
name|setupNodes
parameter_list|(
name|MockRM
name|newMockRM
parameter_list|)
throws|throws
name|Exception
block|{
name|nm1
operator|=
comment|// label = SSD
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
name|NODE_MEMORY
operator|*
name|GB
argument_list|,
name|NODE1_VCORES
argument_list|,
name|newMockRM
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|=
comment|// label = GPU
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
name|NODE_MEMORY
operator|*
name|GB
argument_list|,
name|NODE2_VCORES
argument_list|,
name|newMockRM
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm3
operator|=
comment|// label = ""
operator|new
name|MockNM
argument_list|(
literal|"h3:1234"
argument_list|,
name|NODE_MEMORY
operator|*
name|GB
argument_list|,
name|NODE3_VCORES
argument_list|,
name|newMockRM
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|registerNode
argument_list|()
expr_stmt|;
block|}
DECL|method|setupQueueMappings ( CapacitySchedulerConfiguration conf, String parentQueue, boolean overrideWithQueueMappings, int[] userIds)
specifier|public
specifier|static
name|CapacitySchedulerConfiguration
name|setupQueueMappings
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|,
name|String
name|parentQueue
parameter_list|,
name|boolean
name|overrideWithQueueMappings
parameter_list|,
name|int
index|[]
name|userIds
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queuePlacementRules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queuePlacementRules
operator|.
name|add
argument_list|(
name|YarnConfiguration
operator|.
name|USER_GROUP_PLACEMENT_RULE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePlacementRules
argument_list|(
name|queuePlacementRules
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|>
name|existingMappings
init|=
name|conf
operator|.
name|getQueueMappings
argument_list|()
decl_stmt|;
comment|//set queue mapping
name|List
argument_list|<
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|>
name|queueMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|userIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//Set C as parent queue name for auto queue creation
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
name|userQueueMapping
init|=
operator|new
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|(
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
operator|.
name|MappingType
operator|.
name|USER
argument_list|,
name|USER
operator|+
name|userIds
index|[
name|i
index|]
argument_list|,
name|getQueueMapping
argument_list|(
name|parentQueue
argument_list|,
name|USER
operator|+
name|userIds
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|queueMappings
operator|.
name|add
argument_list|(
name|userQueueMapping
argument_list|)
expr_stmt|;
block|}
name|existingMappings
operator|.
name|addAll
argument_list|(
name|queueMappings
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueueMappings
argument_list|(
name|existingMappings
argument_list|)
expr_stmt|;
comment|//override with queue mappings
name|conf
operator|.
name|setOverrideWithQueueMappings
argument_list|(
name|overrideWithQueueMappings
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * @param conf, to be modified    * @return, CS configuration which has C as an auto creation enabled parent    * queue    *<p>    * root /     \      \       \ a        b      c    d / \    /  |  \ a1  a2 b1    * b2  b3    */
DECL|method|setupQueueConfiguration ( CapacitySchedulerConfiguration conf)
specifier|public
specifier|static
name|CapacitySchedulerConfiguration
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|//setup new queues with one of them auto enabled
comment|// Define top-level queues
comment|// Set childQueue for root
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
name|A_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
name|C_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|D
argument_list|,
name|D_CAPACITY
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
name|A1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|A1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
name|A2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|A2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
name|B1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
name|B2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
name|B3_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B3
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Setup leaf queue template configs
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|C
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|C
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimit
argument_list|(
name|C
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup "
operator|+
name|C
operator|+
literal|" as an auto leaf creation enabled parent queue"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|D
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|D
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimit
argument_list|(
name|D
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|D
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
comment|//Setup leaf queue template configs
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|D
argument_list|,
literal|10.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|D
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimit
argument_list|(
name|D
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimitFactor
argument_list|(
name|D
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
operator|+
name|C
operator|+
name|DOT
operator|+
name|CapacitySchedulerConfiguration
operator|.
name|AUTO_CREATED_LEAF_QUEUE_TEMPLATE_PREFIX
operator|+
name|DOT
operator|+
name|CapacitySchedulerConfiguration
operator|.
name|ORDERING_POLICY
argument_list|,
name|FAIR_APP_ORDERING_POLICY
argument_list|)
expr_stmt|;
name|accessibleNodeLabelsOnC
operator|.
name|add
argument_list|(
name|NODEL_LABEL_GPU
argument_list|)
expr_stmt|;
name|accessibleNodeLabelsOnC
operator|.
name|add
argument_list|(
name|NODEL_LABEL_SSD
argument_list|)
expr_stmt|;
name|accessibleNodeLabelsOnC
operator|.
name|add
argument_list|(
name|NO_LABEL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|C
argument_list|,
name|accessibleNodeLabelsOnC
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|C
argument_list|,
name|NODEL_LABEL_GPU
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|C
argument_list|,
name|NODEL_LABEL_SSD
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup "
operator|+
name|D
operator|+
literal|" as an auto leaf creation enabled parent queue"
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
specifier|public
specifier|static
name|CapacitySchedulerConfiguration
DECL|method|setupQueueConfigurationForSingleAutoCreatedLeafQueue ( CapacitySchedulerConfiguration conf)
name|setupQueueConfigurationForSingleAutoCreatedLeafQueue
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|//setup new queues with one of them auto enabled
comment|// Define top-level queues
comment|// Set childQueue for root
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|100f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreateChildQueueEnabled
argument_list|(
name|C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//Setup leaf queue template configs
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigCapacity
argument_list|(
name|C
argument_list|,
literal|100f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigMaxCapacity
argument_list|(
name|C
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimit
argument_list|(
name|C
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAutoCreatedLeafQueueConfigUserLimitFactor
argument_list|(
name|C
argument_list|,
literal|3.0f
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|mockRM
operator|!=
literal|null
condition|)
block|{
name|mockRM
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|validateCapacities (AutoCreatedLeafQueue autoCreatedLeafQueue, float capacity, float absCapacity, float maxCapacity, float absMaxCapacity)
specifier|protected
name|void
name|validateCapacities
parameter_list|(
name|AutoCreatedLeafQueue
name|autoCreatedLeafQueue
parameter_list|,
name|float
name|capacity
parameter_list|,
name|float
name|absCapacity
parameter_list|,
name|float
name|maxCapacity
parameter_list|,
name|float
name|absMaxCapacity
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|capacity
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|absCapacity
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxCapacity
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|absMaxCapacity
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanupQueue (String queueName)
specifier|protected
name|void
name|cleanupQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|YarnException
block|{
name|AutoCreatedLeafQueue
name|queue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|setEntitlement
argument_list|(
name|queue
argument_list|,
operator|new
name|QueueEntitlement
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ManagedParentQueue
operator|)
name|queue
operator|.
name|getParent
argument_list|()
operator|)
operator|.
name|removeChildQueue
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|getCapacitySchedulerQueueManager
argument_list|()
operator|.
name|removeQueue
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|submitApp (MockRM rm, CSQueue parentQueue, String leafQueueName, String user, int expectedNumAppsInParentQueue, int expectedNumAppsInLeafQueue)
specifier|protected
name|ApplicationId
name|submitApp
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|CSQueue
name|parentQueue
parameter_list|,
name|String
name|leafQueueName
parameter_list|,
name|String
name|user
parameter_list|,
name|int
name|expectedNumAppsInParentQueue
parameter_list|,
name|int
name|expectedNumAppsInLeafQueue
parameter_list|)
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|capacityScheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-auto-queue-activation"
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|leafQueueName
argument_list|)
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInParentQueue
init|=
name|capacityScheduler
operator|.
name|getAppsInQueue
argument_list|(
name|parentQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNumAppsInParentQueue
argument_list|,
name|appsInParentQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInLeafQueue
init|=
name|capacityScheduler
operator|.
name|getAppsInQueue
argument_list|(
name|leafQueueName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNumAppsInLeafQueue
argument_list|,
name|appsInLeafQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rmApp
operator|.
name|getApplicationId
argument_list|()
return|;
block|}
DECL|method|setupQueueMapping ( CapacityScheduler newCS, String user, String parentQueue, String queue)
specifier|protected
name|List
argument_list|<
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|>
name|setupQueueMapping
parameter_list|(
name|CapacityScheduler
name|newCS
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|parentQueue
parameter_list|,
name|String
name|queue
parameter_list|)
block|{
name|List
argument_list|<
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|>
name|queueMappings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|queueMappings
operator|.
name|add
argument_list|(
operator|new
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
argument_list|(
name|UserGroupMappingPlacementRule
operator|.
name|QueueMapping
operator|.
name|MappingType
operator|.
name|USER
argument_list|,
name|user
argument_list|,
name|getQueueMapping
argument_list|(
name|parentQueue
argument_list|,
name|queue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setQueueMappings
argument_list|(
name|queueMappings
argument_list|)
expr_stmt|;
return|return
name|queueMappings
return|;
block|}
DECL|method|setupSchedulerInstance ()
specifier|protected
name|MockRM
name|setupSchedulerInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|setupQueueMappings
argument_list|(
name|conf
argument_list|,
name|PARENT_QUEUE
argument_list|,
literal|true
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|mgr
init|=
name|setupNodeLabelManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockRM
name|newMockRM
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|newMockRM
operator|.
name|start
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CapacityScheduler
operator|)
name|newMockRM
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|setupNodes
argument_list|(
name|newMockRM
argument_list|)
expr_stmt|;
return|return
name|newMockRM
return|;
block|}
DECL|method|getQueueMapping (String parentQueue, String leafQueue)
specifier|static
name|String
name|getQueueMapping
parameter_list|(
name|String
name|parentQueue
parameter_list|,
name|String
name|leafQueue
parameter_list|)
block|{
return|return
name|parentQueue
operator|+
name|DOT
operator|+
name|leafQueue
return|;
block|}
DECL|method|setupNodeLabelManager ( CapacitySchedulerConfiguration conf)
specifier|protected
name|RMNodeLabelsManager
name|setupNodeLabelManager
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|NODEL_LABEL_SSD
argument_list|,
name|NODEL_LABEL_GPU
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|TestUtils
operator|.
name|toSet
argument_list|(
name|NODEL_LABEL_SSD
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|TestUtils
operator|.
name|toSet
argument_list|(
name|NODEL_LABEL_GPU
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
DECL|method|submitApp (CapacityScheduler newCS, String user, String queue, String parentQueue)
specifier|protected
name|ApplicationAttemptId
name|submitApp
parameter_list|(
name|CapacityScheduler
name|newCS
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|parentQueue
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerEvent
name|addAppEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId
argument_list|,
name|queue
argument_list|,
name|user
argument_list|,
operator|new
name|ApplicationPlacementContext
argument_list|(
name|queue
argument_list|,
name|parentQueue
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerEvent
name|addAttemptEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|newCS
operator|.
name|handle
argument_list|(
name|addAppEvent
argument_list|)
expr_stmt|;
name|newCS
operator|.
name|handle
argument_list|(
name|addAttemptEvent
argument_list|)
expr_stmt|;
return|return
name|appAttemptId
return|;
block|}
DECL|method|submitApp (String user, String queue, String nodeLabel)
specifier|protected
name|RMApp
name|submitApp
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|nodeLabel
parameter_list|)
throws|throws
name|Exception
block|{
name|RMApp
name|app
init|=
name|mockRM
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-auto-queue-creation"
operator|+
name|RandomUtils
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|queue
argument_list|,
name|nodeLabel
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|,
name|nodeLabel
argument_list|)
expr_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInC
init|=
name|cs
operator|.
name|getAppsInQueue
argument_list|(
name|PARENT_QUEUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInC
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|queue
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
DECL|method|setEntitlement (AutoCreatedLeafQueue queue, QueueEntitlement entitlement)
name|void
name|setEntitlement
parameter_list|(
name|AutoCreatedLeafQueue
name|queue
parameter_list|,
name|QueueEntitlement
name|entitlement
parameter_list|)
block|{
name|queue
operator|.
name|setCapacity
argument_list|(
name|entitlement
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|.
name|setAbsoluteCapacity
argument_list|(
name|queue
operator|.
name|getParent
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|()
operator|*
name|entitlement
operator|.
name|getCapacity
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: we currently set maxCapacity to capacity
comment|// this might be revised later
name|queue
operator|.
name|setMaxCapacity
argument_list|(
name|entitlement
operator|.
name|getMaxCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateUserAndAppLimits ( AutoCreatedLeafQueue autoCreatedLeafQueue, int maxApps, int maxAppsPerUser)
specifier|protected
name|void
name|validateUserAndAppLimits
parameter_list|(
name|AutoCreatedLeafQueue
name|autoCreatedLeafQueue
parameter_list|,
name|int
name|maxApps
parameter_list|,
name|int
name|maxAppsPerUser
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|maxApps
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getMaxApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxAppsPerUser
argument_list|,
name|autoCreatedLeafQueue
operator|.
name|getMaxApplicationsPerUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|validateInitialQueueEntitlement (CSQueue parentQueue, String leafQueueName, float expectedTotalChildQueueAbsCapacity)
specifier|protected
name|void
name|validateInitialQueueEntitlement
parameter_list|(
name|CSQueue
name|parentQueue
parameter_list|,
name|String
name|leafQueueName
parameter_list|,
name|float
name|expectedTotalChildQueueAbsCapacity
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|validateInitialQueueEntitlement
argument_list|(
name|cs
argument_list|,
name|parentQueue
argument_list|,
name|leafQueueName
argument_list|,
name|expectedTotalChildQueueAbsCapacity
argument_list|)
expr_stmt|;
block|}
DECL|method|validateInitialQueueEntitlement ( CapacityScheduler capacityScheduler, CSQueue parentQueue, String leafQueueName, float expectedTotalChildQueueAbsCapacity)
specifier|protected
name|void
name|validateInitialQueueEntitlement
parameter_list|(
name|CapacityScheduler
name|capacityScheduler
parameter_list|,
name|CSQueue
name|parentQueue
parameter_list|,
name|String
name|leafQueueName
parameter_list|,
name|float
name|expectedTotalChildQueueAbsCapacity
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|ManagedParentQueue
name|autoCreateEnabledParentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
decl_stmt|;
name|GuaranteedOrZeroCapacityOverTimePolicy
name|policy
init|=
operator|(
name|GuaranteedOrZeroCapacityOverTimePolicy
operator|)
name|autoCreateEnabledParentQueue
operator|.
name|getAutoCreatedQueueManagementPolicy
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedTotalChildQueueAbsCapacity
argument_list|,
name|policy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
name|leafQueueName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueEntitlement
argument_list|>
name|expectedEntitlements
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|QueueCapacities
name|cap
init|=
name|autoCreateEnabledParentQueue
operator|.
name|getLeafQueueTemplate
argument_list|()
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|accessibleNodeLabelsOnC
control|)
block|{
name|validateCapacitiesByLabel
argument_list|(
name|autoCreateEnabledParentQueue
argument_list|,
name|leafQueue
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|QueueEntitlement
name|expectedEntitlement
init|=
operator|new
name|QueueEntitlement
argument_list|(
name|cap
operator|.
name|getCapacity
argument_list|(
name|label
argument_list|)
argument_list|,
name|cap
operator|.
name|getMaximumCapacity
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|expectedEntitlements
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|expectedEntitlement
argument_list|)
expr_stmt|;
name|validateEffectiveMinResource
argument_list|(
name|leafQueue
argument_list|,
name|label
argument_list|,
name|expectedEntitlements
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|policy
operator|.
name|isActive
argument_list|(
name|leafQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateCapacitiesByLabel ( ManagedParentQueue autoCreateEnabledParentQueue, AutoCreatedLeafQueue leafQueue, String label)
specifier|protected
name|void
name|validateCapacitiesByLabel
parameter_list|(
name|ManagedParentQueue
name|autoCreateEnabledParentQueue
parameter_list|,
name|AutoCreatedLeafQueue
name|leafQueue
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|autoCreateEnabledParentQueue
operator|.
name|getLeafQueueTemplate
argument_list|()
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|leafQueue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getCapacity
argument_list|(
name|label
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|autoCreateEnabledParentQueue
operator|.
name|getLeafQueueTemplate
argument_list|()
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|,
name|leafQueue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getMaximumCapacity
argument_list|(
name|label
argument_list|)
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
block|}
DECL|method|validateEffectiveMinResource (CSQueue leafQueue, String label, Map<String, QueueEntitlement> expectedQueueEntitlements)
specifier|protected
name|void
name|validateEffectiveMinResource
parameter_list|(
name|CSQueue
name|leafQueue
parameter_list|,
name|String
name|label
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|QueueEntitlement
argument_list|>
name|expectedQueueEntitlements
parameter_list|)
block|{
name|ManagedParentQueue
name|parentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|leafQueue
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|Resource
name|resourceByLabel
init|=
name|mockRM
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
operator|.
name|getResourceByLabel
argument_list|(
name|label
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|)
decl_stmt|;
name|Resource
name|effMinCapacity
init|=
name|Resources
operator|.
name|multiply
argument_list|(
name|resourceByLabel
argument_list|,
name|expectedQueueEntitlements
operator|.
name|get
argument_list|(
name|label
argument_list|)
operator|.
name|getCapacity
argument_list|()
operator|*
name|parentQueue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|effMinCapacity
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|resourceByLabel
argument_list|,
name|leafQueue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|label
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|effMinCapacity
argument_list|,
name|leafQueue
operator|.
name|getEffectiveCapacity
argument_list|(
name|label
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|leafQueue
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getAbsoluteCapacity
argument_list|(
name|label
argument_list|)
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|Resources
operator|.
name|greaterThan
argument_list|(
name|cs
operator|.
name|getResourceCalculator
argument_list|()
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|effMinCapacity
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|effMinCapacity
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|validateActivatedQueueEntitlement (CSQueue parentQueue, String leafQueueName, float expectedTotalChildQueueAbsCapacity, List<QueueManagementChange> queueManagementChanges)
specifier|protected
name|void
name|validateActivatedQueueEntitlement
parameter_list|(
name|CSQueue
name|parentQueue
parameter_list|,
name|String
name|leafQueueName
parameter_list|,
name|float
name|expectedTotalChildQueueAbsCapacity
parameter_list|,
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|queueManagementChanges
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|ManagedParentQueue
name|autoCreateEnabledParentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
decl_stmt|;
name|GuaranteedOrZeroCapacityOverTimePolicy
name|policy
init|=
operator|(
name|GuaranteedOrZeroCapacityOverTimePolicy
operator|)
name|autoCreateEnabledParentQueue
operator|.
name|getAutoCreatedQueueManagementPolicy
argument_list|()
decl_stmt|;
name|QueueCapacities
name|cap
init|=
name|autoCreateEnabledParentQueue
operator|.
name|getLeafQueueTemplate
argument_list|()
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|QueueEntitlement
name|expectedEntitlement
init|=
operator|new
name|QueueEntitlement
argument_list|(
name|cap
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|cap
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|)
decl_stmt|;
comment|//validate capacity
name|validateQueueEntitlements
argument_list|(
name|leafQueueName
argument_list|,
name|expectedEntitlement
argument_list|,
name|queueManagementChanges
argument_list|)
expr_stmt|;
comment|//validate parent queue state
name|assertEquals
argument_list|(
name|expectedTotalChildQueueAbsCapacity
argument_list|,
name|policy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|leafQueueName
argument_list|)
decl_stmt|;
comment|//validate leaf queue state
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|policy
operator|.
name|isActive
argument_list|(
name|leafQueue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateDeactivatedQueueEntitlement (CSQueue parentQueue, String leafQueueName, float expectedTotalChildQueueAbsCapacity, List<QueueManagementChange> queueManagementChanges)
specifier|protected
name|void
name|validateDeactivatedQueueEntitlement
parameter_list|(
name|CSQueue
name|parentQueue
parameter_list|,
name|String
name|leafQueueName
parameter_list|,
name|float
name|expectedTotalChildQueueAbsCapacity
parameter_list|,
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|queueManagementChanges
parameter_list|)
throws|throws
name|SchedulerDynamicEditException
block|{
name|QueueEntitlement
name|expectedEntitlement
init|=
operator|new
name|QueueEntitlement
argument_list|(
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|ManagedParentQueue
name|autoCreateEnabledParentQueue
init|=
operator|(
name|ManagedParentQueue
operator|)
name|parentQueue
decl_stmt|;
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|leafQueueName
argument_list|)
decl_stmt|;
name|GuaranteedOrZeroCapacityOverTimePolicy
name|policy
init|=
operator|(
name|GuaranteedOrZeroCapacityOverTimePolicy
operator|)
name|autoCreateEnabledParentQueue
operator|.
name|getAutoCreatedQueueManagementPolicy
argument_list|()
decl_stmt|;
comment|//validate parent queue state
name|assertEquals
argument_list|(
name|expectedTotalChildQueueAbsCapacity
argument_list|,
name|policy
operator|.
name|getAbsoluteActivatedChildQueueCapacity
argument_list|()
argument_list|,
name|EPSILON
argument_list|)
expr_stmt|;
comment|//validate leaf queue state
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|policy
operator|.
name|isActive
argument_list|(
name|leafQueue
argument_list|)
argument_list|)
expr_stmt|;
comment|//validate capacity
name|validateQueueEntitlements
argument_list|(
name|leafQueueName
argument_list|,
name|expectedEntitlement
argument_list|,
name|queueManagementChanges
argument_list|)
expr_stmt|;
block|}
DECL|method|validateQueueEntitlements (String leafQueueName, QueueEntitlement expectedEntitlement, List<QueueManagementChange> queueEntitlementChanges)
specifier|private
name|void
name|validateQueueEntitlements
parameter_list|(
name|String
name|leafQueueName
parameter_list|,
name|QueueEntitlement
name|expectedEntitlement
parameter_list|,
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|queueEntitlementChanges
parameter_list|)
block|{
name|AutoCreatedLeafQueue
name|leafQueue
init|=
operator|(
name|AutoCreatedLeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|leafQueueName
argument_list|)
decl_stmt|;
name|validateQueueEntitlementChangesForLeafQueue
argument_list|(
name|leafQueue
argument_list|,
name|expectedEntitlement
argument_list|,
name|queueEntitlementChanges
argument_list|)
expr_stmt|;
block|}
DECL|method|validateQueueEntitlementChangesForLeafQueue (CSQueue leafQueue, QueueEntitlement expectedQueueEntitlement, final List<QueueManagementChange> queueEntitlementChanges)
specifier|private
name|void
name|validateQueueEntitlementChangesForLeafQueue
parameter_list|(
name|CSQueue
name|leafQueue
parameter_list|,
name|QueueEntitlement
name|expectedQueueEntitlement
parameter_list|,
specifier|final
name|List
argument_list|<
name|QueueManagementChange
argument_list|>
name|queueEntitlementChanges
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueEntitlement
argument_list|>
name|expectedQueueEntitlements
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueManagementChange
name|entitlementChange
range|:
name|queueEntitlementChanges
control|)
block|{
if|if
condition|(
name|leafQueue
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|entitlementChange
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
condition|)
block|{
name|AutoCreatedLeafQueueConfig
name|updatedQueueTemplate
init|=
name|entitlementChange
operator|.
name|getUpdatedQueueTemplate
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|label
range|:
name|accessibleNodeLabelsOnC
control|)
block|{
name|QueueEntitlement
name|newEntitlement
init|=
operator|new
name|QueueEntitlement
argument_list|(
name|updatedQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getCapacity
argument_list|(
name|label
argument_list|)
argument_list|,
name|updatedQueueTemplate
operator|.
name|getQueueCapacities
argument_list|()
operator|.
name|getMaximumCapacity
argument_list|(
name|label
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedQueueEntitlement
argument_list|,
name|newEntitlement
argument_list|)
expr_stmt|;
name|expectedQueueEntitlements
operator|.
name|put
argument_list|(
name|label
argument_list|,
name|expectedQueueEntitlement
argument_list|)
expr_stmt|;
name|validateEffectiveMinResource
argument_list|(
name|leafQueue
argument_list|,
name|label
argument_list|,
name|expectedQueueEntitlements
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|fail
argument_list|(
literal|"Could not find the specified leaf queue in entitlement changes : "
operator|+
name|leafQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

