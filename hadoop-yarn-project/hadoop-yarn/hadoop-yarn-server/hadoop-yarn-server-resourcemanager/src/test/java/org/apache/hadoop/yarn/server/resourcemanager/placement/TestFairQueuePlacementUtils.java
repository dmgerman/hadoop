begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|DOT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|DOT_REPLACEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|ROOT_QUEUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|assureRoot
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|cleanName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FairQueuePlacementUtils
operator|.
name|isValidQueueName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests of the utility methods from {@link FairQueuePlacementUtils}.  */
end_comment

begin_class
DECL|class|TestFairQueuePlacementUtils
specifier|public
class|class
name|TestFairQueuePlacementUtils
block|{
comment|/**    * Test name trimming and dot replacement in names.    */
annotation|@
name|Test
DECL|method|testCleanName ()
specifier|public
name|void
name|testCleanName
parameter_list|()
block|{
comment|// permutations of dot placements
specifier|final
name|String
name|clean
init|=
literal|"clean"
decl_stmt|;
specifier|final
name|String
name|dotted
init|=
literal|"not.clean"
decl_stmt|;
specifier|final
name|String
name|multiDot
init|=
literal|"more.un.clean"
decl_stmt|;
specifier|final
name|String
name|seqDot
init|=
literal|"not..clean"
decl_stmt|;
specifier|final
name|String
name|unTrimmed
init|=
literal|" .invalid. "
decl_stmt|;
comment|// not really a valid queue
name|String
name|cleaned
init|=
name|cleanName
argument_list|(
name|clean
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Name was changed and it should not"
argument_list|,
name|clean
argument_list|,
name|cleaned
argument_list|)
expr_stmt|;
name|cleaned
operator|=
name|cleanName
argument_list|(
name|dotted
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Cleaned name contains dots and it should not"
argument_list|,
name|cleaned
operator|.
name|contains
argument_list|(
name|DOT
argument_list|)
argument_list|)
expr_stmt|;
name|cleaned
operator|=
name|cleanName
argument_list|(
name|multiDot
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Cleaned name contains dots and it should not"
argument_list|,
name|cleaned
operator|.
name|contains
argument_list|(
name|DOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Multi dot failed: wrong replacements found"
argument_list|,
name|cleaned
operator|.
name|indexOf
argument_list|(
name|DOT_REPLACEMENT
argument_list|)
argument_list|,
name|cleaned
operator|.
name|lastIndexOf
argument_list|(
name|DOT_REPLACEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|cleaned
operator|=
name|cleanName
argument_list|(
name|seqDot
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Cleaned name contains dots and it should not"
argument_list|,
name|cleaned
operator|.
name|contains
argument_list|(
name|DOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Sequential dot failed: wrong replacements found"
argument_list|,
name|cleaned
operator|.
name|indexOf
argument_list|(
name|DOT_REPLACEMENT
argument_list|)
argument_list|,
name|cleaned
operator|.
name|lastIndexOf
argument_list|(
name|DOT_REPLACEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|cleaned
operator|=
name|cleanName
argument_list|(
name|unTrimmed
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Trimming start failed: space not removed or dot not replaced"
argument_list|,
name|cleaned
operator|.
name|startsWith
argument_list|(
name|DOT_REPLACEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Trimming end failed: space not removed or dot not replaced"
argument_list|,
name|cleaned
operator|.
name|endsWith
argument_list|(
name|DOT_REPLACEMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssureRoot ()
specifier|public
name|void
name|testAssureRoot
parameter_list|()
block|{
comment|// permutations of rooted queue names
specifier|final
name|String
name|queueName
init|=
literal|"base"
decl_stmt|;
specifier|final
name|String
name|rootOnly
init|=
literal|"root"
decl_stmt|;
specifier|final
name|String
name|rootNoDot
init|=
literal|"rootbase"
decl_stmt|;
specifier|final
name|String
name|alreadyRoot
init|=
literal|"root.base"
decl_stmt|;
name|String
name|rooted
init|=
name|assureRoot
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Queue should have root prefix (base)"
argument_list|,
name|rooted
operator|.
name|startsWith
argument_list|(
name|ROOT_QUEUE
operator|+
name|DOT
argument_list|)
argument_list|)
expr_stmt|;
name|rooted
operator|=
name|assureRoot
argument_list|(
name|rootOnly
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'root' queue should not have root prefix (root)"
argument_list|,
name|rootOnly
argument_list|,
name|rooted
argument_list|)
expr_stmt|;
name|rooted
operator|=
name|assureRoot
argument_list|(
name|rootNoDot
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Queue should have root prefix (rootbase)"
argument_list|,
name|rooted
operator|.
name|startsWith
argument_list|(
name|ROOT_QUEUE
operator|+
name|DOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'root' queue base was replaced and not prefixed"
argument_list|,
literal|5
argument_list|,
name|rooted
operator|.
name|lastIndexOf
argument_list|(
name|ROOT_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|rooted
operator|=
name|assureRoot
argument_list|(
name|alreadyRoot
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Root prefixed queue changed and it should not (root.base)"
argument_list|,
name|rooted
argument_list|,
name|alreadyRoot
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Null queue did not return null queue"
argument_list|,
name|assureRoot
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Empty queue did not return empty name"
argument_list|,
literal|""
argument_list|,
name|assureRoot
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIsValidQueueName ()
specifier|public
name|void
name|testIsValidQueueName
parameter_list|()
block|{
comment|// permutations of valid/invalid names
specifier|final
name|String
name|valid
init|=
literal|"valid"
decl_stmt|;
specifier|final
name|String
name|validRooted
init|=
literal|"root.valid"
decl_stmt|;
specifier|final
name|String
name|rootOnly
init|=
literal|"root"
decl_stmt|;
specifier|final
name|String
name|startDot
init|=
literal|".invalid"
decl_stmt|;
specifier|final
name|String
name|endDot
init|=
literal|"invalid."
decl_stmt|;
specifier|final
name|String
name|startSpace
init|=
literal|" invalid"
decl_stmt|;
specifier|final
name|String
name|endSpace
init|=
literal|"invalid "
decl_stmt|;
specifier|final
name|String
name|unicodeSpace
init|=
literal|"\u00A0invalid"
decl_stmt|;
name|assertFalse
argument_list|(
literal|"'null' queue was not marked as invalid"
argument_list|,
name|isValidQueueName
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"empty queue was not tagged valid"
argument_list|,
name|isValidQueueName
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Simple queue name was not tagged valid (valid)"
argument_list|,
name|isValidQueueName
argument_list|(
name|valid
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Root only queue was not tagged valid (root)"
argument_list|,
name|isValidQueueName
argument_list|(
name|rootOnly
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Root prefixed queue was not tagged valid (root.valid)"
argument_list|,
name|isValidQueueName
argument_list|(
name|validRooted
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Queue starting with dot was not tagged invalid (.invalid)"
argument_list|,
name|isValidQueueName
argument_list|(
name|startDot
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Queue ending with dot was not tagged invalid (invalid.)"
argument_list|,
name|isValidQueueName
argument_list|(
name|endDot
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Queue starting with space was not tagged invalid ( invalid)"
argument_list|,
name|isValidQueueName
argument_list|(
name|startSpace
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Queue ending with space was not tagged invalid (invalid )"
argument_list|,
name|isValidQueueName
argument_list|(
name|endSpace
argument_list|)
argument_list|)
expr_stmt|;
comment|// just one for sanity check extensive tests are in the scheduler utils
name|assertFalse
argument_list|(
literal|"Queue with unicode space was not tagged as invalid (unicode)"
argument_list|,
name|isValidQueueName
argument_list|(
name|unicodeSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

