begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|TargetApplicationsNamespace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTagWithNamespace
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|and
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|cardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetIn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetNotIn
import|;
end_import

begin_comment
comment|/**  * Test Container Allocation with SchedulingRequest.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestSchedulingRequestContainerAllocation
specifier|public
class|class
name|TestSchedulingRequestContainerAllocation
block|{
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|placementConstraintHandler
specifier|private
name|String
name|placementConstraintHandler
decl_stmt|;
DECL|field|mgr
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
annotation|@
name|Parameters
DECL|method|placementConstarintHandlers ()
specifier|public
specifier|static
name|Object
index|[]
name|placementConstarintHandlers
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[]
block|{
name|YarnConfiguration
operator|.
name|PROCESSOR_RM_PLACEMENT_CONSTRAINTS_HANDLER
block|,
name|YarnConfiguration
operator|.
name|SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER
block|}
return|;
block|}
DECL|method|TestSchedulingRequestContainerAllocation ( String placementConstraintHandler)
specifier|public
name|TestSchedulingRequestContainerAllocation
parameter_list|(
name|String
name|placementConstraintHandler
parameter_list|)
block|{
name|this
operator|.
name|placementConstraintHandler
operator|=
name|placementConstraintHandler
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
name|this
operator|.
name|placementConstraintHandler
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testIntraAppAntiAffinity ()
specifier|public
name|void
name|testIntraAppAntiAffinity
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|csConf
init|=
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// 4 NMs.
name|MockNM
index|[]
name|nms
init|=
operator|new
name|MockNM
index|[
literal|4
index|]
decl_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|nms
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"192.168.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nms
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// app1 -> c
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// app1 asks for 10 anti-affinity containers for the same app. It should
comment|// only get 4 containers allocated because we only have 4 nodes.
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"mapper"
argument_list|)
argument_list|,
literal|"mapper"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|4
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
comment|// Similarly, app1 asks 10 anti-affinity containers at different priority,
comment|// it should be satisfied as well.
comment|// app1 asks for 10 anti-affinity containers for the same app. It should
comment|// only get 4 containers allocated because we only have 4 nodes.
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"reducer"
argument_list|)
argument_list|,
literal|"reducer"
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|4
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test anti-affinity to both of "mapper/reducer", we should only get no
comment|// container allocated
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"reducer2"
argument_list|)
argument_list|,
literal|"mapper"
argument_list|)
expr_stmt|;
name|boolean
name|caughtException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|1
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caughtException
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testIntraAppAntiAffinityWithMultipleTags ()
specifier|public
name|void
name|testIntraAppAntiAffinityWithMultipleTags
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|csConf
init|=
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// 4 NMs.
name|MockNM
index|[]
name|nms
init|=
operator|new
name|MockNM
index|[
literal|4
index|]
decl_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|nms
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"192.168.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nms
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// app1 -> c
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// app1 asks for 2 anti-affinity containers for the same app.
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"tag_1_1"
argument_list|,
literal|"tag_1_2"
argument_list|)
argument_list|,
literal|"tag_1_1"
argument_list|,
literal|"tag_1_2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|2
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
comment|// app1 asks for 1 anti-affinity containers for the same app. anti-affinity
comment|// to tag_1_1/tag_1_2. With allocation_tag = tag_2_1/tag_2_2
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"tag_2_1"
argument_list|,
literal|"tag_2_2"
argument_list|)
argument_list|,
literal|"tag_1_1"
argument_list|,
literal|"tag_1_2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated1
init|=
name|waitForAllocation
argument_list|(
literal|1
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocated
operator|.
name|addAll
argument_list|(
name|allocated1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
comment|// app1 asks for 1 anti-affinity containers for the same app. anti-affinity
comment|// to tag_1_1/tag_1_2/tag_2_1/tag_2_2. With allocation_tag = tag_3
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"tag_3"
argument_list|)
argument_list|,
literal|"tag_1_1"
argument_list|,
literal|"tag_1_2"
argument_list|,
literal|"tag_2_1"
argument_list|,
literal|"tag_2_2"
argument_list|)
expr_stmt|;
name|allocated1
operator|=
name|waitForAllocation
argument_list|(
literal|1
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocated
operator|.
name|addAll
argument_list|(
name|allocated1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This UT covers some basic end-to-end inter-app anti-affinity    * constraint tests. For comprehensive tests over different namespace    * types, see more in TestPlacementConstraintsUtil.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testInterAppAntiAffinity ()
specifier|public
name|void
name|testInterAppAntiAffinity
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|csConf
init|=
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// 4 NMs.
name|MockNM
index|[]
name|nms
init|=
operator|new
name|MockNM
index|[
literal|4
index|]
decl_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|nms
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"192.168.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nms
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// app1 -> c
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// app1 asks for 3 anti-affinity containers for the same app. It should
comment|// only get 3 containers allocated to 3 different nodes..
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"mapper"
argument_list|)
argument_list|,
literal|"mapper"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|3
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mappers on HOST0: "
operator|+
name|rmNodes
index|[
literal|0
index|]
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapper"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mappers on HOST1: "
operator|+
name|rmNodes
index|[
literal|1
index|]
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapper"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mappers on HOST2: "
operator|+
name|rmNodes
index|[
literal|2
index|]
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"mapper"
argument_list|)
argument_list|)
expr_stmt|;
comment|// app2 -> c
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// App2 asks for 3 containers that anti-affinity with any mapper,
comment|// since 3 out of 4 nodes already have mapper containers, all 3
comment|// containers will be allocated on the other node.
name|TargetApplicationsNamespace
operator|.
name|All
name|allNs
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|All
argument_list|()
decl_stmt|;
name|am2
operator|.
name|allocateAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|allNs
operator|.
name|toString
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|"mapper"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated1
init|=
name|waitForAllocation
argument_list|(
literal|3
argument_list|,
literal|3000
argument_list|,
name|am2
argument_list|,
name|nms
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated1
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|.
name|addAll
argument_list|(
name|allocated1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// The allocated node should not have mapper tag.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|allMatch
argument_list|(
name|rmContainer
lambda|->
block|{
comment|// except the nm host
if|if
condition|(
operator|!
name|rmContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|rmNodes
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
return|return
operator|!
name|rmContainer
operator|.
name|getAllocationTags
argument_list|()
operator|.
name|contains
argument_list|(
literal|"mapper"
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// app3 -> c
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|nms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// App3 asks for 3 containers that anti-affinity with any mapper.
comment|// Unlike the former case, since app3 source tags are also mapper,
comment|// it will anti-affinity with itself too. So there will be only 1
comment|// container be allocated.
name|am3
operator|.
name|allocateAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|allNs
operator|.
name|toString
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"mapper"
argument_list|)
argument_list|,
literal|"mapper"
argument_list|)
expr_stmt|;
name|allocated1
operator|=
name|waitForAllocation
argument_list|(
literal|1
argument_list|,
literal|3000
argument_list|,
name|am3
argument_list|,
name|nms
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|allocated
operator|.
name|addAll
argument_list|(
name|allocated1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingRequestDisabledByDefault ()
specifier|public
name|void
name|testSchedulingRequestDisabledByDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|csConf
init|=
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// 4 NMs.
name|MockNM
index|[]
name|nms
init|=
operator|new
name|MockNM
index|[
literal|4
index|]
decl_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|nms
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"192.168.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nms
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// app1 -> c
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// app1 asks for 2 anti-affinity containers for the same app.
name|boolean
name|caughtException
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Since feature is disabled by default, we should expect exception.
name|am1
operator|.
name|allocateIntraAppAntiAffinity
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|1L
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"tag_1_1"
argument_list|,
literal|"tag_1_2"
argument_list|)
argument_list|,
literal|"tag_1_1"
argument_list|,
literal|"tag_1_2"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|caughtException
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|caughtException
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testSchedulingRequestWithNullConstraint ()
specifier|public
name|void
name|testSchedulingRequestWithNullConstraint
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|csConf
init|=
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|csConf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// 4 NMs.
name|MockNM
index|[]
name|nms
init|=
operator|new
name|MockNM
index|[
literal|4
index|]
decl_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|nms
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"192.168.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nms
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// app1 -> c
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nms
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|constraint
init|=
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTag
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|SchedulingRequest
name|sc
init|=
name|SchedulingRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"t1"
argument_list|)
argument_list|,
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|constraint
argument_list|)
decl_stmt|;
name|AllocateRequest
name|request
init|=
name|AllocateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|schedulingRequests
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|sc
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|1
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send another request with null placement constraint,
comment|// ensure there is no NPE while handling this request.
name|sc
operator|=
name|SchedulingRequest
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"t2"
argument_list|)
argument_list|,
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|AllocateRequest
name|request1
init|=
name|AllocateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|schedulingRequests
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|sc
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|2
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nms
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|doNodeHeartbeat (MockNM... nms)
specifier|private
specifier|static
name|void
name|doNodeHeartbeat
parameter_list|(
name|MockNM
modifier|...
name|nms
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|MockNM
name|nm
range|:
name|nms
control|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForAllocation (int allocNum, int timeout, MockAM am, MockNM... nms)
specifier|public
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|waitForAllocation
parameter_list|(
name|int
name|allocNum
parameter_list|,
name|int
name|timeout
parameter_list|,
name|MockAM
name|am
parameter_list|,
name|MockNM
modifier|...
name|nms
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Container
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|AllocateResponse
name|response
init|=
name|am
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|response
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Expecting allocation: "
operator|+
name|allocNum
operator|+
literal|", actual allocation: "
operator|+
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|allocated
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Container "
operator|+
name|c
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" is allocated on node: "
operator|+
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", allocation tags: "
operator|+
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|c
operator|.
name|getAllocationTags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|addAll
argument_list|(
name|allocated
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
name|allocNum
condition|)
block|{
return|return
literal|true
return|;
block|}
name|doNodeHeartbeat
argument_list|(
name|nms
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
argument_list|,
literal|500
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|schedulingRequest (int requestId, int containers, int cores, int mem, PlacementConstraint constraint, String... tags)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|requestId
parameter_list|,
name|int
name|containers
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|PlacementConstraint
name|constraint
parameter_list|,
name|String
modifier|...
name|tags
parameter_list|)
block|{
return|return
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
name|requestId
argument_list|,
name|containers
argument_list|,
name|cores
argument_list|,
name|mem
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|constraint
argument_list|,
name|tags
argument_list|)
return|;
block|}
DECL|method|schedulingRequest ( int priority, long allocReqId, int containers, int cores, int mem, ExecutionType execType, PlacementConstraint constraint, String... tags)
specifier|private
specifier|static
name|SchedulingRequest
name|schedulingRequest
parameter_list|(
name|int
name|priority
parameter_list|,
name|long
name|allocReqId
parameter_list|,
name|int
name|containers
parameter_list|,
name|int
name|cores
parameter_list|,
name|int
name|mem
parameter_list|,
name|ExecutionType
name|execType
parameter_list|,
name|PlacementConstraint
name|constraint
parameter_list|,
name|String
modifier|...
name|tags
parameter_list|)
block|{
return|return
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
name|allocReqId
argument_list|)
operator|.
name|allocationTags
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tags
argument_list|)
argument_list|)
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|execType
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
name|containers
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|mem
argument_list|,
name|cores
argument_list|)
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|constraint
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getContainerNodesNum (List<Container> containers)
specifier|public
specifier|static
name|int
name|getContainerNodesNum
parameter_list|(
name|List
argument_list|<
name|Container
argument_list|>
name|containers
parameter_list|)
block|{
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|containers
operator|!=
literal|null
condition|)
block|{
name|containers
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|nodes
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testInterAppCompositeConstraints ()
specifier|public
name|void
name|testInterAppCompositeConstraints
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test both intra and inter app constraints.
comment|// Including simple affinity, anti-affinity, cardinality constraints,
comment|// and simple AND composite constraints.
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.1:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.2:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.3:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.4:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm5
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.5:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase"
argument_list|)
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// App1 (hbase)
comment|// h1: hbase-master(1)
comment|// h2: hbase-master(1)
comment|// h3:
comment|// h4:
comment|// h5:
name|PlacementConstraint
name|pc
init|=
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-master"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
name|pc
argument_list|,
literal|"hbase-master"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|2
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// 2 containers allocated
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// containers should be distributed on 2 different nodes
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
comment|// App1 (hbase)
comment|// h1: hbase-rs(1), hbase-master(1)
comment|// h2: hbase-rs(1), hbase-master(1)
comment|// h3: hbase-rs(1)
comment|// h4: hbase-rs(1)
comment|// h5:
name|pc
operator|=
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|pc
argument_list|,
literal|"hbase-rs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|4
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
comment|// App2 (web-server)
comment|// Web server instance has 2 instance and non of them can be co-allocated
comment|// with hbase-master.
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"web-server"
argument_list|)
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
comment|// App2 (web-server)
comment|// h1: hbase-rs(1), hbase-master(1)
comment|// h2: hbase-rs(1), hbase-master(1)
comment|// h3: hbase-rs(1), ws-inst(1)
comment|// h4: hbase-rs(1), ws-inst(1)
comment|// h5:
name|pc
operator|=
name|and
argument_list|(
name|targetIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTagWithNamespace
argument_list|(
operator|new
name|TargetApplicationsNamespace
operator|.
name|All
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"hbase-master"
argument_list|)
argument_list|)
argument_list|,
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTag
argument_list|(
literal|"ws-inst"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|am2
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|2048
argument_list|,
name|pc
argument_list|,
literal|"ws-inst"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|2
argument_list|,
literal|3000
argument_list|,
name|am2
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|rmNodes
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|allocated
control|)
block|{
name|RMNode
name|rmNode
init|=
name|rmNodes
operator|.
name|get
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"If ws-inst is allocated to a node,"
operator|+
literal|" this node should have inherited the ws-inst tag "
argument_list|,
name|rmNode
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"ws-inst"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"ws-inst should be co-allocated to "
operator|+
literal|"hbase-master nodes"
argument_list|,
name|rmNode
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"hbase-master"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// App3 (ws-servant)
comment|// App3 has multiple instances that must be co-allocated
comment|// with app2 server instance, and each node cannot have more than
comment|// 3 instances.
name|RMApp
name|app3
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"ws-servants"
argument_list|)
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
comment|// App3 (ws-servant)
comment|// h1: hbase-rs(1), hbase-master(1)
comment|// h2: hbase-rs(1), hbase-master(1)
comment|// h3: hbase-rs(1), ws-inst(1), ws-servant(3)
comment|// h4: hbase-rs(1), ws-inst(1), ws-servant(3)
comment|// h5:
name|pc
operator|=
name|and
argument_list|(
name|targetIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTagWithNamespace
argument_list|(
operator|new
name|TargetApplicationsNamespace
operator|.
name|AppTag
argument_list|(
literal|"web-server"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"ws-inst"
argument_list|)
argument_list|)
argument_list|,
name|cardinality
argument_list|(
literal|"node"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|"ws-servant"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|am3
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|512
argument_list|,
name|pc
argument_list|,
literal|"ws-servant"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// total 6 containers can be allocated due to cardinality constraint
comment|// each round, 2 containers can be allocated
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|6
argument_list|,
literal|10000
argument_list|,
name|am3
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|allocated
control|)
block|{
name|RMNode
name|rmNode
init|=
name|rmNodes
operator|.
name|get
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node has ws-servant allocated must have 3 instances"
argument_list|,
name|rmNode
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"ws-servant"
argument_list|)
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Every ws-servant container should be co-allocated"
operator|+
literal|" with ws-inst"
argument_list|,
name|rmNode
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"ws-inst"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testMultiAllocationTagsConstraints ()
specifier|public
name|void
name|testMultiAllocationTagsConstraints
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test simulates to use PC to avoid port conflicts
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.3:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.4:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|MockNM
name|nm5
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.5:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"server1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Allocate AM container on nm1
name|doNodeHeartbeat
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// App1 uses ports: 7000, 8000 and 9000
name|String
index|[]
name|server1Ports
init|=
operator|new
name|String
index|[]
block|{
literal|"port_6000"
block|,
literal|"port_7000"
block|,
literal|"port_8000"
block|}
decl_stmt|;
name|PlacementConstraint
name|pc
init|=
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|,
name|server1Ports
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|pc
argument_list|,
name|server1Ports
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|2
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
decl_stmt|;
comment|// 2 containers allocated
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// containers should be distributed on 2 different nodes
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
comment|// App1 uses ports: 6000
name|String
index|[]
name|server2Ports
init|=
operator|new
name|String
index|[]
block|{
literal|"port_6000"
block|}
decl_stmt|;
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"server2"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Allocate AM container on nm1
name|doNodeHeartbeat
argument_list|(
name|nm2
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|app2attempt1
init|=
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am2
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app2attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|pc
operator|=
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|ALL
operator|.
name|toString
argument_list|()
argument_list|,
name|server2Ports
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|am2
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|pc
argument_list|,
name|server2Ports
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|3
argument_list|,
literal|3000
argument_list|,
name|am2
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocated
argument_list|)
argument_list|)
expr_stmt|;
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|rmNodes
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|allocated
control|)
block|{
name|RMNode
name|rmNode
init|=
name|rmNodes
operator|.
name|get
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"server2 should not co-allocate to server1 as"
operator|+
literal|" they both need to use port 6000"
argument_list|,
name|rmNode
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"port_6000"
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmNode
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"port_7000"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmNode
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"port_8000"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000L
argument_list|)
DECL|method|testInterAppConstraintsWithNamespaces ()
specifier|public
name|void
name|testInterAppConstraintsWithNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test verifies inter-app constraints with namespaces
comment|// not-self/app-id/app-tag
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.1:1234:"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.2:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.3:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm4
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.4:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|MockNM
name|nm5
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.5:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|ApplicationId
name|app5Id
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|Container
argument_list|>
argument_list|>
name|allocMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// 10 apps and all containers are attached with foo tag
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// App1 ~ app5 tag "former5"
comment|// App6 ~ app10 tag "latter5"
name|String
name|applicationTag
init|=
name|i
operator|<
literal|5
condition|?
literal|"former5"
else|:
literal|"latter5"
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|applicationTag
argument_list|)
argument_list|)
decl_stmt|;
comment|// Allocate AM container on nm1
name|doNodeHeartbeat
argument_list|(
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|PlacementConstraint
name|pc
init|=
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTag
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|am
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|pc
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|3
argument_list|,
literal|3000
argument_list|,
name|am
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
decl_stmt|;
comment|// Memorize containers that has app5 foo
if|if
condition|(
name|i
operator|==
literal|5
condition|)
block|{
name|app5Id
operator|=
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
block|}
name|allocMap
operator|.
name|put
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|allocated
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|app5Id
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getContainerNodesNum
argument_list|(
name|allocMap
operator|.
name|get
argument_list|(
name|app5Id
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// *** app-id
comment|// Submit another app, use app-id constraint against app5
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Allocate AM container on nm1
name|doNodeHeartbeat
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|PlacementConstraint
name|pc
init|=
name|targetIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTagWithNamespace
argument_list|(
operator|new
name|TargetApplicationsNamespace
operator|.
name|AppID
argument_list|(
name|app5Id
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|am1
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|pc
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
name|waitForAllocation
argument_list|(
literal|3
argument_list|,
literal|3000
argument_list|,
name|am1
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|rmNodes
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|app5Alloc
init|=
name|allocMap
operator|.
name|get
argument_list|(
name|app5Id
argument_list|)
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|allocated
control|)
block|{
name|RMNode
name|rmNode
init|=
name|rmNodes
operator|.
name|get
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|rmNode
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"This app is affinity with app-id/app5/foo "
operator|+
literal|"containers"
argument_list|,
name|app5Alloc
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|c5
lambda|->
name|c5
operator|.
name|getNodeId
argument_list|()
operator|==
name|c
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// *** app-tag
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Allocate AM container on nm1
name|doNodeHeartbeat
argument_list|(
name|nm2
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|app2attempt1
init|=
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am2
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app2attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|pc
operator|=
name|targetNotIn
argument_list|(
literal|"node"
argument_list|,
name|allocationTagWithNamespace
argument_list|(
operator|new
name|TargetApplicationsNamespace
operator|.
name|AppTag
argument_list|(
literal|"xyz"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|am2
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|pc
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|2
argument_list|,
literal|3000
argument_list|,
name|am2
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// none of them can be allocated to nodes that has app5 foo containers
for|for
control|(
name|Container
name|c
range|:
name|app5Alloc
control|)
block|{
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|allocated
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// *** not-self
name|RMApp
name|app3
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Allocate AM container on nm1
name|doNodeHeartbeat
argument_list|(
name|nm3
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|app3attempt1
init|=
name|app3
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am3
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|app3attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am3
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|pc
operator|=
name|cardinality
argument_list|(
literal|"node"
argument_list|,
operator|new
name|TargetApplicationsNamespace
operator|.
name|NotSelf
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|am3
operator|.
name|addSchedulingRequest
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|schedulingRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
name|pc
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allocated
operator|=
name|waitForAllocation
argument_list|(
literal|1
argument_list|,
literal|3000
argument_list|,
name|am3
argument_list|,
name|nm1
argument_list|,
name|nm2
argument_list|,
name|nm3
argument_list|,
name|nm4
argument_list|,
name|nm5
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// All 5 containers should be allocated
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmNodes
operator|.
name|get
argument_list|(
name|allocated
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getAllocationTagsWithCount
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

