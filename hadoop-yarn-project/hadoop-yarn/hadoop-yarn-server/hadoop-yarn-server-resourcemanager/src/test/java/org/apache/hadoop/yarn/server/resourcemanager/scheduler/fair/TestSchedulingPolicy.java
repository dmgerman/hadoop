begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FairSharePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FifoPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestSchedulingPolicy
specifier|public
class|class
name|TestSchedulingPolicy
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testParseSchedulingPolicy ()
specifier|public
name|void
name|testParseSchedulingPolicy
parameter_list|()
throws|throws
name|AllocationConfigurationException
block|{
comment|// Class name
name|SchedulingPolicy
name|sm
init|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|FairSharePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Canonical name
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|FairSharePolicy
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Class
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|getInstance
argument_list|(
name|FairSharePolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shortname - drf
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"drf"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|DominantResourceFairnessPolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shortname - fair
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fair"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shortname - fifo
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FifoPolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trivial tests that make sure    * {@link SchedulingPolicy#isApplicableTo(SchedulingPolicy, byte)} works as    * expected for the possible values of depth    *     * @throws AllocationConfigurationException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testIsApplicableTo ()
specifier|public
name|void
name|testIsApplicableTo
parameter_list|()
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|String
name|ERR
init|=
literal|"Broken SchedulingPolicy#isApplicableTo"
decl_stmt|;
comment|// fifo
name|SchedulingPolicy
name|policy
init|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_LEAF
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fair
name|policy
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fair"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_LEAF
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// drf
name|policy
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"drf"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_LEAF
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SchedulingPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|policy
operator|.
name|getApplicableDepth
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ANY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

