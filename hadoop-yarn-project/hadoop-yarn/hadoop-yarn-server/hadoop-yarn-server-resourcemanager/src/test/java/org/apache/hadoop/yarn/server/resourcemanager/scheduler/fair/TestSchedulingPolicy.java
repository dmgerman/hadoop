begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FairSharePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FifoPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestSchedulingPolicy
specifier|public
class|class
name|TestSchedulingPolicy
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSchedulingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testParseSchedulingPolicy ()
specifier|public
name|void
name|testParseSchedulingPolicy
parameter_list|()
throws|throws
name|AllocationConfigurationException
block|{
comment|// Class name
name|SchedulingPolicy
name|sm
init|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|FairSharePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Canonical name
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
name|FairSharePolicy
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Class
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|getInstance
argument_list|(
name|FairSharePolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shortname - drf
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"drf"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|DominantResourceFairnessPolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shortname - fair
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fair"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shortname - fifo
name|sm
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid scheduler name"
argument_list|,
name|sm
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|FifoPolicy
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trivial tests that make sure    * {@link SchedulingPolicy#isApplicableTo(SchedulingPolicy, byte)} works as    * expected for the possible values of depth    *     * @throws AllocationConfigurationException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|1000
argument_list|)
DECL|method|testIsApplicableTo ()
specifier|public
name|void
name|testIsApplicableTo
parameter_list|()
throws|throws
name|AllocationConfigurationException
block|{
specifier|final
name|String
name|ERR
init|=
literal|"Broken SchedulingPolicy#isApplicableTo"
decl_stmt|;
comment|// fifo
name|SchedulingPolicy
name|policy
init|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_LEAF
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
comment|// fair
name|policy
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fair"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_LEAF
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ANY
argument_list|)
argument_list|)
expr_stmt|;
comment|// drf
name|policy
operator|=
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"drf"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_LEAF
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ANY
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SchedulingPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|policy
operator|.
name|getApplicableDepth
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_INTERMEDIATE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ERR
argument_list|,
name|SchedulingPolicy
operator|.
name|isApplicableTo
argument_list|(
name|policy
argument_list|,
name|SchedulingPolicy
operator|.
name|DEPTH_ANY
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test whether {@link FairSharePolicy.FairShareComparator} is transitive.    */
annotation|@
name|Test
DECL|method|testFairShareComparatorTransitivity ()
specifier|public
name|void
name|testFairShareComparatorTransitivity
parameter_list|()
block|{
name|FairSharePolicy
name|policy
init|=
operator|new
name|FairSharePolicy
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|Schedulable
argument_list|>
name|fairShareComparator
init|=
name|policy
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|FairShareComparatorTester
name|tester
init|=
operator|new
name|FairShareComparatorTester
argument_list|(
name|fairShareComparator
argument_list|)
decl_stmt|;
name|tester
operator|.
name|testTransitivity
argument_list|()
expr_stmt|;
block|}
comment|/**    * This class is responsible for testing the transitivity of    * {@link FairSharePolicy.FairShareComparator}. We will generate    * a lot of triples(each triple contains three {@link Schedulable}),    * and then we verify transitivity by using each triple.    *    *<p>How to generate:</p>    * For each field in {@link Schedulable} we all have a data collection. We    * combine these data to construct a {@link Schedulable}, and generate all    * cases of triple by DFS(depth first search algorithm). We can get 100% code    * coverage by DFS.    */
DECL|class|FairShareComparatorTester
specifier|private
class|class
name|FairShareComparatorTester
block|{
DECL|field|fairShareComparator
specifier|private
name|Comparator
argument_list|<
name|Schedulable
argument_list|>
name|fairShareComparator
decl_stmt|;
comment|// Use the following data collections to generate three Schedulable.
DECL|field|minShare
specifier|private
name|Resource
name|minShare
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|demand
specifier|private
name|Resource
name|demand
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
DECL|field|nameCollection
specifier|private
name|String
index|[]
name|nameCollection
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
DECL|field|startTimeColloection
specifier|private
name|long
index|[]
name|startTimeColloection
init|=
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|}
decl_stmt|;
DECL|field|usageCollection
specifier|private
name|Resource
index|[]
name|usageCollection
init|=
block|{
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
block|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
DECL|field|weightsCollection
specifier|private
name|ResourceWeights
index|[]
name|weightsCollection
init|=
block|{
operator|new
name|ResourceWeights
argument_list|(
literal|0.0f
argument_list|)
block|,
operator|new
name|ResourceWeights
argument_list|(
literal|1.0f
argument_list|)
block|,
operator|new
name|ResourceWeights
argument_list|(
literal|2.0f
argument_list|)
block|}
decl_stmt|;
DECL|method|FairShareComparatorTester ( Comparator<Schedulable> fairShareComparator)
specifier|public
name|FairShareComparatorTester
parameter_list|(
name|Comparator
argument_list|<
name|Schedulable
argument_list|>
name|fairShareComparator
parameter_list|)
block|{
name|this
operator|.
name|fairShareComparator
operator|=
name|fairShareComparator
expr_stmt|;
block|}
DECL|method|testTransitivity ()
specifier|public
name|void
name|testTransitivity
parameter_list|()
block|{
name|generateAndTest
argument_list|(
operator|new
name|Stack
argument_list|<
name|Schedulable
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|generateAndTest (Stack<Schedulable> genSchedulable)
specifier|private
name|void
name|generateAndTest
parameter_list|(
name|Stack
argument_list|<
name|Schedulable
argument_list|>
name|genSchedulable
parameter_list|)
block|{
if|if
condition|(
name|genSchedulable
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
comment|// We get three Schedulable objects, let's use them to check the
comment|// comparator.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The comparator must ensure transitivity"
argument_list|,
name|checkTransitivity
argument_list|(
name|genSchedulable
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameCollection
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|startTimeColloection
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|usageCollection
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|weightsCollection
operator|.
name|length
condition|;
name|t
operator|++
control|)
block|{
name|genSchedulable
operator|.
name|push
argument_list|(
name|createSchedulable
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|k
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|generateAndTest
argument_list|(
name|genSchedulable
argument_list|)
expr_stmt|;
name|genSchedulable
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|createSchedulable ( int nameIdx, int startTimeIdx, int usageIdx, int weightsIdx)
specifier|private
name|Schedulable
name|createSchedulable
parameter_list|(
name|int
name|nameIdx
parameter_list|,
name|int
name|startTimeIdx
parameter_list|,
name|int
name|usageIdx
parameter_list|,
name|int
name|weightsIdx
parameter_list|)
block|{
return|return
operator|new
name|MockSchedulable
argument_list|(
name|minShare
argument_list|,
name|demand
argument_list|,
name|nameCollection
index|[
name|nameIdx
index|]
argument_list|,
name|startTimeColloection
index|[
name|startTimeIdx
index|]
argument_list|,
name|usageCollection
index|[
name|usageIdx
index|]
argument_list|,
name|weightsCollection
index|[
name|weightsIdx
index|]
argument_list|)
return|;
block|}
DECL|method|checkTransitivity ( Collection<Schedulable> schedulableObjs)
specifier|private
name|boolean
name|checkTransitivity
parameter_list|(
name|Collection
argument_list|<
name|Schedulable
argument_list|>
name|schedulableObjs
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulableObjs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Schedulable
index|[]
name|copy
init|=
name|schedulableObjs
operator|.
name|toArray
argument_list|(
operator|new
name|Schedulable
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|fairShareComparator
operator|.
name|compare
argument_list|(
name|copy
index|[
literal|0
index|]
argument_list|,
name|copy
index|[
literal|1
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|swap
argument_list|(
name|copy
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fairShareComparator
operator|.
name|compare
argument_list|(
name|copy
index|[
literal|1
index|]
argument_list|,
name|copy
index|[
literal|2
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|swap
argument_list|(
name|copy
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|fairShareComparator
operator|.
name|compare
argument_list|(
name|copy
index|[
literal|0
index|]
argument_list|,
name|copy
index|[
literal|1
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|swap
argument_list|(
name|copy
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Here, we have got the following condition:
comment|// copy[0]<= copy[1]&& copy[1]<= copy[2]
comment|//
comment|// So, just check copy[0]<= copy[2]
if|if
condition|(
name|fairShareComparator
operator|.
name|compare
argument_list|(
name|copy
index|[
literal|0
index|]
argument_list|,
name|copy
index|[
literal|2
index|]
argument_list|)
operator|<=
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Failure data: "
operator|+
name|copy
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|copy
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|copy
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|swap (Schedulable[] array, int x, int y)
specifier|private
name|void
name|swap
parameter_list|(
name|Schedulable
index|[]
name|array
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|Schedulable
name|tmp
init|=
name|array
index|[
name|x
index|]
decl_stmt|;
name|array
index|[
name|x
index|]
operator|=
name|array
index|[
name|y
index|]
expr_stmt|;
name|array
index|[
name|y
index|]
operator|=
name|tmp
expr_stmt|;
block|}
DECL|class|MockSchedulable
specifier|private
class|class
name|MockSchedulable
implements|implements
name|Schedulable
block|{
DECL|field|minShare
specifier|private
name|Resource
name|minShare
decl_stmt|;
DECL|field|demand
specifier|private
name|Resource
name|demand
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|startTime
specifier|private
name|long
name|startTime
decl_stmt|;
DECL|field|usage
specifier|private
name|Resource
name|usage
decl_stmt|;
DECL|field|weights
specifier|private
name|ResourceWeights
name|weights
decl_stmt|;
DECL|method|MockSchedulable (Resource minShare, Resource demand, String name, long startTime, Resource usage, ResourceWeights weights)
specifier|public
name|MockSchedulable
parameter_list|(
name|Resource
name|minShare
parameter_list|,
name|Resource
name|demand
parameter_list|,
name|String
name|name
parameter_list|,
name|long
name|startTime
parameter_list|,
name|Resource
name|usage
parameter_list|,
name|ResourceWeights
name|weights
parameter_list|)
block|{
name|this
operator|.
name|minShare
operator|=
name|minShare
expr_stmt|;
name|this
operator|.
name|demand
operator|=
name|demand
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|startTime
expr_stmt|;
name|this
operator|.
name|usage
operator|=
name|usage
expr_stmt|;
name|this
operator|.
name|weights
operator|=
name|weights
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName ()
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getDemand ()
specifier|public
name|Resource
name|getDemand
parameter_list|()
block|{
return|return
name|demand
return|;
block|}
annotation|@
name|Override
DECL|method|getResourceUsage ()
specifier|public
name|Resource
name|getResourceUsage
parameter_list|()
block|{
return|return
name|usage
return|;
block|}
annotation|@
name|Override
DECL|method|getMinShare ()
specifier|public
name|Resource
name|getMinShare
parameter_list|()
block|{
return|return
name|minShare
return|;
block|}
annotation|@
name|Override
DECL|method|getWeights ()
specifier|public
name|ResourceWeights
name|getWeights
parameter_list|()
block|{
return|return
name|weights
return|;
block|}
annotation|@
name|Override
DECL|method|getStartTime ()
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|startTime
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxShare ()
specifier|public
name|Resource
name|getMaxShare
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getPriority ()
specifier|public
name|Priority
name|getPriority
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|updateDemand ()
specifier|public
name|void
name|updateDemand
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|assignContainer (FSSchedulerNode node)
specifier|public
name|Resource
name|assignContainer
parameter_list|(
name|FSSchedulerNode
name|node
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|getFairShare ()
specifier|public
name|Resource
name|getFairShare
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|setFairShare (Resource fairShare)
specifier|public
name|void
name|setFairShare
parameter_list|(
name|Resource
name|fairShare
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|toString ()
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{name:"
operator|+
name|name
operator|+
literal|", start:"
operator|+
name|startTime
operator|+
literal|", usage:"
operator|+
name|usage
operator|+
literal|", weights:"
operator|+
name|weights
operator|+
literal|", demand:"
operator|+
name|demand
operator|+
literal|", minShare:"
operator|+
name|minShare
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|isPreemptable ()
specifier|public
name|boolean
name|isPreemptable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

