begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|ApplicationPlacementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|allocationfile
operator|.
name|AllocationFileQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|allocationfile
operator|.
name|AllocationFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This class is to  test the fair scheduler functionality of  * deciding the number of runnable application under various conditions.  */
end_comment

begin_class
DECL|class|TestAppRunnability
specifier|public
class|class
name|TestAppRunnability
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-queues"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserAsDefaultQueue ()
specifier|public
name|void
name|testUserAsDefaultQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"root.user1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotUserAsDefaultQueue ()
specifier|public
name|void
name|testNotUserAsDefaultQueue
parameter_list|()
block|{
comment|// We need a new scheduler since we want to change the conf object. This
comment|// requires a new RM to propagate it . Do a proper teardown to not leak
name|tearDown
argument_list|()
expr_stmt|;
comment|// Create a new one with the amended config.
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAdditionAndRemoval ()
specifier|public
name|void
name|testAppAdditionAndRemoval
parameter_list|()
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationPlacementContext
name|apc
init|=
operator|new
name|ApplicationPlacementContext
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"user1"
argument_list|,
literal|"user1"
argument_list|,
name|apc
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
name|AppAttemptAddedSchedulerEvent
name|attemptAddedEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|attemptAddedEvent
argument_list|)
expr_stmt|;
comment|// Scheduler should have two queues (the default and the one created for
comment|// user1)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// That queue should have one app
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Now remove app
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
comment|// Queue should have no apps
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionVariablesForQueueCreatedRuntime ()
specifier|public
name|void
name|testPreemptionVariablesForQueueCreatedRuntime
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set preemption variables for the root queue
name|FSParentQueue
name|root
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|root
operator|.
name|setMinSharePreemptionTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|root
operator|.
name|setFairSharePreemptionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|root
operator|.
name|setFairSharePreemptionThreshold
argument_list|(
literal|.6f
argument_list|)
expr_stmt|;
comment|// User1 submits one application
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"user1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The user1 queue should inherit the configurations from the root queue
name|FSLeafQueue
name|userQueue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|userQueue
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|userQueue
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.6f
argument_list|,
name|userQueue
operator|.
name|getFairSharePreemptionThreshold
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDontAllowUndeclaredPools ()
specifier|public
name|void
name|testDontAllowUndeclaredPools
parameter_list|()
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|AllocationFileWriter
operator|.
name|create
argument_list|()
operator|.
name|addQueue
argument_list|(
operator|new
name|AllocationFileQueue
operator|.
name|Builder
argument_list|(
literal|"jerry"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|writeToFile
argument_list|(
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// Restarting resource manager since the file location and content is
comment|// changed.
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|jerryQueue
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"jerry"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|defaultQueue
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// NOTE: placement is not inside the scheduler anymore need to fake it here.
comment|// The scheduling request contains the fake placing
comment|// Should get put into jerry
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"jerry"
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jerryQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should get forced into default
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jerryQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Would get put into someuser because of user-as-default-queue, but should
comment|// be forced into default
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jerryQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should get put into jerry because of user-as-default-queue
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"jerry"
argument_list|,
literal|"jerry"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jerryQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveRunnableApp ()
specifier|public
name|void
name|testMoveRunnableApp
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|targetQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appAttId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3072
argument_list|,
literal|3
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appId
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|targetQueue
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|oldQueue
operator|.
name|isRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetQueue
operator|.
name|isRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|targetQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3072
argument_list|,
literal|3
argument_list|)
argument_list|,
name|targetQueue
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveNonRunnableApp ()
specifier|public
name|void
name|testMoveNonRunnableApp
parameter_list|()
throws|throws
name|Exception
block|{
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|targetQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|oldQueue
operator|.
name|setMaxRunningApps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|targetQueue
operator|.
name|setMaxRunningApps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|targetQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveMakesAppRunnable ()
specifier|public
name|void
name|testMoveMakesAppRunnable
parameter_list|()
throws|throws
name|Exception
block|{
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|targetQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|oldQueue
operator|.
name|setMaxRunningApps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|oldQueue
operator|.
name|isNonRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|oldQueue
operator|.
name|isNonRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetQueue
operator|.
name|isNonRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetQueue
operator|.
name|isRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

