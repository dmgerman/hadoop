begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.nodelabels
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|InlineDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeLabelTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|RMNodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeLabelsUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
DECL|class|TestRMNodeLabelsManager
specifier|public
class|class
name|TestRMNodeLabelsManager
extends|extends
name|NodeLabelTestBase
block|{
DECL|field|EMPTY_RESOURCE
specifier|private
specifier|final
name|Resource
name|EMPTY_RESOURCE
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|SMALL_RESOURCE
specifier|private
specifier|final
name|Resource
name|SMALL_RESOURCE
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|LARGE_NODE
specifier|private
specifier|final
name|Resource
name|LARGE_NODE
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|mgr
name|NullRMNodeLabelsManager
name|mgr
init|=
literal|null
decl_stmt|;
DECL|field|lmgr
name|RMNodeLabelsManager
name|lmgr
init|=
literal|null
decl_stmt|;
DECL|field|checkQueueCall
name|boolean
name|checkQueueCall
init|=
literal|false
decl_stmt|;
annotation|@
name|Before
DECL|method|before ()
specifier|public
name|void
name|before
parameter_list|()
block|{
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after ()
specifier|public
name|void
name|after
parameter_list|()
block|{
name|mgr
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetLabelResourceWhenNodeActiveDeactive ()
specifier|public
name|void
name|testGetLabelResourceWhenNodeActiveDeactive
parameter_list|()
throws|throws
name|Exception
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EMPTY_RESOURCE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EMPTY_RESOURCE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EMPTY_RESOURCE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EMPTY_RESOURCE
argument_list|)
expr_stmt|;
comment|// active two NM to n1, one large and one small
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|LARGE_NODE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|SMALL_RESOURCE
argument_list|,
name|LARGE_NODE
argument_list|)
argument_list|)
expr_stmt|;
comment|// check add labels multiple times shouldn't overwrite
comment|// original attributes on labels like resource
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p4"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|SMALL_RESOURCE
argument_list|,
name|LARGE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p4"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EMPTY_RESOURCE
argument_list|)
expr_stmt|;
comment|// change the large NM to small, check if resource updated
name|mgr
operator|.
name|updateNodeResource
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// deactive one NM, and check if resource updated
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// continus deactive, check if resource updated
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EMPTY_RESOURCE
argument_list|)
expr_stmt|;
comment|// Add two NM to n1 back
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|LARGE_NODE
argument_list|)
expr_stmt|;
comment|// And remove p1, now the two NM should come to default label,
name|mgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|add
argument_list|(
name|SMALL_RESOURCE
argument_list|,
name|LARGE_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testActivateNodeManagerWithZeroPort ()
specifier|public
name|void
name|testActivateNodeManagerWithZeroPort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// active two NM, one is zero port , another is non-zero port. no exception
comment|// should be raised
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|LARGE_NODE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetLabelResource ()
specifier|public
name|void
name|testGetLabelResource
parameter_list|()
throws|throws
name|Exception
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// active two NM to n1, one large and one small
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n2"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n3"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// change label of n1 to p2
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|EMPTY_RESOURCE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// add more labels
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p4"
argument_list|,
literal|"p5"
argument_list|,
literal|"p6"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
operator|(
name|Map
operator|)
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n4"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n5"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n6"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n7"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p4"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n8"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now node -> label is,
comment|// p1 : n4
comment|// p2 : n1, n2, n5
comment|// p3 : n3, n6
comment|// p4 : n7
comment|// p5 : n8
comment|// no-label : n9
comment|// active these nodes
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n4"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n5"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n6"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n7"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n8"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n9"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// check varibles
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p4"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p5"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// change a bunch of nodes -> labels
comment|// n4 -> p2
comment|// n7 -> empty
comment|// n5 -> p1
comment|// n8 -> empty
comment|// n9 -> p1
comment|//
comment|// now become:
comment|// p1 : n5, n9
comment|// p2 : n1, n2, n4
comment|// p3 : n3, n6
comment|// p4 : [ ]
comment|// p5 : [ ]
comment|// no label: n8, n7
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
operator|(
name|Map
operator|)
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n4"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n7"
argument_list|)
argument_list|,
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|,
name|toNodeId
argument_list|(
literal|"n5"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n8"
argument_list|)
argument_list|,
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|,
name|toNodeId
argument_list|(
literal|"n9"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check varibles
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p2"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p3"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p4"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p5"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetQueueResource ()
specifier|public
name|void
name|testGetQueueResource
parameter_list|()
throws|throws
name|Exception
block|{
name|Resource
name|clusterResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|9999
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|/*      * Node->Labels:      *   host1 : red      *   host2 : blue      *   host3 : yellow      *   host4 :      */
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|,
literal|"yellow"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"host1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"red"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"host2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"host3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"yellow"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// active two NM to n1, one large and one small
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host4"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// reinitialize queue
name|Set
argument_list|<
name|String
argument_list|>
name|q1Label
init|=
name|toSet
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|q2Label
init|=
name|toSet
argument_list|(
literal|"blue"
argument_list|,
literal|"yellow"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|q3Label
init|=
name|toSet
argument_list|(
literal|"yellow"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|q4Label
init|=
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|q5Label
init|=
name|toSet
argument_list|(
name|RMNodeLabelsManager
operator|.
name|ANY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|queueToLabels
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|reinitializeQueueLabels
argument_list|(
name|queueToLabels
argument_list|)
expr_stmt|;
comment|// check resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterResource
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"host2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Check resource after changes some labels      * Node->Labels:      *   host1 : red      *   host2 : (was: blue)      *   host3 : yellow      *   host4 :      */
comment|// check resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterResource
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Check resource after deactive/active some nodes       * Node->Labels:      *   (deactived) host1 : red      *   host2 :      *   (deactived and then actived) host3 : yellow      *   host4 :      */
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// check resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterResource
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Check resource after refresh queue:      *    Q1: blue      *    Q2: red, blue      *    Q3: red      *    Q4:      *    Q5: ANY      */
name|q1Label
operator|=
name|toSet
argument_list|(
literal|"blue"
argument_list|)
expr_stmt|;
name|q2Label
operator|=
name|toSet
argument_list|(
literal|"blue"
argument_list|,
literal|"red"
argument_list|)
expr_stmt|;
name|q3Label
operator|=
name|toSet
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|q4Label
operator|=
name|RMNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
expr_stmt|;
name|q5Label
operator|=
name|toSet
argument_list|(
name|RMNodeLabelsManager
operator|.
name|ANY
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|clear
argument_list|()
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|)
expr_stmt|;
name|queueToLabels
operator|.
name|put
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|reinitializeQueueLabels
argument_list|(
name|queueToLabels
argument_list|)
expr_stmt|;
comment|// check resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterResource
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Active NMs in nodes already have NM      * Node->Labels:      *   host2 :      *   host3 : yellow (3 NMs)      *   host4 : (2 NMs)      */
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host4"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// check resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|3
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterResource
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Deactive NMs in nodes already have NMs      * Node->Labels:      *   host2 :      *   host3 : yellow (2 NMs)      *   host4 : (0 NMs)      */
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host4"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host4"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q1"
argument_list|,
name|q1Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q2"
argument_list|,
name|q2Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q3"
argument_list|,
name|q3Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|1
argument_list|)
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q4"
argument_list|,
name|q4Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterResource
argument_list|,
name|mgr
operator|.
name|getQueueResource
argument_list|(
literal|"Q5"
argument_list|,
name|q5Label
argument_list|,
name|clusterResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetLabelResourceWhenMultipleNMsExistingInSameHost ()
specifier|public
name|void
name|testGetLabelResourceWhenMultipleNMsExistingInSameHost
parameter_list|()
throws|throws
name|IOException
block|{
comment|// active two NM to n1, one large and one small
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|4
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
comment|// check resource of no label, it should be small * 4
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// change two of these nodes to p1, check resource of no_label and P1
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mgr
operator|.
name|getResourceByLabel
argument_list|(
literal|"p1"
argument_list|,
literal|null
argument_list|)
argument_list|,
name|Resources
operator|.
name|multiply
argument_list|(
name|SMALL_RESOURCE
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRemoveLabelsFromNode ()
specifier|public
name|void
name|testRemoveLabelsFromNode
parameter_list|()
throws|throws
name|Exception
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// active one NM to n1:1
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"removeLabelsFromNode should trigger IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mgr
operator|.
name|removeLabelsFromNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"IOException from removeLabelsFromNode "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SchedulerEventHandler
specifier|private
specifier|static
class|class
name|SchedulerEventHandler
implements|implements
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
block|{
DECL|field|updatedNodeToLabels
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|updatedNodeToLabels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|receivedEvent
name|boolean
name|receivedEvent
decl_stmt|;
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NODE_LABELS_UPDATE
case|:
name|receivedEvent
operator|=
literal|true
expr_stmt|;
name|updatedNodeToLabels
operator|=
operator|(
operator|(
name|NodeLabelsUpdateSchedulerEvent
operator|)
name|event
operator|)
operator|.
name|getUpdatedNodeToLabels
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testReplaceLabelsFromNode ()
specifier|public
name|void
name|testReplaceLabelsFromNode
parameter_list|()
throws|throws
name|Exception
block|{
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Dispatcher
name|syncDispatcher
init|=
operator|new
name|InlineDispatcher
argument_list|()
decl_stmt|;
name|SchedulerEventHandler
name|schedEventsHandler
init|=
operator|new
name|SchedulerEventHandler
argument_list|()
decl_stmt|;
name|syncDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
name|schedEventsHandler
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|syncDispatcher
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n2"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n3"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Event should be sent when there is change in labels"
argument_list|,
name|schedEventsHandler
operator|.
name|receivedEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3 node label mapping modified"
argument_list|,
literal|3
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableMap
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|modifiedMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Node label mapping is not matching"
argument_list|,
name|modifiedMap
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
argument_list|)
expr_stmt|;
name|schedEventsHandler
operator|.
name|receivedEvent
operator|=
literal|false
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No event should be sent when there is no change in labels"
argument_list|,
name|schedEventsHandler
operator|.
name|receivedEvent
argument_list|)
expr_stmt|;
name|schedEventsHandler
operator|.
name|receivedEvent
operator|=
literal|false
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n2:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Event should be sent when there is change in labels"
argument_list|,
name|schedEventsHandler
operator|.
name|receivedEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single node label mapping modified"
argument_list|,
literal|1
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n2:1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|schedEventsHandler
operator|.
name|receivedEvent
operator|=
literal|false
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Event should be sent when there is change in labels @ HOST"
argument_list|,
name|schedEventsHandler
operator|.
name|receivedEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single node label mapping modified"
argument_list|,
literal|1
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n3:1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|schedEventsHandler
operator|.
name|receivedEvent
operator|=
literal|false
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Event should be sent when labels are modified at host though labels were set @ NM level"
argument_list|,
name|schedEventsHandler
operator|.
name|receivedEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Single node label mapping modified"
argument_list|,
literal|1
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|schedEventsHandler
operator|.
name|updatedNodeToLabels
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|schedEventsHandler
operator|.
name|receivedEvent
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testGetLabelsOnNodesWhenNodeActiveDeactive ()
specifier|public
name|void
name|testGetLabelsOnNodesWhenNodeActiveDeactive
parameter_list|()
throws|throws
name|Exception
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|,
literal|"p2"
argument_list|,
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Active/Deactive a node directly assigned label, should not remove from
comment|// node->label map
name|mgr
operator|.
name|activateNode
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Host will not affected
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Active/Deactive a node doesn't directly assigned label, should remove
comment|// from node->label map
name|mgr
operator|.
name|activateNode
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Host will not affected too
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p2"
argument_list|)
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// When we change label on the host after active a node without directly
comment|// assigned label, such node will still be removed after deactive
comment|// Active/Deactive a node doesn't directly assigned label, should remove
comment|// from node->label map
name|mgr
operator|.
name|activateNode
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|,
name|SMALL_RESOURCE
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1:2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Host will not affected too
name|assertCollectionEquals
argument_list|(
name|toSet
argument_list|(
literal|"p3"
argument_list|)
argument_list|,
name|mgr
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|get
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNodeLabelInfo (List<RMNodeLabel> infos, String labelName, int activeNMs, int memory)
specifier|private
name|void
name|checkNodeLabelInfo
parameter_list|(
name|List
argument_list|<
name|RMNodeLabel
argument_list|>
name|infos
parameter_list|,
name|String
name|labelName
parameter_list|,
name|int
name|activeNMs
parameter_list|,
name|int
name|memory
parameter_list|)
block|{
for|for
control|(
name|RMNodeLabel
name|info
range|:
name|infos
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getLabelName
argument_list|()
operator|.
name|equals
argument_list|(
name|labelName
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|activeNMs
argument_list|,
name|info
operator|.
name|getNumActiveNMs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|info
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to find info has label="
operator|+
name|labelName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testPullRMNodeLabelsInfo ()
specifier|public
name|void
name|testPullRMNodeLabelsInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n2"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n3"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n4"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n5"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n2"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|toNodeId
argument_list|(
literal|"n3"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// x, y, z and ""
name|List
argument_list|<
name|RMNodeLabel
argument_list|>
name|infos
init|=
name|mgr
operator|.
name|pullRMNodeLabelsInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|infos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkNodeLabelInfo
argument_list|(
name|infos
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|checkNodeLabelInfo
argument_list|(
name|infos
argument_list|,
literal|"x"
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|checkNodeLabelInfo
argument_list|(
name|infos
argument_list|,
literal|"y"
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|checkNodeLabelInfo
argument_list|(
name|infos
argument_list|,
literal|"z"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testcheckRemoveFromClusterNodeLabelsOfQueue ()
specifier|public
name|void
name|testcheckRemoveFromClusterNodeLabelsOfQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|lmgr
operator|=
operator|new
name|RMNodeLabelsManager
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|tempDir
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"nlb"
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|tempDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|tempDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_NODE_LABELS_STORE_ROOT_DIR
argument_list|,
name|tempDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
literal|"org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler"
argument_list|)
expr_stmt|;
name|Configuration
name|withQueueLabels
init|=
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockRM
name|rm
init|=
name|initRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|lmgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|toSet
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|lmgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"x"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|lmgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
class|class
name|TestRMLabelManger
extends|extends
name|RMNodeLabelsManager
block|{
annotation|@
name|Override
specifier|protected
name|void
name|checkRemoveFromClusterNodeLabelsOfQueue
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|labelsToRemove
parameter_list|)
throws|throws
name|IOException
block|{
name|checkQueueCall
operator|=
literal|true
expr_stmt|;
comment|// Do nothing
block|}
block|}
name|lmgr
operator|=
operator|new
name|TestRMLabelManger
argument_list|()
expr_stmt|;
name|MockRM
name|rm2
init|=
name|initRM
argument_list|(
name|withQueueLabels
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"checkRemoveFromClusterNodeLabelsOfQueue should not be called"
operator|+
literal|"on recovery"
argument_list|,
name|checkQueueCall
argument_list|)
expr_stmt|;
name|lmgr
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"x"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"checkRemoveFromClusterNodeLabelsOfQueue should be called "
operator|+
literal|"since its not recovery"
argument_list|,
name|checkQueueCall
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|initRM (Configuration conf)
specifier|private
name|MockRM
name|initRM
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|lmgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|lmgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rm
return|;
block|}
DECL|method|getConfigurationWithQueueLabels (Configuration config)
specifier|private
name|Configuration
name|getConfigurationWithQueueLabels
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|config
argument_list|)
decl_stmt|;
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"x"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testLabelsToNodesOnNodeActiveDeactive ()
specifier|public
name|void
name|testLabelsToNodesOnNodeActiveDeactive
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Activate a node without assigning any labels
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add labels and replace labels on node
name|mgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|toNodeId
argument_list|(
literal|"n1"
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// p1 -> n1, n1:1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Activate a node for which host to label mapping exists
name|mgr
operator|.
name|activateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// p1 -> n1, n1:1, n1:2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Deactivate a node. n1:1 will be removed from the map
name|mgr
operator|.
name|deactivateNode
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"n1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// p1 -> n1, n1:2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
operator|.
name|get
argument_list|(
literal|"p1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLabelsToNodesEquals
argument_list|(
name|mgr
operator|.
name|getLabelsToNodes
argument_list|()
argument_list|,
name|transposeNodeToLabels
argument_list|(
name|mgr
operator|.
name|getNodeLabels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testBackwardsCompatableMirror ()
specifier|public
name|void
name|testBackwardsCompatableMirror
parameter_list|()
throws|throws
name|Exception
block|{
name|lmgr
operator|=
operator|new
name|RMNodeLabelsManager
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|File
name|tempDir
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"nlb"
argument_list|,
literal|".tmp"
argument_list|)
decl_stmt|;
name|tempDir
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tempDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|tempDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|tempDirName
init|=
name|tempDir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_NODE_LABELS_STORE_ROOT_DIR
argument_list|,
name|tempDirName
argument_list|)
expr_stmt|;
comment|// The following are the contents of a 2.7-formatted levelDB file to be
comment|// placed in nodelabel.mirror. There are 3 labels: 'a', 'b', and 'c'.
comment|// host1 is labeled with 'a', host2 is labeled with 'b', and c is not
comment|// associated with a node.
name|byte
index|[]
name|contents
init|=
block|{
literal|0x09
block|,
literal|0x0A
block|,
literal|0x01
block|,
literal|0x61
block|,
literal|0x0A
block|,
literal|0x01
block|,
literal|0x62
block|,
literal|0x0A
block|,
literal|0x01
block|,
literal|0x63
block|,
literal|0x20
block|,
literal|0x0A
block|,
literal|0x0E
block|,
literal|0x0A
block|,
literal|0x09
block|,
literal|0x0A
block|,
literal|0x05
block|,
literal|0x68
block|,
literal|0x6F
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x32
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x12
block|,
literal|0x01
block|,
literal|0x62
block|,
literal|0x0A
block|,
literal|0x0E
block|,
literal|0x0A
block|,
literal|0x09
block|,
literal|0x0A
block|,
literal|0x05
block|,
literal|0x68
block|,
literal|0x6F
block|,
literal|0x73
block|,
literal|0x74
block|,
literal|0x31
block|,
literal|0x10
block|,
literal|0x00
block|,
literal|0x12
block|,
literal|0x01
block|,
literal|0x61
block|}
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|tempDirName
operator|+
literal|"/nodelabel.mirror"
argument_list|)
decl_stmt|;
name|file
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
name|FileOutputStream
name|stream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|contents
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
literal|"org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler"
argument_list|)
expr_stmt|;
name|Configuration
name|withQueueLabels
init|=
name|getConfigurationWithQueueLabels
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockRM
name|rm
init|=
name|initRM
argument_list|(
name|withQueueLabels
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|labelNames
init|=
name|lmgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|labeledNodes
init|=
name|lmgr
operator|.
name|getLabelsToNodes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelNames
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelNames
operator|.
name|contains
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labelNames
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labeledNodes
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|contains
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|labeledNodes
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
operator|.
name|contains
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

