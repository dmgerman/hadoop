begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONJAXBContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONMarshaller
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRMWebServicesAppsModification
specifier|public
class|class
name|TestRMWebServicesAppsModification
extends|extends
name|JerseyTest
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|CONTAINER_MB
specifier|private
specifier|static
specifier|final
name|int
name|CONTAINER_MB
init|=
literal|1024
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|field|webserviceUserName
specifier|private
name|String
name|webserviceUserName
init|=
literal|"testuser"
decl_stmt|;
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
comment|/*    * Helper class to allow testing of RM web services which require    * authorization Add this class as a filter in the Guice injector for the    * MockRM    */
annotation|@
name|Singleton
DECL|class|TestRMCustomAuthFilter
specifier|public
specifier|static
class|class
name|TestRMCustomAuthFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|filterConfig
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|configPrefix
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|configPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|props
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|ANONYMOUS_ALLOWED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
DECL|class|TestServletModule
specifier|private
class|class
name|TestServletModule
extends|extends
name|ServletModule
block|{
DECL|field|conf
specifier|public
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|setAuthFilter
name|boolean
name|setAuthFilter
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getQueueACLsManager
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|setAuthFilter
condition|)
block|{
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|TestRMCustomAuthFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNoAuthInjector ()
specifier|private
name|Injector
name|getNoAuthInjector
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|TestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSimpleAuthInjector ()
specifier|private
name|Injector
name|getSimpleAuthInjector
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|TestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the admin acls otherwise all users are considered admins
comment|// and we can't test authorization
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"testuser1"
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameters
DECL|method|guiceConfigs ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|guiceConfigs
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestRMWebServicesAppsModification (int run)
specifier|public
name|TestRMWebServicesAppsModification
parameter_list|(
name|int
name|run
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|run
condition|)
block|{
case|case
literal|0
case|:
default|default:
name|injector
operator|=
name|getNoAuthInjector
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|injector
operator|=
name|getSimpleAuthInjector
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|method|isAuthorizationEnabled ()
specifier|private
name|boolean
name|isAuthorizationEnabled
parameter_list|()
block|{
return|return
name|rm
operator|.
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|constructWebResource (WebResource r, String... paths)
specifier|private
name|WebResource
name|constructWebResource
parameter_list|(
name|WebResource
name|r
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|WebResource
name|rt
init|=
name|r
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|rt
operator|=
name|rt
operator|.
name|path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAuthorizationEnabled
argument_list|()
condition|)
block|{
name|rt
operator|=
name|rt
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|webserviceUserName
argument_list|)
expr_stmt|;
block|}
return|return
name|rt
return|;
block|}
DECL|method|constructWebResource (String... paths)
specifier|private
name|WebResource
name|constructWebResource
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|WebResource
name|ws
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|constructWebResource
argument_list|(
name|ws
argument_list|,
name|paths
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppState ()
specifier|public
name|void
name|testSingleAppState
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|==
name|MediaType
operator|.
name|APPLICATION_JSON
condition|)
block|{
name|verifyAppStateJson
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mediaType
operator|==
name|MediaType
operator|.
name|APPLICATION_XML
condition|)
block|{
name|verifyAppStateXML
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testSingleAppKill ()
specifier|public
name|void
name|testSingleAppKill
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
name|MediaType
index|[]
name|contentTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
block|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
name|MediaType
name|contentType
range|:
name|contentTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppState
name|targetState
init|=
operator|new
name|AppState
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|entity
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
condition|)
block|{
name|entity
operator|=
name|appStateToJSON
argument_list|(
name|targetState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|=
name|targetState
expr_stmt|;
block|}
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAuthorizationEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|==
name|MediaType
operator|.
name|APPLICATION_JSON
condition|)
block|{
name|verifyAppStateJson
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppStateXML
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
name|String
name|locationHeaderValue
init|=
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
name|Client
name|c
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|tmp
init|=
name|c
operator|.
name|resource
argument_list|(
name|locationHeaderValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAuthorizationEnabled
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|tmp
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|webserviceUserName
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|tmp
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|locationHeaderValue
operator|.
name|endsWith
argument_list|(
literal|"/ws/v1/cluster/apps/"
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/state"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|response
operator|.
name|getClientResponseStatus
argument_list|()
operator|==
name|Status
operator|.
name|ACCEPTED
operator|)
operator|||
operator|(
name|response
operator|.
name|getClientResponseStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getClientResponseStatus
argument_list|()
operator|==
name|Status
operator|.
name|OK
condition|)
block|{
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|==
name|MediaType
operator|.
name|APPLICATION_JSON
condition|)
block|{
name|verifyAppStateJson
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppStateXML
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
annotation|@
name|Test
DECL|method|testSingleAppKillInvalidState ()
specifier|public
name|void
name|testSingleAppKillInvalidState
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
name|MediaType
index|[]
name|contentTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
block|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
block|}
decl_stmt|;
name|String
index|[]
name|targetStates
init|=
block|{
name|YarnApplicationState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
block|,
literal|"blah"
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
name|MediaType
name|contentType
range|:
name|contentTypes
control|)
block|{
for|for
control|(
name|String
name|targetStateString
range|:
name|targetStates
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
decl_stmt|;
name|AppState
name|targetState
init|=
operator|new
name|AppState
argument_list|(
name|targetStateString
argument_list|)
decl_stmt|;
name|Object
name|entity
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
condition|)
block|{
name|entity
operator|=
name|appStateToJSON
argument_list|(
name|targetState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|=
name|targetState
expr_stmt|;
block|}
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAuthorizationEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|appStateToJSON (AppState state)
specifier|private
specifier|static
name|String
name|appStateToJSON
parameter_list|(
name|AppState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JSONJAXBContext
name|ctx
init|=
operator|new
name|JSONJAXBContext
argument_list|(
name|AppState
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONMarshaller
name|jm
init|=
name|ctx
operator|.
name|createJSONMarshaller
argument_list|()
decl_stmt|;
name|jm
operator|.
name|marshallToJSON
argument_list|(
name|state
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|verifyAppStateJson (ClientResponse response, RMAppState... states)
specifier|protected
specifier|static
name|void
name|verifyAppStateJson
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|RMAppState
modifier|...
name|states
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RMAppState
name|state
range|:
name|states
control|)
block|{
if|if
condition|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|json
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"app state incorrect"
argument_list|,
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|method|verifyAppStateXML (ClientResponse response, RMAppState... appStates)
specifier|protected
specifier|static
name|void
name|verifyAppStateXML
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|RMAppState
modifier|...
name|appStates
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"appstate"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|state
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RMAppState
name|appState
range|:
name|appStates
control|)
block|{
if|if
condition|(
name|appState
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"app state incorrect"
argument_list|,
name|valid
argument_list|)
expr_stmt|;
return|return;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testSingleAppKillUnauthorized ()
specifier|public
name|void
name|testSingleAppKillUnauthorized
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default root queue allows anyone to have admin acl
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root.default"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|csconf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"test"
argument_list|,
literal|"someuser"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppState
name|info
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|AppState
operator|.
name|class
argument_list|)
decl_stmt|;
name|info
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|entity
argument_list|(
name|info
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAuthorizationEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
annotation|@
name|Test
DECL|method|testSingleAppKillInvalidId ()
specifier|public
name|void
name|testSingleAppKillInvalidId
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|testAppIds
init|=
block|{
literal|"application_1391705042196_0001"
block|,
literal|"random_string"
block|}
decl_stmt|;
for|for
control|(
name|String
name|testAppId
range|:
name|testAppIds
control|)
block|{
name|AppState
name|info
init|=
operator|new
name|AppState
argument_list|(
literal|"KILLED"
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|testAppId
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|entity
argument_list|(
name|info
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAuthorizationEnabled
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
annotation|@
name|After
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

