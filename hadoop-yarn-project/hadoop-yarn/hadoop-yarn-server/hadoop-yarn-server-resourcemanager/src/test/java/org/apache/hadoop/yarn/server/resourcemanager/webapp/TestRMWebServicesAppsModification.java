begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
operator|.
name|assertResponseStatusCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|HttpHeaders
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LocalResourceVisibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|AppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CredentialsInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LocalResourceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|LogAggregationContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GuiceServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|config
operator|.
name|DefaultClientConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|filter
operator|.
name|LoggingFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONJAXBContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|json
operator|.
name|JSONMarshaller
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRMWebServicesAppsModification
specifier|public
class|class
name|TestRMWebServicesAppsModification
extends|extends
name|JerseyTestBase
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|CONTAINER_MB
specifier|private
specifier|static
specifier|final
name|int
name|CONTAINER_MB
init|=
literal|1024
decl_stmt|;
DECL|field|webserviceUserName
specifier|private
name|String
name|webserviceUserName
init|=
literal|"testuser"
decl_stmt|;
DECL|field|setAuthFilter
specifier|private
name|boolean
name|setAuthFilter
init|=
literal|false
decl_stmt|;
DECL|field|TEST_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|FS_ALLOC_FILE
specifier|private
specifier|static
specifier|final
name|String
name|FS_ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-fs-queues.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
comment|/*    * Helper class to allow testing of RM web services which require    * authorization Add this class as a filter in the Guice injector for the    * MockRM    */
annotation|@
name|Singleton
DECL|class|TestRMCustomAuthFilter
specifier|public
specifier|static
class|class
name|TestRMCustomAuthFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|filterConfig
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|configPrefix
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|configPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|props
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|ANONYMOUS_ALLOWED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
DECL|class|TestServletModule
specifier|private
specifier|abstract
class|class
name|TestServletModule
extends|extends
name|ServletModule
block|{
DECL|field|conf
specifier|public
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|method|configureScheduler ()
specifier|public
specifier|abstract
name|void
name|configureScheduler
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|configureScheduler
argument_list|()
expr_stmt|;
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
if|if
condition|(
name|setAuthFilter
condition|)
block|{
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|TestRMCustomAuthFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CapTestServletModule
specifier|private
class|class
name|CapTestServletModule
extends|extends
name|TestServletModule
block|{
annotation|@
name|Override
DECL|method|configureScheduler ()
specifier|public
name|void
name|configureScheduler
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.scheduler.class"
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FairTestServletModule
specifier|private
class|class
name|FairTestServletModule
extends|extends
name|TestServletModule
block|{
annotation|@
name|Override
DECL|method|configureScheduler ()
specifier|public
name|void
name|configureScheduler
parameter_list|()
block|{
try|try
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|FS_ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>someuser</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>someuser</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"test\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>someuser</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|FS_ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.scheduler.class"
argument_list|,
name|FairScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNoAuthInjectorCap ()
specifier|private
name|Injector
name|getNoAuthInjectorCap
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|CapTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSimpleAuthInjectorCap ()
specifier|private
name|Injector
name|getSimpleAuthInjectorCap
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|CapTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the admin acls otherwise all users are considered admins
comment|// and we can't test authorization
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"testuser1"
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getNoAuthInjectorFair ()
specifier|private
name|Injector
name|getNoAuthInjectorFair
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|FairTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getSimpleAuthInjectorFair ()
specifier|private
name|Injector
name|getSimpleAuthInjectorFair
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|FairTestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|setAuthFilter
operator|=
literal|true
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// set the admin acls otherwise all users are considered admins
comment|// and we can't test authorization
name|conf
operator|.
name|setStrings
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"testuser1"
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameters
DECL|method|guiceConfigs ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|guiceConfigs
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|2
block|}
block|,
block|{
literal|3
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
DECL|method|TestRMWebServicesAppsModification (int run)
specifier|public
name|TestRMWebServicesAppsModification
parameter_list|(
name|int
name|run
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|clientConfig
argument_list|(
operator|new
name|DefaultClientConfig
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|run
condition|)
block|{
case|case
literal|0
case|:
default|default:
comment|// No Auth Capacity Scheduler
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|getNoAuthInjectorCap
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// Simple Auth Capacity Scheduler
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|getSimpleAuthInjectorCap
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// No Auth Fair Scheduler
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|getNoAuthInjectorFair
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
comment|// Simple Auth Fair Scheduler
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|getSimpleAuthInjectorFair
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|isAuthenticationEnabled ()
specifier|private
name|boolean
name|isAuthenticationEnabled
parameter_list|()
block|{
return|return
name|setAuthFilter
return|;
block|}
DECL|method|constructWebResource (WebResource r, String... paths)
specifier|private
name|WebResource
name|constructWebResource
parameter_list|(
name|WebResource
name|r
parameter_list|,
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|WebResource
name|rt
init|=
name|r
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|rt
operator|=
name|rt
operator|.
name|path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|rt
operator|=
name|rt
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|webserviceUserName
argument_list|)
expr_stmt|;
block|}
return|return
name|rt
return|;
block|}
DECL|method|constructWebResource (String... paths)
specifier|private
name|WebResource
name|constructWebResource
parameter_list|(
name|String
modifier|...
name|paths
parameter_list|)
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|WebResource
name|ws
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|constructWebResource
argument_list|(
name|ws
argument_list|,
name|paths
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppState ()
specifier|public
name|void
name|testSingleAppState
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|verifyAppStateJson
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
condition|)
block|{
name|verifyAppStateXML
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testSingleAppKill ()
specifier|public
name|void
name|testSingleAppKill
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
name|MediaType
index|[]
name|contentTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
block|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
name|MediaType
name|contentType
range|:
name|contentTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AppState
name|targetState
init|=
operator|new
name|AppState
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|entity
decl_stmt|;
if|if
condition|(
name|contentType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
condition|)
block|{
name|entity
operator|=
name|appStateToJSON
argument_list|(
name|targetState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|=
name|targetState
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|verifyAppStateJson
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppStateXML
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|RMAppState
operator|.
name|KILLING
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
name|String
name|locationHeaderValue
init|=
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
name|Client
name|c
init|=
name|Client
operator|.
name|create
argument_list|()
decl_stmt|;
name|WebResource
name|tmp
init|=
name|c
operator|.
name|resource
argument_list|(
name|locationHeaderValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|tmp
operator|=
name|tmp
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|webserviceUserName
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|tmp
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|locationHeaderValue
operator|.
name|endsWith
argument_list|(
literal|"/ws/v1/cluster/apps/"
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/state"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|response
operator|.
name|getStatusInfo
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|==
name|Status
operator|.
name|ACCEPTED
operator|.
name|getStatusCode
argument_list|()
operator|)
operator|||
operator|(
name|response
operator|.
name|getStatusInfo
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|==
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatusInfo
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|==
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|verifyAppStateJson
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppStateXML
argument_list|(
name|response
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppKillInvalidState ()
specifier|public
name|void
name|testSingleAppKillInvalidState
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
name|MediaType
index|[]
name|contentTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
block|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
block|}
decl_stmt|;
name|String
index|[]
name|targetStates
init|=
block|{
name|YarnApplicationState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
block|,
literal|"blah"
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
name|MediaType
name|contentType
range|:
name|contentTypes
control|)
block|{
for|for
control|(
name|String
name|targetStateString
range|:
name|targetStates
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
decl_stmt|;
name|AppState
name|targetState
init|=
operator|new
name|AppState
argument_list|(
name|targetStateString
argument_list|)
decl_stmt|;
name|Object
name|entity
decl_stmt|;
if|if
condition|(
name|contentType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
condition|)
block|{
name|entity
operator|=
name|appStateToJSON
argument_list|(
name|targetState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|=
name|targetState
expr_stmt|;
block|}
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|appStateToJSON (AppState state)
specifier|private
specifier|static
name|String
name|appStateToJSON
parameter_list|(
name|AppState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JSONJAXBContext
name|ctx
init|=
operator|new
name|JSONJAXBContext
argument_list|(
name|AppState
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONMarshaller
name|jm
init|=
name|ctx
operator|.
name|createJSONMarshaller
argument_list|()
decl_stmt|;
name|jm
operator|.
name|marshallToJSON
argument_list|(
name|state
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|verifyAppStateJson (ClientResponse response, RMAppState... states)
specifier|protected
specifier|static
name|void
name|verifyAppStateJson
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|RMAppState
modifier|...
name|states
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|responseState
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RMAppState
name|state
range|:
name|states
control|)
block|{
if|if
condition|(
name|state
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|responseState
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|msg
init|=
literal|"app state incorrect, got "
operator|+
name|responseState
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|valid
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAppStateXML (ClientResponse response, RMAppState... appStates)
specifier|protected
specifier|static
name|void
name|verifyAppStateXML
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|RMAppState
modifier|...
name|appStates
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"appstate"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|state
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"state"
argument_list|)
decl_stmt|;
name|boolean
name|valid
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RMAppState
name|appState
range|:
name|appStates
control|)
block|{
if|if
condition|(
name|appState
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|state
argument_list|)
condition|)
block|{
name|valid
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|String
name|msg
init|=
literal|"app state incorrect, got "
operator|+
name|state
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|valid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSingleAppKillUnauthorized ()
specifier|public
name|void
name|testSingleAppKillUnauthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|isCapacityScheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|instanceof
name|CapacityScheduler
decl_stmt|;
name|boolean
name|isFairScheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|instanceof
name|FairScheduler
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"This test is only supported on Capacity and Fair Scheduler"
argument_list|,
name|isCapacityScheduler
operator|||
name|isFairScheduler
argument_list|)
expr_stmt|;
comment|// FairScheduler use ALLOCATION_FILE to configure ACL
if|if
condition|(
name|isCapacityScheduler
condition|)
block|{
comment|// default root queue allows anyone to have admin acl
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root.default"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|csconf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|"test"
argument_list|,
literal|"someuser"
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|AppState
name|info
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|AppState
operator|.
name|class
argument_list|)
decl_stmt|;
name|info
operator|.
name|setState
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|entity
argument_list|(
name|info
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|FORBIDDEN
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleAppKillInvalidId ()
specifier|public
name|void
name|testSingleAppKillInvalidId
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|testAppIds
init|=
block|{
literal|"application_1391705042196_0001"
block|,
literal|"random_string"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testAppIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|AppState
name|info
init|=
operator|new
name|AppState
argument_list|(
literal|"KILLED"
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|testAppIds
index|[
name|i
index|]
argument_list|,
literal|"state"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|entity
argument_list|(
name|info
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper function to wrap frequently used code. It checks the response status    * and checks if it UNAUTHORIZED if we are running with authorization turned    * off or the param passed if we are running with authorization turned on.    *     * @param response    *          the ClientResponse object to be checked    * @param expectedAuthorizedMode    *          the expected Status in authorized mode.    */
DECL|method|validateResponseStatus (ClientResponse response, Status expectedAuthorizedMode)
specifier|public
name|void
name|validateResponseStatus
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|Status
name|expectedAuthorizedMode
parameter_list|)
block|{
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|expectedAuthorizedMode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Helper function to wrap frequently used code. It checks the response status    * and checks if it is the param expectedUnauthorizedMode if we are running    * with authorization turned off or the param expectedAuthorizedMode passed if    * we are running with authorization turned on.    *     * @param response    *          the ClientResponse object to be checked    * @param expectedUnauthorizedMode    *          the expected Status in unauthorized mode.    * @param expectedAuthorizedMode    *          the expected Status in authorized mode.    */
DECL|method|validateResponseStatus (ClientResponse response, Status expectedUnauthorizedMode, Status expectedAuthorizedMode)
specifier|public
name|void
name|validateResponseStatus
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|Status
name|expectedUnauthorizedMode
parameter_list|,
name|Status
name|expectedAuthorizedMode
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|expectedUnauthorizedMode
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertResponseStatusCode
argument_list|(
name|expectedAuthorizedMode
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Simple test - just post to /apps/new-application and validate the response
annotation|@
name|Test
DECL|method|testGetNewApplication ()
specifier|public
name|void
name|testGetNewApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|mediaTypes
index|[]
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
name|String
name|acceptMedia
range|:
name|mediaTypes
control|)
block|{
name|testGetNewApplication
argument_list|(
name|acceptMedia
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testGetNewApplication (String mediaType)
specifier|protected
name|String
name|testGetNewApplication
parameter_list|(
name|String
name|mediaType
parameter_list|)
throws|throws
name|JSONException
throws|,
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
literal|"new-application"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|OK
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|validateGetNewApplicationResponse
argument_list|(
name|response
argument_list|)
return|;
block|}
DECL|method|validateGetNewApplicationResponse (ClientResponse resp)
specifier|protected
name|String
name|validateGetNewApplicationResponse
parameter_list|(
name|ClientResponse
name|resp
parameter_list|)
throws|throws
name|JSONException
throws|,
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|resp
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
condition|)
block|{
name|JSONObject
name|json
init|=
name|resp
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|ret
operator|=
name|validateGetNewApplicationJsonResponse
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resp
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|)
condition|)
block|{
name|String
name|xml
init|=
name|resp
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|ret
operator|=
name|validateGetNewApplicationXMLResponse
argument_list|(
name|xml
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we should not be here
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|validateGetNewApplicationJsonResponse (JSONObject json)
specifier|protected
name|String
name|validateGetNewApplicationJsonResponse
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
block|{
name|String
name|appId
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"application-id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|appId
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|maxResources
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"maximum-resource-capability"
argument_list|)
decl_stmt|;
name|long
name|memory
init|=
name|maxResources
operator|.
name|getLong
argument_list|(
literal|"memory"
argument_list|)
decl_stmt|;
name|long
name|vCores
init|=
name|maxResources
operator|.
name|getLong
argument_list|(
literal|"vCores"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|memory
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vCores
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
DECL|method|validateGetNewApplicationXMLResponse (String response)
specifier|protected
name|String
name|validateGetNewApplicationXMLResponse
parameter_list|(
name|String
name|response
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"NewApplication"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|appId
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"application-id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|appId
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|maxResourceNodes
init|=
name|element
operator|.
name|getElementsByTagName
argument_list|(
literal|"maximum-resource-capability"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|maxResourceNodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|maxResourceCapability
init|=
operator|(
name|Element
operator|)
name|maxResourceNodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|memory
init|=
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|maxResourceCapability
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
name|long
name|vCores
init|=
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|maxResourceCapability
argument_list|,
literal|"vCores"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|memory
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vCores
operator|!=
literal|0
argument_list|)
expr_stmt|;
return|return
name|appId
return|;
block|}
comment|// Test to validate the process of submitting apps - test for appropriate
comment|// errors as well
annotation|@
name|Test
DECL|method|testGetNewApplicationAndSubmit ()
specifier|public
name|void
name|testGetNewApplicationAndSubmit
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|mediaTypes
index|[]
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
name|String
name|acceptMedia
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
name|String
name|contentMedia
range|:
name|mediaTypes
control|)
block|{
name|testAppSubmit
argument_list|(
name|acceptMedia
argument_list|,
name|contentMedia
argument_list|)
expr_stmt|;
name|testAppSubmitErrors
argument_list|(
name|acceptMedia
argument_list|,
name|contentMedia
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testAppSubmit (String acceptMedia, String contentMedia)
specifier|public
name|void
name|testAppSubmit
parameter_list|(
name|String
name|acceptMedia
parameter_list|,
name|String
name|contentMedia
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create a test app and submit it via rest(after getting an app-id) then
comment|// get the app details from the rmcontext and check that everything matches
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|lrKey
init|=
literal|"example"
decl_stmt|;
name|String
name|queueName
init|=
literal|"testqueue"
decl_stmt|;
comment|// create the queue
name|String
index|[]
name|queues
init|=
block|{
literal|"default"
block|,
literal|"testqueue"
block|}
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csconf
operator|.
name|setQueues
argument_list|(
literal|"root"
argument_list|,
name|queues
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.default"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.testqueue"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|csconf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|appName
init|=
literal|"test"
decl_stmt|;
name|String
name|appType
init|=
literal|"test-type"
decl_stmt|;
name|String
name|urlPath
init|=
literal|"apps"
decl_stmt|;
name|String
name|appId
init|=
name|testGetNewApplication
argument_list|(
name|acceptMedia
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|commands
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|commands
operator|.
name|add
argument_list|(
literal|"/bin/sleep 5"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|environment
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|environment
operator|.
name|put
argument_list|(
literal|"APP_VAR"
argument_list|,
literal|"ENV_SETTING"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
literal|"testuser1, testuser2"
argument_list|)
expr_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|"testuser3, testuser4"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|tags
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"tag1"
argument_list|)
expr_stmt|;
name|tags
operator|.
name|add
argument_list|(
literal|"tag 2"
argument_list|)
expr_stmt|;
name|CredentialsInfo
name|credentials
init|=
operator|new
name|CredentialsInfo
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tokens
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|secrets
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|secrets
operator|.
name|put
argument_list|(
literal|"secret1"
argument_list|,
name|Base64
operator|.
name|encodeBase64String
argument_list|(
literal|"mysecret"
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|setSecrets
argument_list|(
name|secrets
argument_list|)
expr_stmt|;
name|credentials
operator|.
name|setTokens
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContextInfo
name|appInfo
init|=
operator|new
name|ApplicationSubmissionContextInfo
argument_list|()
decl_stmt|;
name|appInfo
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setApplicationName
argument_list|(
name|appName
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setMaxAppAttempts
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setApplicationType
argument_list|(
name|appType
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResourceInfo
argument_list|>
name|lr
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LocalResourceInfo
name|y
init|=
operator|new
name|LocalResourceInfo
argument_list|()
decl_stmt|;
name|y
operator|.
name|setUrl
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://www.test.com/file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|y
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|y
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|y
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|y
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|lr
operator|.
name|put
argument_list|(
name|lrKey
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|setResources
argument_list|(
name|lr
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|setCommands
argument_list|(
name|commands
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|setEnvironment
argument_list|(
name|environment
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|setAcls
argument_list|(
name|acls
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|getAuxillaryServiceData
argument_list|()
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
name|Base64
operator|.
name|encodeBase64URLSafeString
argument_list|(
literal|"value12"
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|setCredentials
argument_list|(
name|credentials
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setMemory
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setvCores
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setApplicationTags
argument_list|(
name|tags
argument_list|)
expr_stmt|;
comment|// Set LogAggregationContextInfo
name|String
name|includePattern
init|=
literal|"file1"
decl_stmt|;
name|String
name|excludePattern
init|=
literal|"file2"
decl_stmt|;
name|String
name|rolledLogsIncludePattern
init|=
literal|"file3"
decl_stmt|;
name|String
name|rolledLogsExcludePattern
init|=
literal|"file4"
decl_stmt|;
name|String
name|className
init|=
literal|"policy_class"
decl_stmt|;
name|String
name|parameters
init|=
literal|"policy_parameter"
decl_stmt|;
name|LogAggregationContextInfo
name|logAggregationContextInfo
init|=
operator|new
name|LogAggregationContextInfo
argument_list|()
decl_stmt|;
name|logAggregationContextInfo
operator|.
name|setIncludePattern
argument_list|(
name|includePattern
argument_list|)
expr_stmt|;
name|logAggregationContextInfo
operator|.
name|setExcludePattern
argument_list|(
name|excludePattern
argument_list|)
expr_stmt|;
name|logAggregationContextInfo
operator|.
name|setRolledLogsIncludePattern
argument_list|(
name|rolledLogsIncludePattern
argument_list|)
expr_stmt|;
name|logAggregationContextInfo
operator|.
name|setRolledLogsExcludePattern
argument_list|(
name|rolledLogsExcludePattern
argument_list|)
expr_stmt|;
name|logAggregationContextInfo
operator|.
name|setLogAggregationPolicyClassName
argument_list|(
name|className
argument_list|)
expr_stmt|;
name|logAggregationContextInfo
operator|.
name|setLogAggregationPolicyParameters
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setLogAggregationContextInfo
argument_list|(
name|logAggregationContextInfo
argument_list|)
expr_stmt|;
comment|// Set attemptFailuresValidityInterval
name|long
name|attemptFailuresValidityInterval
init|=
literal|5000
decl_stmt|;
name|appInfo
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|attemptFailuresValidityInterval
argument_list|)
expr_stmt|;
comment|// Set ReservationId
name|String
name|reservationId
init|=
name|ReservationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|appInfo
operator|.
name|setReservationId
argument_list|(
name|reservationId
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|acceptMedia
argument_list|)
operator|.
name|entity
argument_list|(
name|appInfo
argument_list|,
name|contentMedia
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|ACCEPTED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|locURL
init|=
name|response
operator|.
name|getHeaders
argument_list|()
operator|.
name|getFirst
argument_list|(
name|HttpHeaders
operator|.
name|LOCATION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|locURL
operator|.
name|contains
argument_list|(
literal|"/apps/application"
argument_list|)
argument_list|)
expr_stmt|;
name|appId
operator|=
name|locURL
operator|.
name|substring
argument_list|(
name|locURL
operator|.
name|indexOf
argument_list|(
literal|"/apps/"
argument_list|)
operator|+
literal|"/apps/"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|WebResource
name|res
init|=
name|resource
argument_list|()
operator|.
name|uri
argument_list|(
operator|new
name|URI
argument_list|(
name|locURL
argument_list|)
argument_list|)
decl_stmt|;
name|res
operator|=
name|res
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
name|webserviceUserName
argument_list|)
expr_stmt|;
name|response
operator|=
name|res
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|ApplicationId
operator|.
name|fromString
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|appName
argument_list|,
name|app
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|webserviceUserName
argument_list|,
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|getQueue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"root."
argument_list|)
condition|)
block|{
name|queueName
operator|=
literal|"root."
operator|+
name|queueName
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|queueName
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appType
argument_list|,
name|app
operator|.
name|getApplicationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tags
argument_list|,
name|app
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|ctx
init|=
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|commands
argument_list|,
name|ctx
operator|.
name|getCommands
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|environment
argument_list|,
name|ctx
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acls
argument_list|,
name|ctx
operator|.
name|getApplicationACLs
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|LocalResource
argument_list|>
name|appLRs
init|=
name|ctx
operator|.
name|getLocalResources
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|appLRs
operator|.
name|containsKey
argument_list|(
name|lrKey
argument_list|)
argument_list|)
expr_stmt|;
name|LocalResource
name|exampleLR
init|=
name|appLRs
operator|.
name|get
argument_list|(
name|lrKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|URL
operator|.
name|fromURI
argument_list|(
name|y
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|,
name|exampleLR
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|y
operator|.
name|getSize
argument_list|()
argument_list|,
name|exampleLR
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|y
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|exampleLR
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|y
operator|.
name|getType
argument_list|()
argument_list|,
name|exampleLR
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|y
operator|.
name|getPattern
argument_list|()
argument_list|,
name|exampleLR
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|y
operator|.
name|getVisibility
argument_list|()
argument_list|,
name|exampleLR
operator|.
name|getVisibility
argument_list|()
argument_list|)
expr_stmt|;
name|Credentials
name|cs
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|ByteArrayInputStream
name|str
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getTokens
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|di
init|=
operator|new
name|DataInputStream
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|cs
operator|.
name|readTokenStorageStream
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|Text
name|key
init|=
operator|new
name|Text
argument_list|(
literal|"secret1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Secrets missing from credentials object"
argument_list|,
name|cs
operator|.
name|getAllSecretKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mysecret"
argument_list|,
operator|new
name|String
argument_list|(
name|cs
operator|.
name|getSecretKey
argument_list|(
name|key
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check LogAggregationContext
name|ApplicationSubmissionContext
name|asc
init|=
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
decl_stmt|;
name|LogAggregationContext
name|lac
init|=
name|asc
operator|.
name|getLogAggregationContext
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|includePattern
argument_list|,
name|lac
operator|.
name|getIncludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|excludePattern
argument_list|,
name|lac
operator|.
name|getExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rolledLogsIncludePattern
argument_list|,
name|lac
operator|.
name|getRolledLogsIncludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rolledLogsExcludePattern
argument_list|,
name|lac
operator|.
name|getRolledLogsExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|className
argument_list|,
name|lac
operator|.
name|getLogAggregationPolicyClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parameters
argument_list|,
name|lac
operator|.
name|getLogAggregationPolicyParameters
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check attemptFailuresValidityInterval
name|assertEquals
argument_list|(
name|attemptFailuresValidityInterval
argument_list|,
name|asc
operator|.
name|getAttemptFailuresValidityInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check ReservationId
name|assertEquals
argument_list|(
name|reservationId
argument_list|,
name|app
operator|.
name|getReservationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|appId
argument_list|)
operator|.
name|accept
argument_list|(
name|acceptMedia
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppSubmitErrors (String acceptMedia, String contentMedia)
specifier|public
name|void
name|testAppSubmitErrors
parameter_list|(
name|String
name|acceptMedia
parameter_list|,
name|String
name|contentMedia
parameter_list|)
throws|throws
name|Exception
block|{
comment|// submit a bunch of bad requests(correct format but bad values) via the
comment|// REST API and make sure we get the right error response codes
name|String
name|urlPath
init|=
literal|"apps"
decl_stmt|;
name|ApplicationSubmissionContextInfo
name|appInfo
init|=
operator|new
name|ApplicationSubmissionContextInfo
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|acceptMedia
argument_list|)
operator|.
name|entity
argument_list|(
name|appInfo
argument_list|,
name|contentMedia
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|String
name|appId
init|=
literal|"random"
decl_stmt|;
name|appInfo
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|acceptMedia
argument_list|)
operator|.
name|entity
argument_list|(
name|appInfo
argument_list|,
name|contentMedia
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|appId
operator|=
literal|"random_junk"
expr_stmt|;
name|appInfo
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|acceptMedia
argument_list|)
operator|.
name|entity
argument_list|(
name|appInfo
argument_list|,
name|contentMedia
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|// bad resource info
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setMemory
argument_list|(
name|rm
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setvCores
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|acceptMedia
argument_list|)
operator|.
name|entity
argument_list|(
name|appInfo
argument_list|,
name|contentMedia
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setvCores
argument_list|(
name|rm
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setMemory
argument_list|(
name|CONTAINER_MB
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|acceptMedia
argument_list|)
operator|.
name|entity
argument_list|(
name|appInfo
argument_list|,
name|contentMedia
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppSubmitBadJsonAndXML ()
specifier|public
name|void
name|testAppSubmitBadJsonAndXML
parameter_list|()
throws|throws
name|Exception
block|{
comment|// submit a bunch of bad XML and JSON via the
comment|// REST API and make sure we get error response codes
name|String
name|urlPath
init|=
literal|"apps"
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContextInfo
name|appInfo
init|=
operator|new
name|ApplicationSubmissionContextInfo
argument_list|()
decl_stmt|;
name|appInfo
operator|.
name|setApplicationName
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setPriority
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setMaxAppAttempts
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setQueue
argument_list|(
literal|"testqueue"
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|setApplicationType
argument_list|(
literal|"test-type"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|LocalResourceInfo
argument_list|>
name|lr
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LocalResourceInfo
name|y
init|=
operator|new
name|LocalResourceInfo
argument_list|()
decl_stmt|;
name|y
operator|.
name|setUrl
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://www.test.com/file.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|y
operator|.
name|setSize
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|y
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|y
operator|.
name|setType
argument_list|(
name|LocalResourceType
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|y
operator|.
name|setVisibility
argument_list|(
name|LocalResourceVisibility
operator|.
name|APPLICATION
argument_list|)
expr_stmt|;
name|lr
operator|.
name|put
argument_list|(
literal|"example"
argument_list|,
name|y
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getContainerLaunchContextInfo
argument_list|()
operator|.
name|setResources
argument_list|(
name|lr
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setMemory
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|appInfo
operator|.
name|getResource
argument_list|()
operator|.
name|setvCores
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" "
operator|+
literal|"standalone=\"yes\"?><blah/>"
decl_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|=
literal|"{\"a\" : \"b\"}"
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
name|urlPath
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|validateResponseStatus
argument_list|(
name|response
argument_list|,
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAppQueue ()
specifier|public
name|void
name|testGetAppQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|isCapacityScheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|instanceof
name|CapacityScheduler
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|contentTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
name|String
name|contentType
range|:
name|contentTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"queue"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedQueue
init|=
literal|"default"
decl_stmt|;
if|if
condition|(
operator|!
name|isCapacityScheduler
condition|)
block|{
name|expectedQueue
operator|=
literal|"root."
operator|+
name|webserviceUserName
expr_stmt|;
block|}
if|if
condition|(
name|contentType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|verifyAppQueueJson
argument_list|(
name|response
argument_list|,
name|expectedQueue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppQueueXML
argument_list|(
name|response
argument_list|,
name|expectedQueue
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testUpdateAppPriority ()
specifier|public
name|void
name|testUpdateAppPriority
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|instanceof
name|CapacityScheduler
operator|)
condition|)
block|{
comment|// till the fair scheduler modifications for priority is completed
return|return;
block|}
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setClusterMaxPriority
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// default root queue allows anyone to have admin acl
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|String
index|[]
name|queues
init|=
block|{
literal|"default"
block|,
literal|"test"
block|}
decl_stmt|;
name|csconf
operator|.
name|setQueues
argument_list|(
literal|"root"
argument_list|,
name|queues
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.default"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.test"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root.default"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root.test"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|csconf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
name|MediaType
index|[]
name|contentTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
block|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
name|MediaType
name|contentType
range|:
name|contentTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|modifiedPriority
init|=
literal|8
decl_stmt|;
name|AppPriority
name|priority
init|=
operator|new
name|AppPriority
argument_list|(
name|modifiedPriority
argument_list|)
decl_stmt|;
name|Object
name|entity
decl_stmt|;
if|if
condition|(
name|contentType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
condition|)
block|{
name|entity
operator|=
name|appPriorityToJSON
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|=
name|priority
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"priority"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|verifyAppPriorityJson
argument_list|(
name|response
argument_list|,
name|modifiedPriority
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppPriorityXML
argument_list|(
name|response
argument_list|,
name|modifiedPriority
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"priority"
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|verifyAppPriorityJson
argument_list|(
name|response
argument_list|,
name|modifiedPriority
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppPriorityXML
argument_list|(
name|response
argument_list|,
name|modifiedPriority
argument_list|)
expr_stmt|;
block|}
comment|// check unauthorized
name|app
operator|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"priority"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
DECL|method|testAppMove ()
specifier|public
name|void
name|testAppMove
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|isCapacityScheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|instanceof
name|CapacityScheduler
decl_stmt|;
comment|// default root queue allows anyone to have admin acl
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|String
index|[]
name|queues
init|=
block|{
literal|"default"
block|,
literal|"test"
block|}
decl_stmt|;
name|csconf
operator|.
name|setQueues
argument_list|(
literal|"root"
argument_list|,
name|queues
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.default"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setCapacity
argument_list|(
literal|"root.test"
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root.default"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|csconf
operator|.
name|setAcl
argument_list|(
literal|"root.test"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|reinitialize
argument_list|(
name|csconf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|amNodeManager
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2048
argument_list|)
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
name|MediaType
index|[]
name|contentTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
block|,
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
block|}
decl_stmt|;
for|for
control|(
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
name|MediaType
name|contentType
range|:
name|contentTypes
control|)
block|{
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
name|webserviceUserName
argument_list|)
decl_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AppQueue
name|targetQueue
init|=
operator|new
name|AppQueue
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Object
name|entity
decl_stmt|;
if|if
condition|(
name|contentType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|)
condition|)
block|{
name|entity
operator|=
name|appQueueToJSON
argument_list|(
name|targetQueue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entity
operator|=
name|targetQueue
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"queue"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAuthenticationEnabled
argument_list|()
condition|)
block|{
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|UNAUTHORIZED
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|expectedQueue
init|=
literal|"test"
decl_stmt|;
if|if
condition|(
operator|!
name|isCapacityScheduler
condition|)
block|{
name|expectedQueue
operator|=
literal|"root.test"
expr_stmt|;
block|}
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|verifyAppQueueJson
argument_list|(
name|response
argument_list|,
name|expectedQueue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyAppQueueXML
argument_list|(
name|response
argument_list|,
name|expectedQueue
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedQueue
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check unauthorized
name|app
operator|=
name|rm
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MB
argument_list|,
literal|""
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|amNodeManager
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|response
operator|=
name|this
operator|.
name|constructWebResource
argument_list|(
literal|"apps"
argument_list|,
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"queue"
argument_list|)
operator|.
name|entity
argument_list|(
name|entity
argument_list|,
name|contentType
argument_list|)
operator|.
name|accept
argument_list|(
name|mediaType
argument_list|)
operator|.
name|put
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertResponseStatusCode
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getStatusInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCapacityScheduler
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"root.someuser"
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|appPriorityToJSON (AppPriority targetPriority)
specifier|protected
specifier|static
name|String
name|appPriorityToJSON
parameter_list|(
name|AppPriority
name|targetPriority
parameter_list|)
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JSONJAXBContext
name|ctx
init|=
operator|new
name|JSONJAXBContext
argument_list|(
name|AppPriority
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONMarshaller
name|jm
init|=
name|ctx
operator|.
name|createJSONMarshaller
argument_list|()
decl_stmt|;
name|jm
operator|.
name|marshallToJSON
argument_list|(
name|targetPriority
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|appQueueToJSON (AppQueue targetQueue)
specifier|protected
specifier|static
name|String
name|appQueueToJSON
parameter_list|(
name|AppQueue
name|targetQueue
parameter_list|)
throws|throws
name|Exception
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|JSONJAXBContext
name|ctx
init|=
operator|new
name|JSONJAXBContext
argument_list|(
name|AppQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONMarshaller
name|jm
init|=
name|ctx
operator|.
name|createJSONMarshaller
argument_list|()
decl_stmt|;
name|jm
operator|.
name|marshallToJSON
argument_list|(
name|targetQueue
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|verifyAppPriorityJson (ClientResponse response, int expectedPriority)
specifier|protected
specifier|static
name|void
name|verifyAppPriorityJson
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|int
name|expectedPriority
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|responsePriority
init|=
name|json
operator|.
name|getInt
argument_list|(
literal|"priority"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPriority
argument_list|,
name|responsePriority
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAppPriorityXML (ClientResponse response, int expectedPriority)
specifier|protected
specifier|static
name|void
name|verifyAppPriorityXML
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|int
name|expectedPriority
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"applicationpriority"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|responsePriority
init|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|element
argument_list|,
literal|"priority"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedPriority
argument_list|,
name|responsePriority
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
DECL|method|verifyAppQueueJson (ClientResponse response, String queue)
name|verifyAppQueueJson
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|JSONException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|responseQueue
init|=
name|json
operator|.
name|getString
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|queue
argument_list|,
name|responseQueue
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
DECL|method|verifyAppQueueXML (ClientResponse response, String queue)
name|verifyAppQueueXML
parameter_list|(
name|ClientResponse
name|response
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
block|{
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
argument_list|,
name|response
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"appqueue"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|responseQueue
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"queue"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|queue
argument_list|,
name|responseQueue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

