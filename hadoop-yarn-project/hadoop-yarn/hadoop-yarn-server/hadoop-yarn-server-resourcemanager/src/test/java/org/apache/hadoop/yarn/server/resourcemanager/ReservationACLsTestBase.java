begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewReservationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|Plan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|ReservationACLsTestBase
specifier|public
class|class
name|ReservationACLsTestBase
extends|extends
name|ACLsTestBase
block|{
DECL|field|defaultDuration
specifier|private
specifier|final
name|int
name|defaultDuration
init|=
literal|600000
decl_stmt|;
DECL|field|defaultRequest
specifier|private
specifier|final
name|ReservationRequest
name|defaultRequest
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|defaultDuration
argument_list|)
decl_stmt|;
DECL|field|defaultRequests
specifier|private
specifier|final
name|ReservationRequests
name|defaultRequests
init|=
name|ReservationRequests
operator|.
name|newInstance
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|defaultRequest
argument_list|)
argument_list|,
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
DECL|field|useFullQueuePath
specifier|private
name|boolean
name|useFullQueuePath
decl_stmt|;
DECL|method|ReservationACLsTestBase (Configuration conf, boolean useFullPath)
specifier|public
name|ReservationACLsTestBase
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|useFullPath
parameter_list|)
block|{
name|configuration
operator|=
name|conf
expr_stmt|;
name|useFullQueuePath
operator|=
name|useFullPath
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|data ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|createCapacitySchedulerConfiguration
argument_list|()
block|,
literal|false
block|}
block|,
block|{
name|createFairSchedulerConfiguration
argument_list|()
block|,
literal|true
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
DECL|method|testApplicationACLs ()
specifier|public
name|void
name|testApplicationACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|registerNode
argument_list|(
literal|"test:1234"
argument_list|,
literal|8192
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|String
name|queueA
init|=
operator|!
name|useFullQueuePath
condition|?
name|QUEUEA
else|:
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUEA
decl_stmt|;
name|String
name|queueB
init|=
operator|!
name|useFullQueuePath
condition|?
name|QUEUEB
else|:
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUEB
decl_stmt|;
name|String
name|queueC
init|=
operator|!
name|useFullQueuePath
condition|?
name|QUEUEC
else|:
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUEC
decl_stmt|;
comment|// Submit Reservations
comment|// Users of queue A can submit reservations on QueueA.
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// Users of queue B cannot submit reservations on QueueA.
name|verifySubmitReservationFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifySubmitReservationFailure
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// Users of queue B can submit reservations on QueueB.
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// Users of queue A cannot submit reservations on QueueB.
name|verifySubmitReservationFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifySubmitReservationFailure
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// Everyone can submit reservations on QueueC.
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifySubmitReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifySubmitReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
comment|// List Reservations
comment|// User with List Reservations, or Admin ACL can list everyone's
comment|// reservations.
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// User without Admin or Reservation ACL can only list their own
comment|// reservations by id.
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationByIdFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// User with List Reservations, or Admin ACL can list everyone's
comment|// reservations.
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// User without Admin or Reservation ACL can only list their own
comment|// reservations by id.
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyListReservationFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyListReservationFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyListReservationByIdFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// Users with Admin ACL in one queue cannot list reservations in
comment|// another queue
name|verifyListReservationFailure
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationFailure
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyListReservationFailure
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyListReservationFailure
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// All users can list reservations on QueueC because acls are enabled
comment|// but not defined.
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyListReservationByIdSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
comment|// Delete Reservations
comment|// Only the user who made the reservation or an admin can delete it.
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// A non-admin cannot delete another user's reservation.
name|verifyDeleteReservationFailure
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyDeleteReservationFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyDeleteReservationFailure
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// Only the user who made the reservation or an admin can delete it.
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// A non-admin cannot delete another user's reservation.
name|verifyDeleteReservationFailure
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyDeleteReservationFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyDeleteReservationFailure
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// All users can delete any reservation on QueueC because acls are enabled
comment|// but not defined.
name|verifyDeleteReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyDeleteReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
comment|// Update Reservation
comment|// Only the user who made the reservation or an admin can update it.
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// A non-admin cannot update another user's reservation.
name|verifyUpdateReservationFailure
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyUpdateReservationFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
name|verifyUpdateReservationFailure
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|queueA
argument_list|)
expr_stmt|;
comment|// Only the user who made the reservation or an admin can update it.
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// A non-admin cannot update another user's reservation.
name|verifyUpdateReservationFailure
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyUpdateReservationFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
name|verifyUpdateReservationFailure
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|queueB
argument_list|)
expr_stmt|;
comment|// All users can update any reservation on QueueC because acls are enabled
comment|// but not defined.
name|verifyUpdateReservationSuccess
argument_list|(
name|COMMON_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
name|verifyUpdateReservationSuccess
argument_list|(
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|queueC
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySubmitReservationSuccess (String submitter, String queueName)
specifier|private
name|void
name|verifySubmitReservationSuccess
parameter_list|(
name|String
name|submitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|submitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|submitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
name|deleteReservation
argument_list|(
name|submitter
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySubmitReservationFailure (String submitter, String queueName)
specifier|private
name|void
name|verifySubmitReservationFailure
parameter_list|(
name|String
name|submitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|submitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|submitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Submit reservation by the enemy should fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|handleAdministerException
argument_list|(
name|e
argument_list|,
name|submitter
argument_list|,
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|SUBMIT_RESERVATIONS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyListReservationSuccess (String lister, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyListReservationSuccess
parameter_list|(
name|String
name|lister
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
name|ReservationListResponse
name|adminResponse
init|=
name|listReservation
argument_list|(
name|lister
argument_list|,
name|queueName
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|adminResponse
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|adminResponse
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|originalSubmitter
argument_list|)
operator|)
assert|;
name|deleteReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyListReservationFailure (String lister, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyListReservationFailure
parameter_list|(
name|String
name|lister
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
try|try
block|{
name|listReservation
argument_list|(
name|lister
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"List reservation by the enemy should fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|handleAdministerException
argument_list|(
name|e
argument_list|,
name|lister
argument_list|,
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|LIST_RESERVATIONS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyListReservationByIdSuccess (String lister, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyListReservationByIdSuccess
parameter_list|(
name|String
name|lister
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
name|ReservationListResponse
name|adminResponse
init|=
name|listReservationById
argument_list|(
name|lister
argument_list|,
name|reservationId
argument_list|,
name|queueName
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|adminResponse
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|adminResponse
operator|.
name|getReservationAllocationState
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUser
argument_list|()
operator|.
name|equals
argument_list|(
name|originalSubmitter
argument_list|)
operator|)
assert|;
name|deleteReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyListReservationByIdFailure (String lister, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyListReservationByIdFailure
parameter_list|(
name|String
name|lister
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
try|try
block|{
name|listReservationById
argument_list|(
name|lister
argument_list|,
name|reservationId
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"List reservation by the enemy should fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|handleAdministerException
argument_list|(
name|e
argument_list|,
name|lister
argument_list|,
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|LIST_RESERVATIONS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDeleteReservationSuccess (String killer, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyDeleteReservationSuccess
parameter_list|(
name|String
name|killer
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
name|deleteReservation
argument_list|(
name|killer
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyDeleteReservationFailure (String killer, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyDeleteReservationFailure
parameter_list|(
name|String
name|killer
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
try|try
block|{
name|deleteReservation
argument_list|(
name|killer
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Reservation deletion by the enemy should fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|handleAdministerException
argument_list|(
name|e
argument_list|,
name|killer
argument_list|,
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|ADMINISTER_RESERVATIONS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyUpdateReservationSuccess (String updater, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyUpdateReservationSuccess
parameter_list|(
name|String
name|updater
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
specifier|final
name|ReservationUpdateRequest
name|updateRequest
init|=
name|ReservationUpdateRequest
operator|.
name|newInstance
argument_list|(
name|makeSimpleReservationDefinition
argument_list|()
argument_list|,
name|reservationId
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|ownerClient
init|=
name|getRMClientForUser
argument_list|(
name|updater
argument_list|)
decl_stmt|;
name|ownerClient
operator|.
name|updateReservation
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
name|deleteReservation
argument_list|(
name|updater
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyUpdateReservationFailure (String updater, String originalSubmitter, String queueName)
specifier|private
name|void
name|verifyUpdateReservationFailure
parameter_list|(
name|String
name|updater
parameter_list|,
name|String
name|originalSubmitter
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|ReservationId
name|reservationId
init|=
name|createReservation
argument_list|(
name|originalSubmitter
argument_list|)
decl_stmt|;
name|submitReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
specifier|final
name|ReservationUpdateRequest
name|updateRequest
init|=
name|ReservationUpdateRequest
operator|.
name|newInstance
argument_list|(
name|makeSimpleReservationDefinition
argument_list|()
argument_list|,
name|reservationId
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|unauthorizedClient
init|=
name|getRMClientForUser
argument_list|(
name|updater
argument_list|)
decl_stmt|;
try|try
block|{
name|unauthorizedClient
operator|.
name|updateReservation
argument_list|(
name|updateRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Reservation updating by the enemy should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|handleAdministerException
argument_list|(
name|e
argument_list|,
name|updater
argument_list|,
name|queueName
argument_list|,
name|ReservationACL
operator|.
name|ADMINISTER_RESERVATIONS
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteReservation
argument_list|(
name|originalSubmitter
argument_list|,
name|reservationId
argument_list|)
expr_stmt|;
block|}
DECL|method|makeSimpleReservationDefinition ()
specifier|private
name|ReservationDefinition
name|makeSimpleReservationDefinition
parameter_list|()
block|{
name|long
name|arrival
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|reservationName
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|ReservationDefinition
operator|.
name|newInstance
argument_list|(
name|arrival
argument_list|,
name|arrival
operator|+
call|(
name|int
call|)
argument_list|(
name|defaultDuration
operator|*
literal|1.1
argument_list|)
argument_list|,
name|defaultRequests
argument_list|,
name|reservationName
argument_list|)
return|;
block|}
DECL|method|listReservationById (String lister, ReservationId reservationId, String queueName)
specifier|private
name|ReservationListResponse
name|listReservationById
parameter_list|(
name|String
name|lister
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ReservationListRequest
name|listRequest
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|queueName
argument_list|,
name|reservationId
operator|.
name|toString
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|ownerClient
init|=
name|getRMClientForUser
argument_list|(
name|lister
argument_list|)
decl_stmt|;
return|return
name|ownerClient
operator|.
name|listReservations
argument_list|(
name|listRequest
argument_list|)
return|;
block|}
DECL|method|listReservation (String lister, String queueName)
specifier|private
name|ReservationListResponse
name|listReservation
parameter_list|(
name|String
name|lister
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ReservationListRequest
name|listRequest
init|=
name|ReservationListRequest
operator|.
name|newInstance
argument_list|(
name|queueName
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|ownerClient
init|=
name|getRMClientForUser
argument_list|(
name|lister
argument_list|)
decl_stmt|;
return|return
name|ownerClient
operator|.
name|listReservations
argument_list|(
name|listRequest
argument_list|)
return|;
block|}
DECL|method|deleteReservation (String deleter, ReservationId id)
specifier|private
name|void
name|deleteReservation
parameter_list|(
name|String
name|deleter
parameter_list|,
name|ReservationId
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|deleteClient
init|=
name|getRMClientForUser
argument_list|(
name|deleter
argument_list|)
decl_stmt|;
specifier|final
name|ReservationDeleteRequest
name|deleteRequest
init|=
name|ReservationDeleteRequest
operator|.
name|newInstance
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|deleteClient
operator|.
name|deleteReservation
argument_list|(
name|deleteRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|createReservation (String creator)
specifier|private
name|ReservationId
name|createReservation
parameter_list|(
name|String
name|creator
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|creatorClient
init|=
name|getRMClientForUser
argument_list|(
name|creator
argument_list|)
decl_stmt|;
name|GetNewReservationRequest
name|getNewReservationRequest
init|=
name|GetNewReservationRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|GetNewReservationResponse
name|response
init|=
name|creatorClient
operator|.
name|getNewReservation
argument_list|(
name|getNewReservationRequest
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getReservationId
argument_list|()
return|;
block|}
DECL|method|submitReservation (String submitter, String queueName, ReservationId reservationId)
specifier|private
name|void
name|submitReservation
parameter_list|(
name|String
name|submitter
parameter_list|,
name|String
name|queueName
parameter_list|,
name|ReservationId
name|reservationId
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|submitterClient
init|=
name|getRMClientForUser
argument_list|(
name|submitter
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|reservationSubmissionRequest
init|=
name|ReservationSubmissionRequest
operator|.
name|newInstance
argument_list|(
name|makeSimpleReservationDefinition
argument_list|()
argument_list|,
name|queueName
argument_list|,
name|reservationId
argument_list|)
decl_stmt|;
name|ReservationSubmissionResponse
name|response
init|=
name|submitterClient
operator|.
name|submitReservation
argument_list|(
name|reservationSubmissionRequest
argument_list|)
decl_stmt|;
block|}
DECL|method|handleAdministerException (Exception e, String user, String queue, String operation)
specifier|private
name|void
name|handleAdministerException
parameter_list|(
name|Exception
name|e
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception while killing app as the enemy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"User "
operator|+
name|user
operator|+
literal|" cannot perform operation "
operator|+
name|operation
operator|+
literal|" on queue "
operator|+
name|queue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|registerNode (String host, int memory, int vCores)
specifier|private
name|void
name|registerNode
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|resourceManager
operator|.
name|registerNode
argument_list|(
name|host
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|)
expr_stmt|;
name|int
name|attempts
init|=
literal|10
decl_stmt|;
name|Collection
argument_list|<
name|Plan
argument_list|>
name|plans
decl_stmt|;
do|do
block|{
name|resourceManager
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for node capacity to be added to plan"
argument_list|)
expr_stmt|;
name|plans
operator|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getReservationSystem
argument_list|()
operator|.
name|getAllPlans
argument_list|()
operator|.
name|values
argument_list|()
expr_stmt|;
if|if
condition|(
name|checkCapacity
argument_list|(
name|plans
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|attempts
operator|--
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|attempts
operator|<=
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exhausted attempts in checking if node capacity was "
operator|+
literal|"added to the plan"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkCapacity (Collection<Plan> plans)
specifier|private
name|boolean
name|checkCapacity
parameter_list|(
name|Collection
argument_list|<
name|Plan
argument_list|>
name|plans
parameter_list|)
block|{
for|for
control|(
name|Plan
name|plan
range|:
name|plans
control|)
block|{
if|if
condition|(
name|plan
operator|.
name|getTotalCapacity
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|createCapacitySchedulerConfiguration ()
specifier|private
specifier|static
name|Configuration
name|createCapacitySchedulerConfiguration
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|QUEUEA
block|,
name|QUEUEB
block|,
name|QUEUEC
block|}
argument_list|)
expr_stmt|;
name|String
name|absoluteQueueA
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUEA
decl_stmt|;
name|String
name|absoluteQueueB
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUEB
decl_stmt|;
name|String
name|absoluteQueueC
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|QUEUEC
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|absoluteQueueA
argument_list|,
literal|50f
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|absoluteQueueB
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|absoluteQueueC
argument_list|,
literal|30f
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setReservable
argument_list|(
name|absoluteQueueA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setReservable
argument_list|(
name|absoluteQueueB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setReservable
argument_list|(
name|absoluteQueueC
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Set up ACLs on Queue A
name|Map
argument_list|<
name|ReservationACL
argument_list|,
name|AccessControlList
argument_list|>
name|reservationAclsOnQueueA
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AccessControlList
name|submitACLonQueueA
init|=
operator|new
name|AccessControlList
argument_list|(
name|QUEUE_A_USER
argument_list|)
decl_stmt|;
name|AccessControlList
name|adminACLonQueueA
init|=
operator|new
name|AccessControlList
argument_list|(
name|QUEUE_A_ADMIN
argument_list|)
decl_stmt|;
name|AccessControlList
name|listACLonQueueA
init|=
operator|new
name|AccessControlList
argument_list|(
name|COMMON_USER
argument_list|)
decl_stmt|;
name|reservationAclsOnQueueA
operator|.
name|put
argument_list|(
name|ReservationACL
operator|.
name|SUBMIT_RESERVATIONS
argument_list|,
name|submitACLonQueueA
argument_list|)
expr_stmt|;
name|reservationAclsOnQueueA
operator|.
name|put
argument_list|(
name|ReservationACL
operator|.
name|ADMINISTER_RESERVATIONS
argument_list|,
name|adminACLonQueueA
argument_list|)
expr_stmt|;
name|reservationAclsOnQueueA
operator|.
name|put
argument_list|(
name|ReservationACL
operator|.
name|LIST_RESERVATIONS
argument_list|,
name|listACLonQueueA
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setReservationAcls
argument_list|(
name|absoluteQueueA
argument_list|,
name|reservationAclsOnQueueA
argument_list|)
expr_stmt|;
comment|// Set up ACLs on Queue B
name|Map
argument_list|<
name|ReservationACL
argument_list|,
name|AccessControlList
argument_list|>
name|reservationAclsOnQueueB
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|AccessControlList
name|submitACLonQueueB
init|=
operator|new
name|AccessControlList
argument_list|(
name|QUEUE_B_USER
argument_list|)
decl_stmt|;
name|AccessControlList
name|adminACLonQueueB
init|=
operator|new
name|AccessControlList
argument_list|(
name|QUEUE_B_ADMIN
argument_list|)
decl_stmt|;
name|AccessControlList
name|listACLonQueueB
init|=
operator|new
name|AccessControlList
argument_list|(
name|COMMON_USER
argument_list|)
decl_stmt|;
name|reservationAclsOnQueueB
operator|.
name|put
argument_list|(
name|ReservationACL
operator|.
name|SUBMIT_RESERVATIONS
argument_list|,
name|submitACLonQueueB
argument_list|)
expr_stmt|;
name|reservationAclsOnQueueB
operator|.
name|put
argument_list|(
name|ReservationACL
operator|.
name|ADMINISTER_RESERVATIONS
argument_list|,
name|adminACLonQueueB
argument_list|)
expr_stmt|;
name|reservationAclsOnQueueB
operator|.
name|put
argument_list|(
name|ReservationACL
operator|.
name|LIST_RESERVATIONS
argument_list|,
name|listACLonQueueB
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setReservationAcls
argument_list|(
name|absoluteQueueB
argument_list|,
name|reservationAclsOnQueueB
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_RESERVATION_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|csConf
return|;
block|}
DECL|method|createFairSchedulerConfiguration ()
specifier|private
specifier|static
name|Configuration
name|createFairSchedulerConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|FairSchedulerConfiguration
name|fsConf
init|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-queues.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>drf"
operator|+
literal|"</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitReservations>"
operator|+
literal|"queueA_user,common_user "
operator|+
literal|"</aclSubmitReservations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerReservations>"
operator|+
literal|"queueA_admin "
operator|+
literal|"</aclAdministerReservations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclListReservations>common_user</aclListReservations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>queueA_user,common_user</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>queueA_admin</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<reservation></reservation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>queueB_user,common_user</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>queueB_admin</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitReservations>"
operator|+
literal|"queueB_user,common_user "
operator|+
literal|"</aclSubmitReservations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerReservations>"
operator|+
literal|"queueB_admin "
operator|+
literal|"</aclAdministerReservations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclListReservations>common_user</aclListReservations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<reservation></reservation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<reservation></reservation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|fsConf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|fsConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESERVATION_SYSTEM_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_RESERVATION_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fsConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|fsConf
return|;
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
block|}
end_class

end_unit

