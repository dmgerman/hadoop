begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestFSLeafQueue
specifier|public
class|class
name|TestFSLeafQueue
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
name|TestFSLeafQueue
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|maxResource
specifier|private
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
operator|*
literal|8
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
name|conf
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateDemand ()
specifier|public
name|void
name|testUpdateDemand
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|allocConf
operator|=
name|mock
argument_list|(
name|AllocationConfiguration
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|queueName
init|=
literal|"root.queue1"
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|allocConf
operator|.
name|getMaxResources
argument_list|(
name|queueName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|allocConf
operator|.
name|getMinResources
argument_list|(
name|queueName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|schedulable
init|=
operator|new
name|FSLeafQueue
argument_list|(
name|queueName
argument_list|,
name|scheduler
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|mock
argument_list|(
name|FSAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app
operator|.
name|getDemand
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxResource
argument_list|)
expr_stmt|;
name|schedulable
operator|.
name|addAppSchedulable
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|schedulable
operator|.
name|addAppSchedulable
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|schedulable
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Demand is greater than max allowed "
argument_list|,
name|Resources
operator|.
name|equals
argument_list|(
name|schedulable
operator|.
name|getDemand
argument_list|()
argument_list|,
name|maxResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Queue A wants 3 * 1024. Node update gives this all to A
name|createSchedulingRequest
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Queue B arrives and wants 1 * 1024
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue A should be above min share, B below.
name|FSLeafQueue
name|queueA
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queueB
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|queueA
operator|.
name|isStarvedForMinShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueB
operator|.
name|isStarvedForMinShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Node checks in again, should allocate for B
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Now B should have min share ( = demand here)
name|assertFalse
argument_list|(
name|queueB
operator|.
name|isStarvedForMinShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testIsStarvedForFairShare ()
specifier|public
name|void
name|testIsStarvedForFairShare
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.8</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionThreshold>.4</fairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionThreshold>.6</fairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Queue A wants 4 * 1024. Node update gives this all to A
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
block|}
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|queueA
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
name|queueA
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both queue B1 and queue B2 want 3 * 1024
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB2"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
block|}
name|FSLeafQueue
name|queueB1
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queueB2
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|queueB1
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|queueB2
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// For queue B1, the fairSharePreemptionThreshold is 0.4, and the fair share
comment|// threshold is 1.6 * 1024
name|assertFalse
argument_list|(
name|queueB1
operator|.
name|isStarvedForFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// For queue B2, the fairSharePreemptionThreshold is 0.6, and the fair share
comment|// threshold is 2.4 * 1024
name|assertTrue
argument_list|(
name|queueB2
operator|.
name|isStarvedForFairShare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Node checks in again
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
name|queueB1
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
name|queueB2
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both queue B1 and queue B2 usages go to 3 * 1024
name|assertFalse
argument_list|(
name|queueB1
operator|.
name|isStarvedForFairShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|queueB2
operator|.
name|isStarvedForFairShare
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

