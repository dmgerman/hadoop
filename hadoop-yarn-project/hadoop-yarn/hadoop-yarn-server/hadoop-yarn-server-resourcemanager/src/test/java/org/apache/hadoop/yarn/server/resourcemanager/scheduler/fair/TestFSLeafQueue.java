begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|concurrent
operator|.
name|HadoopExecutors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetricsCustomResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
DECL|class|TestFSLeafQueue
specifier|public
class|class
name|TestFSLeafQueue
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
name|TestFSLeafQueue
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|maxResource
specifier|private
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
operator|*
literal|8
argument_list|)
decl_stmt|;
DECL|field|MAX_AM_SHARE
specifier|private
specifier|static
specifier|final
name|float
name|MAX_AM_SHARE
init|=
literal|0.5f
decl_stmt|;
DECL|field|CUSTOM_RESOURCE
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_RESOURCE
init|=
literal|"test1"
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
name|conf
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateDemand ()
specifier|public
name|void
name|testUpdateDemand
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|String
name|queueName
init|=
literal|"root.queue1"
decl_stmt|;
name|FSLeafQueue
name|schedulable
init|=
operator|new
name|FSLeafQueue
argument_list|(
name|queueName
argument_list|,
name|scheduler
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|schedulable
operator|.
name|setMaxShare
argument_list|(
operator|new
name|ConfigurableResource
argument_list|(
name|maxResource
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schedulable
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxApps
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|schedulable
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|,
name|SchedulingPolicy
operator|.
name|DEFAULT_POLICY
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|mock
argument_list|(
name|FSAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app
operator|.
name|getDemand
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxResource
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
name|schedulable
operator|.
name|addApp
argument_list|(
name|app
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedulable
operator|.
name|addApp
argument_list|(
name|app
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|schedulable
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Demand is greater than max allowed "
argument_list|,
name|Resources
operator|.
name|equals
argument_list|(
name|schedulable
operator|.
name|getDemand
argument_list|()
argument_list|,
name|maxResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|test ()
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queueMaxAMShareDefault>"
operator|+
name|MAX_AM_SHARE
operator|+
literal|"</queueMaxAMShareDefault>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\"></queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\"></queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
for|for
control|(
name|FSQueue
name|queue
range|:
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueues
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxApps
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|queue
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSchedulingPolicy
argument_list|()
argument_list|,
name|SchedulingPolicy
operator|.
name|DEFAULT_POLICY
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Queue A wants 3 * 1024. Node update gives this all to A
name|createSchedulingRequest
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Queue B arrives and wants 1 * 1024
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentAccess ()
specifier|public
name|void
name|testConcurrentAccess
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|String
name|queueName
init|=
literal|"root.queue1"
decl_stmt|;
specifier|final
name|FSLeafQueue
name|schedulable
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|queueName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
decl_stmt|;
specifier|final
name|FSAppAttempt
name|app
init|=
operator|new
name|FSAppAttempt
argument_list|(
name|scheduler
argument_list|,
name|applicationAttemptId
argument_list|,
literal|"user1"
argument_list|,
name|schedulable
argument_list|,
literal|null
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
comment|// this needs to be in sync with the number of runnables declared below
name|int
name|testThreads
init|=
literal|2
decl_stmt|;
name|List
argument_list|<
name|Runnable
argument_list|>
name|runnables
init|=
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
comment|// add applications to modify the list
name|runnables
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|schedulable
operator|.
name|addApp
argument_list|(
name|app
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// iterate over the list a couple of times in a different thread
name|runnables
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|schedulable
operator|.
name|getResourceUsage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Throwable
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|threadPool
init|=
name|HadoopExecutors
operator|.
name|newFixedThreadPool
argument_list|(
name|testThreads
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CountDownLatch
name|allExecutorThreadsReady
init|=
operator|new
name|CountDownLatch
argument_list|(
name|testThreads
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startBlocker
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|allDone
init|=
operator|new
name|CountDownLatch
argument_list|(
name|testThreads
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Runnable
name|submittedTestRunnable
range|:
name|runnables
control|)
block|{
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|allExecutorThreadsReady
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|startBlocker
operator|.
name|await
argument_list|()
expr_stmt|;
name|submittedTestRunnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|allDone
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// wait until all threads are ready
name|allExecutorThreadsReady
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// start all test runners
name|startBlocker
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|int
name|testTimeout
init|=
literal|2
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Timeout waiting for more than "
operator|+
name|testTimeout
operator|+
literal|" seconds"
argument_list|,
name|allDone
operator|.
name|await
argument_list|(
name|testTimeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|ie
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Test failed with exception(s)"
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCanRunAppAMReturnsTrue ()
specifier|public
name|void
name|testCanRunAppAMReturnsTrue
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|CUSTOM_RESOURCE
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|Resource
name|maxShare
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
literal|8
argument_list|,
literal|4
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add a node to increase available memory and vcores in scheduler's
comment|// root queue metrics
name|addNodeToScheduler
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|10
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|25L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|setupQueue
argument_list|(
name|maxShare
argument_list|)
decl_stmt|;
comment|//Min(availableMemory, maxShareMemory (maxResourceOverridden))
comment|// --> Min(4096, 8192) = 4096
comment|//Min(availableVCores, maxShareVCores (maxResourceOverridden))
comment|// --> Min(10, 4) = 4
comment|//Min(available test1, maxShare test1 (maxResourceOverridden))
comment|// --> Min(25, 10) = 10
comment|//MaxAMResource: (4096 MB memory, 4 vcores, 10 test1) * MAX_AM_SHARE
comment|// --> 2048 MB memory, 2 vcores, 5 test1
name|Resource
name|expectedAMShare
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|5L
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|appAMResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|3L
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|customResourceValues
init|=
name|verifyQueueMetricsForCustomResources
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|queue
operator|.
name|canRunAppAM
argument_list|(
name|appAMResource
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"AM should have been allocated!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verifyAMShare
argument_list|(
name|queue
argument_list|,
name|expectedAMShare
argument_list|,
name|customResourceValues
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueue (Resource maxShare)
specifier|private
name|FSLeafQueue
name|setupQueue
parameter_list|(
name|Resource
name|maxShare
parameter_list|)
block|{
name|String
name|queueName
init|=
literal|"root.queue1"
decl_stmt|;
name|FSLeafQueue
name|schedulable
init|=
operator|new
name|FSLeafQueue
argument_list|(
name|queueName
argument_list|,
name|scheduler
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|schedulable
operator|.
name|setMaxShare
argument_list|(
operator|new
name|ConfigurableResource
argument_list|(
name|maxShare
argument_list|)
argument_list|)
expr_stmt|;
name|schedulable
operator|.
name|setMaxAMShare
argument_list|(
name|MAX_AM_SHARE
argument_list|)
expr_stmt|;
return|return
name|schedulable
return|;
block|}
annotation|@
name|Test
DECL|method|testCanRunAppAMReturnsFalse ()
specifier|public
name|void
name|testCanRunAppAMReturnsFalse
parameter_list|()
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|CUSTOM_RESOURCE
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|Resource
name|maxShare
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
operator|*
literal|8
argument_list|,
literal|4
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|10L
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add a node to increase available memory and vcores in scheduler's
comment|// root queue metrics
name|addNodeToScheduler
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|10
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|25L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|setupQueue
argument_list|(
name|maxShare
argument_list|)
decl_stmt|;
comment|//Min(availableMemory, maxShareMemory (maxResourceOverridden))
comment|// --> Min(4096, 8192) = 4096
comment|//Min(availableVCores, maxShareVCores (maxResourceOverridden))
comment|// --> Min(10, 4) = 4
comment|//Min(available test1, maxShare test1 (maxResourceOverridden))
comment|// --> Min(25, 10) = 10
comment|//MaxAMResource: (4096 MB memory, 4 vcores, 10 test1) * MAX_AM_SHARE
comment|// --> 2048 MB memory, 2 vcores, 5 test1
name|Resource
name|expectedAMShare
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|5L
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|appAMResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|6L
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|customResourceValues
init|=
name|verifyQueueMetricsForCustomResources
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|queue
operator|.
name|canRunAppAM
argument_list|(
name|appAMResource
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"AM should not have been allocated!"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|verifyAMShare
argument_list|(
name|queue
argument_list|,
name|expectedAMShare
argument_list|,
name|customResourceValues
argument_list|)
expr_stmt|;
block|}
DECL|method|addNodeToScheduler (Resource node1Resource)
specifier|private
name|void
name|addNodeToScheduler
parameter_list|(
name|Resource
name|node1Resource
parameter_list|)
block|{
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|node1Resource
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAMShare (FSLeafQueue schedulable, Resource expectedAMShare, Map<String, Long> customResourceValues)
specifier|private
name|void
name|verifyAMShare
parameter_list|(
name|FSLeafQueue
name|schedulable
parameter_list|,
name|Resource
name|expectedAMShare
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|customResourceValues
parameter_list|)
block|{
name|Resource
name|actualAMShare
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|schedulable
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareMB
argument_list|()
argument_list|,
name|schedulable
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareVCores
argument_list|()
argument_list|,
name|customResourceValues
argument_list|)
decl_stmt|;
name|long
name|customResourceValue
init|=
name|actualAMShare
operator|.
name|getResourceValue
argument_list|(
name|CUSTOM_RESOURCE
argument_list|)
decl_stmt|;
comment|//make sure to verify custom resource value explicitly!
name|assertEquals
argument_list|(
literal|5L
argument_list|,
name|customResourceValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AM share is not the expected!"
argument_list|,
name|expectedAMShare
argument_list|,
name|actualAMShare
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueMetricsForCustomResources ( FSLeafQueue schedulable)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|verifyQueueMetricsForCustomResources
parameter_list|(
name|FSLeafQueue
name|schedulable
parameter_list|)
block|{
name|QueueMetricsCustomResource
name|maxAMShareCustomResources
init|=
name|schedulable
operator|.
name|getMetrics
argument_list|()
operator|.
name|getCustomResources
argument_list|()
operator|.
name|getMaxAMShare
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|customResourceValues
init|=
name|maxAMShareCustomResources
operator|.
name|getValues
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue metrics for custom resources should not be null!"
argument_list|,
name|maxAMShareCustomResources
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue metrics for custom resources resource values "
operator|+
literal|"should not be null!"
argument_list|,
name|customResourceValues
argument_list|)
expr_stmt|;
return|return
name|customResourceValues
return|;
block|}
block|}
end_class

end_unit

