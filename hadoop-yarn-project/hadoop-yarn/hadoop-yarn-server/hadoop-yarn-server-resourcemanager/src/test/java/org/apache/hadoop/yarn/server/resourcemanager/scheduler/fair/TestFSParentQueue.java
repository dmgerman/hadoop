begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestFSParentQueue
specifier|public
class|class
name|TestFSParentQueue
block|{
DECL|field|conf
specifier|private
name|FairSchedulerConfiguration
name|conf
decl_stmt|;
DECL|field|queueManager
specifier|private
name|QueueManager
name|queueManager
decl_stmt|;
DECL|field|notEmptyQueues
specifier|private
name|Set
argument_list|<
name|FSQueue
argument_list|>
name|notEmptyQueues
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
expr_stmt|;
name|FairScheduler
name|scheduler
init|=
name|mock
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|DefaultResourceCalculator
argument_list|()
argument_list|)
expr_stmt|;
name|SystemClock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|notEmptyQueues
operator|=
operator|new
name|HashSet
argument_list|<
name|FSQueue
argument_list|>
argument_list|()
expr_stmt|;
name|queueManager
operator|=
operator|new
name|QueueManager
argument_list|(
name|scheduler
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|(
name|FSQueue
name|queue
parameter_list|)
block|{
return|return
operator|!
name|notEmptyQueues
operator|.
name|contains
argument_list|(
name|queue
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|FSQueueMetrics
operator|.
name|forQueue
argument_list|(
literal|"root"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConcurrentChangeToGetChildQueue ()
specifier|public
name|void
name|testConcurrentChangeToGetChildQueue
parameter_list|()
block|{
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSParentQueue
name|test
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"parent"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|test
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|int
name|childQueuesFound
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FSQueue
name|childQueue
range|:
name|test
operator|.
name|getChildQueues
argument_list|()
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|childQueuesFound
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|childQueuesFound
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|test
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

