begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Binder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|MockRMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|test
operator|.
name|WebAppTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestRMWebAppFairScheduler
specifier|public
class|class
name|TestRMWebAppFairScheduler
block|{
annotation|@
name|Test
DECL|method|testFairSchedulerWebAppPage ()
specifier|public
name|void
name|testFairSchedulerWebAppPage
parameter_list|()
block|{
name|List
argument_list|<
name|RMAppState
argument_list|>
name|appStates
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|)
decl_stmt|;
specifier|final
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
name|appStates
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|RMContext
operator|.
name|class
argument_list|,
name|rmContext
argument_list|,
operator|new
name|Module
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
try|try
block|{
name|ResourceManager
name|mockRmWithFairScheduler
init|=
name|mockRm
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|mockRmWithFairScheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|FairSchedulerPage
name|fsViewInstance
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|FairSchedulerPage
operator|.
name|class
argument_list|)
decl_stmt|;
name|fsViewInstance
operator|.
name|render
argument_list|()
expr_stmt|;
name|WebAppTests
operator|.
name|flushOutput
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
comment|/**    *  Testing inconsistent state between AbstractYarnScheduler#applications and    *  RMContext#applications    */
annotation|@
name|Test
DECL|method|testFairSchedulerWebAppPageInInconsistentState ()
specifier|public
name|void
name|testFairSchedulerWebAppPageInInconsistentState
parameter_list|()
block|{
name|List
argument_list|<
name|RMAppState
argument_list|>
name|appStates
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|RMAppState
operator|.
name|NEW
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|,
name|RMAppState
operator|.
name|FINAL_SAVING
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
specifier|final
name|RMContext
name|rmContext
init|=
name|mockRMContext
argument_list|(
name|appStates
argument_list|)
decl_stmt|;
name|Injector
name|injector
init|=
name|WebAppTests
operator|.
name|createMockInjector
argument_list|(
name|RMContext
operator|.
name|class
argument_list|,
name|rmContext
argument_list|,
operator|new
name|Module
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|Binder
name|binder
parameter_list|)
block|{
try|try
block|{
name|ResourceManager
name|mockRmWithFairScheduler
init|=
name|mockRmWithApps
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|binder
operator|.
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|mockRmWithFairScheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|FairSchedulerPage
name|fsViewInstance
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|FairSchedulerPage
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|fsViewInstance
operator|.
name|render
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Failed to render FairSchedulerPage: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|WebAppTests
operator|.
name|flushOutput
argument_list|(
name|injector
argument_list|)
expr_stmt|;
block|}
DECL|method|mockRMContext (List<RMAppState> states)
specifier|private
specifier|static
name|RMContext
name|mockRMContext
parameter_list|(
name|List
argument_list|<
name|RMAppState
argument_list|>
name|states
parameter_list|)
block|{
specifier|final
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|applicationsMaps
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMAppState
name|state
range|:
name|states
control|)
block|{
name|MockRMApp
name|app
init|=
operator|new
name|MockRMApp
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|state
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMAppMetrics
name|getRMAppMetrics
parameter_list|()
block|{
return|return
operator|new
name|RMAppMetrics
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|YarnApplicationState
name|createApplicationState
parameter_list|()
block|{
return|return
name|YarnApplicationState
operator|.
name|ACCEPTED
return|;
block|}
block|}
decl_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|app
operator|.
name|setCurrentAppAttempt
argument_list|(
name|attempt
argument_list|)
expr_stmt|;
name|applicationsMaps
operator|.
name|put
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|getRMApps
parameter_list|()
block|{
return|return
name|applicationsMaps
return|;
block|}
block|}
return|;
block|}
DECL|method|mockRm (RMContext rmContext)
specifier|private
specifier|static
name|ResourceManager
name|mockRm
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
name|ResourceManager
name|rm
init|=
name|mock
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|rs
init|=
name|mockFairScheduler
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
return|return
name|rm
return|;
block|}
DECL|method|mockFairScheduler ()
specifier|private
specifier|static
name|FairScheduler
name|mockFairScheduler
parameter_list|()
throws|throws
name|IOException
block|{
name|FairScheduler
name|fs
init|=
operator|new
name|FairScheduler
argument_list|()
decl_stmt|;
name|FairSchedulerConfiguration
name|conf
init|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setRMContext
argument_list|(
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
DECL|method|mockRmWithApps (RMContext rmContext)
specifier|private
specifier|static
name|ResourceManager
name|mockRmWithApps
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
name|ResourceManager
name|rm
init|=
name|mock
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|rs
init|=
name|mockFairSchedulerWithoutApps
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
return|return
name|rm
return|;
block|}
DECL|method|mockFairSchedulerWithoutApps (RMContext rmContext)
specifier|private
specifier|static
name|FairScheduler
name|mockFairSchedulerWithoutApps
parameter_list|(
name|RMContext
name|rmContext
parameter_list|)
throws|throws
name|IOException
block|{
name|FairScheduler
name|fs
init|=
operator|new
name|FairScheduler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|FSAppAttempt
name|getSchedulerApp
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSAppAttempt
name|getApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|applicationAttemptId
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|FairSchedulerConfiguration
name|conf
init|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
decl_stmt|;
name|fs
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|fs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|fs
return|;
block|}
block|}
end_class

end_unit

