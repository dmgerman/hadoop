begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTagWithNamespace
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|RACK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetIn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|targetNotIn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|maxCardinality
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|and
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|or
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|MockRMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test the PlacementConstraint Utility class functionality.  */
end_comment

begin_class
DECL|class|TestPlacementConstraintsUtil
specifier|public
class|class
name|TestPlacementConstraintsUtil
block|{
DECL|field|rmNodes
specifier|private
name|List
argument_list|<
name|RMNode
argument_list|>
name|rmNodes
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|appId1
specifier|private
name|ApplicationId
name|appId1
decl_stmt|;
DECL|field|c1
DECL|field|c2
DECL|field|c3
DECL|field|c4
DECL|field|c5
DECL|field|c6
DECL|field|c7
specifier|private
name|PlacementConstraint
name|c1
decl_stmt|,
name|c2
decl_stmt|,
name|c3
decl_stmt|,
name|c4
decl_stmt|,
name|c5
decl_stmt|,
name|c6
decl_stmt|,
name|c7
decl_stmt|;
DECL|field|sourceTag1
DECL|field|sourceTag2
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|sourceTag1
decl_stmt|,
name|sourceTag2
decl_stmt|;
DECL|field|constraintMap1
specifier|private
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap1
decl_stmt|,
DECL|field|constraintMap2
DECL|field|constraintMap3
DECL|field|constraintMap4
name|constraintMap2
decl_stmt|,
name|constraintMap3
decl_stmt|,
name|constraintMap4
decl_stmt|;
DECL|field|requestID
specifier|private
name|AtomicLong
name|requestID
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNodes
operator|.
name|resetHostIds
argument_list|()
expr_stmt|;
name|rmNodes
operator|=
name|MockNodes
operator|.
name|newNodes
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|rmNodes
control|)
block|{
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|rmNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|rmNode
argument_list|)
expr_stmt|;
block|}
name|rmContext
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
expr_stmt|;
comment|// Build appIDs, constraints, source tags, and constraint map.
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|appId1
operator|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|c1
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c2
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetIn
argument_list|(
name|RACK
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c3
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c4
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetNotIn
argument_list|(
name|RACK
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c5
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|and
argument_list|(
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
argument_list|,
name|maxCardinality
argument_list|(
name|NODE
argument_list|,
literal|3
argument_list|,
literal|"spark"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c6
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|or
argument_list|(
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
argument_list|,
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c7
operator|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|or
argument_list|(
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
argument_list|,
name|and
argument_list|(
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
argument_list|,
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"spark"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sourceTag1
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"spark"
argument_list|)
argument_list|)
expr_stmt|;
name|sourceTag2
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"zk"
argument_list|)
argument_list|)
expr_stmt|;
name|constraintMap1
operator|=
name|Stream
operator|.
name|of
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag1
argument_list|,
name|c1
argument_list|)
argument_list|,
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag2
argument_list|,
name|c2
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getKey
argument_list|,
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getValue
argument_list|)
argument_list|)
expr_stmt|;
name|constraintMap2
operator|=
name|Stream
operator|.
name|of
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag1
argument_list|,
name|c3
argument_list|)
argument_list|,
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag2
argument_list|,
name|c4
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getKey
argument_list|,
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getValue
argument_list|)
argument_list|)
expr_stmt|;
name|constraintMap3
operator|=
name|Stream
operator|.
name|of
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag1
argument_list|,
name|c5
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getKey
argument_list|,
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getValue
argument_list|)
argument_list|)
expr_stmt|;
name|constraintMap4
operator|=
name|Stream
operator|.
name|of
argument_list|(
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag1
argument_list|,
name|c6
argument_list|)
argument_list|,
operator|new
name|AbstractMap
operator|.
name|SimpleEntry
argument_list|<>
argument_list|(
name|sourceTag2
argument_list|,
name|c7
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getKey
argument_list|,
name|AbstractMap
operator|.
name|SimpleEntry
operator|::
name|getValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createSchedulingRequest (Set<String> allocationTags, PlacementConstraint constraint)
specifier|private
name|SchedulingRequest
name|createSchedulingRequest
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|,
name|PlacementConstraint
name|constraint
parameter_list|)
block|{
return|return
name|SchedulingRequest
operator|.
name|newInstance
argument_list|(
name|requestID
operator|.
name|incrementAndGet
argument_list|()
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|()
argument_list|,
name|allocationTags
argument_list|,
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|,
name|constraint
argument_list|)
return|;
block|}
DECL|method|createSchedulingRequest (Set<String> allocationTags)
specifier|private
name|SchedulingRequest
name|createSchedulingRequest
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
return|return
name|createSchedulingRequest
argument_list|(
name|allocationTags
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|newContainerId (ApplicationId appId)
specifier|private
name|ContainerId
name|newContainerId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|newContainerId (ApplicationId appId, int containerId)
specifier|private
name|ContainerId
name|newContainerId
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|int
name|containerId
parameter_list|)
block|{
return|return
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
argument_list|,
name|containerId
argument_list|)
return|;
block|}
DECL|method|newSchedulerNode (String hostname, String rackName, NodeId nodeId)
specifier|private
name|SchedulerNode
name|newSchedulerNode
parameter_list|(
name|String
name|hostname
parameter_list|,
name|String
name|rackName
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
block|{
name|SchedulerNode
name|node
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rackName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
annotation|@
name|Test
DECL|method|testNodeAffinityAssignment ()
specifier|public
name|void
name|testNodeAffinityAssignment
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
comment|// Register App1 with affinity constraint map
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap1
argument_list|)
expr_stmt|;
comment|// No containers are running so all 'zk' and 'spark' allocations should fail
comment|// on every cluster NODE
name|Iterator
argument_list|<
name|RMNode
argument_list|>
name|nodeIterator
init|=
name|rmNodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|nodeIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RMNode
name|currentNode
init|=
name|nodeIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SchedulerNode
name|schedulerNode
init|=
name|newSchedulerNode
argument_list|(
name|currentNode
operator|.
name|getHostName
argument_list|()
argument_list|,
name|currentNode
operator|.
name|getRackName
argument_list|()
argument_list|,
name|currentNode
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Now place container:      * Node0:123 (Rack1):      *    container_app1_1 (hbase-m)      */
name|RMNode
name|n0_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1 Containers on node 0 with allocationTag 'hbase-m'
name|ContainerId
name|hbase_m
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|hbase_m
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 'spark' placement on Node0 should now SUCCEED
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|// FAIL on the rest of the nodes
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiTagsPlacementConstraints ()
specifier|public
name|void
name|testMultiTagsPlacementConstraints
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setAllocationTagsManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setPlacementConstraintManager
argument_list|(
name|pcm
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|st1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"X"
argument_list|)
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|st2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Y"
argument_list|)
argument_list|)
decl_stmt|;
comment|// X anti-affinity with A and B
name|PlacementConstraint
name|pc1
init|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Y affinity with A and B
name|PlacementConstraint
name|pc2
init|=
name|PlacementConstraints
operator|.
name|build
argument_list|(
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTag
argument_list|(
literal|"A"
argument_list|,
literal|"B"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|st1
argument_list|,
name|pc1
argument_list|,
name|st2
argument_list|,
name|pc2
argument_list|)
decl_stmt|;
comment|// Register App1 with affinity constraint map
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
comment|/**      * Now place container:      * n0: A(1)      * n1: B(1)      * n2:      * n3:      */
name|RMNode
name|n0_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|ContainerId
name|ca
init|=
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|ca
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|cb
init|=
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n1_r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|cb
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
comment|// n0 and n1 has A/B so they cannot satisfy the PC
comment|// n2 and n3 doesn't have A or B, so they can satisfy the PC
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * Now place container:      * n0: A(1)      * n1: B(1)      * n2: A(1), B(1)      * n3:      */
name|ContainerId
name|ca1
init|=
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2_r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|ca1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|cb1
init|=
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2_r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|cb1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only n2 has both A and B so only it can satisfy the PC
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|st2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRackAffinityAssignment ()
specifier|public
name|void
name|testRackAffinityAssignment
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
comment|// Register App1 with affinity constraint map
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap1
argument_list|)
expr_stmt|;
comment|/**      * Now place container:      * Node0:123 (Rack1):      *    container_app1_1 (hbase-rs)      */
name|RMNode
name|n0_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// 1 Containers on Node0-Rack1 with allocationTag 'hbase-rs'
name|ContainerId
name|hbase_m
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|hbase_m
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// 'zk' placement on Rack1 should now SUCCEED
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|// FAIL on the rest of the RACKs
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodeAntiAffinityAssignment ()
specifier|public
name|void
name|testNodeAntiAffinityAssignment
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
comment|// Register App1 with anti-affinity constraint map
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap2
argument_list|)
expr_stmt|;
comment|/**      * place container:      * Node0:123 (Rack1):      *    container_app1_1 (hbase-m)      */
name|RMNode
name|n0_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// 1 Containers on node 0 with allocationTag 'hbase-m'
name|ContainerId
name|hbase_m
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|hbase_m
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 'spark' placement on Node0 should now FAIL
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|// SUCCEED on the rest of the nodes
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRackAntiAffinityAssignment ()
specifier|public
name|void
name|testRackAntiAffinityAssignment
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
comment|// Register App1 with anti-affinity constraint map
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap2
argument_list|)
expr_stmt|;
comment|/**      * Place container:      * Node0:123 (Rack1):      *    container_app1_1 (hbase-rs)      */
name|RMNode
name|n0_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1_r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3_r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// 1 Containers on Node0-Rack1 with allocationTag 'hbase-rs'
name|ContainerId
name|hbase_m
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|hbase_m
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1_r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1_r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3_r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3_r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// 'zk' placement on Rack1 should FAIL
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|// SUCCEED on the rest of the RACKs
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testORConstraintAssignment ()
specifier|public
name|void
name|testORConstraintAssignment
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
comment|// Register App1 with anti-affinity constraint map.
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap4
argument_list|)
expr_stmt|;
name|RMNode
name|n0r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**      * Place container:      *  n0: hbase-m(1)      *  n1: ""      *  n2: hbase-rs(1)      *  n3: ""      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tm
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hbase-m"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tm
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hbase-rs"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// n0 and n2 should be qualified for allocation as
comment|// they either have hbase-m or hbase-rs tag
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * Place container:      *  n0: hbase-m(1)      *  n1: ""      *  n2: hbase-rs(1)      *  n3: hbase-rs(1)      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n3r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-rs"
argument_list|)
argument_list|)
expr_stmt|;
comment|// n3 is qualified now because it is allocated with hbase-rs tag
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * Place container:      *  n0: hbase-m(1)      *  n1: ""      *  n2: hbase-rs(1), spark(1)      *  n3: hbase-rs(1)      */
comment|// Place
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"spark"
argument_list|)
argument_list|)
expr_stmt|;
comment|// According to constraint, "zk" is allowed to be placed on a node
comment|// has "hbase-m" tag OR a node has both "hbase-rs" and "spark" tags.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testANDConstraintAssignment ()
specifier|public
name|void
name|testANDConstraintAssignment
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
comment|// Register App1 with anti-affinity constraint map.
name|pcm
operator|.
name|registerApplication
argument_list|(
name|appId1
argument_list|,
name|constraintMap3
argument_list|)
expr_stmt|;
name|RMNode
name|n0r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**      * Place container:      *  n0: hbase-m(1)      *  n1: ""      *  n2: hbase-m(1)      *  n3: ""      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tm
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hbase-m"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tm
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hbase-m"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Anti-affinity with hbase-m so it should not be able to be placed
comment|// onto n0 and n2 as they already have hbase-m allocated.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * Place container:      *  n0: hbase-m(1)      *  n1: spark(3)      *  n2: hbase-m(1)      *  n3: ""      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|tm
operator|.
name|addContainer
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|appId1
argument_list|,
name|i
operator|+
literal|2
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"spark"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4L
argument_list|,
name|tm
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"spark"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Violate cardinality constraint
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|appId1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|sourceTag1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGlobalAppConstraints ()
specifier|public
name|void
name|testGlobalAppConstraints
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|rmContext
operator|.
name|setAllocationTagsManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setPlacementConstraintManager
argument_list|(
name|pcm
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|ApplicationId
name|application2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|ApplicationId
name|application3
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|102
argument_list|)
decl_stmt|;
comment|// Register App1 with anti-affinity constraint map.
name|RMNode
name|n0r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**      * Place container:      *  n0: app1/A(1), app2/A(1)      *  n1: app3/A(3)      *  n2: app1/A(2)      *  n3: ""      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application3
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application3
argument_list|,
literal|3
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application3
argument_list|,
literal|4
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|,
literal|5
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|,
literal|6
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|TargetApplicationsNamespace
name|namespaceAll
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|All
argument_list|()
decl_stmt|;
comment|//***************************
comment|// 1) all, anti-affinity
comment|//***************************
comment|// Anti-affinity with "A" from any application including itself.
name|PlacementConstraint
name|constraint1
init|=
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|namespaceAll
operator|.
name|toString
argument_list|()
argument_list|,
literal|"A"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags1
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|srcTags1
argument_list|,
name|constraint1
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application1
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application1
argument_list|)
expr_stmt|;
comment|//***************************
comment|// 2) all, max cardinality
comment|//***************************
name|PlacementConstraint
name|constraint2
init|=
name|PlacementConstraints
operator|.
name|maxCardinality
argument_list|(
name|NODE
argument_list|,
name|namespaceAll
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|"A"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|constraintMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags2
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|srcTags2
argument_list|,
name|constraint2
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application2
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application2
argument_list|)
expr_stmt|;
comment|//***************************
comment|// 3) all, min cardinality
comment|//***************************
name|PlacementConstraint
name|constraint3
init|=
name|PlacementConstraints
operator|.
name|minCardinality
argument_list|(
name|NODE
argument_list|,
name|namespaceAll
operator|.
name|toString
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|"A"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|constraintMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags3
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|srcTags3
argument_list|,
name|constraint3
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application3
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotSelfAppConstraints ()
specifier|public
name|void
name|testNotSelfAppConstraints
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|ApplicationId
name|application2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|ApplicationId
name|application3
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|102
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|allApps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|allApps
operator|.
name|put
argument_list|(
name|application1
argument_list|,
operator|new
name|MockRMApp
argument_list|(
literal|123
argument_list|,
literal|1000
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
literal|"userA"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allApps
operator|.
name|put
argument_list|(
name|application2
argument_list|,
operator|new
name|MockRMApp
argument_list|(
literal|124
argument_list|,
literal|1001
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
literal|"userA"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allApps
operator|.
name|put
argument_list|(
name|application3
argument_list|,
operator|new
name|MockRMApp
argument_list|(
literal|125
argument_list|,
literal|1002
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
literal|"userA"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RMContext
name|mockedContext
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockedContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allApps
argument_list|)
expr_stmt|;
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|mockedContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|mockedContext
operator|.
name|setAllocationTagsManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|mockedContext
operator|.
name|setPlacementConstraintManager
argument_list|(
name|pcm
argument_list|)
expr_stmt|;
comment|// Register App1 with anti-affinity constraint map.
name|RMNode
name|n0r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**      * Place container:      *  n0: app1/A(1), app2/A(1)      *  n1: app3/A(3)      *  n2: app1/A(2)      *  n3: ""      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application2
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application3
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application3
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application3
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|TargetApplicationsNamespace
name|notSelf
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|NotSelf
argument_list|()
decl_stmt|;
comment|//***************************
comment|// 1) not-self, app1
comment|//***************************
comment|// Anti-affinity with "A" from app2 and app3,
comment|// n0 and n1 both have tag "A" from either app2 or app3, so they are
comment|// not qualified for the placement.
name|PlacementConstraint
name|constraint1
init|=
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|notSelf
operator|.
name|toString
argument_list|()
argument_list|,
literal|"A"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags1
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|srcTags1
argument_list|,
name|constraint1
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application1
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application1
argument_list|)
expr_stmt|;
comment|//***************************
comment|// 2) not-self, app1
comment|//***************************
comment|// Affinity with "A" from app2 and app3,
comment|// N0 and n1 are qualified for the placement.
name|PlacementConstraint
name|constraint2
init|=
name|PlacementConstraints
operator|.
name|targetIn
argument_list|(
name|NODE
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|notSelf
operator|.
name|toString
argument_list|()
argument_list|,
literal|"A"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|cm2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags2
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|cm2
operator|.
name|put
argument_list|(
name|srcTags2
argument_list|,
name|constraint2
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application1
argument_list|,
name|cm2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterAppConstraintsByAppID ()
specifier|public
name|void
name|testInterAppConstraintsByAppID
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|rmContext
operator|.
name|setAllocationTagsManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setPlacementConstraintManager
argument_list|(
name|pcm
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|ApplicationId
name|application2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|124
argument_list|)
decl_stmt|;
name|ApplicationId
name|application3
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|125
argument_list|)
decl_stmt|;
comment|// Register App1 with anti-affinity constraint map.
name|RMNode
name|n0r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**      * Place container:      *  n0: app1/hbase-m(1)      *  n1: ""      *  n2: app1/hbase-m(1)      *  n3: ""      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tm
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hbase-m"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tm
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hbase-m"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|TargetApplicationsNamespace
name|namespace
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|AppID
argument_list|(
name|application1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|constraint2
init|=
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|namespace
operator|.
name|toString
argument_list|()
argument_list|,
literal|"hbase-m"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|srcTags2
operator|.
name|add
argument_list|(
literal|"app2"
argument_list|)
expr_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|srcTags2
argument_list|,
name|constraint2
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application2
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
comment|// Anti-affinity with app1/hbase-m so it should not be able to be placed
comment|// onto n0 and n2 as they already have hbase-m allocated.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
comment|// Intra-app constraint
comment|// Test with default and empty namespace
name|TargetApplicationsNamespace
name|self
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|Self
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|constraint3
init|=
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|self
operator|.
name|toString
argument_list|()
argument_list|,
literal|"hbase-m"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags3
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|srcTags3
operator|.
name|add
argument_list|(
literal|"app3"
argument_list|)
expr_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|srcTags3
argument_list|,
name|constraint3
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application3
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
comment|/**      * Place container:      *  n0: app1/hbase-m(1), app3/hbase-m      *  n1: ""      *  n2: app1/hbase-m(1)      *  n3: ""      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application3
argument_list|,
literal|0
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Anti-affinity to self/hbase-m
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application3
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags3
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInterAppConstriantsByAppTag ()
specifier|public
name|void
name|testInterAppConstriantsByAppTag
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1000
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|ApplicationId
name|application2
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|1001
argument_list|,
literal|124
argument_list|)
decl_stmt|;
comment|// app1: test-tag
comment|// app2: N/A
name|RMContext
name|mockedContext
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|allApps
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|allApps
operator|.
name|put
argument_list|(
name|application1
argument_list|,
operator|new
name|MockRMApp
argument_list|(
literal|123
argument_list|,
literal|1000
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
literal|"userA"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"test-tag"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allApps
operator|.
name|put
argument_list|(
name|application2
argument_list|,
operator|new
name|MockRMApp
argument_list|(
literal|124
argument_list|,
literal|1001
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|,
literal|"userA"
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockedContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allApps
argument_list|)
expr_stmt|;
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|mockedContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|mockedContext
operator|.
name|setAllocationTagsManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|mockedContext
operator|.
name|setPlacementConstraintManager
argument_list|(
name|pcm
argument_list|)
expr_stmt|;
comment|// Register App1 with anti-affinity constraint map.
name|RMNode
name|n0r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMNode
name|n1r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|n3r2
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|/**      * Place container:      *  n0: app1/hbase-m(1)      *  n1: ""      *  n2: app1/hbase-m(1)      *  n3: ""      */
name|tm
operator|.
name|addContainer
argument_list|(
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
name|tm
operator|.
name|addContainer
argument_list|(
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|newContainerId
argument_list|(
name|application1
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"hbase-m"
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode1
init|=
name|newSchedulerNode
argument_list|(
name|n1r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n1r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode2
init|=
name|newSchedulerNode
argument_list|(
name|n2r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n2r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode3
init|=
name|newSchedulerNode
argument_list|(
name|n3r2
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n3r2
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|TargetApplicationsNamespace
name|namespace
init|=
operator|new
name|TargetApplicationsNamespace
operator|.
name|AppTag
argument_list|(
literal|"test-tag"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|,
name|PlacementConstraint
argument_list|>
name|constraintMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|PlacementConstraint
name|constraint2
init|=
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTagWithNamespace
argument_list|(
name|namespace
operator|.
name|toString
argument_list|()
argument_list|,
literal|"hbase-m"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags2
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"app2"
argument_list|)
decl_stmt|;
name|constraintMap
operator|.
name|put
argument_list|(
name|srcTags2
argument_list|,
name|constraint2
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|registerApplication
argument_list|(
name|application2
argument_list|,
name|constraintMap
argument_list|)
expr_stmt|;
comment|// Anti-affinity with app-tag/test-tag/hbase-m,
comment|// app1 has tag "test-tag" so the constraint is equally to work on app1
comment|// onto n1 and n3 as they don't have "hbase-m" from app1.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode1
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode2
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application2
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags2
argument_list|)
argument_list|,
name|schedulerNode3
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application1
argument_list|)
expr_stmt|;
name|pcm
operator|.
name|unregisterApplication
argument_list|(
name|application2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidAllocationTagNamespace ()
specifier|public
name|void
name|testInvalidAllocationTagNamespace
parameter_list|()
block|{
name|AllocationTagsManager
name|tm
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManagerService
name|pcm
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|rmContext
operator|.
name|setAllocationTagsManager
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setPlacementConstraintManager
argument_list|(
name|pcm
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ApplicationId
name|application1
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
name|ts
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|RMNode
name|n0r1
init|=
name|rmNodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SchedulerNode
name|schedulerNode0
init|=
name|newSchedulerNode
argument_list|(
name|n0r1
operator|.
name|getHostName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getRackName
argument_list|()
argument_list|,
name|n0r1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|PlacementConstraint
name|constraint1
init|=
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|NODE
argument_list|,
name|allocationTagWithNamespace
argument_list|(
literal|"unknown_namespace"
argument_list|,
literal|"hbase-m"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|srcTags1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|srcTags1
operator|.
name|add
argument_list|(
literal|"app1"
argument_list|)
expr_stmt|;
try|try
block|{
name|PlacementConstraintsUtil
operator|.
name|canSatisfyConstraints
argument_list|(
name|application1
argument_list|,
name|createSchedulingRequest
argument_list|(
name|srcTags1
argument_list|,
name|constraint1
argument_list|)
argument_list|,
name|schedulerNode0
argument_list|,
name|pcm
argument_list|,
name|tm
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"This should fail because we gave an invalid namespace"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InvalidAllocationTagsQueryException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid namespace prefix: unknown_namespace"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

