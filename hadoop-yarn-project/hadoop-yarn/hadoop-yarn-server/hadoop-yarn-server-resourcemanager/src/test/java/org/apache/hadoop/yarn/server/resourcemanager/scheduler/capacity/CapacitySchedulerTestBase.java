begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|CapacitySchedulerTestBase
specifier|public
class|class
name|CapacitySchedulerTestBase
block|{
DECL|field|GB
specifier|protected
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|A
specifier|protected
specifier|static
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
DECL|field|B
specifier|protected
specifier|static
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
DECL|field|A1
specifier|protected
specifier|static
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
DECL|field|A2
specifier|protected
specifier|static
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
DECL|field|B1
specifier|protected
specifier|static
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
DECL|field|B2
specifier|protected
specifier|static
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
DECL|field|B3
specifier|protected
specifier|static
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
DECL|field|A_CAPACITY
specifier|protected
specifier|static
name|float
name|A_CAPACITY
init|=
literal|10.5f
decl_stmt|;
DECL|field|B_CAPACITY
specifier|protected
specifier|static
name|float
name|B_CAPACITY
init|=
literal|89.5f
decl_stmt|;
DECL|field|P1
specifier|protected
specifier|static
specifier|final
name|String
name|P1
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".p1"
decl_stmt|;
DECL|field|P2
specifier|protected
specifier|static
specifier|final
name|String
name|P2
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".p2"
decl_stmt|;
DECL|field|X1
specifier|protected
specifier|static
specifier|final
name|String
name|X1
init|=
name|P1
operator|+
literal|".x1"
decl_stmt|;
DECL|field|X2
specifier|protected
specifier|static
specifier|final
name|String
name|X2
init|=
name|P1
operator|+
literal|".x2"
decl_stmt|;
DECL|field|Y1
specifier|protected
specifier|static
specifier|final
name|String
name|Y1
init|=
name|P2
operator|+
literal|".y1"
decl_stmt|;
DECL|field|Y2
specifier|protected
specifier|static
specifier|final
name|String
name|Y2
init|=
name|P2
operator|+
literal|".y2"
decl_stmt|;
DECL|field|A1_CAPACITY
specifier|protected
specifier|static
name|float
name|A1_CAPACITY
init|=
literal|30
decl_stmt|;
DECL|field|A2_CAPACITY
specifier|protected
specifier|static
name|float
name|A2_CAPACITY
init|=
literal|70
decl_stmt|;
DECL|field|B1_CAPACITY
specifier|protected
specifier|static
name|float
name|B1_CAPACITY
init|=
literal|79.2f
decl_stmt|;
DECL|field|B2_CAPACITY
specifier|protected
specifier|static
name|float
name|B2_CAPACITY
init|=
literal|0.8f
decl_stmt|;
DECL|field|B3_CAPACITY
specifier|protected
specifier|static
name|float
name|B3_CAPACITY
init|=
literal|20
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|toSet (E... elements)
specifier|protected
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|toSet
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
name|set
return|;
block|}
DECL|method|checkPendingResource (MockRM rm, String queueName, int memory, String label)
specifier|protected
name|void
name|checkPendingResource
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|memory
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|memory
argument_list|,
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|(
name|label
operator|==
literal|null
condition|?
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
else|:
name|label
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPendingResourceGreaterThanZero (MockRM rm, String queueName, String label)
specifier|protected
name|void
name|checkPendingResourceGreaterThanZero
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|String
name|queueName
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|queue
init|=
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|(
name|label
operator|==
literal|null
condition|?
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
else|:
name|label
argument_list|)
operator|.
name|getMemorySize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|waitforNMRegistered (ResourceScheduler scheduler, int nodecount, int timesec)
specifier|protected
name|void
name|waitforNMRegistered
parameter_list|(
name|ResourceScheduler
name|scheduler
parameter_list|,
name|int
name|nodecount
parameter_list|,
name|int
name|timesec
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timesec
operator|*
literal|1000
condition|)
block|{
if|if
condition|(
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
operator|<
name|nodecount
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

