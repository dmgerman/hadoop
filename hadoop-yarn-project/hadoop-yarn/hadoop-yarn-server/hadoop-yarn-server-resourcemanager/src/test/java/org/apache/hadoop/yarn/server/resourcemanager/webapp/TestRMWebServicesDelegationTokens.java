begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|KerberosTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|KerberosAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|PseudoAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|QueueACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|filter
operator|.
name|LoggingFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|JerseyTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRMWebServicesDelegationTokens
specifier|public
class|class
name|TestRMWebServicesDelegationTokens
extends|extends
name|JerseyTest
block|{
DECL|field|testRootDir
specifier|private
specifier|static
specifier|final
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestRMWebServicesDelegationTokens
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-root"
argument_list|)
decl_stmt|;
DECL|field|httpSpnegoKeytabFile
specifier|private
specifier|static
name|File
name|httpSpnegoKeytabFile
init|=
operator|new
name|File
argument_list|(
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|httpSpnegoPrincipal
specifier|private
specifier|static
name|String
name|httpSpnegoPrincipal
init|=
name|KerberosTestUtils
operator|.
name|getServerPrincipal
argument_list|()
decl_stmt|;
DECL|field|miniKDCStarted
specifier|private
specifier|static
name|boolean
name|miniKDCStarted
init|=
literal|false
decl_stmt|;
DECL|field|testMiniKDC
specifier|private
specifier|static
name|MiniKdc
name|testMiniKDC
decl_stmt|;
static|static
block|{
try|try
block|{
name|testMiniKDC
operator|=
operator|new
name|MiniKdc
argument_list|(
name|MiniKdc
operator|.
name|createConf
argument_list|()
argument_list|,
name|testRootDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Couldn't create MiniKDC"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|injector
specifier|private
name|Injector
name|injector
decl_stmt|;
DECL|field|isKerberosAuth
specifier|private
name|boolean
name|isKerberosAuth
init|=
literal|false
decl_stmt|;
comment|// Make sure the test uses the published header string
DECL|field|yarnTokenHeader
specifier|final
name|String
name|yarnTokenHeader
init|=
literal|"Hadoop-YARN-RM-Delegation-Token"
decl_stmt|;
annotation|@
name|Singleton
DECL|class|TestKerberosAuthFilter
specifier|public
specifier|static
class|class
name|TestKerberosAuthFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|properties
init|=
name|super
operator|.
name|getConfiguration
argument_list|(
name|configPrefix
argument_list|,
name|filterConfig
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|KEYTAB
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
block|}
annotation|@
name|Singleton
DECL|class|TestSimpleAuthFilter
specifier|public
specifier|static
class|class
name|TestSimpleAuthFilter
extends|extends
name|AuthenticationFilter
block|{
annotation|@
name|Override
DECL|method|getConfiguration (String configPrefix, FilterConfig filterConfig)
specifier|protected
name|Properties
name|getConfiguration
parameter_list|(
name|String
name|configPrefix
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|properties
init|=
name|super
operator|.
name|getConfiguration
argument_list|(
name|configPrefix
argument_list|,
name|filterConfig
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|PRINCIPAL
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|KerberosAuthenticationHandler
operator|.
name|KEYTAB
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PseudoAuthenticationHandler
operator|.
name|ANONYMOUS_ALLOWED
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
block|}
DECL|class|TestServletModule
specifier|private
class|class
name|TestServletModule
extends|extends
name|ServletModule
block|{
DECL|field|rmconf
specifier|public
name|Configuration
name|rmconf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|Configuration
name|rmconf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|rmconf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|rmconf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmconf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|rmconf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ApplicationACLsManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getApplicationACLsManager
argument_list|()
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|QueueACLsManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
operator|.
name|getQueueACLsManager
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isKerberosAuth
operator|==
literal|true
condition|)
block|{
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|TestKerberosAuthFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|through
argument_list|(
name|TestSimpleAuthFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getSimpleAuthInjector ()
specifier|private
name|Injector
name|getSimpleAuthInjector
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|TestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|isKerberosAuth
operator|=
literal|false
expr_stmt|;
name|rmconf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|getKerberosAuthInjector ()
specifier|private
name|Injector
name|getKerberosAuthInjector
parameter_list|()
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|TestServletModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|isKerberosAuth
operator|=
literal|true
expr_stmt|;
name|rmconf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|rmconf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_SPNEGO_USER_NAME_KEY
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|rmconf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|rmconf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_SPNEGO_USER_NAME_KEY
argument_list|,
name|httpSpnegoPrincipal
argument_list|)
expr_stmt|;
name|rmconf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|configureServlets
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|class|GuiceServletConfig
specifier|public
class|class
name|GuiceServletConfig
extends|extends
name|GuiceServletContextListener
block|{
annotation|@
name|Override
DECL|method|getInjector ()
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|injector
return|;
block|}
block|}
annotation|@
name|Parameters
DECL|method|guiceConfigs ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|guiceConfigs
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestRMWebServicesDelegationTokens (int run)
specifier|public
name|TestRMWebServicesDelegationTokens
parameter_list|(
name|int
name|run
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|setupKDC
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|run
condition|)
block|{
case|case
literal|0
case|:
default|default:
name|injector
operator|=
name|getKerberosAuthInjector
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|injector
operator|=
name|getSimpleAuthInjector
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|method|setupKDC ()
specifier|private
name|void
name|setupKDC
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|miniKDCStarted
operator|==
literal|false
condition|)
block|{
name|testMiniKDC
operator|.
name|start
argument_list|()
expr_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
name|httpSpnegoKeytabFile
argument_list|,
literal|"HTTP/localhost"
argument_list|,
literal|"client"
argument_list|,
literal|"client2"
argument_list|,
literal|"client3"
argument_list|)
expr_stmt|;
name|miniKDCStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getKdc ()
specifier|private
name|MiniKdc
name|getKdc
parameter_list|()
block|{
return|return
name|testMiniKDC
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|httpSpnegoKeytabFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|testRootDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|// Simple test - try to create a delegation token via web services and check
comment|// to make sure we get back a valid token. Validate token using RM function
comment|// calls. It should only succeed with the kerberos filter
annotation|@
name|Test
DECL|method|testCreateDelegationToken ()
specifier|public
name|void
name|testCreateDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|renewer
init|=
literal|"test-renewer"
decl_stmt|;
name|String
name|jsonBody
init|=
literal|"{ \"renewer\" : \""
operator|+
name|renewer
operator|+
literal|"\" }"
decl_stmt|;
name|String
name|xmlBody
init|=
literal|"<delegation-token><renewer>"
operator|+
name|renewer
operator|+
literal|"</renewer></delegation-token>"
decl_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bodyMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|bodyMap
operator|.
name|put
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|,
name|jsonBody
argument_list|)
expr_stmt|;
name|bodyMap
operator|.
name|put
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|,
name|xmlBody
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
specifier|final
name|String
name|body
init|=
name|bodyMap
operator|.
name|get
argument_list|(
name|mediaType
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|contentType
range|:
name|mediaTypes
control|)
block|{
if|if
condition|(
name|isKerberosAuth
operator|==
literal|true
condition|)
block|{
name|verifyKerberosAuthCreate
argument_list|(
name|mediaType
argument_list|,
name|contentType
argument_list|,
name|body
argument_list|,
name|renewer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifySimpleAuthCreate
argument_list|(
name|mediaType
argument_list|,
name|contentType
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|verifySimpleAuthCreate (String mediaType, String contentType, String body)
specifier|private
name|void
name|verifySimpleAuthCreate
parameter_list|(
name|String
name|mediaType
parameter_list|,
name|String
name|contentType
parameter_list|,
name|String
name|body
parameter_list|)
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
literal|"testuser"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyKerberosAuthCreate (String mType, String cType, String reqBody, String renUser)
specifier|private
name|void
name|verifyKerberosAuthCreate
parameter_list|(
name|String
name|mType
parameter_list|,
name|String
name|cType
parameter_list|,
name|String
name|reqBody
parameter_list|,
name|String
name|renUser
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|mediaType
init|=
name|mType
decl_stmt|;
specifier|final
name|String
name|contentType
init|=
name|cType
decl_stmt|;
specifier|final
name|String
name|body
init|=
name|reqBody
decl_stmt|;
specifier|final
name|String
name|renewer
init|=
name|renUser
decl_stmt|;
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|tok
init|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|renewer
argument_list|,
name|token
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getRenewer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertValidRMToken
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|dtoken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|response
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|dtoken
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tok
operator|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
expr_stmt|;
name|token
operator|.
name|decodeFromUrlString
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|token
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getRenewer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertValidRMToken
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Test to verify renew functionality - create a token and then try to renew
comment|// it. The renewer should succeed; owner and third user should fail
annotation|@
name|Test
DECL|method|testRenewDelegationToken ()
specifier|public
name|void
name|testRenewDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|String
name|renewer
init|=
literal|"client2"
decl_stmt|;
name|this
operator|.
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DelegationToken
name|dummyToken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|dummyToken
operator|.
name|setRenewer
argument_list|(
name|renewer
argument_list|)
expr_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
specifier|final
name|String
name|contentType
range|:
name|mediaTypes
control|)
block|{
if|if
condition|(
name|isKerberosAuth
operator|==
literal|false
condition|)
block|{
name|verifySimpleAuthRenew
argument_list|(
name|mediaType
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// test "client" and client2" trying to renew "client" token
specifier|final
name|DelegationToken
name|responseToken
init|=
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|DelegationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DelegationToken
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|dummyToken
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|tok
init|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|generateRenewTokenBody
argument_list|(
name|mediaType
argument_list|,
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|path
argument_list|(
literal|"expiration"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tok
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|KerberosTestUtils
operator|.
name|doAs
argument_list|(
name|renewer
argument_list|,
operator|new
name|Callable
argument_list|<
name|DelegationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DelegationToken
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// renew twice so that we can confirm that the
comment|// expiration time actually changes
name|long
name|oldExpirationTime
init|=
name|Time
operator|.
name|now
argument_list|()
decl_stmt|;
name|assertValidRMToken
argument_list|(
name|responseToken
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|body
init|=
name|generateRenewTokenBody
argument_list|(
name|mediaType
argument_list|,
name|responseToken
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|path
argument_list|(
literal|"expiration"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|responseToken
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|tok
init|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|String
name|message
init|=
literal|"Expiration time not as expected: old = "
operator|+
name|oldExpirationTime
operator|+
literal|"; new = "
operator|+
name|tok
operator|.
name|getNextExpirationTime
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|message
argument_list|,
name|tok
operator|.
name|getNextExpirationTime
argument_list|()
operator|>
name|oldExpirationTime
argument_list|)
expr_stmt|;
name|oldExpirationTime
operator|=
name|tok
operator|.
name|getNextExpirationTime
argument_list|()
expr_stmt|;
comment|// artificial sleep to ensure we get a different expiration time
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|response
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|path
argument_list|(
literal|"expiration"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|responseToken
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|tok
operator|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"Expiration time not as expected: old = "
operator|+
name|oldExpirationTime
operator|+
literal|"; new = "
operator|+
name|tok
operator|.
name|getNextExpirationTime
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|message
argument_list|,
name|tok
operator|.
name|getNextExpirationTime
argument_list|()
operator|>
name|oldExpirationTime
argument_list|)
expr_stmt|;
return|return
name|tok
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// test unauthorized user renew attempt
name|KerberosTestUtils
operator|.
name|doAs
argument_list|(
literal|"client3"
argument_list|,
operator|new
name|Callable
argument_list|<
name|DelegationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DelegationToken
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|body
init|=
name|generateRenewTokenBody
argument_list|(
name|mediaType
argument_list|,
name|responseToken
operator|.
name|getToken
argument_list|()
argument_list|)
decl_stmt|;
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|path
argument_list|(
literal|"expiration"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|responseToken
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// test bad request - incorrect format, empty token string and random
comment|// token string
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|token
init|=
literal|"TEST_TOKEN_STRING"
decl_stmt|;
name|String
name|body
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|body
operator|=
literal|"{\"token\": \""
operator|+
name|token
operator|+
literal|"\" }"
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
literal|"<delegation-token><token>"
operator|+
name|token
operator|+
literal|"</token></delegation-token>"
expr_stmt|;
block|}
comment|// missing token header
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|path
argument_list|(
literal|"expiration"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|verifySimpleAuthRenew (String mediaType, String contentType)
specifier|private
name|void
name|verifySimpleAuthRenew
parameter_list|(
name|String
name|mediaType
parameter_list|,
name|String
name|contentType
parameter_list|)
block|{
name|String
name|token
init|=
literal|"TEST_TOKEN_STRING"
decl_stmt|;
name|String
name|body
init|=
literal|""
decl_stmt|;
comment|// contents of body don't matter because the request processing shouldn't
comment|// get that far
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|body
operator|=
literal|"{\"token\": \""
operator|+
name|token
operator|+
literal|"\" }"
expr_stmt|;
name|body
operator|=
literal|"{\"abcd\": \"test-123\" }"
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
literal|"<delegation-token><token>"
operator|+
name|token
operator|+
literal|"</token></delegation-token>"
expr_stmt|;
name|body
operator|=
literal|"<delegation-token><xml>abcd</xml></delegation-token>"
expr_stmt|;
block|}
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
literal|"testuser"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|body
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test to verify cancel functionality - create a token and then try to cancel
comment|// it. The owner and renewer should succeed; third user should fail
annotation|@
name|Test
DECL|method|testCancelDelegationToken ()
specifier|public
name|void
name|testCancelDelegationToken
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|client
argument_list|()
operator|.
name|addFilter
argument_list|(
operator|new
name|LoggingFilter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isKerberosAuth
operator|==
literal|false
condition|)
block|{
name|verifySimpleAuthCancel
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|DelegationToken
name|dtoken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|String
name|renewer
init|=
literal|"client2"
decl_stmt|;
name|dtoken
operator|.
name|setRenewer
argument_list|(
name|renewer
argument_list|)
expr_stmt|;
name|String
index|[]
name|mediaTypes
init|=
block|{
name|MediaType
operator|.
name|APPLICATION_JSON
block|,
name|MediaType
operator|.
name|APPLICATION_XML
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|mediaType
range|:
name|mediaTypes
control|)
block|{
for|for
control|(
specifier|final
name|String
name|contentType
range|:
name|mediaTypes
control|)
block|{
comment|// owner should be able to cancel delegation token
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|dtoken
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|tok
init|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
name|response
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenCancelled
argument_list|(
name|tok
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// renewer should be able to cancel token
specifier|final
name|DelegationToken
name|tmpToken
init|=
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|DelegationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DelegationToken
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|dtoken
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|tok
init|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
return|return
name|tok
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|KerberosTestUtils
operator|.
name|doAs
argument_list|(
name|renewer
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|tmpToken
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenCancelled
argument_list|(
name|tmpToken
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// third user should not be able to cancel token
specifier|final
name|DelegationToken
name|tmpToken2
init|=
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|DelegationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DelegationToken
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|dtoken
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|tok
init|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
return|return
name|tok
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|KerberosTestUtils
operator|.
name|doAs
argument_list|(
literal|"client3"
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|tmpToken2
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertValidRMToken
argument_list|(
name|tmpToken2
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|testCancelTokenBadRequests
argument_list|(
name|mediaType
argument_list|,
name|contentType
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return;
block|}
DECL|method|testCancelTokenBadRequests (String mType, String cType)
specifier|private
name|void
name|testCancelTokenBadRequests
parameter_list|(
name|String
name|mType
parameter_list|,
name|String
name|cType
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|mediaType
init|=
name|mType
decl_stmt|;
specifier|final
name|String
name|contentType
init|=
name|cType
decl_stmt|;
specifier|final
name|DelegationToken
name|dtoken
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|String
name|renewer
init|=
literal|"client2"
decl_stmt|;
name|dtoken
operator|.
name|setRenewer
argument_list|(
name|renewer
argument_list|)
expr_stmt|;
comment|// bad request(invalid header value)
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
literal|"random-string"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// bad request(missing header)
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// bad request(cancelled token)
specifier|final
name|DelegationToken
name|tmpToken
init|=
name|KerberosTestUtils
operator|.
name|doAsClient
argument_list|(
operator|new
name|Callable
argument_list|<
name|DelegationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DelegationToken
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|entity
argument_list|(
name|dtoken
argument_list|,
name|mediaType
argument_list|)
operator|.
name|post
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|DelegationToken
name|tok
init|=
name|getDelegationTokenFromResponse
argument_list|(
name|response
argument_list|)
decl_stmt|;
return|return
name|tok
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|KerberosTestUtils
operator|.
name|doAs
argument_list|(
name|renewer
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|tmpToken
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|header
argument_list|(
name|yarnTokenHeader
argument_list|,
name|tmpToken
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|accept
argument_list|(
name|contentType
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|BAD_REQUEST
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySimpleAuthCancel ()
specifier|private
name|void
name|verifySimpleAuthCancel
parameter_list|()
block|{
comment|// contents of header don't matter; request should never get that far
name|ClientResponse
name|response
init|=
name|resource
argument_list|()
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"delegation-token"
argument_list|)
operator|.
name|queryParam
argument_list|(
literal|"user.name"
argument_list|,
literal|"testuser"
argument_list|)
operator|.
name|header
argument_list|(
name|RMWebServices
operator|.
name|DELEGATION_TOKEN_HEADER
argument_list|,
literal|"random"
argument_list|)
operator|.
name|delete
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
argument_list|,
name|response
operator|.
name|getClientResponseStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DelegationToken
DECL|method|getDelegationTokenFromResponse (ClientResponse response)
name|getDelegationTokenFromResponse
parameter_list|(
name|ClientResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|JSONException
block|{
if|if
condition|(
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
return|return
name|getDelegationTokenFromJson
argument_list|(
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
return|return
name|getDelegationTokenFromXML
argument_list|(
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDelegationTokenFromXML (String tokenXML)
specifier|public
specifier|static
name|DelegationToken
name|getDelegationTokenFromXML
parameter_list|(
name|String
name|tokenXML
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|tokenXML
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|nodes
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"delegation-token"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|nodes
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DelegationToken
name|ret
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
name|String
name|token
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"token"
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|expiration
init|=
name|WebServicesTestUtils
operator|.
name|getXmlLong
argument_list|(
name|element
argument_list|,
literal|"expiration-time"
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setNextExpirationTime
argument_list|(
name|expiration
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|getDelegationTokenFromJson (JSONObject json)
specifier|public
specifier|static
name|DelegationToken
name|getDelegationTokenFromJson
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
block|{
name|DelegationToken
name|ret
init|=
operator|new
name|DelegationToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|json
operator|.
name|has
argument_list|(
literal|"token"
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setToken
argument_list|(
name|json
operator|.
name|getString
argument_list|(
literal|"token"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|json
operator|.
name|has
argument_list|(
literal|"expiration-time"
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setNextExpirationTime
argument_list|(
name|json
operator|.
name|getLong
argument_list|(
literal|"expiration-time"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|assertValidRMToken (String encodedToken)
specifier|private
name|void
name|assertValidRMToken
parameter_list|(
name|String
name|encodedToken
parameter_list|)
throws|throws
name|IOException
block|{
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|realToken
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|realToken
operator|.
name|decodeFromUrlString
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
name|RMDelegationTokenIdentifier
name|ident
init|=
name|realToken
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|verifyToken
argument_list|(
name|ident
argument_list|,
name|realToken
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ident
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTokenCancelled (String encodedToken)
specifier|private
name|void
name|assertTokenCancelled
parameter_list|(
name|String
name|encodedToken
parameter_list|)
throws|throws
name|Exception
block|{
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|realToken
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|realToken
operator|.
name|decodeFromUrlString
argument_list|(
name|encodedToken
argument_list|)
expr_stmt|;
name|RMDelegationTokenIdentifier
name|ident
init|=
name|realToken
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|verifyToken
argument_list|(
name|ident
argument_list|,
name|realToken
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidToken
name|it
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"InvalidToken exception not thrown"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ident
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generateRenewTokenBody (String mediaType, String token)
specifier|private
specifier|static
name|String
name|generateRenewTokenBody
parameter_list|(
name|String
name|mediaType
parameter_list|,
name|String
name|token
parameter_list|)
block|{
name|String
name|body
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|mediaType
operator|.
name|equals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
condition|)
block|{
name|body
operator|=
literal|"{\"token\": \""
operator|+
name|token
operator|+
literal|"\" }"
expr_stmt|;
block|}
else|else
block|{
name|body
operator|=
literal|"<delegation-token><token>"
operator|+
name|token
operator|+
literal|"</token></delegation-token>"
expr_stmt|;
block|}
return|return
name|body
return|;
block|}
block|}
end_class

end_unit

