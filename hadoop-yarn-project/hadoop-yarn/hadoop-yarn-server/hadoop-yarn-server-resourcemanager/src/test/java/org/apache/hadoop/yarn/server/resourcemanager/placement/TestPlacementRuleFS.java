begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FairSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementFactory
operator|.
name|getPlacementRule
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Simple tests for FS specific parts of the PlacementRule.  */
end_comment

begin_class
DECL|class|TestPlacementRuleFS
specifier|public
class|class
name|TestPlacementRuleFS
block|{
comment|// List of rules that are configurable (reject rule is not!)
DECL|field|CONFIG_RULES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
argument_list|>
name|CONFIG_RULES
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
name|DefaultPlacementRule
operator|.
name|class
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|PrimaryGroupPlacementRule
operator|.
name|class
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|SecondaryGroupExistingPlacementRule
operator|.
name|class
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|SpecifiedPlacementRule
operator|.
name|class
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|UserPlacementRule
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|// List of rules that are not configurable
DECL|field|NO_CONFIG_RULES
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
argument_list|>
name|NO_CONFIG_RULES
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
name|RejectPlacementRule
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
DECL|field|CONF
specifier|private
specifier|final
specifier|static
name|FairSchedulerConfiguration
name|CONF
init|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|queueManager
specifier|private
name|QueueManager
name|queueManager
decl_stmt|;
annotation|@
name|Before
DECL|method|initTest ()
specifier|public
name|void
name|initTest
parameter_list|()
block|{
name|scheduler
operator|=
name|mock
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// needed for all rules that rely on group info
name|when
argument_list|(
name|scheduler
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
comment|// needed by all rules
name|queueManager
operator|=
operator|new
name|QueueManager
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getQueueManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanTest ()
specifier|public
name|void
name|cleanTest
parameter_list|()
block|{
name|queueManager
operator|=
literal|null
expr_stmt|;
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Check the create and setting the config on the rule.    * This walks over all known rules and check the behaviour:    * - no config (null object)    * - unknown object type    * - boolean object    * - xml config ({@link Element})    * - calling initialize on the rule    */
annotation|@
name|Test
DECL|method|testRuleSetups ()
specifier|public
name|void
name|testRuleSetups
parameter_list|()
block|{
comment|// test for config(s) and init
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
name|ruleClass
range|:
name|CONFIG_RULES
control|)
block|{
name|ruleCreateNoConfig
argument_list|(
name|ruleClass
argument_list|)
expr_stmt|;
name|ruleCreateWrongObject
argument_list|(
name|ruleClass
argument_list|)
expr_stmt|;
name|ruleCreateBoolean
argument_list|(
name|ruleClass
argument_list|)
expr_stmt|;
name|ruleCreateElement
argument_list|(
name|ruleClass
argument_list|)
expr_stmt|;
name|ruleInit
argument_list|(
name|ruleClass
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check the init of rules that do not use a config.    */
annotation|@
name|Test
DECL|method|testRuleInitOnly ()
specifier|public
name|void
name|testRuleInitOnly
parameter_list|()
block|{
comment|// test for init
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
name|ruleClass
range|:
name|NO_CONFIG_RULES
control|)
block|{
name|ruleInit
argument_list|(
name|ruleClass
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|ruleCreateNoConfig (Class <? extends PlacementRule> ruleClass)
specifier|private
name|void
name|ruleCreateNoConfig
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
name|ruleClass
parameter_list|)
block|{
name|PlacementRule
name|rule
init|=
name|getPlacementRule
argument_list|(
name|ruleClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|ruleClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Rule object should not be null for "
operator|+
name|name
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
DECL|method|ruleCreateWrongObject ( Class <? extends PlacementRule> ruleClass)
specifier|private
name|void
name|ruleCreateWrongObject
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
name|ruleClass
parameter_list|)
block|{
name|PlacementRule
name|rule
init|=
name|getPlacementRule
argument_list|(
name|ruleClass
argument_list|,
literal|"a string object"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|ruleClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Rule object should not be null for "
operator|+
name|name
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
DECL|method|ruleCreateBoolean (Class <? extends PlacementRule> ruleClass)
specifier|private
name|void
name|ruleCreateBoolean
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
name|ruleClass
parameter_list|)
block|{
name|PlacementRule
name|rule
init|=
name|getPlacementRule
argument_list|(
name|ruleClass
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|ruleClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Rule object should not be null for "
operator|+
name|name
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Create flag was not set to true on "
operator|+
name|name
argument_list|,
name|getCreateFlag
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|rule
operator|=
name|getPlacementRule
argument_list|(
name|ruleClass
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Rule object should not be null for "
operator|+
name|name
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Create flag was not set to false on "
operator|+
name|name
argument_list|,
name|getCreateFlag
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ruleCreateElement (Class <? extends PlacementRule> ruleClass)
specifier|private
name|void
name|ruleCreateElement
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
name|ruleClass
parameter_list|)
block|{
name|String
name|str
init|=
literal|"<rule name='not used' create=\"true\" />"
decl_stmt|;
name|Element
name|conf
init|=
name|createConf
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|PlacementRule
name|rule
init|=
name|getPlacementRule
argument_list|(
name|ruleClass
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|ruleClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Rule object should not be null for "
operator|+
name|name
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Create flag was not set to true on "
operator|+
name|name
argument_list|,
name|getCreateFlag
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
name|str
operator|=
literal|"<rule name='not used' create=\"false\" />"
expr_stmt|;
name|conf
operator|=
name|createConf
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|rule
operator|=
name|getPlacementRule
argument_list|(
name|ruleClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Rule object should not be null for "
operator|+
name|name
argument_list|,
name|rule
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Create flag was not set to false on "
operator|+
name|name
argument_list|,
name|getCreateFlag
argument_list|(
name|rule
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ruleInit (Class <? extends PlacementRule> ruleClass)
specifier|private
name|void
name|ruleInit
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|PlacementRule
argument_list|>
name|ruleClass
parameter_list|)
block|{
name|PlacementRule
name|rule
init|=
name|getPlacementRule
argument_list|(
name|ruleClass
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|ruleClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Rule object should not be null for "
operator|+
name|name
argument_list|,
name|rule
argument_list|)
expr_stmt|;
try|try
block|{
name|rule
operator|.
name|initialize
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception on initialize of rule "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
comment|// now set the parent rule: use the same rule as a child.
comment|// always throws: either because parentRule is not allowed or because it
comment|// is the same class as the child rule.
operator|(
operator|(
name|FSPlacementRule
operator|)
name|rule
operator|)
operator|.
name|setParentRule
argument_list|(
name|rule
argument_list|)
expr_stmt|;
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|rule
operator|.
name|initialize
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Initialize with parent rule should have thrown exception "
operator|+
name|name
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
DECL|method|createConf (String str)
specifier|private
name|Element
name|createConf
parameter_list|(
name|String
name|str
parameter_list|)
block|{
comment|// Create a simple rule element to use in the rule create
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|doc
operator|=
name|builder
operator|.
name|parse
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|str
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Element creation failed, failing test"
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
DECL|method|getCreateFlag (PlacementRule rule)
specifier|private
name|boolean
name|getCreateFlag
parameter_list|(
name|PlacementRule
name|rule
parameter_list|)
block|{
if|if
condition|(
name|rule
operator|instanceof
name|FSPlacementRule
condition|)
block|{
return|return
operator|(
operator|(
name|FSPlacementRule
operator|)
name|rule
operator|)
operator|.
name|createQueue
return|;
block|}
name|fail
argument_list|(
literal|"Rule is not a FSPlacementRule"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

