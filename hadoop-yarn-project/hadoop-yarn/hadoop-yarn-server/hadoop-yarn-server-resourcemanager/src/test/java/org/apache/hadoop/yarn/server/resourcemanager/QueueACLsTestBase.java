begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|QueueACLsTestBase
specifier|public
specifier|abstract
class|class
name|QueueACLsTestBase
block|{
DECL|field|COMMON_USER
specifier|protected
specifier|static
specifier|final
name|String
name|COMMON_USER
init|=
literal|"common_user"
decl_stmt|;
DECL|field|QUEUE_A_USER
specifier|protected
specifier|static
specifier|final
name|String
name|QUEUE_A_USER
init|=
literal|"queueA_user"
decl_stmt|;
DECL|field|QUEUE_B_USER
specifier|protected
specifier|static
specifier|final
name|String
name|QUEUE_B_USER
init|=
literal|"queueB_user"
decl_stmt|;
DECL|field|ROOT_ADMIN
specifier|protected
specifier|static
specifier|final
name|String
name|ROOT_ADMIN
init|=
literal|"root_admin"
decl_stmt|;
DECL|field|QUEUE_A_ADMIN
specifier|protected
specifier|static
specifier|final
name|String
name|QUEUE_A_ADMIN
init|=
literal|"queueA_admin"
decl_stmt|;
DECL|field|QUEUE_B_ADMIN
specifier|protected
specifier|static
specifier|final
name|String
name|QUEUE_B_ADMIN
init|=
literal|"queueB_admin"
decl_stmt|;
DECL|field|QUEUEA
specifier|protected
specifier|static
specifier|final
name|String
name|QUEUEA
init|=
literal|"queueA"
decl_stmt|;
DECL|field|QUEUEB
specifier|protected
specifier|static
specifier|final
name|String
name|QUEUEB
init|=
literal|"queueB"
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestApplicationACLs
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|resourceManager
name|MockRM
name|resourceManager
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|rpc
name|YarnRPC
name|rpc
decl_stmt|;
DECL|field|rmAddress
name|InetSocketAddress
name|rmAddress
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|rpc
operator|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmAddress
operator|=
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_PORT
argument_list|)
expr_stmt|;
name|AccessControlList
name|adminACL
init|=
operator|new
name|AccessControlList
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|adminACL
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|rmDTSecretManager
argument_list|)
return|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{       }
block|}
expr_stmt|;
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resourceManager
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|INITED
operator|&&
name|waitCount
operator|++
operator|<
literal|60
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for RM to start..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resourceManager
operator|.
name|getServiceState
argument_list|()
operator|!=
name|STATE
operator|.
name|STARTED
condition|)
block|{
comment|// RM could have failed.
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ResourceManager failed to start. Final state is "
operator|+
name|resourceManager
operator|.
name|getServiceState
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testApplicationACLs ()
specifier|public
name|void
name|testApplicationACLs
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|QUEUEA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUEA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|COMMON_USER
argument_list|,
name|QUEUEA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|ROOT_ADMIN
argument_list|,
name|QUEUEA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|QUEUEA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppFailure
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUEA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_USER
argument_list|,
name|QUEUEB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_B_ADMIN
argument_list|,
name|QUEUEB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|COMMON_USER
argument_list|,
name|QUEUEB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|ROOT_ADMIN
argument_list|,
name|QUEUEB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_USER
argument_list|,
name|QUEUEB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppFailure
argument_list|(
name|QUEUE_B_USER
argument_list|,
name|QUEUE_A_ADMIN
argument_list|,
name|QUEUEB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|ROOT_ADMIN
argument_list|,
name|ROOT_ADMIN
argument_list|,
name|QUEUEA
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyKillAppSuccess
argument_list|(
name|ROOT_ADMIN
argument_list|,
name|ROOT_ADMIN
argument_list|,
name|QUEUEB
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyGetClientAMToken
argument_list|(
name|QUEUE_A_USER
argument_list|,
name|ROOT_ADMIN
argument_list|,
name|QUEUEA
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyGetClientAMToken (String submitter, String queueAdmin, String queueName, boolean setupACLs)
specifier|private
name|void
name|verifyGetClientAMToken
parameter_list|(
name|String
name|submitter
parameter_list|,
name|String
name|queueAdmin
parameter_list|,
name|String
name|queueName
parameter_list|,
name|boolean
name|setupACLs
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|applicationId
init|=
name|submitAppAndGetAppId
argument_list|(
name|submitter
argument_list|,
name|queueName
argument_list|,
name|setupACLs
argument_list|)
decl_stmt|;
specifier|final
name|GetApplicationReportRequest
name|appReportRequest
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|submitterClient
init|=
name|getRMClientForUser
argument_list|(
name|submitter
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|adMinUserClient
init|=
name|getRMClientForUser
argument_list|(
name|queueAdmin
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|submitterGetReport
init|=
name|submitterClient
operator|.
name|getApplicationReport
argument_list|(
name|appReportRequest
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|adMinUserGetReport
init|=
name|adMinUserClient
operator|.
name|getApplicationReport
argument_list|(
name|appReportRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|submitterGetReport
operator|.
name|getApplicationReport
argument_list|()
operator|.
name|getClientToAMToken
argument_list|()
argument_list|,
name|adMinUserGetReport
operator|.
name|getApplicationReport
argument_list|()
operator|.
name|getClientToAMToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyKillAppFailure (String submitter, String killer, String queueName, boolean setupACLs)
specifier|private
name|void
name|verifyKillAppFailure
parameter_list|(
name|String
name|submitter
parameter_list|,
name|String
name|killer
parameter_list|,
name|String
name|queueName
parameter_list|,
name|boolean
name|setupACLs
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|applicationId
init|=
name|submitAppAndGetAppId
argument_list|(
name|submitter
argument_list|,
name|queueName
argument_list|,
name|setupACLs
argument_list|)
decl_stmt|;
specifier|final
name|KillApplicationRequest
name|finishAppRequest
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|killerClient
init|=
name|getRMClientForUser
argument_list|(
name|killer
argument_list|)
decl_stmt|;
comment|// Kill app as the killer
try|try
block|{
name|killerClient
operator|.
name|forceKillApplication
argument_list|(
name|finishAppRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"App killing by the enemy should fail!!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got exception while killing app as the enemy"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"User "
operator|+
name|killer
operator|+
literal|" cannot perform operation MODIFY_APP on "
operator|+
name|applicationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getRMClientForUser
argument_list|(
name|submitter
argument_list|)
operator|.
name|forceKillApplication
argument_list|(
name|finishAppRequest
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyKillAppSuccess (String submitter, String killer, String queueName, boolean setupACLs)
specifier|private
name|void
name|verifyKillAppSuccess
parameter_list|(
name|String
name|submitter
parameter_list|,
name|String
name|killer
parameter_list|,
name|String
name|queueName
parameter_list|,
name|boolean
name|setupACLs
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|applicationId
init|=
name|submitAppAndGetAppId
argument_list|(
name|submitter
argument_list|,
name|queueName
argument_list|,
name|setupACLs
argument_list|)
decl_stmt|;
specifier|final
name|KillApplicationRequest
name|finishAppRequest
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|ownerClient
init|=
name|getRMClientForUser
argument_list|(
name|killer
argument_list|)
decl_stmt|;
comment|// Kill app as killer
name|ownerClient
operator|.
name|forceKillApplication
argument_list|(
name|finishAppRequest
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|waitForState
argument_list|(
name|applicationId
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
block|}
DECL|method|submitAppAndGetAppId (String submitter, String queueName, boolean setupACLs)
specifier|private
name|ApplicationId
name|submitAppAndGetAppId
parameter_list|(
name|String
name|submitter
parameter_list|,
name|String
name|queueName
parameter_list|,
name|boolean
name|setupACLs
parameter_list|)
throws|throws
name|Exception
block|{
name|GetNewApplicationRequest
name|newAppRequest
init|=
name|GetNewApplicationRequest
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|ApplicationClientProtocol
name|submitterClient
init|=
name|getRMClientForUser
argument_list|(
name|submitter
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|submitterClient
operator|.
name|getNewApplication
argument_list|(
name|newAppRequest
argument_list|)
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
name|createACLs
argument_list|(
name|submitter
argument_list|,
name|setupACLs
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|amContainerSpec
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|appSubmissionContext
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
literal|"applicationName"
argument_list|,
name|queueName
argument_list|,
literal|null
argument_list|,
name|amContainerSpec
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|,
name|resource
argument_list|,
literal|"applicationType"
argument_list|)
decl_stmt|;
name|appSubmissionContext
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|appSubmissionContext
operator|.
name|setQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|SubmitApplicationRequest
name|submitRequest
init|=
name|SubmitApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appSubmissionContext
argument_list|)
decl_stmt|;
name|submitterClient
operator|.
name|submitApplication
argument_list|(
name|submitRequest
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|waitForState
argument_list|(
name|applicationId
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
return|return
name|applicationId
return|;
block|}
DECL|method|createACLs (String submitter, boolean setupACLs)
specifier|private
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|createACLs
parameter_list|(
name|String
name|submitter
parameter_list|,
name|boolean
name|setupACLs
parameter_list|)
block|{
name|AccessControlList
name|viewACL
init|=
operator|new
name|AccessControlList
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|AccessControlList
name|modifyACL
init|=
operator|new
name|AccessControlList
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|setupACLs
condition|)
block|{
name|viewACL
operator|.
name|addUser
argument_list|(
name|submitter
argument_list|)
expr_stmt|;
name|viewACL
operator|.
name|addUser
argument_list|(
name|COMMON_USER
argument_list|)
expr_stmt|;
name|modifyACL
operator|.
name|addUser
argument_list|(
name|submitter
argument_list|)
expr_stmt|;
name|modifyACL
operator|.
name|addUser
argument_list|(
name|COMMON_USER
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
name|viewACL
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|MODIFY_APP
argument_list|,
name|modifyACL
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|acls
return|;
block|}
DECL|method|getRMClientForUser (String user)
specifier|private
name|ApplicationClientProtocol
name|getRMClientForUser
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|UserGroupInformation
name|userUGI
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|ApplicationClientProtocol
name|userClient
init|=
name|userUGI
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ApplicationClientProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationClientProtocol
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|ApplicationClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|userClient
return|;
block|}
DECL|method|createConfiguration ()
specifier|protected
specifier|abstract
name|Configuration
name|createConfiguration
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

