begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestFairSchedulerPreemption
specifier|public
class|class
name|TestFairSchedulerPreemption
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
name|TestFairSchedulerPreemption
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|clock
specifier|private
name|MockClock
name|clock
decl_stmt|;
DECL|class|StubbedFairScheduler
specifier|private
specifier|static
class|class
name|StubbedFairScheduler
extends|extends
name|FairScheduler
block|{
DECL|field|lastPreemptMemory
specifier|public
name|int
name|lastPreemptMemory
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|preemptResources ( Collection<FSLeafQueue> scheds, Resource toPreempt)
specifier|protected
name|void
name|preemptResources
parameter_list|(
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|scheds
parameter_list|,
name|Resource
name|toPreempt
parameter_list|)
block|{
name|lastPreemptMemory
operator|=
name|toPreempt
operator|.
name|getMemory
argument_list|()
expr_stmt|;
block|}
DECL|method|resetLastPreemptResources ()
specifier|public
name|void
name|resetLastPreemptResources
parameter_list|()
block|{
name|lastPreemptMemory
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|createConfiguration ()
specifier|protected
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|StubbedFairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|clock
operator|=
operator|new
name|MockClock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
name|conf
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|startResourceManager (float utilizationThreshold)
specifier|private
name|void
name|startResourceManager
parameter_list|(
name|float
name|utilizationThreshold
parameter_list|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION_THRESHOLD
argument_list|,
name|utilizationThreshold
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|instanceof
name|StubbedFairScheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|UPDATE_INTERVAL
operator|=
literal|60
operator|*
literal|1000
expr_stmt|;
block|}
DECL|method|registerNodeAndSubmitApp ( int memory, int vcores, int appContainers, int appMemory)
specifier|private
name|void
name|registerNodeAndSubmitApp
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|vcores
parameter_list|,
name|int
name|appContainers
parameter_list|,
name|int
name|appMemory
parameter_list|)
block|{
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|memory
argument_list|,
name|vcores
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"node1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect amount of resources in the cluster"
argument_list|,
name|memory
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect amount of resources in the cluster"
argument_list|,
name|vcores
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
name|appMemory
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
name|appContainers
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"app1's request is not met"
argument_list|,
name|memory
operator|-
name|appContainers
operator|*
name|appMemory
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionWithFreeResources ()
specifier|public
name|void
name|testPreemptionWithFreeResources
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<fairSharePreemptionTimeout>10</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|startResourceManager
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
comment|// Create node with 4GB memory and 4 vcores
name|registerNodeAndSubmitApp
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Verify submitting another request doesn't trigger preemption
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|resetLastPreemptResources
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptResources() should have been called"
argument_list|,
literal|1024
argument_list|,
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|lastPreemptMemory
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|startResourceManager
argument_list|(
literal|0.8f
argument_list|)
expr_stmt|;
comment|// Create node with 4GB memory and 4 vcores
name|registerNodeAndSubmitApp
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Verify submitting another request doesn't trigger preemption
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|resetLastPreemptResources
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptResources() should not have been called"
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|lastPreemptMemory
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

