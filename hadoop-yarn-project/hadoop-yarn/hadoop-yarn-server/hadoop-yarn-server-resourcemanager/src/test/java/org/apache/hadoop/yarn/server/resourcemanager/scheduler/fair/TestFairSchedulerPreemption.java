begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerPreemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestFairSchedulerPreemption
specifier|public
class|class
name|TestFairSchedulerPreemption
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
name|TestFairSchedulerPreemption
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|clock
specifier|private
name|ControlledClock
name|clock
decl_stmt|;
DECL|class|StubbedFairScheduler
specifier|private
specifier|static
class|class
name|StubbedFairScheduler
extends|extends
name|FairScheduler
block|{
DECL|field|lastPreemptMemory
specifier|public
name|int
name|lastPreemptMemory
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
DECL|method|preemptResources (Resource toPreempt)
specifier|protected
name|void
name|preemptResources
parameter_list|(
name|Resource
name|toPreempt
parameter_list|)
block|{
name|lastPreemptMemory
operator|=
name|toPreempt
operator|.
name|getMemory
argument_list|()
expr_stmt|;
block|}
DECL|method|resetLastPreemptResources ()
specifier|public
name|void
name|resetLastPreemptResources
parameter_list|()
block|{
name|lastPreemptMemory
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
DECL|method|createConfiguration ()
specifier|public
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|super
operator|.
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|StubbedFairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|clock
operator|=
operator|new
name|ControlledClock
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
name|conf
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|startResourceManagerWithStubbedFairScheduler (float utilizationThreshold)
specifier|private
name|void
name|startResourceManagerWithStubbedFairScheduler
parameter_list|(
name|float
name|utilizationThreshold
parameter_list|)
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION_THRESHOLD
argument_list|,
name|utilizationThreshold
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|instanceof
name|StubbedFairScheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|=
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateInterval
operator|=
literal|60
operator|*
literal|1000
expr_stmt|;
block|}
comment|// YARN-4648: The starting code for ResourceManager mock is originated from
comment|// TestFairScheduler. It should be keep as it was to guarantee no changing
comment|// behaviour of ResourceManager preemption.
DECL|method|startResourceManagerWithRealFairScheduler ()
specifier|private
name|void
name|startResourceManagerWithRealFairScheduler
parameter_list|()
block|{
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION_THRESHOLD
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_RESERVATION_THRESHOLD_INCERMENT_MULTIPLE
argument_list|,
name|TEST_RESERVATION_THRESHOLD
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// TODO: This test should really be using MockRM. For now starting stuff
comment|// that is needed at a bare minimum.
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// to initialize the master key
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|stopResourceManager ()
specifier|private
name|void
name|stopResourceManager
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
DECL|method|registerNodeAndSubmitApp ( int memory, int vcores, int appContainers, int appMemory)
specifier|private
name|void
name|registerNodeAndSubmitApp
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|vcores
parameter_list|,
name|int
name|appContainers
parameter_list|,
name|int
name|appMemory
parameter_list|)
block|{
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|memory
argument_list|,
name|vcores
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"node1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect amount of resources in the cluster"
argument_list|,
name|memory
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect amount of resources in the cluster"
argument_list|,
name|vcores
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
name|appMemory
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
name|appContainers
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"app1's request is not met"
argument_list|,
name|memory
operator|-
name|appContainers
operator|*
name|appMemory
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionWithFreeResources ()
specifier|public
name|void
name|testPreemptionWithFreeResources
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<fairSharePreemptionTimeout>10</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|startResourceManagerWithStubbedFairScheduler
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
comment|// Create node with 4GB memory and 4 vcores
name|registerNodeAndSubmitApp
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Verify submitting another request triggers preemption
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|resetLastPreemptResources
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptResources() should have been called"
argument_list|,
literal|1024
argument_list|,
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|lastPreemptMemory
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|startResourceManagerWithStubbedFairScheduler
argument_list|(
literal|0.8f
argument_list|)
expr_stmt|;
comment|// Create node with 4GB memory and 4 vcores
name|registerNodeAndSubmitApp
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Verify submitting another request doesn't trigger preemption
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|resetLastPreemptResources
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptResources() should not have been called"
argument_list|,
operator|-
literal|1
argument_list|,
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|lastPreemptMemory
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|startResourceManagerWithStubbedFairScheduler
argument_list|(
literal|0.7f
argument_list|)
expr_stmt|;
comment|// Create node with 4GB memory and 4 vcores
name|registerNodeAndSubmitApp
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
comment|// Verify submitting another request triggers preemption
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|resetLastPreemptResources
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|preemptTasksIfNecessary
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"preemptResources() should have been called"
argument_list|,
literal|1024
argument_list|,
operator|(
operator|(
name|StubbedFairScheduler
operator|)
name|scheduler
operator|)
operator|.
name|lastPreemptMemory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
comment|/**    * Make sure containers are chosen to be preempted in the correct order.    */
DECL|method|testChoiceOfPreemptedContainers ()
specifier|public
name|void
name|testChoiceOfPreemptedContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION_INTERVAL
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
operator|+
literal|".allocation.file"
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create two nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Queue A and B each request two applications
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|app3
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
name|app4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|true
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|true
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fair"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now new requests arrive from queueC and default
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// We should be able to claw back one container from queueA and queueB each.
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// First verify we are adding containers to preemption list for the app.
comment|// For queueA (fifo), app2 is selected.
comment|// For queueB (fair), app4 is selected.
name|assertTrue
argument_list|(
literal|"App2 should have container to be preempted"
argument_list|,
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App4 should have container to be preempted"
argument_list|,
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pretend 15 seconds have passed
name|clock
operator|.
name|tickSec
argument_list|(
literal|15
argument_list|)
expr_stmt|;
comment|// Trigger a kill by insisting we want containers back
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// At this point the containers should have been killed (since we are not simulating AM)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Inside each app, containers are sorted according to their priorities.
comment|// Containers with priority 4 are preempted for app2 and app4.
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getAllocatedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|4
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RMContainer
name|container
range|:
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getAllocatedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|4
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Containers with priority=4 in app2 and app4 should be "
operator|+
literal|"preempted."
argument_list|,
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Trigger a kill by insisting we want containers back
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pretend 15 seconds have passed
name|clock
operator|.
name|tickSec
argument_list|(
literal|15
argument_list|)
expr_stmt|;
comment|// We should be able to claw back another container from A and B each.
comment|// For queueA (fifo), continue preempting from app2.
comment|// For queueB (fair), even app4 has a lowest priority container with p=4, it
comment|// still preempts from app3 as app3 is most over fair share.
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now A and B are below fair share, so preemption shouldn't do anything
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App1 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App2 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App3 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App4 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionIsNotDelayedToNextRound ()
specifier|public
name|void
name|testPreemptionIsNotDelayedToNextRound
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION_INTERVAL
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>8</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA1\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA2\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node of 8G
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Run apps in queueA.A1 and queueB
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA.queueA1"
argument_list|,
literal|"user1"
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// createSchedulingRequestExistingApplication(1 * 1024, 1, 2, app1);
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueB"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
block|}
comment|// verify if the apps got the containers they requested
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now submit an app in queueA.queueA2
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA.queueA2"
argument_list|,
literal|"user3"
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Let 11 sec pass
name|clock
operator|.
name|tickSec
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Resource
name|toPreempt
init|=
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA.queueA2"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3277
argument_list|,
name|toPreempt
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify if the 3 containers required by queueA2 are preempted in the same
comment|// round
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|toPreempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
comment|/**    * Tests the timing of decision to preempt tasks.    */
DECL|method|testPreemptionDecision ()
specifier|public
name|void
name|testPreemptionDecision
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create four nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
comment|// Queue A and B each request three containers
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app5
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app6
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
block|}
comment|// Now new requests arrive from queues C and D
name|ApplicationAttemptId
name|app7
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app8
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app9
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app10
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app11
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app12
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|schedC
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueC"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|schedD
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueD"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// After minSharePreemptionTime has passed, they should want to preempt min
comment|// share.
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After fairSharePreemptionTime has passed, they should want to preempt
comment|// fair share.
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**  * Tests the timing of decision to preempt tasks.  */
DECL|method|testPreemptionDecisionWithDRF ()
specifier|public
name|void
name|testPreemptionDecisionWithDRF
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,1vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,2vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,3vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,2vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>drf</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create four nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
comment|// Queue A and B each request three containers
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app5
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app6
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
block|}
comment|// Now new requests arrive from queues C and D
name|ApplicationAttemptId
name|app7
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app8
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app9
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app10
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app11
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app12
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|schedC
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueC"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|schedD
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueD"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test :
comment|// 1) whether componentWise min works as expected.
comment|// 2) DRF calculator is used
comment|// After minSharePreemptionTime has passed, they should want to preempt min
comment|// share.
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|res
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Demand = 3
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|res
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Demand = 6, but min share = 2
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// After fairSharePreemptionTime has passed, they should want to preempt
comment|// fair share.
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|res
operator|=
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|res
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|res
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Demand = 6, but fair share = 3
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Tests the various timing of decision to preempt tasks.    */
DECL|method|testPreemptionDecisionWithVariousTimeout ()
specifier|public
name|void
name|testPreemptionDecisionWithVariousTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>10</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>25</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>20</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>30</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the min/fair share preemption timeout for each queue
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create one big node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A takes all resources
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
block|}
comment|// Now new requests arrive from queues B1, B2 and C
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queueB1
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queueB2
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queueC
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueC"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// After 5 seconds, queueB1 wants to preempt min share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 10 seconds, queueB2 wants to preempt min share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 15 seconds, queueC wants to preempt min share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 20 seconds, queueB2 should want to preempt fair share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 25 seconds, queueB1 should want to preempt fair share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 30 seconds, queueC should want to preempt fair share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Tests the decision to preempt tasks respect to non-preemptable queues    * 1, Queues as follow:    *   queueA(non-preemptable)    *   queueB(preemptable)    *   parentQueue(non-preemptable)    *     --queueC(preemptable)    *   queueD(preemptable)    * 2, Submit request to queueA, queueB, queueC, and all of them are over MinShare    * 3, Now all resource are occupied    * 4, Submit request to queueD, and need to preempt resource from other queues    * 5, Only preemptable queue(queueB) would be preempted.    */
DECL|method|testPreemptionDecisionWithNonPreemptableQueue ()
specifier|public
name|void
name|testPreemptionDecisionWithNonPreemptableQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allowPreemptionFrom>false</allowPreemptionFrom>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"parentQueue\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allowPreemptionFrom>false</allowPreemptionFrom>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create four nodes(3G each)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
name|RMNode
name|node4
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent4
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent4
argument_list|)
expr_stmt|;
comment|// Submit apps to queueA, queueB, queueC,
comment|// now all resource of the cluster is occupied
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"parentQueue.queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate4
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate4
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now new requests arrive from queues D
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|schedD
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueD"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// After minSharePreemptionTime has passed, 2G resource should preempted from
comment|// queueB to queueD
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// now only app2 is selected to be preempted
name|assertTrue
argument_list|(
literal|"App2 should have container to be preempted"
argument_list|,
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App1 should not have container to be preempted"
argument_list|,
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App3 should not have container to be preempted"
argument_list|,
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pretend 20 seconds have passed
name|clock
operator|.
name|tickSec
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate4
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate4
argument_list|)
expr_stmt|;
block|}
comment|// after preemption
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Tests the decision to preempt tasks when allowPreemptionFrom is set false on    * all queues.    * Then none of them would be preempted actually.    * 1, Queues as follow:    *   queueA(non-preemptable)    *   queueB(non-preemptable)    *   parentQueue(non-preemptable)    *     --queueC(preemptable)    *   parentQueue(preemptable)    *     --queueD(non-preemptable)    * 2, Submit request to queueB, queueC, queueD, and all of them are over MinShare    * 3, Now all resource are occupied    * 4, Submit request to queueA, and need to preempt resource from other queues    * 5, None of queues would be preempted.    */
DECL|method|testPreemptionDecisionWhenPreemptionDisabledOnAllQueues ()
specifier|public
name|void
name|testPreemptionDecisionWhenPreemptionDisabledOnAllQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allowPreemptionFrom>false</allowPreemptionFrom>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allowPreemptionFrom>false</allowPreemptionFrom>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"parentQueue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allowPreemptionFrom>false</allowPreemptionFrom>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"parentQueue2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allowPreemptionFrom>false</allowPreemptionFrom>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create four nodes(3G each)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
name|RMNode
name|node4
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent4
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent4
argument_list|)
expr_stmt|;
comment|// Submit apps to queueB, queueC, queueD
comment|// now all resource of the cluster is occupied
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"parentQueue1.queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"parentQueue2.queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate4
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate4
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now new requests arrive from queues A
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|schedA
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// After minSharePreemptionTime has passed, resource deficit is 2G
name|clock
operator|.
name|tickSec
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|scheduler
operator|.
name|resourceDeficit
argument_list|(
name|schedA
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// now none app is selected to be preempted
name|assertTrue
argument_list|(
literal|"App1 should have container to be preempted"
argument_list|,
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App2 should not have container to be preempted"
argument_list|,
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App3 should not have container to be preempted"
argument_list|,
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pretend 20 seconds have passed
name|clock
operator|.
name|tickSec
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate4
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate4
argument_list|)
expr_stmt|;
block|}
comment|// after preemption
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackwardsCompatiblePreemptionConfiguration ()
specifier|public
name|void
name|testBackwardsCompatiblePreemptionConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>30</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<fairSharePreemptionTimeout>40</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the min/fair share preemption timeout for each queue
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// If both exist, we take the default one
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>25</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<fairSharePreemptionTimeout>30</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRecoverRequestAfterPreemption ()
specifier|public
name|void
name|testRecoverRequestAfterPreemption
parameter_list|()
throws|throws
name|Exception
block|{
name|startResourceManagerWithRealFairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|int
name|GB
init|=
literal|1024
decl_stmt|;
comment|// Create Node and raised Node Added event
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|0
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
comment|// Create 3 container requests and place it in ask
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|nodeLocalRequest
init|=
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|,
name|host
argument_list|,
name|priority
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackLocalRequest
init|=
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|priority
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|offRackRequest
init|=
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|priority
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|nodeLocalRequest
argument_list|)
expr_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|rackLocalRequest
argument_list|)
expr_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|offRackRequest
argument_list|)
expr_stmt|;
comment|// Create Request and update
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createSchedulingRequest
argument_list|(
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
name|ask
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
name|NodeUpdateSchedulerEvent
name|nodeUpdate
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
comment|// ResourceRequest will be empty once NodeUpdate is completed
name|Assert
operator|.
name|assertNull
argument_list|(
name|app
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|app
operator|.
name|getRMContainer
argument_list|(
name|containerId1
argument_list|)
decl_stmt|;
comment|// Create a preempt event and register for preemption
name|scheduler
operator|.
name|warnOrKillContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Wait for few clock ticks
name|clock
operator|.
name|tickSec
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// preempt now
name|scheduler
operator|.
name|warnOrKillContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Trigger container rescheduled event
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|ContainerPreemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|rmContainer
argument_list|,
name|SchedulerEventType
operator|.
name|KILL_PREEMPTED_CONTAINER
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
init|=
name|rmContainer
operator|.
name|getResourceRequests
argument_list|()
decl_stmt|;
comment|// Once recovered, resource request will be present again in app
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Send node heartbeat
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getContainers
argument_list|()
decl_stmt|;
comment|// Now with updated ResourceRequest, a container is allocated for AM.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|stopResourceManager
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

