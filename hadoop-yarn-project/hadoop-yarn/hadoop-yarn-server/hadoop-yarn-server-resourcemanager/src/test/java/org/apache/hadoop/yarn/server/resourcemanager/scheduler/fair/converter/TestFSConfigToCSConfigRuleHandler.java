begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.converter
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|DYNAMIC_MAX_ASSIGN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|MAX_CAPACITY_PERCENTAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|MAX_CHILD_CAPACITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|MAX_CHILD_QUEUE_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|QUEUE_AUTO_CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|RESERVATION_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|SPECIFIED_NOT_FIRST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|USER_MAX_APPS_DEFAULT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|converter
operator|.
name|FSConfigToCSConfigRuleHandler
operator|.
name|USER_MAX_RUNNING_APPS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for FSConfigToCSConfigRuleHandler.  *  */
end_comment

begin_class
DECL|class|TestFSConfigToCSConfigRuleHandler
specifier|public
class|class
name|TestFSConfigToCSConfigRuleHandler
block|{
DECL|field|ABORT
specifier|private
specifier|static
specifier|final
name|String
name|ABORT
init|=
literal|"abort"
decl_stmt|;
DECL|field|WARNING
specifier|private
specifier|static
specifier|final
name|String
name|WARNING
init|=
literal|"warning"
decl_stmt|;
DECL|field|ruleHandler
specifier|private
name|FSConfigToCSConfigRuleHandler
name|ruleHandler
decl_stmt|;
annotation|@
name|Test
DECL|method|testInitPropertyActionsToWarning ()
specifier|public
name|void
name|testInitPropertyActionsToWarning
parameter_list|()
throws|throws
name|IOException
block|{
name|ruleHandler
operator|=
operator|new
name|FSConfigToCSConfigRuleHandler
argument_list|(
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleChildQueueCount
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleDynamicMaxAssign
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleMaxCapacityPercentage
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleMaxChildCapacity
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleQueueAutoCreate
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleReservationSystem
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleSpecifiedNotFirstRule
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleUserMaxApps
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleUserMaxAppsDefault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllRulesWarning ()
specifier|public
name|void
name|testAllRulesWarning
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|rules
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|DYNAMIC_MAX_ASSIGN
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|MAX_CAPACITY_PERCENTAGE
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|MAX_CHILD_CAPACITY
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|QUEUE_AUTO_CREATE
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|RESERVATION_SYSTEM
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SPECIFIED_NOT_FIRST
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|USER_MAX_APPS_DEFAULT
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|USER_MAX_RUNNING_APPS
argument_list|,
name|WARNING
argument_list|)
expr_stmt|;
name|ruleHandler
operator|=
operator|new
name|FSConfigToCSConfigRuleHandler
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleDynamicMaxAssign
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleMaxCapacityPercentage
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleMaxChildCapacity
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleQueueAutoCreate
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleReservationSystem
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleSpecifiedNotFirstRule
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleUserMaxApps
argument_list|()
expr_stmt|;
name|ruleHandler
operator|.
name|handleUserMaxAppsDefault
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllRulesAbort ()
specifier|public
name|void
name|testAllRulesAbort
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|rules
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|DYNAMIC_MAX_ASSIGN
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|MAX_CAPACITY_PERCENTAGE
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|MAX_CHILD_CAPACITY
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|QUEUE_AUTO_CREATE
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|RESERVATION_SYSTEM
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|SPECIFIED_NOT_FIRST
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|USER_MAX_APPS_DEFAULT
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|USER_MAX_RUNNING_APPS
argument_list|,
name|ABORT
argument_list|)
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|MAX_CHILD_QUEUE_LIMIT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|ruleHandler
operator|=
operator|new
name|FSConfigToCSConfigRuleHandler
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleChildQueueCount
argument_list|(
literal|"test"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|ConversionException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleDynamicMaxAssign
argument_list|()
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleMaxCapacityPercentage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleMaxChildCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleQueueAutoCreate
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleReservationSystem
argument_list|()
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleSpecifiedNotFirstRule
argument_list|()
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleUserMaxApps
argument_list|()
argument_list|)
expr_stmt|;
name|expectAbort
argument_list|(
parameter_list|()
lambda|->
name|ruleHandler
operator|.
name|handleUserMaxAppsDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ConversionException
operator|.
name|class
argument_list|)
DECL|method|testMaxChildQueueCountNotInteger ()
specifier|public
name|void
name|testMaxChildQueueCountNotInteger
parameter_list|()
throws|throws
name|IOException
block|{
name|Properties
name|rules
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|MAX_CHILD_QUEUE_LIMIT
argument_list|,
literal|"abc"
argument_list|)
expr_stmt|;
name|ruleHandler
operator|=
operator|new
name|FSConfigToCSConfigRuleHandler
argument_list|(
name|rules
argument_list|)
expr_stmt|;
name|ruleHandler
operator|.
name|handleChildQueueCount
argument_list|(
literal|"test"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|expectAbort (VoidCall call)
specifier|private
name|void
name|expectAbort
parameter_list|(
name|VoidCall
name|call
parameter_list|)
block|{
name|expectAbort
argument_list|(
name|call
argument_list|,
name|UnsupportedPropertyException
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|expectAbort (VoidCall call, Class<?> exceptionClass)
specifier|private
name|void
name|expectAbort
parameter_list|(
name|VoidCall
name|call
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|exceptionClass
parameter_list|)
block|{
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
name|Throwable
name|thrown
init|=
literal|null
decl_stmt|;
try|try
block|{
name|call
operator|.
name|apply
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|thrown
operator|=
name|t
expr_stmt|;
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Exception was not thrown"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected exception"
argument_list|,
name|exceptionClass
argument_list|,
name|thrown
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|FunctionalInterface
DECL|interface|VoidCall
specifier|private
interface|interface
name|VoidCall
block|{
DECL|method|apply ()
name|void
name|apply
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

