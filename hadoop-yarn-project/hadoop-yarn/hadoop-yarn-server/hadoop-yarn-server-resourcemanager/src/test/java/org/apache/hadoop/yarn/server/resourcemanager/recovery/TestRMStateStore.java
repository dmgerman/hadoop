begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|HdfsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ApplicationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|ClientTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptStoredEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ApplicationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMStateStore
specifier|public
class|class
name|TestRMStateStore
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|TestDispatcher
class|class
name|TestDispatcher
implements|implements
name|Dispatcher
implements|,
name|EventHandler
argument_list|<
name|RMAppAttemptStoredEvent
argument_list|>
block|{
DECL|field|attemptId
name|ApplicationAttemptId
name|attemptId
decl_stmt|;
DECL|field|storedException
name|Exception
name|storedException
decl_stmt|;
DECL|field|notified
name|boolean
name|notified
init|=
literal|false
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|register (Class<? extends Enum> eventType, EventHandler handler)
specifier|public
name|void
name|register
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Enum
argument_list|>
name|eventType
parameter_list|,
name|EventHandler
name|handler
parameter_list|)
block|{     }
annotation|@
name|Override
DECL|method|handle (RMAppAttemptStoredEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|RMAppAttemptStoredEvent
name|event
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|attemptId
argument_list|,
name|event
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storedException
argument_list|,
name|event
operator|.
name|getStoredException
argument_list|()
argument_list|)
expr_stmt|;
name|notified
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
DECL|method|getEventHandler ()
specifier|public
name|EventHandler
name|getEventHandler
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
DECL|interface|RMStateStoreHelper
interface|interface
name|RMStateStoreHelper
block|{
DECL|method|getRMStateStore ()
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
function_decl|;
DECL|method|addOrphanAttemptIfNeeded (RMStateStore testStore, TestDispatcher dispatcher)
name|void
name|addOrphanAttemptIfNeeded
parameter_list|(
name|RMStateStore
name|testStore
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|)
throws|throws
name|Exception
function_decl|;
DECL|method|isFinalStateValid ()
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|Test
DECL|method|testFSRMStateStore ()
specifier|public
name|void
name|testFSRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|HdfsConfiguration
name|conf
init|=
operator|new
name|HdfsConfiguration
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
operator|new
name|MiniDFSCluster
operator|.
name|Builder
argument_list|(
name|conf
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|TestFSRMStateStoreTester
name|fsTester
init|=
operator|new
name|TestFSRMStateStoreTester
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|testRMStateStore
argument_list|(
name|fsTester
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|TestFSRMStateStoreTester
class|class
name|TestFSRMStateStoreTester
implements|implements
name|RMStateStoreHelper
block|{
DECL|field|workingDirPathURI
name|Path
name|workingDirPathURI
decl_stmt|;
DECL|field|store
name|FileSystemRMStateStore
name|store
decl_stmt|;
DECL|field|cluster
name|MiniDFSCluster
name|cluster
decl_stmt|;
DECL|class|TestFileSystemRMStore
class|class
name|TestFileSystemRMStore
extends|extends
name|FileSystemRMStateStore
block|{
DECL|method|TestFileSystemRMStore (Configuration conf)
name|TestFileSystemRMStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|workingDirPathURI
operator|.
name|equals
argument_list|(
name|fsWorkingPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|TestFSRMStateStoreTester (MiniDFSCluster cluster)
specifier|public
name|TestFSRMStateStoreTester
parameter_list|(
name|MiniDFSCluster
name|cluster
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|workingDirPath
init|=
operator|new
name|Path
argument_list|(
literal|"/Test"
argument_list|)
decl_stmt|;
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingDirPath
argument_list|)
expr_stmt|;
name|Path
name|clusterURI
init|=
operator|new
name|Path
argument_list|(
name|cluster
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
name|workingDirPathURI
operator|=
operator|new
name|Path
argument_list|(
name|clusterURI
argument_list|,
name|workingDirPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRMStateStore ()
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_RM_STATE_STORE_URI
argument_list|,
name|workingDirPathURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|TestFileSystemRMStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|store
return|;
block|}
annotation|@
name|Override
DECL|method|addOrphanAttemptIfNeeded (RMStateStore testStore, TestDispatcher dispatcher)
specifier|public
name|void
name|addOrphanAttemptIfNeeded
parameter_list|(
name|RMStateStore
name|testStore
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
literal|"appattempt_1352994193343_0003_000001"
argument_list|)
decl_stmt|;
name|storeAttempt
argument_list|(
name|testStore
argument_list|,
name|attemptId
argument_list|,
literal|"container_1352994193343_0003_01_000001"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isFinalStateValid ()
specifier|public
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|workingDirPathURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|length
operator|==
literal|1
condition|)
block|{
comment|// only store root directory should exist
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|method|waitNotify (TestDispatcher dispatcher)
name|void
name|waitNotify
parameter_list|(
name|TestDispatcher
name|dispatcher
parameter_list|)
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|dispatcher
operator|.
name|notified
condition|)
block|{
synchronized|synchronized
init|(
name|dispatcher
init|)
block|{
try|try
block|{
name|dispatcher
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|>
literal|1000
operator|*
literal|60
condition|)
block|{
name|fail
argument_list|(
literal|"Timed out attempt store notification"
argument_list|)
expr_stmt|;
block|}
block|}
name|dispatcher
operator|.
name|notified
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|storeApp (RMStateStore store, ApplicationId appId, long time)
name|void
name|storeApp
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|long
name|time
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|RMApp
name|mockApp
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeApplication
argument_list|(
name|mockApp
argument_list|)
expr_stmt|;
block|}
DECL|method|storeAttempt (RMStateStore store, ApplicationAttemptId attemptId, String containerIdStr, Token<ApplicationTokenIdentifier> appToken, Token<ClientTokenIdentifier> clientToken, TestDispatcher dispatcher)
name|ContainerId
name|storeAttempt
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|String
name|containerIdStr
parameter_list|,
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
name|appToken
parameter_list|,
name|Token
argument_list|<
name|ClientTokenIdentifier
argument_list|>
name|clientToken
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|)
throws|throws
name|Exception
block|{
name|Container
name|container
init|=
operator|new
name|ContainerPBImpl
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|ConverterUtils
operator|.
name|toContainerId
argument_list|(
name|containerIdStr
argument_list|)
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|mockAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getApplicationToken
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appToken
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getClientToken
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clientToken
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|attemptId
operator|=
name|attemptId
expr_stmt|;
name|dispatcher
operator|.
name|storedException
operator|=
literal|null
expr_stmt|;
name|store
operator|.
name|storeApplicationAttempt
argument_list|(
name|mockAttempt
argument_list|)
expr_stmt|;
name|waitNotify
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
return|return
name|container
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testRMStateStore (RMStateStoreHelper stateStoreHelper)
name|void
name|testRMStateStore
parameter_list|(
name|RMStateStoreHelper
name|stateStoreHelper
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|RMStateStore
name|store
init|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationTokenSecretManager
name|appTokenMgr
init|=
operator|new
name|ApplicationTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ClientToAMTokenSecretManagerInRM
name|clientTokenMgr
init|=
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
literal|"appattempt_1352994193343_0001_000001"
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId1
init|=
name|attemptId1
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|)
expr_stmt|;
comment|// create application token1 for attempt1
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|appAttemptToken1
init|=
name|generateTokens
argument_list|(
name|attemptId1
argument_list|,
name|appTokenMgr
argument_list|,
name|clientTokenMgr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|attemptTokenSet1
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|attemptTokenSet1
operator|.
name|addAll
argument_list|(
name|appAttemptToken1
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptId1
argument_list|,
literal|"container_1352994193343_0001_01_000001"
argument_list|,
call|(
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
call|)
argument_list|(
name|appAttemptToken1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
call|(
name|Token
argument_list|<
name|ClientTokenIdentifier
argument_list|>
call|)
argument_list|(
name|appAttemptToken1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|String
name|appAttemptIdStr2
init|=
literal|"appattempt_1352994193343_0001_000002"
decl_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
name|appAttemptIdStr2
argument_list|)
decl_stmt|;
comment|// create application token2 for attempt2
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|appAttemptToken2
init|=
name|generateTokens
argument_list|(
name|attemptId2
argument_list|,
name|appTokenMgr
argument_list|,
name|clientTokenMgr
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|attemptTokenSet2
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|attemptTokenSet2
operator|.
name|addAll
argument_list|(
name|appAttemptToken2
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptId2
argument_list|,
literal|"container_1352994193343_0001_02_000001"
argument_list|,
call|(
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
call|)
argument_list|(
name|appAttemptToken2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
call|(
name|Token
argument_list|<
name|ClientTokenIdentifier
argument_list|>
call|)
argument_list|(
name|appAttemptToken2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptIdRemoved
init|=
name|ConverterUtils
operator|.
name|toApplicationAttemptId
argument_list|(
literal|"appattempt_1352994193343_0002_000001"
argument_list|)
decl_stmt|;
name|ApplicationId
name|appIdRemoved
init|=
name|attemptIdRemoved
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appIdRemoved
argument_list|,
name|submitTime
argument_list|)
expr_stmt|;
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptIdRemoved
argument_list|,
literal|"container_1352994193343_0002_01_000001"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|RMApp
name|mockRemovedApp
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appIdRemoved
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedApp
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRemovedApp
operator|.
name|getAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|mockRemovedAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockRemovedAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptIdRemoved
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|attemptIdRemoved
argument_list|,
name|mockRemovedAttempt
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeApplication
argument_list|(
name|mockRemovedApp
argument_list|)
expr_stmt|;
comment|// add orphan attempt file to simulate incomplete removal of app state
name|stateStoreHelper
operator|.
name|addOrphanAttemptIfNeeded
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
comment|// let things settle down
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// load state
name|store
operator|=
name|stateStoreHelper
operator|.
name|getRMStateStore
argument_list|()
expr_stmt|;
name|RMState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// removed app or orphan attempt is not loaded
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rmAppState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|appId1
argument_list|)
decl_stmt|;
comment|// app is loaded
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// app is loaded correctly
name|assertEquals
argument_list|(
name|submitTime
argument_list|,
name|appState
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// submission context is loaded correctly
name|assertEquals
argument_list|(
name|appId1
argument_list|,
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptState
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
comment|// attempt1 is loaded correctly
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptId1
argument_list|,
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt1 container is loaded correctly
name|assertEquals
argument_list|(
name|containerId1
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt1 applicationToken is loaded correctly
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|savedTokens
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|savedTokens
operator|.
name|addAll
argument_list|(
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptTokenSet1
argument_list|,
name|savedTokens
argument_list|)
expr_stmt|;
name|attemptState
operator|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId2
argument_list|)
expr_stmt|;
comment|// attempt2 is loaded correctly
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptId2
argument_list|,
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt2 container is loaded correctly
name|assertEquals
argument_list|(
name|containerId2
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt2 applicationToken is loaded correctly
name|savedTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|savedTokens
operator|.
name|addAll
argument_list|(
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|attemptTokenSet2
argument_list|,
name|savedTokens
argument_list|)
expr_stmt|;
comment|// assert store is in expected state after everything is cleaned
name|assertTrue
argument_list|(
name|stateStoreHelper
operator|.
name|isFinalStateValid
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|generateTokens (ApplicationAttemptId attemptId, ApplicationTokenSecretManager appTokenMgr, ClientToAMTokenSecretManagerInRM clientTokenMgr, Configuration conf)
specifier|private
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|generateTokens
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ApplicationTokenSecretManager
name|appTokenMgr
parameter_list|,
name|ClientToAMTokenSecretManagerInRM
name|clientTokenMgr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|ApplicationTokenIdentifier
name|appTokenId
init|=
operator|new
name|ApplicationTokenIdentifier
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
name|appToken
init|=
operator|new
name|Token
argument_list|<
name|ApplicationTokenIdentifier
argument_list|>
argument_list|(
name|appTokenId
argument_list|,
name|appTokenMgr
argument_list|)
decl_stmt|;
name|appToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
literal|"appToken service"
argument_list|)
argument_list|)
expr_stmt|;
name|ClientTokenIdentifier
name|clientTokenId
init|=
operator|new
name|ClientTokenIdentifier
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|clientTokenMgr
operator|.
name|registerApplication
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|ClientTokenIdentifier
argument_list|>
name|clientToken
init|=
operator|new
name|Token
argument_list|<
name|ClientTokenIdentifier
argument_list|>
argument_list|(
name|clientTokenId
argument_list|,
name|clientTokenMgr
argument_list|)
decl_stmt|;
name|clientToken
operator|.
name|setService
argument_list|(
operator|new
name|Text
argument_list|(
literal|"clientToken service"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokenPair
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tokenPair
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|appToken
argument_list|)
expr_stmt|;
name|tokenPair
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|clientToken
argument_list|)
expr_stmt|;
return|return
name|tokenPair
return|;
block|}
block|}
end_class

end_unit

