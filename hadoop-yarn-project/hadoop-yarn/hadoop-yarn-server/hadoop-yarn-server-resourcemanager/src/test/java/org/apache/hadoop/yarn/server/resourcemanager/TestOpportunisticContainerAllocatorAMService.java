begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|ProtobufRpcEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|FinishApplicationMasterRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|FinishApplicationMasterResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|RegisterApplicationMasterRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|RegisterApplicationMasterResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerUpdateType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdateContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|UpdatedContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|DistributedSchedulingAMProtocolPB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistributedSchedulingAllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|DistributedSchedulingAllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterDistributedSchedulingAMResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|HadoopYarnProtoRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoteNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|DistributedSchedulingAllocateRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|DistributedSchedulingAllocateResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|RegisterDistributedSchedulingAMResponsePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|OpportunisticContainersStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|OpportunisticContainerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test cases for {@link OpportunisticContainerAllocatorAMService}.  */
end_comment

begin_class
DECL|class|TestOpportunisticContainerAllocatorAMService
specifier|public
class|class
name|TestOpportunisticContainerAllocatorAMService
block|{
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
decl_stmt|;
DECL|field|dispatcher
specifier|private
name|DrainDispatcher
name|dispatcher
decl_stmt|;
annotation|@
name|Before
DECL|method|createAndStartRM ()
specifier|public
name|void
name|createAndStartRM
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|startRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|createAndStartRMWithAutoUpdateContainer ()
specifier|public
name|void
name|createAndStartRMWithAutoUpdateContainer
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AUTO_UPDATE_CONTAINERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|startRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|startRM (final YarnConfiguration conf)
specifier|private
name|void
name|startRM
parameter_list|(
specifier|final
name|YarnConfiguration
name|conf
parameter_list|)
block|{
name|dispatcher
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|stopRM ()
specifier|public
name|void
name|stopRM
parameter_list|()
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testContainerPromoteAndDemoteBeforeContainerStart ()
specifier|public
name|void
name|testContainerPromoteAndDemoteBeforeContainerStart
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|MockNM
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:4321"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|MockNM
name|nm3
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm3
argument_list|)
expr_stmt|;
name|MockNM
name|nm4
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:4321"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm4
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm4
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm3
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm4
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|OpportunisticContainerAllocatorAMService
name|amservice
init|=
operator|(
name|OpportunisticContainerAllocatorAMService
operator|)
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode3
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode4
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm4
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm4
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Send add and update node events to AM Service.
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode3
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode4
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode3
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode4
argument_list|)
argument_list|)
expr_stmt|;
comment|// All nodes 1 - 4 will be applicable for scheduling.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm4
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
comment|// Verify Metrics
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|15360
argument_list|,
literal|15
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MockNM
name|allocNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|sameHostDiffNode
init|=
literal|null
decl_stmt|;
for|for
control|(
name|NodeId
name|n
range|:
name|nodes
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|.
name|getHost
argument_list|()
operator|.
name|equals
argument_list|(
name|allocNode
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
operator|&&
name|n
operator|.
name|getPort
argument_list|()
operator|!=
name|allocNode
operator|.
name|getNodeId
argument_list|()
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|sameHostDiffNode
operator|=
name|nodes
operator|.
name|get
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify Metrics After OPP allocation (Nothing should change)
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|15360
argument_list|,
literal|15
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Node on same host should not result in allocation
name|sameHostDiffNode
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocateResponse
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for scheduler to process all events
name|dispatcher
operator|.
name|waitForEventThreadToWait
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Verify Metrics After OPP allocation (Nothing should change again)
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|15360
argument_list|,
literal|15
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Send Promotion req again... this should result in update error
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UPDATE_OUTSTANDING_ERROR"
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateContainerRequest
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Promotion req again with incorrect version...
comment|// this should also result in update error
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"INCORRECT_CONTAINER_VERSION_ERROR"
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCurrentContainerVersion
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateContainerRequest
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure after correct node heartbeats, we should get the allocation
name|allocNode
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocateResponse
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|uc
init|=
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|uc
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uc
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uc
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Verify Metrics After OPP allocation :
comment|// Allocated cores+mem should have increased, available should decrease
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|14336
argument_list|,
literal|14
argument_list|,
literal|2048
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm3
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm4
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Verify that the container is still in ACQUIRED state wrt the RM.
name|RMContainer
name|rmContainer
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|uc
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getRMContainer
argument_list|(
name|uc
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|,
name|rmContainer
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now demote the container back..
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
name|uc
operator|.
name|getVersion
argument_list|()
argument_list|,
name|uc
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DEMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should happen in the same heartbeat..
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uc
operator|=
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|uc
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uc
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uc
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container
operator|.
name|getVersion
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Wait for scheduler to finish processing events
name|dispatcher
operator|.
name|waitForEventThreadToWait
argument_list|()
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Verify Metrics After OPP allocation :
comment|// Everything should have reverted to what it was
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|15360
argument_list|,
literal|15
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContainerPromoteAfterContainerStart ()
specifier|public
name|void
name|testContainerPromoteAfterContainerStart
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|MockNM
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|OpportunisticContainerAllocatorAMService
name|amservice
init|=
operator|(
name|OpportunisticContainerAllocatorAMService
operator|)
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rmNode1
operator|)
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|getOppurtunisticStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rmNode2
operator|)
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|getOppurtunisticStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|OpportunisticContainerContext
name|ctxt
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getOpportunisticContainerContext
argument_list|()
decl_stmt|;
comment|// Send add and update node events to AM Service.
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
comment|// All nodes 1 to 2 will be applicable for scheduling.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
comment|// Verify Metrics
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|7168
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MockNM
name|allocNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Start Container in NM
name|allocNode
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Verify that container is actually running wrt the RM..
name|RMContainer
name|rmContainer
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getRMContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|rmContainer
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify Metrics After OPP allocation (Nothing should change)
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|7168
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify Metrics After OPP allocation (Nothing should change again)
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|7168
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Send Promotion req again... this should result in update error
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"UPDATE_OUTSTANDING_ERROR"
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateContainerRequest
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start Container in NM
name|allocNode
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|allocateResponse
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|uc
init|=
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainer
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|uc
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uc
operator|.
name|getId
argument_list|()
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|uc
operator|.
name|getVersion
argument_list|()
argument_list|,
name|container
operator|.
name|getVersion
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that the Container is still in RUNNING state wrt RM..
name|rmContainer
operator|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|uc
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getRMContainer
argument_list|(
name|uc
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|rmContainer
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify Metrics After OPP allocation :
comment|// Allocated cores+mem should have increased, available should decrease
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|6144
argument_list|,
literal|6
argument_list|,
literal|2048
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testContainerPromoteAfterContainerComplete ()
specifier|public
name|void
name|testContainerPromoteAfterContainerComplete
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|MockNM
argument_list|>
name|nodes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nm2
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|OpportunisticContainerAllocatorAMService
name|amservice
init|=
operator|(
name|OpportunisticContainerAllocatorAMService
operator|)
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rmNode1
operator|)
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|getOppurtunisticStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rmNode2
operator|)
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|getOppurtunisticStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|OpportunisticContainerContext
name|ctxt
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getOpportunisticContainerContext
argument_list|()
decl_stmt|;
comment|// Send add and update node events to AM Service.
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
comment|// All nodes 1 to 2 will be applicable for scheduling.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
comment|// Verify Metrics
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|7168
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|MockNM
name|allocNode
init|=
name|nodes
operator|.
name|get
argument_list|(
name|container
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Start Container in NM
name|allocNode
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Verify that container is actually running wrt the RM..
name|RMContainer
name|rmContainer
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getRMContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|rmContainer
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Container Completed in the NM
name|allocNode
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Verify that container has been removed..
name|rmContainer
operator|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getRMContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Verify Metrics After OPP allocation (Nothing should change)
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|7168
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Send Promotion req... this should result in update error
comment|// Since the container doesn't exist anymore..
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"INVALID_CONTAINER_ID"
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getReason
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|allocateResponse
operator|.
name|getUpdateErrors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateContainerRequest
argument_list|()
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify Metrics After OPP allocation (Nothing should change again)
name|verifyMetrics
argument_list|(
name|metrics
argument_list|,
literal|7168
argument_list|,
literal|7
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testContainerAutoUpdateContainer ()
specifier|public
name|void
name|testContainerAutoUpdateContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|createAndStartRMWithAutoUpdateContainer
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|OpportunisticContainerAllocatorAMService
name|amservice
init|=
operator|(
name|OpportunisticContainerAllocatorAMService
operator|)
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rmNode1
operator|)
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|getOppurtunisticStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|OpportunisticContainerContext
name|ctxt
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getOpportunisticContainerContext
argument_list|()
decl_stmt|;
comment|// Send add and update node events to AM Service.
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocateResponse
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|allocatedContainers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Start Container in NM
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Verify that container is actually running wrt the RM..
name|RMContainer
name|rmContainer
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getRMContainer
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerState
operator|.
name|RUNNING
argument_list|,
name|rmContainer
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Send Promotion req... this should result in update error
comment|// Since the container doesn't exist anymore..
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|PROMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Get the update response on next allocate
name|allocateResponse
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the update response from YARNRM
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|UpdatedContainer
name|uc
init|=
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|uc
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|uc
operator|.
name|getContainer
argument_list|()
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the container is updated in NM through NM heartbeat response
name|NodeHeartbeatResponse
name|response
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Container
name|containersFromNM
init|=
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|containersFromNM
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|containersFromNM
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
comment|//Increase resources
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|INCREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|allocateResponse
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uc
operator|=
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|uc
operator|.
name|getContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|uc
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Check that the container resources are increased in
comment|// NM through NM heartbeat response
if|if
condition|(
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
comment|//Decrease resources
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DECREASE_RESOURCE
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// Check that the container resources are decreased
comment|// in NM through NM heartbeat response
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// DEMOTE the container
name|allocateResponse
operator|=
name|am1
operator|.
name|sendContainerUpdateRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|UpdateContainerRequest
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerUpdateType
operator|.
name|DEMOTE_EXECUTION_TYPE
argument_list|,
literal|null
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Get the update response on next allocate
name|allocateResponse
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Check the update response from YARNRM
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uc
operator|=
name|allocateResponse
operator|.
name|getUpdatedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|uc
operator|.
name|getContainer
argument_list|()
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the container is updated in NM through NM heartbeat response
if|if
condition|(
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|response
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|response
operator|.
name|getContainersToUpdate
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyMetrics (QueueMetrics metrics, long availableMB, int availableVirtualCores, long allocatedMB, int allocatedVirtualCores, int allocatedContainers)
specifier|private
name|void
name|verifyMetrics
parameter_list|(
name|QueueMetrics
name|metrics
parameter_list|,
name|long
name|availableMB
parameter_list|,
name|int
name|availableVirtualCores
parameter_list|,
name|long
name|allocatedMB
parameter_list|,
name|int
name|allocatedVirtualCores
parameter_list|,
name|int
name|allocatedContainers
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|availableMB
argument_list|,
name|metrics
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|availableVirtualCores
argument_list|,
name|metrics
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocatedMB
argument_list|,
name|metrics
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocatedVirtualCores
argument_list|,
name|metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allocatedContainers
argument_list|,
name|metrics
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNodeRemovalDuringAllocate ()
specifier|public
name|void
name|testNodeRemovalDuringAllocate
parameter_list|()
throws|throws
name|Exception
block|{
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"h1:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"h2:1234"
argument_list|,
literal|4096
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|OpportunisticContainerAllocatorAMService
name|amservice
init|=
operator|(
name|OpportunisticContainerAllocatorAMService
operator|)
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rmNode1
operator|)
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|getOppurtunisticStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMNodeImpl
operator|)
name|rmNode2
operator|)
operator|.
name|setOpportunisticContainersStatus
argument_list|(
name|getOppurtunisticStatus
argument_list|(
operator|-
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|OpportunisticContainerContext
name|ctxt
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getOpportunisticContainerContext
argument_list|()
decl_stmt|;
comment|// Send add and update node events to AM Service.
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|amservice
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Both node 1 and node 2 will be applicable for scheduling.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctxt
operator|.
name|getNodeMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ctxt
operator|.
name|getNodeMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove node from scheduler but not from AM Service.
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// After removal of node 1, only 1 node will be applicable for scheduling.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|am1
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Allocate request should be handled on node removal"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ctxt
operator|.
name|getNodeMap
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ctxt
operator|.
name|getNodeMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getOppurtunisticStatus (int waitTime, int queueLength)
specifier|private
name|OpportunisticContainersStatus
name|getOppurtunisticStatus
parameter_list|(
name|int
name|waitTime
parameter_list|,
name|int
name|queueLength
parameter_list|)
block|{
name|OpportunisticContainersStatus
name|status1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OpportunisticContainersStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|status1
operator|.
name|getEstimatedQueueWaitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|status1
operator|.
name|getWaitQueueLength
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueLength
argument_list|)
expr_stmt|;
return|return
name|status1
return|;
block|}
comment|// Test if the OpportunisticContainerAllocatorAMService can handle both
comment|// DSProtocol as well as AMProtocol clients
annotation|@
name|Test
DECL|method|testRPCWrapping ()
specifier|public
name|void
name|testRPCWrapping
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|IPC_RPC_IMPL
argument_list|,
name|HadoopYarnProtoRPC
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|bindAddr
init|=
literal|"localhost:0"
decl_stmt|;
name|InetSocketAddress
name|addr
init|=
name|NetUtils
operator|.
name|createSocketAddr
argument_list|(
name|bindAddr
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ADDRESS
argument_list|,
name|addr
argument_list|)
expr_stmt|;
specifier|final
name|RecordFactory
name|factory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|RMContext
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AMLivelinessMonitor
name|getAMLivelinessMonitor
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getYarnConfiguration
parameter_list|()
block|{
return|return
operator|new
name|YarnConfiguration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RMContainerTokenSecretManager
name|getContainerTokenSecretManager
parameter_list|()
block|{
return|return
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ResourceScheduler
name|getScheduler
parameter_list|()
block|{
return|return
operator|new
name|FifoScheduler
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|Container
name|c
init|=
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|c
operator|.
name|setExecutionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
expr_stmt|;
name|c
operator|.
name|setId
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|AllocateRequest
name|allReq
init|=
operator|(
name|AllocateRequestPBImpl
operator|)
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|allReq
operator|.
name|setAskList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|UNDEFINED
argument_list|,
literal|"a"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|"exp"
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|OpportunisticContainerAllocatorAMService
name|service
init|=
name|createService
argument_list|(
name|factory
argument_list|,
name|rmContext
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|DIST_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Server
name|server
init|=
name|service
operator|.
name|getServer
argument_list|(
name|rpc
argument_list|,
name|conf
argument_list|,
name|addr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Verify that the OpportunisticContainerAllocatorAMSercvice can handle
comment|// vanilla ApplicationMasterProtocol clients
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|ApplicationMasterProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|ApplicationMasterProtocolPB
name|ampProxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|ApplicationMasterProtocolPB
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterResponse
name|regResp
init|=
operator|new
name|RegisterApplicationMasterResponsePBImpl
argument_list|(
name|ampProxy
operator|.
name|registerApplicationMaster
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|RegisterApplicationMasterRequestPBImpl
operator|)
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"dummyQueue"
argument_list|,
name|regResp
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|finishResp
init|=
operator|new
name|FinishApplicationMasterResponsePBImpl
argument_list|(
name|ampProxy
operator|.
name|finishApplicationMaster
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|FinishApplicationMasterRequestPBImpl
operator|)
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|finishResp
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResp
init|=
operator|new
name|AllocateResponsePBImpl
argument_list|(
name|ampProxy
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|AllocateRequestPBImpl
operator|)
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|allocResp
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12345
argument_list|,
name|allocResp
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the DistrubutedSchedulingService can handle the
comment|// DistributedSchedulingAMProtocol clients as well
name|RPC
operator|.
name|setProtocolEngine
argument_list|(
name|conf
argument_list|,
name|DistributedSchedulingAMProtocolPB
operator|.
name|class
argument_list|,
name|ProtobufRpcEngine
operator|.
name|class
argument_list|)
expr_stmt|;
name|DistributedSchedulingAMProtocolPB
name|dsProxy
init|=
name|RPC
operator|.
name|getProxy
argument_list|(
name|DistributedSchedulingAMProtocolPB
operator|.
name|class
argument_list|,
literal|1
argument_list|,
name|NetUtils
operator|.
name|getConnectAddress
argument_list|(
name|server
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RegisterDistributedSchedulingAMResponse
name|dsRegResp
init|=
operator|new
name|RegisterDistributedSchedulingAMResponsePBImpl
argument_list|(
name|dsProxy
operator|.
name|registerApplicationMasterForDistributedScheduling
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|RegisterApplicationMasterRequestPBImpl
operator|)
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|54321l
argument_list|,
name|dsRegResp
operator|.
name|getContainerIdStart
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dsRegResp
operator|.
name|getMaxContainerResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|dsRegResp
operator|.
name|getMinContainerResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|dsRegResp
operator|.
name|getIncrContainerResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedSchedulingAllocateRequestPBImpl
name|distAllReq
init|=
operator|(
name|DistributedSchedulingAllocateRequestPBImpl
operator|)
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|DistributedSchedulingAllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|distAllReq
operator|.
name|setAllocateRequest
argument_list|(
name|allReq
argument_list|)
expr_stmt|;
name|distAllReq
operator|.
name|setAllocatedContainers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|DistributedSchedulingAllocateResponse
name|dsAllocResp
init|=
operator|new
name|DistributedSchedulingAllocateResponsePBImpl
argument_list|(
name|dsProxy
operator|.
name|allocateForDistributedScheduling
argument_list|(
literal|null
argument_list|,
name|distAllReq
operator|.
name|getProto
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"h1"
argument_list|,
name|dsAllocResp
operator|.
name|getNodesForScheduling
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"l1"
argument_list|,
name|dsAllocResp
operator|.
name|getNodesForScheduling
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodePartition
argument_list|()
argument_list|)
expr_stmt|;
name|FinishApplicationMasterResponse
name|dsfinishResp
init|=
operator|new
name|FinishApplicationMasterResponsePBImpl
argument_list|(
name|dsProxy
operator|.
name|finishApplicationMaster
argument_list|(
literal|null
argument_list|,
operator|(
operator|(
name|FinishApplicationMasterRequestPBImpl
operator|)
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
operator|)
operator|.
name|getProto
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|dsfinishResp
operator|.
name|getIsUnregistered
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createService ( final RecordFactory factory, final RMContext rmContext, final Container c)
specifier|private
name|OpportunisticContainerAllocatorAMService
name|createService
parameter_list|(
specifier|final
name|RecordFactory
name|factory
parameter_list|,
specifier|final
name|RMContext
name|rmContext
parameter_list|,
specifier|final
name|Container
name|c
parameter_list|)
block|{
return|return
operator|new
name|OpportunisticContainerAllocatorAMService
argument_list|(
name|rmContext
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RegisterApplicationMasterResponse
name|registerApplicationMaster
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RegisterApplicationMasterResponse
name|resp
init|=
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterApplicationMasterResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Dummy Entry to Assert that we get this object back
name|resp
operator|.
name|setQueue
argument_list|(
literal|"dummyQueue"
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|FinishApplicationMasterResponse
name|finishApplicationMaster
parameter_list|(
name|FinishApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|FinishApplicationMasterResponse
name|resp
init|=
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|FinishApplicationMasterResponse
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Dummy Entry to Assert that we get this object back
name|resp
operator|.
name|setIsUnregistered
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|AllocateResponse
name|allocate
parameter_list|(
name|AllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|AllocateResponse
name|response
init|=
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|AllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|response
operator|.
name|setNumClusterNodes
argument_list|(
literal|12345
argument_list|)
expr_stmt|;
name|response
operator|.
name|setAllocatedContainers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegisterDistributedSchedulingAMResponse
name|registerApplicationMasterForDistributedScheduling
parameter_list|(
name|RegisterApplicationMasterRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|RegisterDistributedSchedulingAMResponse
name|resp
init|=
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterDistributedSchedulingAMResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|resp
operator|.
name|setContainerIdStart
argument_list|(
literal|54321L
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setMaxContainerResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setMinContainerResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setIncrContainerResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
annotation|@
name|Override
specifier|public
name|DistributedSchedulingAllocateResponse
name|allocateForDistributedScheduling
parameter_list|(
name|DistributedSchedulingAllocateRequest
name|request
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|askList
init|=
name|request
operator|.
name|getAllocateRequest
argument_list|()
operator|.
name|getAskList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|request
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocatedContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|askList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|askList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExecutionTypeRequest
argument_list|()
operator|.
name|getEnforceExecutionType
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedSchedulingAllocateResponse
name|resp
init|=
name|factory
operator|.
name|newRecordInstance
argument_list|(
name|DistributedSchedulingAllocateResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|RemoteNode
name|remoteNode1
init|=
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"http://h1:4321"
argument_list|)
decl_stmt|;
name|RemoteNode
name|remoteNode2
init|=
name|RemoteNode
operator|.
name|newInstance
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h2"
argument_list|,
literal|1234
argument_list|)
argument_list|,
literal|"http://h2:4321"
argument_list|)
decl_stmt|;
name|remoteNode2
operator|.
name|setNodePartition
argument_list|(
literal|"l1"
argument_list|)
expr_stmt|;
name|resp
operator|.
name|setNodesForScheduling
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|remoteNode1
argument_list|,
name|remoteNode2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|resp
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

