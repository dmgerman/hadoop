begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|http
operator|.
name|JettyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GenericExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|GuiceServletConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|JerseyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|WebServicesTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jettison
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|ServletModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|WebResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|guice
operator|.
name|spi
operator|.
name|container
operator|.
name|servlet
operator|.
name|GuiceContainer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|test
operator|.
name|framework
operator|.
name|WebAppDescriptor
import|;
end_import

begin_class
DECL|class|TestRMWebServicesCapacitySched
specifier|public
class|class
name|TestRMWebServicesCapacitySched
extends|extends
name|JerseyTestBase
block|{
DECL|field|rm
specifier|protected
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|csConf
specifier|protected
specifier|static
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|conf
specifier|protected
specifier|static
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|class|QueueInfo
specifier|private
class|class
name|QueueInfo
block|{
DECL|field|capacity
name|float
name|capacity
decl_stmt|;
DECL|field|usedCapacity
name|float
name|usedCapacity
decl_stmt|;
DECL|field|maxCapacity
name|float
name|maxCapacity
decl_stmt|;
DECL|field|absoluteCapacity
name|float
name|absoluteCapacity
decl_stmt|;
DECL|field|absoluteMaxCapacity
name|float
name|absoluteMaxCapacity
decl_stmt|;
DECL|field|absoluteUsedCapacity
name|float
name|absoluteUsedCapacity
decl_stmt|;
DECL|field|numApplications
name|int
name|numApplications
decl_stmt|;
DECL|field|queueName
name|String
name|queueName
decl_stmt|;
DECL|field|state
name|String
name|state
decl_stmt|;
block|}
DECL|class|LeafQueueInfo
specifier|private
class|class
name|LeafQueueInfo
extends|extends
name|QueueInfo
block|{
DECL|field|numActiveApplications
name|int
name|numActiveApplications
decl_stmt|;
DECL|field|numPendingApplications
name|int
name|numPendingApplications
decl_stmt|;
DECL|field|numContainers
name|int
name|numContainers
decl_stmt|;
DECL|field|maxApplications
name|int
name|maxApplications
decl_stmt|;
DECL|field|maxApplicationsPerUser
name|int
name|maxApplicationsPerUser
decl_stmt|;
DECL|field|userLimit
name|int
name|userLimit
decl_stmt|;
DECL|field|userLimitFactor
name|float
name|userLimitFactor
decl_stmt|;
block|}
DECL|class|WebServletModule
specifier|private
specifier|static
class|class
name|WebServletModule
extends|extends
name|ServletModule
block|{
annotation|@
name|Override
DECL|method|configureServlets ()
specifier|protected
name|void
name|configureServlets
parameter_list|()
block|{
name|bind
argument_list|(
name|JAXBContextResolver
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|RMWebServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GenericExceptionHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|serve
argument_list|(
literal|"/*"
argument_list|)
operator|.
name|with
argument_list|(
name|GuiceContainer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
static|static
block|{
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueueConfiguration ( CapacitySchedulerConfiguration config)
specifier|private
specifier|static
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|config
parameter_list|)
block|{
comment|// Define top-level queues
name|config
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10.5f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|50
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|89.5f
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|config
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|config
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUserLimitFactor
argument_list|(
name|A1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUserLimitFactor
argument_list|(
name|A2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
name|config
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUserLimitFactor
argument_list|(
name|B1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
literal|39.5f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUserLimitFactor
argument_list|(
name|B2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setUserLimitFactor
argument_list|(
name|B3
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|config
operator|.
name|setQueues
argument_list|(
name|A1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1a"
block|,
literal|"a1b"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A1A
init|=
name|A1
operator|+
literal|".a1a"
decl_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|A1A
argument_list|,
literal|85
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A1B
init|=
name|A1
operator|+
literal|".a1b"
decl_stmt|;
name|config
operator|.
name|setCapacity
argument_list|(
name|A1B
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|GuiceServletConfig
operator|.
name|setInjector
argument_list|(
name|Guice
operator|.
name|createInjector
argument_list|(
operator|new
name|WebServletModule
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TestRMWebServicesCapacitySched ()
specifier|public
name|TestRMWebServicesCapacitySched
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|WebAppDescriptor
operator|.
name|Builder
argument_list|(
literal|"org.apache.hadoop.yarn.server.resourcemanager.webapp"
argument_list|)
operator|.
name|contextListenerClass
argument_list|(
name|GuiceServletConfig
operator|.
name|class
argument_list|)
operator|.
name|filterClass
argument_list|(
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
operator|.
name|class
argument_list|)
operator|.
name|contextPath
argument_list|(
literal|"jersey-guice-filter"
argument_list|)
operator|.
name|servletPath
argument_list|(
literal|"/"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterScheduler ()
specifier|public
name|void
name|testClusterScheduler
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterScheduler
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerSlash ()
specifier|public
name|void
name|testClusterSchedulerSlash
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterScheduler
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerDefault ()
specifier|public
name|void
name|testClusterSchedulerDefault
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|verifyClusterScheduler
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterSchedulerXML ()
specifier|public
name|void
name|testClusterSchedulerXML
parameter_list|()
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|NodeList
name|scheduler
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"scheduler"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|scheduler
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|schedulerInfo
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"schedulerInfo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|schedulerInfo
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|verifyClusterSchedulerXML
argument_list|(
name|schedulerInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyClusterSchedulerXML (NodeList nodes)
specifier|public
name|void
name|verifyClusterSchedulerXML
parameter_list|(
name|NodeList
name|nodes
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|verifyClusterSchedulerGeneric
argument_list|(
name|WebServicesTestUtils
operator|.
name|getXmlAttrString
argument_list|(
name|element
argument_list|,
literal|"xsi:type"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"usedCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"capacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|element
argument_list|,
literal|"maxCapacity"
argument_list|)
argument_list|,
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|element
argument_list|,
literal|"queueName"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeList
name|children
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|qElem
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|qElem
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|NodeList
name|qListInfos
init|=
name|qElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|qListInfos
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Element
name|qElem2
init|=
operator|(
name|Element
operator|)
name|qListInfos
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|qName2
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem2
argument_list|,
literal|"queueName"
argument_list|)
decl_stmt|;
name|String
name|q2
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|qName2
decl_stmt|;
name|verifySubQueueXML
argument_list|(
name|qElem2
argument_list|,
name|q2
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|verifySubQueueXML (Element qElem, String q, float parentAbsCapacity, float parentAbsMaxCapacity)
specifier|public
name|void
name|verifySubQueueXML
parameter_list|(
name|Element
name|qElem
parameter_list|,
name|String
name|q
parameter_list|,
name|float
name|parentAbsCapacity
parameter_list|,
name|float
name|parentAbsMaxCapacity
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeList
name|children
init|=
name|qElem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|boolean
name|hasSubQueues
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|qElem2
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|qElem2
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|NodeList
name|qListInfos
init|=
name|qElem2
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|qListInfos
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|hasSubQueues
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|QueueInfo
name|qi
init|=
operator|(
name|hasSubQueues
operator|)
condition|?
operator|new
name|QueueInfo
argument_list|()
else|:
operator|new
name|LeafQueueInfo
argument_list|()
decl_stmt|;
name|qi
operator|.
name|capacity
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|qElem
argument_list|,
literal|"capacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|usedCapacity
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|qElem
argument_list|,
literal|"usedCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|maxCapacity
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|qElem
argument_list|,
literal|"maxCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|absoluteCapacity
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|qElem
argument_list|,
literal|"absoluteCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|absoluteMaxCapacity
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|qElem
argument_list|,
literal|"absoluteMaxCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|absoluteUsedCapacity
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|qElem
argument_list|,
literal|"absoluteUsedCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|numApplications
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|qElem
argument_list|,
literal|"numApplications"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|queueName
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem
argument_list|,
literal|"queueName"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|state
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
name|verifySubQueueGeneric
argument_list|(
name|q
argument_list|,
name|qi
argument_list|,
name|parentAbsCapacity
argument_list|,
name|parentAbsMaxCapacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSubQueues
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|qElem2
init|=
operator|(
name|Element
operator|)
name|children
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|qElem2
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|NodeList
name|qListInfos
init|=
name|qElem2
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|qListInfos
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Element
name|qElem3
init|=
operator|(
name|Element
operator|)
name|qListInfos
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|String
name|qName3
init|=
name|WebServicesTestUtils
operator|.
name|getXmlString
argument_list|(
name|qElem3
argument_list|,
literal|"queueName"
argument_list|)
decl_stmt|;
name|String
name|q3
init|=
name|q
operator|+
literal|"."
operator|+
name|qName3
decl_stmt|;
name|verifySubQueueXML
argument_list|(
name|qElem3
argument_list|,
name|q3
argument_list|,
name|qi
operator|.
name|absoluteCapacity
argument_list|,
name|qi
operator|.
name|absoluteMaxCapacity
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|LeafQueueInfo
name|lqi
init|=
operator|(
name|LeafQueueInfo
operator|)
name|qi
decl_stmt|;
name|lqi
operator|.
name|numActiveApplications
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|qElem
argument_list|,
literal|"numActiveApplications"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|numPendingApplications
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|qElem
argument_list|,
literal|"numPendingApplications"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|numContainers
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|qElem
argument_list|,
literal|"numContainers"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|maxApplications
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|qElem
argument_list|,
literal|"maxApplications"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|maxApplicationsPerUser
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|qElem
argument_list|,
literal|"maxApplicationsPerUser"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|userLimit
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlInt
argument_list|(
name|qElem
argument_list|,
literal|"userLimit"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|userLimitFactor
operator|=
name|WebServicesTestUtils
operator|.
name|getXmlFloat
argument_list|(
name|qElem
argument_list|,
literal|"userLimitFactor"
argument_list|)
expr_stmt|;
name|verifyLeafQueueGeneric
argument_list|(
name|q
argument_list|,
name|lqi
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyClusterScheduler (JSONObject json)
specifier|private
name|void
name|verifyClusterScheduler
parameter_list|(
name|JSONObject
name|json
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|json
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|info
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"scheduler"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|1
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"schedulerInfo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|8
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|verifyClusterSchedulerGeneric
argument_list|(
name|info
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"usedCapacity"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"capacity"
argument_list|)
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"maxCapacity"
argument_list|)
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"queueName"
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|health
init|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"health"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|health
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|3
argument_list|,
name|health
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|JSONArray
name|arr
init|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"queues"
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
literal|2
argument_list|,
name|arr
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// test subqueues
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|obj
init|=
name|arr
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|q
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|obj
operator|.
name|getString
argument_list|(
literal|"queueName"
argument_list|)
decl_stmt|;
name|verifySubQueue
argument_list|(
name|obj
argument_list|,
name|q
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyClusterSchedulerGeneric (String type, float usedCapacity, float capacity, float maxCapacity, String queueName)
specifier|private
name|void
name|verifyClusterSchedulerGeneric
parameter_list|(
name|String
name|type
parameter_list|,
name|float
name|usedCapacity
parameter_list|,
name|float
name|capacity
parameter_list|,
name|float
name|maxCapacity
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"type doesn't match"
argument_list|,
literal|"capacityScheduler"
operator|.
name|matches
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"usedCapacity doesn't match"
argument_list|,
literal|0
argument_list|,
name|usedCapacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
literal|100
argument_list|,
name|capacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maxCapacity doesn't match"
argument_list|,
literal|100
argument_list|,
name|maxCapacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"queueName doesn't match"
argument_list|,
literal|"root"
operator|.
name|matches
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifySubQueue (JSONObject info, String q, float parentAbsCapacity, float parentAbsMaxCapacity)
specifier|private
name|void
name|verifySubQueue
parameter_list|(
name|JSONObject
name|info
parameter_list|,
name|String
name|q
parameter_list|,
name|float
name|parentAbsCapacity
parameter_list|,
name|float
name|parentAbsMaxCapacity
parameter_list|)
throws|throws
name|JSONException
throws|,
name|Exception
block|{
name|int
name|numExpectedElements
init|=
literal|20
decl_stmt|;
name|boolean
name|isParentQueue
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|has
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|numExpectedElements
operator|=
literal|33
expr_stmt|;
name|isParentQueue
operator|=
literal|false
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"incorrect number of elements"
argument_list|,
name|numExpectedElements
argument_list|,
name|info
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QueueInfo
name|qi
init|=
name|isParentQueue
condition|?
operator|new
name|QueueInfo
argument_list|()
else|:
operator|new
name|LeafQueueInfo
argument_list|()
decl_stmt|;
name|qi
operator|.
name|capacity
operator|=
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"capacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|usedCapacity
operator|=
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"usedCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|maxCapacity
operator|=
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"maxCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|absoluteCapacity
operator|=
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"absoluteCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|absoluteMaxCapacity
operator|=
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"absoluteMaxCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|absoluteUsedCapacity
operator|=
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"absoluteUsedCapacity"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|numApplications
operator|=
name|info
operator|.
name|getInt
argument_list|(
literal|"numApplications"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|queueName
operator|=
name|info
operator|.
name|getString
argument_list|(
literal|"queueName"
argument_list|)
expr_stmt|;
name|qi
operator|.
name|state
operator|=
name|info
operator|.
name|getString
argument_list|(
literal|"state"
argument_list|)
expr_stmt|;
name|verifySubQueueGeneric
argument_list|(
name|q
argument_list|,
name|qi
argument_list|,
name|parentAbsCapacity
argument_list|,
name|parentAbsMaxCapacity
argument_list|)
expr_stmt|;
if|if
condition|(
name|isParentQueue
condition|)
block|{
name|JSONArray
name|arr
init|=
name|info
operator|.
name|getJSONObject
argument_list|(
literal|"queues"
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
comment|// test subqueues
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|obj
init|=
name|arr
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|q2
init|=
name|q
operator|+
literal|"."
operator|+
name|obj
operator|.
name|getString
argument_list|(
literal|"queueName"
argument_list|)
decl_stmt|;
name|verifySubQueue
argument_list|(
name|obj
argument_list|,
name|q2
argument_list|,
name|qi
operator|.
name|absoluteCapacity
argument_list|,
name|qi
operator|.
name|absoluteMaxCapacity
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"\"type\" field is incorrect"
argument_list|,
literal|"capacitySchedulerLeafQueueInfo"
argument_list|,
name|info
operator|.
name|getString
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|LeafQueueInfo
name|lqi
init|=
operator|(
name|LeafQueueInfo
operator|)
name|qi
decl_stmt|;
name|lqi
operator|.
name|numActiveApplications
operator|=
name|info
operator|.
name|getInt
argument_list|(
literal|"numActiveApplications"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|numPendingApplications
operator|=
name|info
operator|.
name|getInt
argument_list|(
literal|"numPendingApplications"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|numContainers
operator|=
name|info
operator|.
name|getInt
argument_list|(
literal|"numContainers"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|maxApplications
operator|=
name|info
operator|.
name|getInt
argument_list|(
literal|"maxApplications"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|maxApplicationsPerUser
operator|=
name|info
operator|.
name|getInt
argument_list|(
literal|"maxApplicationsPerUser"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|userLimit
operator|=
name|info
operator|.
name|getInt
argument_list|(
literal|"userLimit"
argument_list|)
expr_stmt|;
name|lqi
operator|.
name|userLimitFactor
operator|=
operator|(
name|float
operator|)
name|info
operator|.
name|getDouble
argument_list|(
literal|"userLimitFactor"
argument_list|)
expr_stmt|;
name|verifyLeafQueueGeneric
argument_list|(
name|q
argument_list|,
name|lqi
argument_list|)
expr_stmt|;
comment|// resourcesUsed and users (per-user resources used) are checked in
comment|// testPerUserResource()
block|}
block|}
DECL|method|verifySubQueueGeneric (String q, QueueInfo info, float parentAbsCapacity, float parentAbsMaxCapacity)
specifier|private
name|void
name|verifySubQueueGeneric
parameter_list|(
name|String
name|q
parameter_list|,
name|QueueInfo
name|info
parameter_list|,
name|float
name|parentAbsCapacity
parameter_list|,
name|float
name|parentAbsMaxCapacity
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|qArr
init|=
name|q
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"q name invalid: "
operator|+
name|q
argument_list|,
name|qArr
operator|.
name|length
operator|>
literal|1
argument_list|)
expr_stmt|;
name|String
name|qshortName
init|=
name|qArr
index|[
name|qArr
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"usedCapacity doesn't match"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|usedCapacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"capacity doesn't match"
argument_list|,
name|csConf
operator|.
name|getNonLabeledQueueCapacity
argument_list|(
name|q
argument_list|)
argument_list|,
name|info
operator|.
name|capacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|float
name|expectCapacity
init|=
name|csConf
operator|.
name|getNonLabeledQueueMaximumCapacity
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|float
name|expectAbsMaxCapacity
init|=
name|parentAbsMaxCapacity
operator|*
operator|(
name|info
operator|.
name|maxCapacity
operator|/
literal|100
operator|)
decl_stmt|;
if|if
condition|(
name|CapacitySchedulerConfiguration
operator|.
name|UNDEFINED
operator|==
name|expectCapacity
condition|)
block|{
name|expectCapacity
operator|=
literal|100
expr_stmt|;
name|expectAbsMaxCapacity
operator|=
literal|100
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"maxCapacity doesn't match"
argument_list|,
name|expectCapacity
argument_list|,
name|info
operator|.
name|maxCapacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"absoluteCapacity doesn't match"
argument_list|,
name|parentAbsCapacity
operator|*
operator|(
name|info
operator|.
name|capacity
operator|/
literal|100
operator|)
argument_list|,
name|info
operator|.
name|absoluteCapacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"absoluteMaxCapacity doesn't match"
argument_list|,
name|expectAbsMaxCapacity
argument_list|,
name|info
operator|.
name|absoluteMaxCapacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"absoluteUsedCapacity doesn't match"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|absoluteUsedCapacity
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numApplications doesn't match"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|numApplications
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"queueName doesn't match, got: "
operator|+
name|info
operator|.
name|queueName
operator|+
literal|" expected: "
operator|+
name|q
argument_list|,
name|qshortName
operator|.
name|matches
argument_list|(
name|info
operator|.
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"state doesn't match"
argument_list|,
operator|(
name|csConf
operator|.
name|getState
argument_list|(
name|q
argument_list|)
operator|.
name|toString
argument_list|()
operator|)
operator|.
name|matches
argument_list|(
name|info
operator|.
name|state
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLeafQueueGeneric (String q, LeafQueueInfo info)
specifier|private
name|void
name|verifyLeafQueueGeneric
parameter_list|(
name|String
name|q
parameter_list|,
name|LeafQueueInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"numActiveApplications doesn't match"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|numActiveApplications
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numPendingApplications doesn't match"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|numPendingApplications
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"numContainers doesn't match"
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|numContainers
argument_list|)
expr_stmt|;
name|int
name|maxSystemApps
init|=
name|csConf
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|int
name|expectedMaxApps
init|=
call|(
name|int
call|)
argument_list|(
name|maxSystemApps
operator|*
operator|(
name|info
operator|.
name|absoluteCapacity
operator|/
literal|100
operator|)
argument_list|)
decl_stmt|;
name|int
name|expectedMaxAppsPerUser
init|=
name|Math
operator|.
name|min
argument_list|(
name|expectedMaxApps
argument_list|,
call|(
name|int
call|)
argument_list|(
name|expectedMaxApps
operator|*
operator|(
name|info
operator|.
name|userLimit
operator|/
literal|100.0f
operator|)
operator|*
name|info
operator|.
name|userLimitFactor
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO: would like to use integer comparisons here but can't due to
comment|//       roundoff errors in absolute capacity calculations
name|assertEquals
argument_list|(
literal|"maxApplications doesn't match"
argument_list|,
operator|(
name|float
operator|)
name|expectedMaxApps
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|maxApplications
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maxApplicationsPerUser doesn't match"
argument_list|,
operator|(
name|float
operator|)
name|expectedMaxAppsPerUser
argument_list|,
operator|(
name|float
operator|)
name|info
operator|.
name|maxApplicationsPerUser
argument_list|,
name|info
operator|.
name|userLimitFactor
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userLimit doesn't match"
argument_list|,
name|csConf
operator|.
name|getUserLimit
argument_list|(
name|q
argument_list|)
argument_list|,
name|info
operator|.
name|userLimit
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"userLimitFactor doesn't match"
argument_list|,
name|csConf
operator|.
name|getUserLimitFactor
argument_list|(
name|q
argument_list|)
argument_list|,
name|info
operator|.
name|userLimitFactor
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
block|}
comment|//Return a child Node of node with the tagname or null if none exists
DECL|method|getChildNodeByName (Node node, String tagname)
specifier|private
name|Node
name|getChildNodeByName
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|tagname
parameter_list|)
block|{
name|NodeList
name|nodeList
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeList
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|tagname
argument_list|)
condition|)
block|{
return|return
name|nodeList
operator|.
name|item
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Test per user resources and resourcesUsed elements in the web services XML    * @throws Exception    */
annotation|@
name|Test
DECL|method|testPerUserResourcesXML ()
specifier|public
name|void
name|testPerUserResourcesXML
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Start RM so that it accepts app submissions
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|submitApp
argument_list|(
literal|10
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|20
argument_list|,
literal|"app2"
argument_list|,
literal|"user2"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
comment|//Get the XML from ws/v1/cluster/scheduler
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws/v1/cluster/scheduler"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_XML_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|xml
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setCharacterStream
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
argument_list|)
expr_stmt|;
comment|//Parse the XML we got
name|Document
name|dom
init|=
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
comment|//Get all users elements (1 for each leaf queue)
name|NodeList
name|allUsers
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allUsers
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Node
name|perUserResources
init|=
name|allUsers
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
name|getChildNodeByName
argument_list|(
name|perUserResources
operator|.
name|getParentNode
argument_list|()
argument_list|,
literal|"queueName"
argument_list|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
literal|"b1"
argument_list|)
condition|)
block|{
comment|//b1 should have two users (user1 and user2) which submitted jobs
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|perUserResources
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|NodeList
name|users
init|=
name|perUserResources
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|users
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|Node
name|user
init|=
name|users
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|getChildNodeByName
argument_list|(
name|user
argument_list|,
literal|"username"
argument_list|)
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|username
operator|.
name|equals
argument_list|(
literal|"user1"
argument_list|)
operator|||
name|username
operator|.
name|equals
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Should be a parsable integer
name|Integer
operator|.
name|parseInt
argument_list|(
name|getChildNodeByName
argument_list|(
name|getChildNodeByName
argument_list|(
name|user
argument_list|,
literal|"resourcesUsed"
argument_list|)
argument_list|,
literal|"memory"
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|getChildNodeByName
argument_list|(
name|user
argument_list|,
literal|"numActiveApplications"
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|getChildNodeByName
argument_list|(
name|user
argument_list|,
literal|"numPendingApplications"
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Queues other than b1 should have 0 users
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|perUserResources
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeList
name|allResourcesUsed
init|=
name|dom
operator|.
name|getElementsByTagName
argument_list|(
literal|"resourcesUsed"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allResourcesUsed
operator|.
name|getLength
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Node
name|resourcesUsed
init|=
name|allResourcesUsed
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|getChildNodeByName
argument_list|(
name|resourcesUsed
argument_list|,
literal|"memory"
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|getChildNodeByName
argument_list|(
name|resourcesUsed
argument_list|,
literal|"vCores"
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|checkResourcesUsed (JSONObject queue)
specifier|private
name|void
name|checkResourcesUsed
parameter_list|(
name|JSONObject
name|queue
parameter_list|)
throws|throws
name|JSONException
block|{
name|queue
operator|.
name|getJSONObject
argument_list|(
literal|"resourcesUsed"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|"memory"
argument_list|)
expr_stmt|;
name|queue
operator|.
name|getJSONObject
argument_list|(
literal|"resourcesUsed"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|"vCores"
argument_list|)
expr_stmt|;
block|}
comment|//Also checks resourcesUsed
DECL|method|getSubQueue (JSONObject queue, String subQueue)
specifier|private
name|JSONObject
name|getSubQueue
parameter_list|(
name|JSONObject
name|queue
parameter_list|,
name|String
name|subQueue
parameter_list|)
throws|throws
name|JSONException
block|{
name|JSONArray
name|queues
init|=
name|queue
operator|.
name|getJSONObject
argument_list|(
literal|"queues"
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"queue"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queues
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|checkResourcesUsed
argument_list|(
name|queues
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|queues
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
operator|.
name|getString
argument_list|(
literal|"queueName"
argument_list|)
operator|.
name|equals
argument_list|(
name|subQueue
argument_list|)
condition|)
block|{
return|return
name|queues
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
DECL|method|testPerUserResourcesJSON ()
specifier|public
name|void
name|testPerUserResourcesJSON
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Start RM so that it accepts app submissions
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|submitApp
argument_list|(
literal|10
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|submitApp
argument_list|(
literal|20
argument_list|,
literal|"app2"
argument_list|,
literal|"user2"
argument_list|,
literal|null
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
comment|//Get JSON
name|WebResource
name|r
init|=
name|resource
argument_list|()
decl_stmt|;
name|ClientResponse
name|response
init|=
name|r
operator|.
name|path
argument_list|(
literal|"ws"
argument_list|)
operator|.
name|path
argument_list|(
literal|"v1"
argument_list|)
operator|.
name|path
argument_list|(
literal|"cluster"
argument_list|)
operator|.
name|path
argument_list|(
literal|"scheduler/"
argument_list|)
operator|.
name|accept
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON
argument_list|)
operator|.
name|get
argument_list|(
name|ClientResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MediaType
operator|.
name|APPLICATION_JSON_TYPE
operator|+
literal|"; "
operator|+
name|JettyUtils
operator|.
name|UTF_8
argument_list|,
name|response
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|JSONObject
name|json
init|=
name|response
operator|.
name|getEntity
argument_list|(
name|JSONObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|JSONObject
name|schedulerInfo
init|=
name|json
operator|.
name|getJSONObject
argument_list|(
literal|"scheduler"
argument_list|)
operator|.
name|getJSONObject
argument_list|(
literal|"schedulerInfo"
argument_list|)
decl_stmt|;
name|JSONObject
name|b1
init|=
name|getSubQueue
argument_list|(
name|getSubQueue
argument_list|(
name|schedulerInfo
argument_list|,
literal|"b"
argument_list|)
argument_list|,
literal|"b1"
argument_list|)
decl_stmt|;
comment|//Check users user1 and user2 exist in b1
name|JSONArray
name|users
init|=
name|b1
operator|.
name|getJSONObject
argument_list|(
literal|"users"
argument_list|)
operator|.
name|getJSONArray
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|JSONObject
name|user
init|=
name|users
operator|.
name|getJSONObject
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"User isn't user1 or user2"
argument_list|,
name|user
operator|.
name|getString
argument_list|(
literal|"username"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"user1"
argument_list|)
operator|||
name|user
operator|.
name|getString
argument_list|(
literal|"username"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
name|user
operator|.
name|getInt
argument_list|(
literal|"numActiveApplications"
argument_list|)
expr_stmt|;
name|user
operator|.
name|getInt
argument_list|(
literal|"numPendingApplications"
argument_list|)
expr_stmt|;
name|checkResourcesUsed
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
comment|// Verify 'queues' field is omitted from CapacitySchedulerLeafQueueInfo.
try|try
block|{
name|b1
operator|.
name|getJSONObject
argument_list|(
literal|"queues"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"CapacitySchedulerQueueInfo should omit field 'queues'"
operator|+
literal|"if child queue is empty."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|je
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"JSONObject[\"queues\"] not found."
argument_list|,
name|je
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testResourceInfo ()
specifier|public
name|void
name|testResourceInfo
parameter_list|()
block|{
name|Resource
name|res
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// If we add a new resource (e.g disks), then
comment|// CapacitySchedulerPage and these RM WebServices + docs need to be updated
comment|// eg. ResourceInfo
name|assertEquals
argument_list|(
literal|"<memory:10, vCores:1>"
argument_list|,
name|res
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

