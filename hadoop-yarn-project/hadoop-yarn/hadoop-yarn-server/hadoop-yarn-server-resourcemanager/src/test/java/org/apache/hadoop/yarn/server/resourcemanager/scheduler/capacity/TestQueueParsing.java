begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|ServiceOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|MemoryRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_class
DECL|class|TestQueueParsing
specifier|public
class|class
name|TestQueueParsing
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQueueParsing
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|DELTA
specifier|private
specifier|static
specifier|final
name|double
name|DELTA
init|=
literal|0.000001
decl_stmt|;
DECL|field|nodeLabelManager
specifier|private
name|RMNodeLabelsManager
name|nodeLabelManager
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|nodeLabelManager
operator|=
operator|new
name|MemoryRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|nodeLabelManager
operator|.
name|init
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|nodeLabelManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueParsing ()
specifier|public
name|void
name|testQueueParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|capacityScheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|CSQueue
name|a
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.10
argument_list|,
name|a
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.15
argument_list|,
name|a
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|CSQueue
name|b1
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.2
operator|*
literal|0.5
argument_list|,
name|b1
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Parent B has no MAX_CAP"
argument_list|,
literal|0.85
argument_list|,
name|b1
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|CSQueue
name|c12
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"c12"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7
operator|*
literal|0.5
operator|*
literal|0.45
argument_list|,
name|c12
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7
operator|*
literal|0.55
operator|*
literal|0.7
argument_list|,
name|c12
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueueConfiguration (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|15
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|20
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues"
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A2
argument_list|,
literal|85
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B1
argument_list|,
literal|85
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B2
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B3
argument_list|,
literal|35
argument_list|)
expr_stmt|;
specifier|final
name|String
name|C1
init|=
name|C
operator|+
literal|".c1"
decl_stmt|;
specifier|final
name|String
name|C2
init|=
name|C
operator|+
literal|".c2"
decl_stmt|;
specifier|final
name|String
name|C3
init|=
name|C
operator|+
literal|".c3"
decl_stmt|;
specifier|final
name|String
name|C4
init|=
name|C
operator|+
literal|".c4"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|C
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c1"
block|,
literal|"c2"
block|,
literal|"c3"
block|,
literal|"c4"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C1
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C2
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C3
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C3
argument_list|,
literal|38
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup 2nd-level queues"
argument_list|)
expr_stmt|;
comment|// Define 3rd-level queues
specifier|final
name|String
name|C11
init|=
name|C1
operator|+
literal|".c11"
decl_stmt|;
specifier|final
name|String
name|C12
init|=
name|C1
operator|+
literal|".c12"
decl_stmt|;
specifier|final
name|String
name|C13
init|=
name|C1
operator|+
literal|".c13"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|C1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"c11"
block|,
literal|"c12"
block|,
literal|"c13"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C11
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C11
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C12
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C12
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|C13
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|C13
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup 3rd-level queues"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|java
operator|.
name|lang
operator|.
name|IllegalArgumentException
operator|.
name|class
argument_list|)
DECL|method|testRootQueueParsing ()
specifier|public
name|void
name|testRootQueueParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
comment|// non-100 percent value will throw IllegalArgumentException
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|capacityScheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxCapacity ()
specifier|public
name|void
name|testMaxCapacity
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|60
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B
argument_list|,
literal|45
argument_list|)
expr_stmt|;
comment|// Should throw an exception
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
name|CapacityScheduler
name|capacityScheduler
decl_stmt|;
try|try
block|{
name|capacityScheduler
operator|=
operator|new
name|CapacityScheduler
argument_list|()
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|capacityScheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't throw IllegalArgumentException for wrong maxCap"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B
argument_list|,
literal|60
argument_list|)
expr_stmt|;
comment|// Now this should work
name|capacityScheduler
operator|=
operator|new
name|CapacityScheduler
argument_list|()
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|capacityScheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|LeafQueue
name|a
init|=
operator|(
name|LeafQueue
operator|)
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
name|A
argument_list|)
decl_stmt|;
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|45
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Didn't throw IllegalArgumentException for wrong "
operator|+
literal|"setMaxCap"
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|setupQueueConfigurationWithoutLabels (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfigurationWithoutLabels
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|15
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues"
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A2
argument_list|,
literal|85
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B1
argument_list|,
literal|85
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B2
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B3
argument_list|,
literal|35
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueueConfigurationWithLabels (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfigurationWithLabels
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"red"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"blue"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|15
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues"
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"blue"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"blue"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A2
argument_list|,
literal|85
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A2
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A2
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacityByLabel
argument_list|(
name|A2
argument_list|,
literal|"red"
argument_list|,
literal|60
argument_list|)
expr_stmt|;
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"blue"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B1
argument_list|,
literal|85
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B1
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B1
argument_list|,
literal|"blue"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B2
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B2
argument_list|,
literal|"red"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B2
argument_list|,
literal|"blue"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|B3
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B3
argument_list|,
literal|"red"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B3
argument_list|,
literal|"blue"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueueConfigurationWithLabelsInherit ( CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfigurationWithLabelsInherit
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"red"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|"blue"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Set A configuration
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"red"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"blue"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Set B configuraiton
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|CommonNodeLabelsManager
operator|.
name|EMPTY_STRING_SET
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A1
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A1
argument_list|,
literal|"blue"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A2
argument_list|,
literal|85
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A2
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A2
argument_list|,
literal|"red"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueueConfigurationWithSingleLevel ( CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfigurationWithSingleLevel
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Set A configuration
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|A
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"red"
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|A
argument_list|,
literal|"blue"
argument_list|,
literal|90
argument_list|)
expr_stmt|;
comment|// Set B configuraiton
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|B
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"red"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacityByLabel
argument_list|(
name|B
argument_list|,
literal|"blue"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueParsingReinitializeWithLabels ()
specifier|public
name|void
name|testQueueParsingReinitializeWithLabels
parameter_list|()
throws|throws
name|IOException
block|{
name|nodeLabelManager
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfigurationWithoutLabels
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|setupQueueConfigurationWithLabels
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|checkQueueLabels
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueueLabels (CapacityScheduler capacityScheduler)
specifier|private
name|void
name|checkQueueLabels
parameter_list|(
name|CapacityScheduler
name|capacityScheduler
parameter_list|)
block|{
comment|// queue-A is red, blue
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queue-A1 inherits A's configuration
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queue-A2 is "red"
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
literal|"red"
argument_list|)
argument_list|)
expr_stmt|;
comment|// queue-B is "red"/"blue"
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queue-B2 inherits "red"/"blue"
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"b2"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// check capacity of A2
name|CSQueue
name|qA2
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7
argument_list|,
name|qA2
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|qA2
operator|.
name|getCapacityByNodeLabel
argument_list|(
literal|"red"
argument_list|)
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.07
argument_list|,
name|qA2
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.25
argument_list|,
name|qA2
operator|.
name|getAbsoluteCapacityByNodeLabel
argument_list|(
literal|"red"
argument_list|)
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.1275
argument_list|,
name|qA2
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.3
argument_list|,
name|qA2
operator|.
name|getAbsoluteMaximumCapacityByNodeLabel
argument_list|(
literal|"red"
argument_list|)
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
comment|// check capacity of B3
name|CSQueue
name|qB3
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"b3"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.18
argument_list|,
name|qB3
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.125
argument_list|,
name|qB3
operator|.
name|getAbsoluteCapacityByNodeLabel
argument_list|(
literal|"red"
argument_list|)
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.35
argument_list|,
name|qB3
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|qB3
operator|.
name|getAbsoluteMaximumCapacityByNodeLabel
argument_list|(
literal|"red"
argument_list|)
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
DECL|method|checkQueueLabelsInheritConfig (CapacityScheduler capacityScheduler)
name|checkQueueLabelsInheritConfig
parameter_list|(
name|CapacityScheduler
name|capacityScheduler
parameter_list|)
block|{
comment|// queue-A is red, blue
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queue-A1 inherits A's configuration
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|containsAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// queue-A2 is "red"
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|contains
argument_list|(
literal|"red"
argument_list|)
argument_list|)
expr_stmt|;
comment|// queue-B is "red"/"blue"
name|Assert
operator|.
name|assertTrue
argument_list|(
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueParsingWithLabels ()
specifier|public
name|void
name|testQueueParsingWithLabels
parameter_list|()
throws|throws
name|IOException
block|{
name|nodeLabelManager
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfigurationWithLabels
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkQueueLabels
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueParsingWithLabelsInherit ()
specifier|public
name|void
name|testQueueParsingWithLabelsInherit
parameter_list|()
throws|throws
name|IOException
block|{
name|nodeLabelManager
operator|.
name|addToCluserNodeLabels
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfigurationWithLabelsInherit
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkQueueLabelsInheritConfig
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
DECL|method|testQueueParsingWhenLabelsNotExistedInNodeLabelManager ()
specifier|public
name|void
name|testQueueParsingWhenLabelsNotExistedInNodeLabelManager
parameter_list|()
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfigurationWithLabels
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|nodeLabelsManager
init|=
operator|new
name|MemoryRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|nodeLabelsManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeLabelsManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
DECL|method|testQueueParsingWhenLabelsInheritedNotExistedInNodeLabelManager ()
specifier|public
name|void
name|testQueueParsingWhenLabelsInheritedNotExistedInNodeLabelManager
parameter_list|()
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfigurationWithLabelsInherit
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|nodeLabelsManager
init|=
operator|new
name|MemoryRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|nodeLabelsManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeLabelsManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
DECL|method|testSingleLevelQueueParsingWhenLabelsNotExistedInNodeLabelManager ()
specifier|public
name|void
name|testSingleLevelQueueParsingWhenLabelsNotExistedInNodeLabelManager
parameter_list|()
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfigurationWithSingleLevel
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|nodeLabelsManager
init|=
operator|new
name|MemoryRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|nodeLabelsManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeLabelsManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|Exception
operator|.
name|class
argument_list|)
DECL|method|testQueueParsingWhenLabelsNotExist ()
specifier|public
name|void
name|testQueueParsingWhenLabelsNotExist
parameter_list|()
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|setupQueueConfigurationWithLabels
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMNodeLabelsManager
name|nodeLabelsManager
init|=
operator|new
name|MemoryRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|nodeLabelsManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nodeLabelsManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|capacityScheduler
argument_list|)
expr_stmt|;
name|ServiceOperations
operator|.
name|stopQuietly
argument_list|(
name|nodeLabelsManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueParsingWithUnusedLabels ()
specifier|public
name|void
name|testQueueParsingWithUnusedLabels
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|labels
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"red"
argument_list|,
literal|"blue"
argument_list|)
decl_stmt|;
comment|// Initialize a cluster with labels, but doesn't use them, reinitialize
comment|// shouldn't fail
name|nodeLabelManager
operator|.
name|addToCluserNodeLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setAccessibleNodeLabels
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|labels
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|capacityScheduler
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rmContext
operator|.
name|setNodeLabelManager
argument_list|(
name|nodeLabelManager
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|capacityScheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// check root queue's capacity by label -- they should be all zero
name|CSQueue
name|root
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|root
operator|.
name|getCapacityByNodeLabel
argument_list|(
literal|"red"
argument_list|)
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|root
operator|.
name|getCapacityByNodeLabel
argument_list|(
literal|"blue"
argument_list|)
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|CSQueue
name|a
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.10
argument_list|,
name|a
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.15
argument_list|,
name|a
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|CSQueue
name|b1
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.2
operator|*
literal|0.5
argument_list|,
name|b1
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Parent B has no MAX_CAP"
argument_list|,
literal|0.85
argument_list|,
name|b1
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|CSQueue
name|c12
init|=
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
literal|"c12"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7
operator|*
literal|0.5
operator|*
literal|0.45
argument_list|,
name|c12
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.7
operator|*
literal|0.55
operator|*
literal|0.7
argument_list|,
name|c12
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|DELTA
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

