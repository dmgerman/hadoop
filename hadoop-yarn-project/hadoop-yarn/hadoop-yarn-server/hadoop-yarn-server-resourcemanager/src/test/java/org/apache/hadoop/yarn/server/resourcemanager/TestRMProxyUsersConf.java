begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AuthorizationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRMProxyUsersConf
specifier|public
class|class
name|TestRMProxyUsersConf
block|{
DECL|field|FOO_USER
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|FOO_USER
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo_group"
block|}
argument_list|)
decl_stmt|;
DECL|field|BAR_USER
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|BAR_USER
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"bar"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"bar_group"
block|}
argument_list|)
decl_stmt|;
DECL|field|ipAddress
specifier|private
specifier|final
name|String
name|ipAddress
init|=
literal|"127.0.0.1"
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
DECL|method|headers ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|headers
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|0
block|}
block|,
block|{
literal|1
block|}
block|,
block|{
literal|2
block|}
block|}
argument_list|)
return|;
block|}
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|method|TestRMProxyUsersConf (int round)
specifier|public
name|TestRMProxyUsersConf
parameter_list|(
name|int
name|round
parameter_list|)
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|round
condition|)
block|{
case|case
literal|0
case|:
comment|// hadoop.proxyuser prefix
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.foo.hosts"
argument_list|,
name|ipAddress
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.foo.users"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.foo.groups"
argument_list|,
literal|"bar_group"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
comment|// yarn.resourcemanager.proxyuser prefix
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.proxyuser.foo.hosts"
argument_list|,
name|ipAddress
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.proxyuser.foo.users"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.proxyuser.foo.groups"
argument_list|,
literal|"bar_group"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
comment|// hadoop.proxyuser prefix has been overwritten by
comment|// yarn.resourcemanager.proxyuser prefix
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.foo.hosts"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.foo.users"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.foo.groups"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.proxyuser.foo.hosts"
argument_list|,
name|ipAddress
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.proxyuser.foo.users"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.proxyuser.foo.groups"
argument_list|,
literal|"bar_group"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyUserConfiguration ()
specifier|public
name|void
name|testProxyUserConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for web server starting
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|proxyUser
init|=
name|UserGroupInformation
operator|.
name|createProxyUser
argument_list|(
name|BAR_USER
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|FOO_USER
argument_list|)
decl_stmt|;
try|try
block|{
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|authorize
argument_list|(
name|proxyUser
argument_list|,
name|ipAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizationException
name|e
parameter_list|)
block|{
comment|// Exception is not expected
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

