begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|FSSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestFSSchedulerApp
specifier|public
class|class
name|TestFSSchedulerApp
block|{
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|method|createAppAttemptId (int appId, int attemptId)
specifier|private
name|ApplicationAttemptId
name|createAppAttemptId
parameter_list|(
name|int
name|appId
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
name|ApplicationAttemptId
name|attId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appIdImpl
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|appIdImpl
operator|.
name|setId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|attId
operator|.
name|setAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|attId
operator|.
name|setApplicationId
argument_list|(
name|appIdImpl
argument_list|)
expr_stmt|;
return|return
name|attId
return|;
block|}
annotation|@
name|Test
DECL|method|testDelayScheduling ()
specifier|public
name|void
name|testDelayScheduling
parameter_list|()
block|{
name|Queue
name|queue
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
decl_stmt|;
name|Priority
name|prio
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|prio
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|double
name|nodeLocalityThreshold
init|=
literal|.5
decl_stmt|;
name|double
name|rackLocalityThreshold
init|=
literal|.6
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|schedulerApp
init|=
operator|new
name|FSSchedulerApp
argument_list|(
name|applicationAttemptId
argument_list|,
literal|"user1"
argument_list|,
name|queue
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Default level should be node-local
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
comment|// First five scheduling opportunities should remain node local
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|schedulerApp
operator|.
name|addSchedulingOpportunity
argument_list|(
name|prio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// After five it should switch to rack local
name|schedulerApp
operator|.
name|addSchedulingOpportunity
argument_list|(
name|prio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
comment|// Manually set back to node local
name|schedulerApp
operator|.
name|resetAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
expr_stmt|;
name|schedulerApp
operator|.
name|resetSchedulingOpportunities
argument_list|(
name|prio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now escalate again to rack-local, then to off-switch
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|schedulerApp
operator|.
name|addSchedulingOpportunity
argument_list|(
name|prio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schedulerApp
operator|.
name|addSchedulingOpportunity
argument_list|(
name|prio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|schedulerApp
operator|.
name|addSchedulingOpportunity
argument_list|(
name|prio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schedulerApp
operator|.
name|addSchedulingOpportunity
argument_list|(
name|prio
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
name|nodeLocalityThreshold
argument_list|,
name|rackLocalityThreshold
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Ensure that when negative paramaters are given (signaling delay scheduling    * no tin use), the least restrictive locality level is returned.    */
DECL|method|testLocalityLevelWithoutDelays ()
specifier|public
name|void
name|testLocalityLevelWithoutDelays
parameter_list|()
block|{
name|Queue
name|queue
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
decl_stmt|;
name|Priority
name|prio
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|prio
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|schedulerApp
init|=
operator|new
name|FSSchedulerApp
argument_list|(
name|applicationAttemptId
argument_list|,
literal|"user1"
argument_list|,
name|queue
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|schedulerApp
operator|.
name|getAllowedLocalityLevel
argument_list|(
name|prio
argument_list|,
literal|10
argument_list|,
operator|-
literal|1.0
argument_list|,
operator|-
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

