begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsRecordBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertCounter
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|assertGauge
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|MetricsAsserts
operator|.
name|getMetrics
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppMetricsChecker
operator|.
name|AppMetricsKey
operator|.
name|APPS_COMPLETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppMetricsChecker
operator|.
name|AppMetricsKey
operator|.
name|APPS_FAILED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppMetricsChecker
operator|.
name|AppMetricsKey
operator|.
name|APPS_KILLED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppMetricsChecker
operator|.
name|AppMetricsKey
operator|.
name|APPS_PENDING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppMetricsChecker
operator|.
name|AppMetricsKey
operator|.
name|APPS_RUNNING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppMetricsChecker
operator|.
name|AppMetricsKey
operator|.
name|APPS_SUBMITTED
import|;
end_import

begin_class
DECL|class|AppMetricsChecker
specifier|final
class|class
name|AppMetricsChecker
block|{
DECL|field|LOG
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AppMetricsChecker
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|INITIAL_CHECKER
specifier|private
specifier|static
specifier|final
name|AppMetricsChecker
name|INITIAL_CHECKER
init|=
operator|new
name|AppMetricsChecker
argument_list|()
operator|.
name|counter
argument_list|(
name|APPS_SUBMITTED
argument_list|,
literal|0
argument_list|)
operator|.
name|gaugeInt
argument_list|(
name|APPS_PENDING
argument_list|,
literal|0
argument_list|)
operator|.
name|gaugeInt
argument_list|(
name|APPS_RUNNING
argument_list|,
literal|0
argument_list|)
operator|.
name|counter
argument_list|(
name|APPS_COMPLETED
argument_list|,
literal|0
argument_list|)
operator|.
name|counter
argument_list|(
name|APPS_FAILED
argument_list|,
literal|0
argument_list|)
operator|.
name|counter
argument_list|(
name|APPS_KILLED
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|enum|AppMetricsKey
enum|enum
name|AppMetricsKey
block|{
DECL|enumConstant|APPS_SUBMITTED
name|APPS_SUBMITTED
argument_list|(
literal|"AppsSubmitted"
argument_list|)
block|,
DECL|enumConstant|APPS_PENDING
name|APPS_PENDING
argument_list|(
literal|"AppsPending"
argument_list|)
block|,
DECL|enumConstant|APPS_RUNNING
name|APPS_RUNNING
argument_list|(
literal|"AppsRunning"
argument_list|)
block|,
DECL|enumConstant|APPS_COMPLETED
name|APPS_COMPLETED
argument_list|(
literal|"AppsCompleted"
argument_list|)
block|,
DECL|enumConstant|APPS_FAILED
name|APPS_FAILED
argument_list|(
literal|"AppsFailed"
argument_list|)
block|,
DECL|enumConstant|APPS_KILLED
name|APPS_KILLED
argument_list|(
literal|"AppsKilled"
argument_list|)
block|;
DECL|field|value
specifier|private
name|String
name|value
decl_stmt|;
DECL|method|AppMetricsKey (String value)
name|AppMetricsKey
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
DECL|field|gaugesInt
specifier|private
specifier|final
name|Map
argument_list|<
name|AppMetricsKey
argument_list|,
name|Integer
argument_list|>
name|gaugesInt
decl_stmt|;
DECL|field|counters
specifier|private
specifier|final
name|Map
argument_list|<
name|AppMetricsKey
argument_list|,
name|Integer
argument_list|>
name|counters
decl_stmt|;
DECL|method|AppMetricsChecker ()
specifier|private
name|AppMetricsChecker
parameter_list|()
block|{
name|this
operator|.
name|gaugesInt
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|()
expr_stmt|;
block|}
DECL|method|AppMetricsChecker (AppMetricsChecker checker)
specifier|private
name|AppMetricsChecker
parameter_list|(
name|AppMetricsChecker
name|checker
parameter_list|)
block|{
name|this
operator|.
name|gaugesInt
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|checker
operator|.
name|gaugesInt
argument_list|)
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|Maps
operator|.
name|newHashMap
argument_list|(
name|checker
operator|.
name|counters
argument_list|)
expr_stmt|;
block|}
DECL|method|createFromChecker (AppMetricsChecker checker)
specifier|public
specifier|static
name|AppMetricsChecker
name|createFromChecker
parameter_list|(
name|AppMetricsChecker
name|checker
parameter_list|)
block|{
return|return
operator|new
name|AppMetricsChecker
argument_list|(
name|checker
argument_list|)
return|;
block|}
DECL|method|create ()
specifier|public
specifier|static
name|AppMetricsChecker
name|create
parameter_list|()
block|{
return|return
operator|new
name|AppMetricsChecker
argument_list|(
name|INITIAL_CHECKER
argument_list|)
return|;
block|}
DECL|method|gaugeInt (AppMetricsKey key, int value)
name|AppMetricsChecker
name|gaugeInt
parameter_list|(
name|AppMetricsKey
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|gaugesInt
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|counter (AppMetricsKey key, int value)
name|AppMetricsChecker
name|counter
parameter_list|(
name|AppMetricsKey
name|key
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|counters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|checkAgainst (MetricsSource source, boolean all)
name|AppMetricsChecker
name|checkAgainst
parameter_list|(
name|MetricsSource
name|source
parameter_list|,
name|boolean
name|all
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"MetricsSource should not be null!"
argument_list|)
throw|;
block|}
name|MetricsRecordBuilder
name|recordBuilder
init|=
name|getMetrics
argument_list|(
name|source
argument_list|,
name|all
argument_list|)
decl_stmt|;
name|logAssertingMessage
argument_list|(
name|source
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AppMetricsKey
argument_list|,
name|Integer
argument_list|>
name|gauge
range|:
name|gaugesInt
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertGauge
argument_list|(
name|gauge
operator|.
name|getKey
argument_list|()
operator|.
name|value
argument_list|,
name|gauge
operator|.
name|getValue
argument_list|()
argument_list|,
name|recordBuilder
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AppMetricsKey
argument_list|,
name|Integer
argument_list|>
name|counter
range|:
name|counters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertCounter
argument_list|(
name|counter
operator|.
name|getKey
argument_list|()
operator|.
name|value
argument_list|,
name|counter
operator|.
name|getValue
argument_list|()
argument_list|,
name|recordBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|logAssertingMessage (MetricsSource source)
specifier|private
name|void
name|logAssertingMessage
parameter_list|(
name|MetricsSource
name|source
parameter_list|)
block|{
name|String
name|queueName
init|=
operator|(
operator|(
name|QueueMetrics
operator|)
name|source
operator|)
operator|.
name|queueName
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|QueueMetrics
argument_list|>
name|users
init|=
operator|(
operator|(
name|QueueMetrics
operator|)
name|source
operator|)
operator|.
name|users
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Asserting App metrics.. QueueName: "
operator|+
name|queueName
operator|+
literal|", users: "
operator|+
operator|(
name|users
operator|!=
literal|null
operator|&&
operator|!
name|users
operator|.
name|isEmpty
argument_list|()
condition|?
name|users
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

