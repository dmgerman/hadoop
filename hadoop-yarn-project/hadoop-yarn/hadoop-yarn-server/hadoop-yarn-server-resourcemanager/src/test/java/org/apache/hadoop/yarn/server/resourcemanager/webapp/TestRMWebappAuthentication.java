begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.webapp
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|MediaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|KerberosTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fifo
operator|.
name|FifoScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|ApplicationSubmissionContextInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jersey
operator|.
name|api
operator|.
name|client
operator|.
name|ClientResponse
operator|.
name|Status
import|;
end_import

begin_comment
comment|/* Just a simple test class to ensure that the RM handles the static web user  * correctly for secure and un-secure modes  *   */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestRMWebappAuthentication
specifier|public
class|class
name|TestRMWebappAuthentication
block|{
DECL|field|rm
specifier|private
specifier|static
name|MockRM
name|rm
decl_stmt|;
DECL|field|simpleConf
specifier|private
specifier|static
name|Configuration
name|simpleConf
decl_stmt|;
DECL|field|kerberosConf
specifier|private
specifier|static
name|Configuration
name|kerberosConf
decl_stmt|;
DECL|field|testRootDir
specifier|private
specifier|static
specifier|final
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-root"
argument_list|)
decl_stmt|;
DECL|field|httpSpnegoKeytabFile
specifier|private
specifier|static
name|File
name|httpSpnegoKeytabFile
init|=
operator|new
name|File
argument_list|(
name|KerberosTestUtils
operator|.
name|getKeytabFile
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|miniKDCStarted
specifier|private
specifier|static
name|boolean
name|miniKDCStarted
init|=
literal|false
decl_stmt|;
DECL|field|testMiniKDC
specifier|private
specifier|static
name|MiniKdc
name|testMiniKDC
decl_stmt|;
static|static
block|{
name|simpleConf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|simpleConf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|simpleConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|simpleConf
operator|.
name|setBoolean
argument_list|(
literal|"mockrm.webapp.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|kerberosConf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|kerberosConf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|kerberosConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FifoScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|kerberosConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ACL_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|kerberosConf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|kerberosConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_KEYTAB
argument_list|,
name|httpSpnegoKeytabFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|kerberosConf
operator|.
name|setBoolean
argument_list|(
literal|"mockrm.webapp.enabled"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameters
DECL|method|params ()
specifier|public
specifier|static
name|Collection
name|params
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|1
block|,
name|simpleConf
block|}
block|,
block|{
literal|2
block|,
name|kerberosConf
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestRMWebappAuthentication (int run, Configuration conf)
specifier|public
name|TestRMWebappAuthentication
parameter_list|(
name|int
name|run
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setupAndStartRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setUp ()
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
name|testMiniKDC
operator|=
operator|new
name|MiniKdc
argument_list|(
name|MiniKdc
operator|.
name|createConf
argument_list|()
argument_list|,
name|testRootDir
argument_list|)
expr_stmt|;
name|setupKDC
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Couldn't create MiniKDC"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|tearDown ()
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|testMiniKDC
operator|!=
literal|null
condition|)
block|{
name|testMiniKDC
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setupKDC ()
specifier|private
specifier|static
name|void
name|setupKDC
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|miniKDCStarted
condition|)
block|{
name|testMiniKDC
operator|.
name|start
argument_list|()
expr_stmt|;
name|getKdc
argument_list|()
operator|.
name|createPrincipal
argument_list|(
name|httpSpnegoKeytabFile
argument_list|,
literal|"HTTP/localhost"
argument_list|,
literal|"client"
argument_list|,
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|miniKDCStarted
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|getKdc ()
specifier|private
specifier|static
name|MiniKdc
name|getKdc
parameter_list|()
block|{
return|return
name|testMiniKDC
return|;
block|}
DECL|method|setupAndStartRM (Configuration conf)
specifier|private
specifier|static
name|void
name|setupAndStartRM
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// ensure that in a non-secure cluster users can access
comment|// the web pages as earlier and submit apps as anonymous
comment|// user or by identifying themselves
annotation|@
name|Test
DECL|method|testSimpleAuth ()
specifier|public
name|void
name|testSimpleAuth
parameter_list|()
throws|throws
name|Exception
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// ensure users can access web pages
comment|// this should work for secure and non-secure clusters
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:8088/cluster"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|OK
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Fetching url failed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|testAnonymousKerberosUser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|testAnonymousSimpleUser
argument_list|()
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|testAnonymousKerberosUser ()
specifier|private
name|void
name|testAnonymousKerberosUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationSubmissionContextInfo
name|app
init|=
operator|new
name|ApplicationSubmissionContextInfo
argument_list|()
decl_stmt|;
name|String
name|appid
init|=
literal|"application_123_0"
decl_stmt|;
name|app
operator|.
name|setApplicationId
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|String
name|requestBody
init|=
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|getMarshalledAppInfo
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:8088/ws/v1/cluster/apps/new-application"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|setupConn
argument_list|(
name|conn
argument_list|,
literal|"POST"
argument_list|,
literal|"application/xml"
argument_list|,
name|requestBody
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Anonymous users should not be allowed to get new application ids in secure mode."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:8088/ws/v1/cluster/apps"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|setupConn
argument_list|(
name|conn
argument_list|,
literal|"POST"
argument_list|,
literal|"application/xml"
argument_list|,
name|requestBody
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Anonymous users should not be allowed to submit apps in secure mode."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|requestBody
operator|=
literal|"{ \"state\": \"KILLED\"}"
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:8088/ws/v1/cluster/apps/application_123_0/state"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|setupConn
argument_list|(
name|conn
argument_list|,
literal|"PUT"
argument_list|,
literal|"application/json"
argument_list|,
name|requestBody
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Anonymous users should not be allowed to kill apps in secure mode."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Status
operator|.
name|FORBIDDEN
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAnonymousSimpleUser ()
specifier|private
name|void
name|testAnonymousSimpleUser
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationSubmissionContextInfo
name|app
init|=
operator|new
name|ApplicationSubmissionContextInfo
argument_list|()
decl_stmt|;
name|String
name|appid
init|=
literal|"application_123_0"
decl_stmt|;
name|app
operator|.
name|setApplicationId
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|String
name|requestBody
init|=
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|getMarshalledAppInfo
argument_list|(
name|app
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:8088/ws/v1/cluster/apps"
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|conn
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|setupConn
argument_list|(
name|conn
argument_list|,
literal|"POST"
argument_list|,
literal|"application/xml"
argument_list|,
name|requestBody
argument_list|)
expr_stmt|;
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Status
operator|.
name|ACCEPTED
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|conn
operator|.
name|getResponseCode
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|appExists
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appid
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appExists
argument_list|)
expr_stmt|;
name|RMApp
name|actualApp
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appid
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
name|actualApp
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rm
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_HTTP_STATIC_USER
argument_list|,
name|CommonConfigurationKeys
operator|.
name|DEFAULT_HADOOP_HTTP_STATIC_USER
argument_list|)
argument_list|,
name|owner
argument_list|)
expr_stmt|;
name|appid
operator|=
literal|"application_123_1"
expr_stmt|;
name|app
operator|.
name|setApplicationId
argument_list|(
name|appid
argument_list|)
expr_stmt|;
name|requestBody
operator|=
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|getMarshalledAppInfo
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
literal|"http://localhost:8088/ws/v1/cluster/apps?user.name=client"
argument_list|)
expr_stmt|;
name|conn
operator|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|TestRMWebServicesDelegationTokenAuthentication
operator|.
name|setupConn
argument_list|(
name|conn
argument_list|,
literal|"POST"
argument_list|,
name|MediaType
operator|.
name|APPLICATION_XML
argument_list|,
name|requestBody
argument_list|)
expr_stmt|;
name|conn
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|appExists
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|containsKey
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appid
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appExists
argument_list|)
expr_stmt|;
name|actualApp
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|ConverterUtils
operator|.
name|toApplicationId
argument_list|(
name|appid
argument_list|)
argument_list|)
expr_stmt|;
name|owner
operator|=
name|actualApp
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"client"
argument_list|,
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

