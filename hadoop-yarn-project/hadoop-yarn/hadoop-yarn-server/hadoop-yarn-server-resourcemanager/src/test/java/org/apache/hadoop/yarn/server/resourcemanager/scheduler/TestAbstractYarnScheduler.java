begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterNodeManagerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NMLivelinessMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodesListManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ParameterizedSchedulerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceTrackerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|MockRMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestAbstractYarnScheduler
specifier|public
class|class
name|TestAbstractYarnScheduler
extends|extends
name|ParameterizedSchedulerTestBase
block|{
DECL|method|TestAbstractYarnScheduler (SchedulerType type)
specifier|public
name|TestAbstractYarnScheduler
parameter_list|(
name|SchedulerType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaximimumAllocationMemory ()
specifier|public
name|void
name|testMaximimumAllocationMemory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|node1MaxMemory
init|=
literal|15
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|node2MaxMemory
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|node3MaxMemory
init|=
literal|6
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|configuredMaxMemory
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationMemoryHelper
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxMemory
argument_list|,
name|node2MaxMemory
argument_list|,
name|node3MaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationMemoryHelper
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxMemory
argument_list|,
name|node2MaxMemory
argument_list|,
name|node3MaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|node2MaxMemory
argument_list|,
name|node3MaxMemory
argument_list|,
name|node2MaxMemory
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMaximumAllocationMemoryHelper ( YarnScheduler scheduler, final int node1MaxMemory, final int node2MaxMemory, final int node3MaxMemory, final int... expectedMaxMemory)
specifier|private
name|void
name|testMaximumAllocationMemoryHelper
parameter_list|(
name|YarnScheduler
name|scheduler
parameter_list|,
specifier|final
name|int
name|node1MaxMemory
parameter_list|,
specifier|final
name|int
name|node2MaxMemory
parameter_list|,
specifier|final
name|int
name|node3MaxMemory
parameter_list|,
specifier|final
name|int
modifier|...
name|expectedMaxMemory
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|expectedMaxMemory
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|maxMemory
init|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|0
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|node1MaxMemory
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|1
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|2
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|node2MaxMemory
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|3
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|node3MaxMemory
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|4
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|5
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaximimumAllocationVCores ()
specifier|public
name|void
name|testMaximimumAllocationVCores
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|node1MaxVCores
init|=
literal|15
decl_stmt|;
specifier|final
name|int
name|node2MaxVCores
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|node3MaxVCores
init|=
literal|6
decl_stmt|;
specifier|final
name|int
name|configuredMaxVCores
init|=
literal|10
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationVCoresHelper
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxVCores
argument_list|,
name|node2MaxVCores
argument_list|,
name|node3MaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationVCoresHelper
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxVCores
argument_list|,
name|node2MaxVCores
argument_list|,
name|node3MaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|node2MaxVCores
argument_list|,
name|node3MaxVCores
argument_list|,
name|node2MaxVCores
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMaximumAllocationVCoresHelper ( YarnScheduler scheduler, final int node1MaxVCores, final int node2MaxVCores, final int node3MaxVCores, final int... expectedMaxVCores)
specifier|private
name|void
name|testMaximumAllocationVCoresHelper
parameter_list|(
name|YarnScheduler
name|scheduler
parameter_list|,
specifier|final
name|int
name|node1MaxVCores
parameter_list|,
specifier|final
name|int
name|node2MaxVCores
parameter_list|,
specifier|final
name|int
name|node3MaxVCores
parameter_list|,
specifier|final
name|int
modifier|...
name|expectedMaxVCores
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|expectedMaxVCores
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxVCores
init|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|0
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
name|node1MaxVCores
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|1
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|2
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
name|node2MaxVCores
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|3
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
name|node3MaxVCores
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|4
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|5
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateMaxAllocationUsesTotal ()
specifier|public
name|void
name|testUpdateMaxAllocationUsesTotal
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|configuredMaxVCores
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|configuredMaxMemory
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|Resource
name|configuredMaximumResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|configuredMaxMemory
argument_list|,
name|configuredMaxVCores
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|Resource
name|emptyResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|fullResource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|fullResource2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SchedulerNode
name|mockNode1
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"foo"
argument_list|,
literal|8080
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getTotalResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullResource1
argument_list|)
expr_stmt|;
name|SchedulerNode
name|mockNode2
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"bar"
argument_list|,
literal|8081
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode2
operator|.
name|getUnallocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode2
operator|.
name|getTotalResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullResource2
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|configuredMaximumResource
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|mockNode1
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|fullResource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodeTracker
operator|.
name|addNode
argument_list|(
name|mockNode2
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|fullResource2
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|mockNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|fullResource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodeTracker
operator|.
name|removeNode
argument_list|(
name|mockNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|configuredMaximumResource
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMaxAllocationAfterUpdateNodeResource ()
specifier|public
name|void
name|testMaxAllocationAfterUpdateNodeResource
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|configuredMaxVCores
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|configuredMaxMemory
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|Resource
name|configuredMaximumResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|configuredMaxMemory
argument_list|,
name|configuredMaxVCores
argument_list|)
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|configuredMaximumResource
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|Resource
name|resource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|resource2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Resource
name|resource3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|resource4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|resource1
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|resource3
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// increase node1 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node1
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource2
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// decrease node1 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node1
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// increase node2 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node2
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource4
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// decrease node2 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node2
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * This test case is to test the pending containers are cleared from the    * attempt even if one of the application in the list have current attempt as    * null (no attempt).    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testReleasedContainerIfAppAttemptisNull ()
specifier|public
name|void
name|testReleasedContainerIfAppAttemptisNull
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Mock App without attempt
name|RMApp
name|mockAPp
init|=
operator|new
name|MockRMApp
argument_list|(
literal|125
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|SchedulerApplication
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|application
init|=
operator|new
name|SchedulerApplication
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|(
literal|null
argument_list|,
name|mockAPp
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Second app with one app attempt
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|runningContainer
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|runningContainer
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|schedulerApplications
init|=
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
decl_stmt|;
name|SchedulerApplication
name|schedulerApp
init|=
operator|(
name|SchedulerApplication
operator|)
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|schedulerApplications
operator|.
name|put
argument_list|(
name|mockAPp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|clearPendingContainerCache
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Pending containers are not released "
operator|+
literal|"when one of the application attempt is null !"
argument_list|,
name|schedulerApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000l
argument_list|)
DECL|method|testContainerReleaseWithAllocationTags ()
specifier|public
name|void
name|testContainerReleaseWithAllocationTags
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Currently only can be tested against capacity scheduler.
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|.
name|equals
argument_list|(
name|SchedulerType
operator|.
name|CAPACITY
argument_list|)
condition|)
block|{
specifier|final
name|String
name|testTag1
init|=
literal|"some-tag"
decl_stmt|;
specifier|final
name|String
name|testTag2
init|=
literal|"some-other-tag"
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PLACEMENT_CONSTRAINTS_HANDLER
argument_list|,
literal|"scheduler"
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"Test"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// allocate 1 container with tag1
name|SchedulingRequest
name|sr
init|=
name|SchedulingRequest
operator|.
name|newInstance
argument_list|(
literal|1l
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|testTag1
argument_list|)
argument_list|,
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// allocate 3 containers with tag2
name|SchedulingRequest
name|sr1
init|=
name|SchedulingRequest
operator|.
name|newInstance
argument_list|(
literal|2l
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|testTag2
argument_list|)
argument_list|,
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|3
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|AllocateRequest
name|ar
init|=
name|AllocateRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|schedulingRequests
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sr
argument_list|,
name|sr1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|ar
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocated
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|allocated
operator|.
name|size
argument_list|()
operator|<
literal|4
condition|)
block|{
name|AllocateResponse
name|rsp
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|allocated
operator|.
name|addAll
argument_list|(
name|rsp
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|allocated
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocated
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|container
lambda|->
name|container
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|1l
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containers
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|cid
init|=
name|containers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
comment|// mock container start
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|containerStarted
argument_list|(
name|cid
argument_list|)
expr_stmt|;
comment|// verifies the allocation is made with correct number of tags
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nodeTags
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAllocationTagsManager
argument_list|()
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeTags
operator|.
name|get
argument_list|(
name|testTag1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeTags
operator|.
name|get
argument_list|(
name|testTag1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// release a container
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
comment|// before NM confirms, the tag should still exist
name|nodeTags
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAllocationTagsManager
argument_list|()
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeTags
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|nodeTags
operator|.
name|get
argument_list|(
name|testTag1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeTags
operator|.
name|get
argument_list|(
name|testTag1
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// NM reports back that container is released
comment|// RM should cleanup the tag
name|ContainerStatus
name|cs
init|=
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|cid
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|cs
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Wait on condition
comment|// 1) tag1 doesn't exist anymore
comment|// 2) num of tag2 is still 3
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|tags
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAllocationTagsManager
argument_list|()
operator|.
name|getAllocationTagsWithCount
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tags
operator|.
name|get
argument_list|(
name|testTag1
argument_list|)
operator|==
literal|null
operator|&&
name|tags
operator|.
name|get
argument_list|(
name|testTag2
argument_list|)
operator|.
name|intValue
argument_list|()
operator|==
literal|3
return|;
block|}
argument_list|,
literal|500
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContainerReleasedByNode ()
specifier|public
name|void
name|testContainerReleasedByNode
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testContainerReleasedByNode"
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"Test"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// allocate a container that fills more than half the node
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|8192
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait for containers to be allocated.
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
block|}
comment|// release the container from the AM
name|ContainerId
name|cid
init|=
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|releasedContainers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|releasedContainers
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|completedContainers
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
name|releasedContainers
argument_list|)
operator|.
name|getCompletedContainersStatuses
argument_list|()
decl_stmt|;
while|while
condition|(
name|completedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|completedContainers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
name|releasedContainers
argument_list|)
operator|.
name|getCompletedContainersStatuses
argument_list|()
expr_stmt|;
block|}
comment|// verify new container can be allocated immediately because container
comment|// never launched on the node
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|8192
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
block|}
comment|// launch the container on the node
name|cid
operator|=
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cid
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|cid
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// release the container from the AM
name|releasedContainers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|releasedContainers
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|completedContainers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
name|releasedContainers
argument_list|)
operator|.
name|getCompletedContainersStatuses
argument_list|()
expr_stmt|;
while|while
condition|(
name|completedContainers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|completedContainers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
name|releasedContainers
argument_list|)
operator|.
name|getCompletedContainersStatuses
argument_list|()
expr_stmt|;
block|}
comment|// verify new container cannot be allocated immediately because container
comment|// has not been released by the node
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|8192
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"new container allocated before node freed old"
argument_list|,
name|containers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"new container allocated before node freed old"
argument_list|,
name|containers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// free the old container from the node
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|cid
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cid
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// verify new container is now allocated
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
while|while
condition|(
name|containers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Stopping testContainerReleasedByNode"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testResourceRequestRestoreWhenRMContainerIsAtAllocated ()
specifier|public
name|void
name|testResourceRequestRestoreWhenRMContainerIsAtAllocated
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"Test"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:2351"
argument_list|,
literal|10240
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|int
name|NUM_CONTAINERS
init|=
literal|1
decl_stmt|;
comment|// allocate NUM_CONTAINERS containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
name|NUM_CONTAINERS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait for containers to be allocated.
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|!=
name|NUM_CONTAINERS
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// launch the 2nd container, for testing running container transferred.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// 3rd container is in Allocated state.
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
name|NUM_CONTAINERS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId3
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId3
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|// NodeManager restart
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// NM restart kills all allocated and running containers.
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId3
argument_list|,
name|RMContainerState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// The killed RMContainer request should be restored. In successive
comment|// nodeHeartBeats AM should be able to get container allocated.
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|!=
name|NUM_CONTAINERS
condition|)
block|{
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|4
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId4
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm2
argument_list|,
name|containerId4
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test to verify that ResourceRequests recovery back to the right app-attempt    * after a container gets killed at ACQUIRED state: YARN-4502.    *    * @throws Exception    */
annotation|@
name|Test
DECL|method|testResourceRequestRecoveryToTheRightAppAttempt ()
specifier|public
name|void
name|testResourceRequestRecoveryToTheRightAppAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"Test"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockNM
name|node
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|rmApp
argument_list|,
name|rm
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptOneID
init|=
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|ContainerId
name|am1ContainerID
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptOneID
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// allocate NUM_CONTAINERS containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait for containers to be allocated.
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// launch a 2nd container, for testing running-containers transfer.
name|node
operator|.
name|nodeHeartbeat
argument_list|(
name|applicationAttemptOneID
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|runningContainerID
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptOneID
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|node
argument_list|,
name|runningContainerID
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// 3rd container is in Allocated state.
name|int
name|ALLOCATED_CONTAINER_PRIORITY
init|=
literal|1047
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
name|ALLOCATED_CONTAINER_PRIORITY
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ContainerId
name|allocatedContainerID
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|applicationAttemptOneID
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|node
argument_list|,
name|allocatedContainerID
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|RMContainer
name|allocatedContainer
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|allocatedContainerID
argument_list|)
decl_stmt|;
comment|// Capture scheduler app-attempt before AM crash.
name|SchedulerApplicationAttempt
name|firstSchedulerAppAttempt
init|=
operator|(
operator|(
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|applicationAttemptOneID
argument_list|)
decl_stmt|;
comment|// AM crashes, and a new app-attempt gets created
name|node
operator|.
name|nodeHeartbeat
argument_list|(
name|applicationAttemptOneID
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|RMAppAttempt
name|rmAppAttempt2
init|=
name|MockRM
operator|.
name|waitForAttemptScheduled
argument_list|(
name|rmApp
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptTwoID
init|=
name|rmAppAttempt2
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|applicationAttemptTwoID
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// All outstanding allocated containers will be killed (irrespective of
comment|// keep-alive of container across app-attempts)
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMContainerState
operator|.
name|KILLED
argument_list|,
name|allocatedContainer
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// The core part of this test
comment|// The killed containers' ResourceRequests are recovered back to the
comment|// original app-attempt, not the new one
for|for
control|(
name|SchedulerRequestKey
name|key
range|:
name|firstSchedulerAppAttempt
operator|.
name|getSchedulerKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|firstSchedulerAppAttempt
operator|.
name|getOutstandingAsksCount
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
name|ALLOCATED_CONTAINER_PRIORITY
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|firstSchedulerAppAttempt
operator|.
name|getOutstandingAsksCount
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Also, only one running container should be transferred after AM
comment|// launches
name|MockRM
operator|.
name|launchAM
argument_list|(
name|rmApp
argument_list|,
name|rm
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|transferredContainers
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getTransferredContainers
argument_list|(
name|applicationAttemptTwoID
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|transferredContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|runningContainerID
argument_list|,
name|transferredContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|verifyMaximumResourceCapability ( Resource expectedMaximumResource, YarnScheduler scheduler)
specifier|private
name|void
name|verifyMaximumResourceCapability
parameter_list|(
name|Resource
name|expectedMaximumResource
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|)
block|{
specifier|final
name|Resource
name|schedulerMaximumResourceCapability
init|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaximumResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|schedulerMaximumResourceCapability
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaximumResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|schedulerMaximumResourceCapability
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|SleepHandler
specifier|private
class|class
name|SleepHandler
implements|implements
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
block|{
DECL|field|sleepFlag
name|boolean
name|sleepFlag
init|=
literal|false
decl_stmt|;
DECL|field|sleepTime
name|int
name|sleepTime
init|=
literal|20
decl_stmt|;
annotation|@
name|Override
DECL|method|handle (SchedulerEvent event)
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|sleepFlag
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{       }
block|}
block|}
DECL|method|getPrivateResourceTrackerService ( Dispatcher privateDispatcher, ResourceManager rm, SleepHandler sleepHandler)
specifier|private
name|ResourceTrackerService
name|getPrivateResourceTrackerService
parameter_list|(
name|Dispatcher
name|privateDispatcher
parameter_list|,
name|ResourceManager
name|rm
parameter_list|,
name|SleepHandler
name|sleepHandler
parameter_list|)
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|RMContext
name|privateContext
init|=
operator|new
name|RMContextImpl
argument_list|(
name|privateDispatcher
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|privateContext
operator|.
name|setNodeLabelManager
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|RMNodeLabelsManager
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|privateDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
name|sleepHandler
argument_list|)
expr_stmt|;
name|privateDispatcher
operator|.
name|register
argument_list|(
name|SchedulerEventType
operator|.
name|class
argument_list|,
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|)
expr_stmt|;
name|privateDispatcher
operator|.
name|register
argument_list|(
name|RMNodeEventType
operator|.
name|class
argument_list|,
operator|new
name|ResourceManager
operator|.
name|NodeEventDispatcher
argument_list|(
name|privateContext
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|privateDispatcher
operator|)
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Service
operator|)
name|privateDispatcher
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|NMLivelinessMonitor
name|nmLivelinessMonitor
init|=
operator|new
name|NMLivelinessMonitor
argument_list|(
name|privateDispatcher
argument_list|)
decl_stmt|;
name|nmLivelinessMonitor
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|nmLivelinessMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
name|NodesListManager
name|nodesListManager
init|=
operator|new
name|NodesListManager
argument_list|(
name|privateContext
argument_list|)
decl_stmt|;
name|nodesListManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|containerTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
init|=
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|nmTokenSecretManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|ResourceTrackerService
name|privateResourceTrackerService
init|=
operator|new
name|ResourceTrackerService
argument_list|(
name|privateContext
argument_list|,
name|nodesListManager
argument_list|,
name|nmLivelinessMonitor
argument_list|,
name|containerTokenSecretManager
argument_list|,
name|nmTokenSecretManager
argument_list|)
decl_stmt|;
name|privateResourceTrackerService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|privateResourceTrackerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|setRMContext
argument_list|(
name|privateContext
argument_list|)
expr_stmt|;
return|return
name|privateResourceTrackerService
return|;
block|}
comment|/**    * Test the behavior of the scheduler when a node reconnects    * with changed capabilities. This test is to catch any race conditions    * that might occur due to the use of the RMNode object.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testNodemanagerReconnect ()
specifier|public
name|void
name|testNodemanagerReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|DrainDispatcher
name|privateDispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|privateDispatcher
operator|.
name|disableExitOnDispatchException
argument_list|()
expr_stmt|;
name|SleepHandler
name|sleepHandler
init|=
operator|new
name|SleepHandler
argument_list|()
decl_stmt|;
name|ResourceTrackerService
name|privateResourceTrackerService
init|=
name|getPrivateResourceTrackerService
argument_list|(
name|privateDispatcher
argument_list|,
name|rm
argument_list|,
name|sleepHandler
argument_list|)
decl_stmt|;
comment|// Register node1
name|String
name|hostname1
init|=
literal|"localhost1"
decl_stmt|;
name|Resource
name|capability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|RegisterNodeManagerRequest
name|request1
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nodeId1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|hostname1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|request1
operator|.
name|setNodeId
argument_list|(
name|nodeId1
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setHttpPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|request1
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|privateResourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|privateDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Resource
name|clusterResource
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getClusterResource
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Initial cluster resources don't match"
argument_list|,
name|capability
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|Resource
name|newCapability
init|=
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RegisterNodeManagerRequest
name|request2
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|RegisterNodeManagerRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request2
operator|.
name|setNodeId
argument_list|(
name|nodeId1
argument_list|)
expr_stmt|;
name|request2
operator|.
name|setHttpPort
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|request2
operator|.
name|setResource
argument_list|(
name|newCapability
argument_list|)
expr_stmt|;
comment|// hold up the disaptcher and register the same node with lower capability
name|sleepHandler
operator|.
name|sleepFlag
operator|=
literal|true
expr_stmt|;
name|privateResourceTrackerService
operator|.
name|registerNodeManager
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|privateDispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Cluster resources don't match"
argument_list|,
name|newCapability
argument_list|,
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|privateResourceTrackerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testUpdateThreadLifeCycle ()
specifier|public
name|void
name|testUpdateThreadLifeCycle
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|.
name|equals
argument_list|(
name|SchedulerType
operator|.
name|FAIR
argument_list|)
condition|)
block|{
name|Thread
name|updateThread
init|=
name|scheduler
operator|.
name|updateThread
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|updateThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|int
name|numRetries
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|numRetries
operator|--
operator|>
literal|0
operator|&&
name|updateThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotEquals
argument_list|(
literal|"The Update thread is still alive"
argument_list|,
literal|0
argument_list|,
name|numRetries
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|.
name|equals
argument_list|(
name|SchedulerType
operator|.
name|CAPACITY
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"updateThread shouldn't have been created"
argument_list|,
name|scheduler
operator|.
name|updateThread
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unhandled SchedulerType, "
operator|+
name|getSchedulerType
argument_list|()
operator|+
literal|", please update this unit test."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContainerRecoveredByNode ()
specifier|public
name|void
name|testContainerRecoveredByNode
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting testContainerRecoveredByNode"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxMemory
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"Test"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|8192
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|YarnScheduler
name|scheduler
init|=
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|maxMemory
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|containerReport
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|0
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"recover container"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NMContainerStatus
argument_list|>
name|containerReports
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containerReports
operator|.
name|add
argument_list|(
name|containerReport
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|,
name|containerReports
argument_list|)
argument_list|)
expr_stmt|;
name|RMContainer
name|rmContainer
init|=
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
comment|//verify queue name when rmContainer is recovered
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getQueue
argument_list|()
argument_list|,
name|rmContainer
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Stopping testContainerRecoveredByNode"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the order we get the containers to kill. It should respect the order    * described in {@link SchedulerNode#getContainersToKill()}.    */
annotation|@
name|Test
DECL|method|testGetRunningContainersToKill ()
specifier|public
name|void
name|testGetRunningContainersToKill
parameter_list|()
block|{
specifier|final
name|SchedulerNode
name|node
init|=
operator|new
name|MockSchedulerNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|node
operator|.
name|getContainersToKill
argument_list|()
argument_list|)
expr_stmt|;
comment|// AM0
name|RMContainer
name|am0
init|=
name|newMockRMContainer
argument_list|(
literal|true
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|"AM0"
argument_list|)
decl_stmt|;
name|node
operator|.
name|allocateContainer
argument_list|(
name|am0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|am0
argument_list|)
argument_list|,
name|node
operator|.
name|getContainersToKill
argument_list|()
argument_list|)
expr_stmt|;
comment|// OPPORTUNISTIC0, AM0
name|RMContainer
name|opp0
init|=
name|newMockRMContainer
argument_list|(
literal|false
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|"OPPORTUNISTIC0"
argument_list|)
decl_stmt|;
name|node
operator|.
name|allocateContainer
argument_list|(
name|opp0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|opp0
argument_list|,
name|am0
argument_list|)
argument_list|,
name|node
operator|.
name|getContainersToKill
argument_list|()
argument_list|)
expr_stmt|;
comment|// OPPORTUNISTIC0, GUARANTEED0, AM0
name|RMContainer
name|regular0
init|=
name|newMockRMContainer
argument_list|(
literal|false
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|"GUARANTEED0"
argument_list|)
decl_stmt|;
name|node
operator|.
name|allocateContainer
argument_list|(
name|regular0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|opp0
argument_list|,
name|regular0
argument_list|,
name|am0
argument_list|)
argument_list|,
name|node
operator|.
name|getContainersToKill
argument_list|()
argument_list|)
expr_stmt|;
comment|// OPPORTUNISTIC1, OPPORTUNISTIC0, GUARANTEED0, AM0
name|RMContainer
name|opp1
init|=
name|newMockRMContainer
argument_list|(
literal|false
argument_list|,
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|,
literal|"OPPORTUNISTIC1"
argument_list|)
decl_stmt|;
name|node
operator|.
name|allocateContainer
argument_list|(
name|opp1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|opp1
argument_list|,
name|opp0
argument_list|,
name|regular0
argument_list|,
name|am0
argument_list|)
argument_list|,
name|node
operator|.
name|getContainersToKill
argument_list|()
argument_list|)
expr_stmt|;
comment|// OPPORTUNISTIC1, OPPORTUNISTIC0, GUARANTEED0, AM1, AM0
name|RMContainer
name|am1
init|=
name|newMockRMContainer
argument_list|(
literal|true
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|"AM1"
argument_list|)
decl_stmt|;
name|node
operator|.
name|allocateContainer
argument_list|(
name|am1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|opp1
argument_list|,
name|opp0
argument_list|,
name|regular0
argument_list|,
name|am1
argument_list|,
name|am0
argument_list|)
argument_list|,
name|node
operator|.
name|getContainersToKill
argument_list|()
argument_list|)
expr_stmt|;
comment|// OPPORTUNISTIC1, OPPORTUNISTIC0, GUARANTEED1, GUARANTEED0, AM1, AM0
name|RMContainer
name|regular1
init|=
name|newMockRMContainer
argument_list|(
literal|false
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
literal|"GUARANTEED1"
argument_list|)
decl_stmt|;
name|node
operator|.
name|allocateContainer
argument_list|(
name|regular1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|opp1
argument_list|,
name|opp0
argument_list|,
name|regular1
argument_list|,
name|regular0
argument_list|,
name|am1
argument_list|,
name|am0
argument_list|)
argument_list|,
name|node
operator|.
name|getContainersToKill
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newMockRMContainer (boolean isAMContainer, ExecutionType executionType, String name)
specifier|private
specifier|static
name|RMContainer
name|newMockRMContainer
parameter_list|(
name|boolean
name|isAMContainer
parameter_list|,
name|ExecutionType
name|executionType
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|RMContainer
name|container
init|=
name|mock
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|isAMContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|isAMContainer
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getExecutionType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|executionType
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getCreationTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Time
operator|.
name|now
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|container
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
comment|/**    * SchedulerNode mock to test launching containers.    */
DECL|class|MockSchedulerNode
class|class
name|MockSchedulerNode
extends|extends
name|SchedulerNode
block|{
DECL|field|containers
specifier|private
specifier|final
name|List
argument_list|<
name|RMContainer
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|MockSchedulerNode ()
name|MockSchedulerNode
parameter_list|()
block|{
name|super
argument_list|(
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLaunchedContainers ()
specifier|protected
name|List
argument_list|<
name|RMContainer
argument_list|>
name|getLaunchedContainers
parameter_list|()
block|{
return|return
name|containers
return|;
block|}
annotation|@
name|Override
DECL|method|allocateContainer (RMContainer rmContainer)
specifier|public
name|void
name|allocateContainer
parameter_list|(
name|RMContainer
name|rmContainer
parameter_list|)
block|{
name|containers
operator|.
name|add
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Shuffle for testing
name|Collections
operator|.
name|shuffle
argument_list|(
name|containers
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reserveResource (SchedulerApplicationAttempt attempt, SchedulerRequestKey schedulerKey, RMContainer container)
specifier|public
name|void
name|reserveResource
parameter_list|(
name|SchedulerApplicationAttempt
name|attempt
parameter_list|,
name|SchedulerRequestKey
name|schedulerKey
parameter_list|,
name|RMContainer
name|container
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|unreserveResource (SchedulerApplicationAttempt attempt)
specifier|public
name|void
name|unreserveResource
parameter_list|(
name|SchedulerApplicationAttempt
name|attempt
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

