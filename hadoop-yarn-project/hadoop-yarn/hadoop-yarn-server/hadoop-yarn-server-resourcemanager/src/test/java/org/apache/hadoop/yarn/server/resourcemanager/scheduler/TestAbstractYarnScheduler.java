begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ParameterizedSchedulerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|MockRMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestAbstractYarnScheduler
specifier|public
class|class
name|TestAbstractYarnScheduler
extends|extends
name|ParameterizedSchedulerTestBase
block|{
DECL|method|TestAbstractYarnScheduler (SchedulerType type)
specifier|public
name|TestAbstractYarnScheduler
parameter_list|(
name|SchedulerType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaximimumAllocationMemory ()
specifier|public
name|void
name|testMaximimumAllocationMemory
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|node1MaxMemory
init|=
literal|15
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|node2MaxMemory
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|node3MaxMemory
init|=
literal|6
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|configuredMaxMemory
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|configureScheduler
argument_list|()
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationMemoryHelper
argument_list|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxMemory
argument_list|,
name|node2MaxMemory
argument_list|,
name|node3MaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationMemoryHelper
argument_list|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxMemory
argument_list|,
name|node2MaxMemory
argument_list|,
name|node3MaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|configuredMaxMemory
argument_list|,
name|node2MaxMemory
argument_list|,
name|node3MaxMemory
argument_list|,
name|node2MaxMemory
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMaximumAllocationMemoryHelper ( AbstractYarnScheduler scheduler, final int node1MaxMemory, final int node2MaxMemory, final int node3MaxMemory, final int... expectedMaxMemory)
specifier|private
name|void
name|testMaximumAllocationMemoryHelper
parameter_list|(
name|AbstractYarnScheduler
name|scheduler
parameter_list|,
specifier|final
name|int
name|node1MaxMemory
parameter_list|,
specifier|final
name|int
name|node2MaxMemory
parameter_list|,
specifier|final
name|int
name|node3MaxMemory
parameter_list|,
specifier|final
name|int
modifier|...
name|expectedMaxMemory
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|expectedMaxMemory
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxMemory
init|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|0
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|node1MaxMemory
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|1
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|2
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|node2MaxMemory
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|3
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|node3MaxMemory
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|4
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxMemory
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxMemory
index|[
literal|5
index|]
argument_list|,
name|maxMemory
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaximimumAllocationVCores ()
specifier|public
name|void
name|testMaximimumAllocationVCores
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|node1MaxVCores
init|=
literal|15
decl_stmt|;
specifier|final
name|int
name|node2MaxVCores
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|node3MaxVCores
init|=
literal|6
decl_stmt|;
specifier|final
name|int
name|configuredMaxVCores
init|=
literal|10
decl_stmt|;
name|configureScheduler
argument_list|()
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|1000
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationVCoresHelper
argument_list|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxVCores
argument_list|,
name|node2MaxVCores
argument_list|,
name|node3MaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|testMaximumAllocationVCoresHelper
argument_list|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
argument_list|,
name|node1MaxVCores
argument_list|,
name|node2MaxVCores
argument_list|,
name|node3MaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|configuredMaxVCores
argument_list|,
name|node2MaxVCores
argument_list|,
name|node3MaxVCores
argument_list|,
name|node2MaxVCores
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMaximumAllocationVCoresHelper ( AbstractYarnScheduler scheduler, final int node1MaxVCores, final int node2MaxVCores, final int node3MaxVCores, final int... expectedMaxVCores)
specifier|private
name|void
name|testMaximumAllocationVCoresHelper
parameter_list|(
name|AbstractYarnScheduler
name|scheduler
parameter_list|,
specifier|final
name|int
name|node1MaxVCores
parameter_list|,
specifier|final
name|int
name|node2MaxVCores
parameter_list|,
specifier|final
name|int
name|node3MaxVCores
parameter_list|,
specifier|final
name|int
modifier|...
name|expectedMaxVCores
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|expectedMaxVCores
operator|.
name|length
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxVCores
init|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|0
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
name|node1MaxVCores
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|1
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|2
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
name|node2MaxVCores
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|3
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
name|node3MaxVCores
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|4
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|maxVCores
operator|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaxVCores
index|[
literal|5
index|]
argument_list|,
name|maxVCores
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateMaxAllocationUsesTotal ()
specifier|public
name|void
name|testUpdateMaxAllocationUsesTotal
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|configuredMaxVCores
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|configuredMaxMemory
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|Resource
name|configuredMaximumResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|configuredMaxMemory
argument_list|,
name|configuredMaxVCores
argument_list|)
decl_stmt|;
name|configureScheduler
argument_list|()
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|Resource
name|emptyResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Resource
name|fullResource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|fullResource2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|SchedulerNode
name|mockNode1
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"foo"
argument_list|,
literal|8080
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getTotalResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullResource1
argument_list|)
expr_stmt|;
name|SchedulerNode
name|mockNode2
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"bar"
argument_list|,
literal|8081
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode2
operator|.
name|getAvailableResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|emptyResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockNode2
operator|.
name|getTotalResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fullResource2
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|configuredMaximumResource
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodes
operator|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|SchedulerNode
argument_list|>
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|nodes
operator|.
name|put
argument_list|(
name|mockNode1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|mockNode1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateMaximumAllocation
argument_list|(
name|mockNode1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|fullResource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodes
operator|.
name|put
argument_list|(
name|mockNode2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|mockNode2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateMaximumAllocation
argument_list|(
name|mockNode2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|fullResource2
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodes
operator|.
name|remove
argument_list|(
name|mockNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateMaximumAllocation
argument_list|(
name|mockNode2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|fullResource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|nodes
operator|.
name|remove
argument_list|(
name|mockNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|updateMaximumAllocation
argument_list|(
name|mockNode1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|configuredMaximumResource
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMaxAllocationAfterUpdateNodeResource ()
specifier|public
name|void
name|testMaxAllocationAfterUpdateNodeResource
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|configuredMaxVCores
init|=
literal|20
decl_stmt|;
specifier|final
name|int
name|configuredMaxMemory
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|Resource
name|configuredMaximumResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|configuredMaxMemory
argument_list|,
name|configuredMaxVCores
argument_list|)
decl_stmt|;
name|configureScheduler
argument_list|()
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|configuredMaxVCores
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|configuredMaxMemory
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|configuredMaximumResource
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|Resource
name|resource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Resource
name|resource2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Resource
name|resource3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|resource4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|resource1
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|resource3
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// increase node1 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node1
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource2
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// decrease node1 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node1
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// increase node2 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node2
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource4
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
comment|// decrease node2 resource
name|scheduler
operator|.
name|updateNodeResource
argument_list|(
name|node2
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|resource3
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyMaximumResourceCapability
argument_list|(
name|resource1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * This test case is to test the pending containers are cleared from the    * attempt even if one of the application in the list have current attempt as    * null (no attempt).    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|}
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testReleasedContainerIfAppAttemptisNull ()
specifier|public
name|void
name|testReleasedContainerIfAppAttemptisNull
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
try|try
block|{
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8192
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Mock App without attempt
name|RMApp
name|mockAPp
init|=
operator|new
name|MockRMApp
argument_list|(
literal|125
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|SchedulerApplication
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|application
init|=
operator|new
name|SchedulerApplication
argument_list|<
name|FiCaSchedulerApp
argument_list|>
argument_list|(
literal|null
argument_list|,
name|mockAPp
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
comment|// Second app with one app attempt
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|runningContainer
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|runningContainer
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|schedulerApplications
init|=
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
decl_stmt|;
name|SchedulerApplication
name|schedulerApp
init|=
operator|(
name|SchedulerApplication
operator|)
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|schedulerApplications
operator|.
name|put
argument_list|(
name|mockAPp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|clearPendingContainerCache
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Pending containers are not released "
operator|+
literal|"when one of the application attempt is null !"
argument_list|,
name|schedulerApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getPendingRelease
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyMaximumResourceCapability ( Resource expectedMaximumResource, AbstractYarnScheduler scheduler)
specifier|private
name|void
name|verifyMaximumResourceCapability
parameter_list|(
name|Resource
name|expectedMaximumResource
parameter_list|,
name|AbstractYarnScheduler
name|scheduler
parameter_list|)
block|{
specifier|final
name|Resource
name|schedulerMaximumResourceCapability
init|=
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaximumResource
operator|.
name|getMemory
argument_list|()
argument_list|,
name|schedulerMaximumResourceCapability
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedMaximumResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|schedulerMaximumResourceCapability
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

