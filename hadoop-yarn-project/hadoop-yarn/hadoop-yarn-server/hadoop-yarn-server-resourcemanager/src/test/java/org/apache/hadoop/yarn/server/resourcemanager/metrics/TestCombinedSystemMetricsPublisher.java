begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntityType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|applicationhistoryservice
operator|.
name|ApplicationHistoryServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|AppAttemptMetricsConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|timelineservice
operator|.
name|RMTimelineCollectorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|MemoryTimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|TimelineReader
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|MemoryTimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timeline
operator|.
name|recovery
operator|.
name|TimelineStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|AppLevelTimelineCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineReaderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|TimelineServiceHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|timeline
operator|.
name|TimelineUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests that a CombinedSystemMetricsPublisher publishes metrics for timeline  * services (v1/v2) as specified by the configuration.  */
end_comment

begin_class
DECL|class|TestCombinedSystemMetricsPublisher
specifier|public
class|class
name|TestCombinedSystemMetricsPublisher
block|{
comment|/**     * The folder where the FileSystemTimelineWriterImpl writes the entities.     */
DECL|field|testRootDir
specifier|private
specifier|static
name|File
name|testRootDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|TestCombinedSystemMetricsPublisher
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"-localDir"
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
decl_stmt|;
DECL|field|timelineServer
specifier|private
specifier|static
name|ApplicationHistoryServer
name|timelineServer
decl_stmt|;
DECL|field|metricsPublisher
specifier|private
specifier|static
name|CombinedSystemMetricsPublisher
name|metricsPublisher
decl_stmt|;
DECL|field|store
specifier|private
specifier|static
name|TimelineStore
name|store
decl_stmt|;
DECL|field|rmAppsMapInContext
specifier|private
specifier|static
name|ConcurrentMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
name|rmAppsMapInContext
decl_stmt|;
DECL|field|rmTimelineCollectorManager
specifier|private
specifier|static
name|RMTimelineCollectorManager
name|rmTimelineCollectorManager
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|static
name|DrainDispatcher
name|dispatcher
decl_stmt|;
DECL|field|conf
specifier|private
specifier|static
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|publisherV1
specifier|private
specifier|static
name|TimelineServiceV1Publisher
name|publisherV1
decl_stmt|;
DECL|field|publisherV2
specifier|private
specifier|static
name|TimelineServiceV2Publisher
name|publisherV2
decl_stmt|;
DECL|field|appAttemptId
specifier|private
specifier|static
name|ApplicationAttemptId
name|appAttemptId
decl_stmt|;
DECL|field|app
specifier|private
specifier|static
name|RMApp
name|app
decl_stmt|;
DECL|method|testSetup (boolean enableV1, boolean enableV2)
specifier|private
name|void
name|testSetup
parameter_list|(
name|boolean
name|enableV1
parameter_list|,
name|boolean
name|enableV2
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|testRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|//cleanup before hand
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
name|getConf
argument_list|(
name|enableV1
argument_list|,
name|enableV2
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|rmAppsMapInContext
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ApplicationId
argument_list|,
name|RMApp
argument_list|>
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMApps
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmAppsMapInContext
argument_list|)
expr_stmt|;
name|ResourceManager
name|rm
init|=
name|mock
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableV2
condition|)
block|{
name|dispatcher
operator|=
operator|new
name|DrainDispatcher
argument_list|()
expr_stmt|;
name|rmTimelineCollectorManager
operator|=
operator|new
name|RMTimelineCollectorManager
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getRMTimelineCollectorManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmTimelineCollectorManager
argument_list|)
expr_stmt|;
name|rmTimelineCollectorManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rmTimelineCollectorManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dispatcher
operator|=
literal|null
expr_stmt|;
name|rmTimelineCollectorManager
operator|=
literal|null
expr_stmt|;
block|}
name|timelineServer
operator|=
operator|new
name|ApplicationHistoryServer
argument_list|()
expr_stmt|;
name|timelineServer
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|timelineServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|store
operator|=
name|timelineServer
operator|.
name|getTimelineStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|enableV2
condition|)
block|{
name|dispatcher
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|SystemMetricsPublisher
argument_list|>
name|publishers
init|=
operator|new
name|ArrayList
argument_list|<
name|SystemMetricsPublisher
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV1Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|enableV1
argument_list|)
expr_stmt|;
name|publisherV1
operator|=
operator|new
name|TimelineServiceV1Publisher
argument_list|()
expr_stmt|;
name|publishers
operator|.
name|add
argument_list|(
name|publisherV1
argument_list|)
expr_stmt|;
name|publisherV1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|publisherV1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|enableV1
argument_list|)
expr_stmt|;
name|publisherV1
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|conf
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|enableV2
argument_list|)
expr_stmt|;
name|publisherV2
operator|=
operator|new
name|TimelineServiceV2Publisher
argument_list|(
name|rmTimelineCollectorManager
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|getDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
expr_stmt|;
name|publishers
operator|.
name|add
argument_list|(
name|publisherV2
argument_list|)
expr_stmt|;
name|publisherV2
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|publisherV2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|enableV2
argument_list|)
expr_stmt|;
name|publisherV2
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|publishers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NoOpSystemMetricPublisher
name|noopPublisher
init|=
operator|new
name|NoOpSystemMetricPublisher
argument_list|()
decl_stmt|;
name|publishers
operator|.
name|add
argument_list|(
name|noopPublisher
argument_list|)
expr_stmt|;
block|}
name|metricsPublisher
operator|=
operator|new
name|CombinedSystemMetricsPublisher
argument_list|(
name|publishers
argument_list|)
expr_stmt|;
block|}
DECL|method|testCleanup ()
specifier|private
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|publisherV1
operator|!=
literal|null
condition|)
block|{
name|publisherV1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|publisherV2
operator|!=
literal|null
condition|)
block|{
name|publisherV2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|timelineServer
operator|!=
literal|null
condition|)
block|{
name|timelineServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testRootDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileContext
operator|.
name|getLocalFSFileContext
argument_list|()
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rmTimelineCollectorManager
operator|!=
literal|null
condition|)
block|{
name|rmTimelineCollectorManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getConf (boolean v1Enabled, boolean v2Enabled)
specifier|private
specifier|static
name|YarnConfiguration
name|getConf
parameter_list|(
name|boolean
name|v1Enabled
parameter_list|,
name|boolean
name|v2Enabled
parameter_list|)
block|{
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|v1Enabled
operator|||
name|v2Enabled
condition|)
block|{
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v1Enabled
condition|)
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_STORE
argument_list|,
name|MemoryTimelineStore
operator|.
name|class
argument_list|,
name|TimelineStore
operator|.
name|class
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_STATE_STORE_CLASS
argument_list|,
name|MemoryTimelineStateStore
operator|.
name|class
argument_list|,
name|TimelineStateStore
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v2Enabled
condition|)
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|SYSTEM_METRICS_PUBLISHER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PUBLISH_CONTAINER_EVENTS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|FileSystemTimelineWriterImpl
operator|.
name|class
argument_list|,
name|TimelineWriter
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|FileSystemTimelineWriterImpl
operator|.
name|TIMELINE_SERVICE_STORAGE_DIR_ROOT
argument_list|,
name|testRootDir
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception while setting the "
operator|+
literal|"TIMELINE_SERVICE_STORAGE_DIR_ROOT "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|v1Enabled
operator|&&
name|v2Enabled
condition|)
block|{
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSIONS
argument_list|,
literal|"1.0,2.0f"
argument_list|)
expr_stmt|;
block|}
name|yarnConf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SYSTEM_METRICS_PUBLISHER_DISPATCHER_POOL_SIZE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
name|yarnConf
return|;
block|}
comment|// runs test to validate timeline events are published if and only if the
comment|// service is enabled for v1 and v2 (independently).
DECL|method|runTest (boolean v1Enabled, boolean v2Enabled)
specifier|private
name|void
name|runTest
parameter_list|(
name|boolean
name|v1Enabled
parameter_list|,
name|boolean
name|v2Enabled
parameter_list|)
throws|throws
name|Exception
block|{
name|testSetup
argument_list|(
name|v1Enabled
argument_list|,
name|v2Enabled
argument_list|)
expr_stmt|;
name|publishEvents
argument_list|(
name|v1Enabled
argument_list|,
name|v2Enabled
argument_list|)
expr_stmt|;
name|validateV1
argument_list|(
name|v1Enabled
argument_list|)
expr_stmt|;
name|validateV2
argument_list|(
name|v2Enabled
argument_list|)
expr_stmt|;
name|testCleanup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTimelineServiceEventPublishingV1V2Enabled ()
specifier|public
name|void
name|testTimelineServiceEventPublishingV1V2Enabled
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTimelineServiceEventPublishingV1Enabled ()
specifier|public
name|void
name|testTimelineServiceEventPublishingV1Enabled
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTimelineServiceEventPublishingV2Enabled ()
specifier|public
name|void
name|testTimelineServiceEventPublishingV2Enabled
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTimelineServiceEventPublishingNoService ()
specifier|public
name|void
name|testTimelineServiceEventPublishingNoService
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testTimelineServiceConfiguration ()
specifier|public
name|void
name|testTimelineServiceConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|config
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSIONS
argument_list|,
literal|"2.0,1.5"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV15Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV1Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSIONS
argument_list|,
literal|"2.0,1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|"1.5"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV15Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV1Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSIONS
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
name|config
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|"1.5"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV2Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV15Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|YarnConfiguration
operator|.
name|timelineServiceV1Enabled
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|publishEvents (boolean v1Enabled, boolean v2Enabled)
specifier|private
name|void
name|publishEvents
parameter_list|(
name|boolean
name|v1Enabled
parameter_list|,
name|boolean
name|v2Enabled
parameter_list|)
block|{
name|long
name|timestamp
init|=
operator|(
name|v1Enabled
operator|)
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|int
name|id
init|=
operator|(
name|v2Enabled
operator|)
condition|?
literal|3
else|:
literal|4
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|timestamp
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|app
operator|=
name|createRMApp
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|rmAppsMapInContext
operator|.
name|putIfAbsent
argument_list|(
name|appId
argument_list|,
name|app
argument_list|)
expr_stmt|;
if|if
condition|(
name|v2Enabled
condition|)
block|{
name|AppLevelTimelineCollector
name|collector
init|=
operator|new
name|AppLevelTimelineCollector
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|rmTimelineCollectorManager
operator|.
name|putIfAbsent
argument_list|(
name|appId
argument_list|,
name|collector
argument_list|)
expr_stmt|;
block|}
name|appAttemptId
operator|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|createRMAppAttempt
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|metricsPublisher
operator|.
name|appAttemptRegistered
argument_list|(
name|appAttempt
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|metricsPublisher
operator|.
name|appAttemptFinished
argument_list|(
name|appAttempt
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|app
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|2L
argument_list|)
expr_stmt|;
if|if
condition|(
name|v2Enabled
condition|)
block|{
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|validateV1 (boolean v1Enabled)
specifier|private
name|void
name|validateV1
parameter_list|(
name|boolean
name|v1Enabled
parameter_list|)
throws|throws
name|Exception
block|{
name|TimelineEntity
name|entity
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|v1Enabled
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|entity
argument_list|)
expr_stmt|;
return|return;
block|}
do|do
block|{
name|entity
operator|=
name|store
operator|.
name|getEntity
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|AppAttemptMetricsConstants
operator|.
name|ENTITY_TYPE
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|Field
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// ensure two events are both published before leaving the loop
block|}
do|while
condition|(
name|entity
operator|==
literal|null
operator|||
name|entity
operator|.
name|getEvents
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
do|;
name|boolean
name|hasRegisteredEvent
init|=
literal|false
decl_stmt|;
name|boolean
name|hasFinishedEvent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timeline
operator|.
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|REGISTERED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasRegisteredEvent
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINISHED_EVENT_TYPE
argument_list|)
condition|)
block|{
name|hasFinishedEvent
operator|=
literal|true
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|FINAL_STATUS_INFO
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationAttemptState
operator|.
name|FINISHED
operator|.
name|toString
argument_list|()
argument_list|,
name|event
operator|.
name|getEventInfo
argument_list|()
operator|.
name|get
argument_list|(
name|AppAttemptMetricsConstants
operator|.
name|STATE_INFO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appAttemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|entity
operator|.
name|getEntityId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasRegisteredEvent
operator|&&
name|hasFinishedEvent
argument_list|)
expr_stmt|;
block|}
DECL|method|validateV2 (boolean v2Enabled)
specifier|private
name|void
name|validateV2
parameter_list|(
name|boolean
name|v2Enabled
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outputDirApp
init|=
name|getTimelineEntityDir
argument_list|()
operator|+
literal|"/"
operator|+
name|TimelineEntityType
operator|.
name|YARN_APPLICATION_ATTEMPT
operator|+
literal|"/"
decl_stmt|;
name|File
name|entityFolder
init|=
operator|new
name|File
argument_list|(
name|outputDirApp
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|v2Enabled
argument_list|,
name|entityFolder
operator|.
name|isDirectory
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|v2Enabled
condition|)
block|{
name|String
name|timelineServiceFileName
init|=
name|appAttemptId
operator|.
name|toString
argument_list|()
operator|+
name|FileSystemTimelineWriterImpl
operator|.
name|TIMELINE_SERVICE_STORAGE_EXTENSION
decl_stmt|;
name|File
name|entityFile
init|=
operator|new
name|File
argument_list|(
name|outputDirApp
argument_list|,
name|timelineServiceFileName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entityFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|idPrefix
init|=
name|TimelineServiceHelper
operator|.
name|invertLong
argument_list|(
name|appAttemptId
operator|.
name|getAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|verifyEntity
argument_list|(
name|entityFile
argument_list|,
literal|2
argument_list|,
name|AppAttemptMetricsConstants
operator|.
name|REGISTERED_EVENT_TYPE
argument_list|,
literal|0
argument_list|,
name|idPrefix
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyEntity (File entityFile, long expectedEvents, String eventForCreatedTime, long expectedMetrics, long idPrefix)
specifier|private
name|void
name|verifyEntity
parameter_list|(
name|File
name|entityFile
parameter_list|,
name|long
name|expectedEvents
parameter_list|,
name|String
name|eventForCreatedTime
parameter_list|,
name|long
name|expectedMetrics
parameter_list|,
name|long
name|idPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|String
name|strLine
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
name|long
name|metricsCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|entityFile
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|strLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|strLine
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
name|entity
init|=
name|FileSystemTimelineReaderImpl
operator|.
name|getTimelineRecordFromJSON
argument_list|(
name|strLine
operator|.
name|trim
argument_list|()
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|timelineservice
operator|.
name|TimelineEntity
operator|.
name|class
argument_list|)
decl_stmt|;
name|metricsCount
operator|=
name|entity
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|idPrefix
argument_list|,
name|entity
operator|.
name|getIdPrefix
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimelineEvent
name|event
range|:
name|entity
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|eventForCreatedTime
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|entity
operator|.
name|getCreatedTime
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedEvents
operator|+
literal|" events to be published"
argument_list|,
name|expectedEvents
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedMetrics
operator|+
literal|" metrics is incorrect"
argument_list|,
name|expectedMetrics
argument_list|,
name|metricsCount
argument_list|)
expr_stmt|;
block|}
DECL|method|getTimelineEntityDir ()
specifier|private
name|String
name|getTimelineEntityDir
parameter_list|()
block|{
name|String
name|outputDirApp
init|=
name|testRootDir
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|FileSystemTimelineWriterImpl
operator|.
name|ENTITIES_DIR
operator|+
literal|"/"
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_RM_CLUSTER_ID
operator|+
literal|"/"
operator|+
name|app
operator|.
name|getUser
argument_list|()
operator|+
literal|"/"
operator|+
name|app
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|TimelineUtils
operator|.
name|DEFAULT_FLOW_VERSION
operator|+
literal|"/"
operator|+
name|app
operator|.
name|getStartTime
argument_list|()
operator|+
literal|"/"
operator|+
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
return|return
name|outputDirApp
return|;
block|}
DECL|method|createRMAppAttempt (boolean unmanagedAMAttempt)
specifier|private
specifier|static
name|RMAppAttempt
name|createRMAppAttempt
parameter_list|(
name|boolean
name|unmanagedAMAttempt
parameter_list|)
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getHost
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test host"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getRpcPort
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unmanagedAMAttempt
condition|)
block|{
name|Container
name|container
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|container
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|appAttempt
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test diagnostics info"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getTrackingUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test tracking url"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test original tracking url"
argument_list|)
expr_stmt|;
return|return
name|appAttempt
return|;
block|}
DECL|method|createRMApp (ApplicationId appId)
specifier|private
specifier|static
name|RMApp
name|createRMApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
block|{
name|RMApp
name|rmApp
init|=
name|mock
argument_list|(
name|RMAppImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test app"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getApplicationType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test app type"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"testUser"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test queue"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|2L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getFinishTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|3L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|StringBuilder
argument_list|(
literal|"test diagnostics info"
argument_list|)
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|appAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttempt
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|FinalApplicationStatus
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|resourceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|resourceMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|resourceMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|preemptedMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|preemptedMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|preemptedMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getRMAppMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RMAppMetrics
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|resourceMap
argument_list|,
name|preemptedMap
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|appSubmissionContext
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appSubmissionContext
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|containerLaunchContext
init|=
name|mock
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|containerLaunchContext
operator|.
name|getCommands
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"java -Xmx1024m"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appSubmissionContext
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerLaunchContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appSubmissionContext
argument_list|)
expr_stmt|;
return|return
name|rmApp
return|;
block|}
block|}
end_class

end_unit

