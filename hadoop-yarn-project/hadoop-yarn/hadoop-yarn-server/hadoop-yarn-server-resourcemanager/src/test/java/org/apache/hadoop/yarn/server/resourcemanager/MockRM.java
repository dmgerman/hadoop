begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailApplicationAttemptRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FailApplicationAttemptResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SignalContainerRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationTimeoutType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SignalContainerCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|AMLauncherEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|amlauncher
operator|.
name|ApplicationMasterLauncher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeStartedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|YarnVersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|MockRM
specifier|public
class|class
name|MockRM
extends|extends
name|ResourceManager
block|{
DECL|field|LOG
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MockRM
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ENABLE_WEBAPP
specifier|static
specifier|final
name|String
name|ENABLE_WEBAPP
init|=
literal|"mockrm.webapp.enabled"
decl_stmt|;
DECL|field|SECOND
specifier|private
specifier|static
specifier|final
name|int
name|SECOND
init|=
literal|1000
decl_stmt|;
DECL|field|TIMEOUT_MS_FOR_ATTEMPT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT_MS_FOR_ATTEMPT
init|=
literal|40
operator|*
name|SECOND
decl_stmt|;
DECL|field|TIMEOUT_MS_FOR_APP_REMOVED
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT_MS_FOR_APP_REMOVED
init|=
literal|40
operator|*
name|SECOND
decl_stmt|;
DECL|field|TIMEOUT_MS_FOR_CONTAINER_AND_NODE
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT_MS_FOR_CONTAINER_AND_NODE
init|=
literal|10
operator|*
name|SECOND
decl_stmt|;
DECL|field|WAIT_MS_PER_LOOP
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_MS_PER_LOOP
init|=
literal|10
decl_stmt|;
DECL|field|useNullRMNodeLabelsManager
specifier|private
specifier|final
name|boolean
name|useNullRMNodeLabelsManager
decl_stmt|;
DECL|method|MockRM ()
specifier|public
name|MockRM
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|MockRM (Configuration conf)
specifier|public
name|MockRM
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|MockRM (Configuration conf, RMStateStore store)
specifier|public
name|MockRM
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|)
block|{
name|this
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|MockRM (Configuration conf, RMStateStore store, boolean useNullRMNodeLabelsManager)
specifier|public
name|MockRM
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|,
name|boolean
name|useNullRMNodeLabelsManager
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|useNullRMNodeLabelsManager
operator|=
name|useNullRMNodeLabelsManager
expr_stmt|;
name|init
argument_list|(
name|conf
operator|instanceof
name|YarnConfiguration
condition|?
name|conf
else|:
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|setRMStateStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createNodeLabelManager ()
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
if|if
condition|(
name|useNullRMNodeLabelsManager
condition|)
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|createNodeLabelManager
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createDispatcher ()
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
operator|new
name|DrainDispatcher
argument_list|()
return|;
block|}
DECL|method|drainEvents ()
specifier|public
name|void
name|drainEvents
parameter_list|()
block|{
name|Dispatcher
name|rmDispatcher
init|=
name|getRmDispatcher
argument_list|()
decl_stmt|;
if|if
condition|(
name|rmDispatcher
operator|instanceof
name|DrainDispatcher
condition|)
block|{
operator|(
operator|(
name|DrainDispatcher
operator|)
name|rmDispatcher
operator|)
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not a Drain Dispatcher!"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Wait until an application has reached a specified state.    * The timeout is 80 seconds.    * @param appId the id of an application    * @param finalState the application state waited    * @throws InterruptedException    *         if interrupted while waiting for the state transition    */
DECL|method|waitForState (ApplicationId appId, RMAppState finalState)
specifier|public
name|void
name|waitForState
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|RMAppState
name|finalState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|RMApp
name|app
init|=
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app shouldn't be null"
argument_list|,
name|app
argument_list|)
expr_stmt|;
specifier|final
name|int
name|timeoutMsecs
init|=
literal|80
operator|*
name|SECOND
decl_stmt|;
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|app
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|timeoutMsecs
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"App : "
operator|+
name|appId
operator|+
literal|" State is : "
operator|+
name|app
operator|.
name|getState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|finalState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"App State is : "
operator|+
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"App State is not correct (timeout)."
argument_list|,
name|finalState
argument_list|,
name|app
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until an attempt has reached a specified state.    * The timeout is 40 seconds.    * @param attemptId the id of an attempt    * @param finalState the attempt state waited    * @throws InterruptedException    *         if interrupted while waiting for the state transition    */
DECL|method|waitForState (ApplicationAttemptId attemptId, RMAppAttemptState finalState)
specifier|public
name|void
name|waitForState
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|RMAppAttemptState
name|finalState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|waitForState
argument_list|(
name|attemptId
argument_list|,
name|finalState
argument_list|,
name|TIMEOUT_MS_FOR_ATTEMPT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until an attempt has reached a specified state.    * The timeout can be specified by the parameter.    * @param attemptId the id of an attempt    * @param finalState the attempt state waited    * @param timeoutMsecs the length of timeout in milliseconds    * @throws InterruptedException    *         if interrupted while waiting for the state transition    */
DECL|method|waitForState (ApplicationAttemptId attemptId, RMAppAttemptState finalState, int timeoutMsecs)
specifier|public
name|void
name|waitForState
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|RMAppAttemptState
name|finalState
parameter_list|,
name|int
name|timeoutMsecs
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|RMApp
name|app
init|=
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"app shouldn't be null"
argument_list|,
name|app
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getRMAppAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|MockRM
operator|.
name|waitForState
argument_list|(
name|attempt
argument_list|,
name|finalState
argument_list|,
name|timeoutMsecs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until an attempt has reached a specified state.    * The timeout is 40 seconds.    * @param attempt an attempt    * @param finalState the attempt state waited    * @throws InterruptedException    *         if interrupted while waiting for the state transition    */
DECL|method|waitForState (RMAppAttempt attempt, RMAppAttemptState finalState)
specifier|public
specifier|static
name|void
name|waitForState
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|,
name|RMAppAttemptState
name|finalState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|waitForState
argument_list|(
name|attempt
argument_list|,
name|finalState
argument_list|,
name|TIMEOUT_MS_FOR_ATTEMPT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until an attempt has reached a specified state.    * The timeout can be specified by the parameter.    * @param attempt an attempt    * @param finalState the attempt state waited    * @param timeoutMsecs the length of timeout in milliseconds    * @throws InterruptedException    *         if interrupted while waiting for the state transition    */
DECL|method|waitForState (RMAppAttempt attempt, RMAppAttemptState finalState, int timeoutMsecs)
specifier|public
specifier|static
name|void
name|waitForState
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|,
name|RMAppAttemptState
name|finalState
parameter_list|,
name|int
name|timeoutMsecs
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|timeoutMsecs
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"AppAttempt : "
operator|+
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
operator|+
literal|" State is : "
operator|+
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|finalState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt State is : "
operator|+
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Attempt state is not correct (timeout)."
argument_list|,
name|finalState
argument_list|,
name|attempt
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForContainerToComplete (RMAppAttempt attempt, NMContainerStatus completedContainer)
specifier|public
name|void
name|waitForContainerToComplete
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|,
name|NMContainerStatus
name|completedContainer
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|timeWaiting
operator|<
name|TIMEOUT_MS_FOR_CONTAINER_AND_NODE
condition|)
block|{
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containers
init|=
name|attempt
operator|.
name|getJustFinishedContainers
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received completed containers "
operator|+
name|containers
argument_list|)
expr_stmt|;
for|for
control|(
name|ContainerStatus
name|container
range|:
name|containers
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|completedContainer
operator|.
name|getContainerId
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
block|}
DECL|method|waitForNewAMToLaunchAndRegister (ApplicationId appId, int attemptSize, MockNM nm)
specifier|public
name|MockAM
name|waitForNewAMToLaunchAndRegister
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|int
name|attemptSize
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMApp
name|app
init|=
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|attemptSize
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|TIMEOUT_MS_FOR_ATTEMPT
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Application "
operator|+
name|appId
operator|+
literal|" is waiting for AM to restart. Current has "
operator|+
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" attempts."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
return|return
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|this
argument_list|,
name|nm
argument_list|)
return|;
block|}
comment|/**    * Wait until a container has reached a specified state.    * The timeout is 10 seconds.    * @param nm A mock nodemanager    * @param containerId the id of a container    * @param containerState the container state waited    * @return if reach the state before timeout; false otherwise.    * @throws Exception    *         if interrupted while waiting for the state transition    *         or an unexpected error while MockNM is hearbeating.    */
DECL|method|waitForState (MockNM nm, ContainerId containerId, RMContainerState containerState)
specifier|public
name|boolean
name|waitForState
parameter_list|(
name|MockNM
name|nm
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|RMContainerState
name|containerState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|waitForState
argument_list|(
name|nm
argument_list|,
name|containerId
argument_list|,
name|containerState
argument_list|,
name|TIMEOUT_MS_FOR_CONTAINER_AND_NODE
argument_list|)
return|;
block|}
comment|/**    * Wait until a container has reached a specified state.    * The timeout is specified by the parameter.    * @param nm A mock nodemanager    * @param containerId the id of a container    * @param containerState the container state waited    * @param timeoutMsecs the length of timeout in milliseconds    * @return if reach the state before timeout; false otherwise.    * @throws Exception    *         if interrupted while waiting for the state transition    *         or an unexpected error while MockNM is hearbeating.    */
DECL|method|waitForState (MockNM nm, ContainerId containerId, RMContainerState containerState, int timeoutMsecs)
specifier|public
name|boolean
name|waitForState
parameter_list|(
name|MockNM
name|nm
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|RMContainerState
name|containerState
parameter_list|,
name|int
name|timeoutMsecs
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|waitForState
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nm
argument_list|)
argument_list|,
name|containerId
argument_list|,
name|containerState
argument_list|,
name|timeoutMsecs
argument_list|)
return|;
block|}
comment|/**    * Wait until a container has reached a specified state.    * The timeout is 10 seconds.    * @param nms array of mock nodemanagers    * @param containerId the id of a container    * @param containerState the container state waited    * @return if reach the state before timeout; false otherwise.    * @throws Exception    *         if interrupted while waiting for the state transition    *         or an unexpected error while MockNM is hearbeating.    */
DECL|method|waitForState (Collection<MockNM> nms, ContainerId containerId, RMContainerState containerState)
specifier|public
name|boolean
name|waitForState
parameter_list|(
name|Collection
argument_list|<
name|MockNM
argument_list|>
name|nms
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|RMContainerState
name|containerState
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|waitForState
argument_list|(
name|nms
argument_list|,
name|containerId
argument_list|,
name|containerState
argument_list|,
name|TIMEOUT_MS_FOR_CONTAINER_AND_NODE
argument_list|)
return|;
block|}
comment|/**    * Wait until a container has reached a specified state.    * The timeout is specified by the parameter.    * @param nms array of mock nodemanagers    * @param containerId the id of a container    * @param containerState the container state waited    * @param timeoutMsecs the length of timeout in milliseconds    * @return if reach the state before timeout; false otherwise.    * @throws Exception    *         if interrupted while waiting for the state transition    *         or an unexpected error while MockNM is hearbeating.    */
DECL|method|waitForState (Collection<MockNM> nms, ContainerId containerId, RMContainerState containerState, int timeoutMsecs)
specifier|public
name|boolean
name|waitForState
parameter_list|(
name|Collection
argument_list|<
name|MockNM
argument_list|>
name|nms
parameter_list|,
name|ContainerId
name|containerId
parameter_list|,
name|RMContainerState
name|containerState
parameter_list|,
name|int
name|timeoutMsecs
parameter_list|)
throws|throws
name|Exception
block|{
name|RMContainer
name|container
init|=
name|getResourceScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|container
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|timeoutMsecs
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|MockNM
name|nm
range|:
name|nms
control|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|container
operator|=
name|getResourceScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for container "
operator|+
name|containerId
operator|+
literal|" to be "
operator|+
name|containerState
operator|+
literal|", container is null right now."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|containerState
operator|.
name|equals
argument_list|(
name|container
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|timeoutMsecs
condition|)
block|{
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Container : "
operator|+
name|containerId
operator|+
literal|" State is : "
operator|+
name|container
operator|.
name|getState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|containerState
argument_list|)
expr_stmt|;
for|for
control|(
name|MockNM
name|nm
range|:
name|nms
control|)
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Container State is : "
operator|+
name|container
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// get new application id
DECL|method|getNewAppId ()
specifier|public
name|GetNewApplicationResponse
name|getNewAppId
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|client
init|=
name|getClientRMService
argument_list|()
decl_stmt|;
return|return
name|client
operator|.
name|getNewApplication
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, Priority priority)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|Priority
name|priority
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|masterMemory
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, boolean unmanaged)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|boolean
name|unmanaged
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
name|unmanaged
argument_list|)
return|;
block|}
comment|// client
DECL|method|submitApp (int masterMemory, String name, String user)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, boolean unmanaged)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|boolean
name|unmanaged
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
literal|null
argument_list|,
name|unmanaged
argument_list|,
literal|null
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, String queue)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
literal|false
argument_list|,
name|queue
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, String queue, String amLabel)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|String
name|queue
parameter_list|,
name|String
name|amLabel
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
name|masterMemory
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
literal|false
argument_list|,
name|queue
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|amLabel
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|submitApp (Resource resource, String name, String user, Map<ApplicationAccessType, String> acls, String queue)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|String
name|queue
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
literal|false
argument_list|,
name|queue
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, String queue, boolean waitForAccepted)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|String
name|queue
parameter_list|,
name|boolean
name|waitForAccepted
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
literal|false
argument_list|,
name|queue
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|waitForAccepted
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, boolean unmanaged, String queue, int maxAppAttempts, Credentials ts)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|boolean
name|unmanaged
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Credentials
name|ts
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
name|unmanaged
argument_list|,
name|queue
argument_list|,
name|maxAppAttempts
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, boolean unmanaged, String queue, int maxAppAttempts, Credentials ts, String appType)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|boolean
name|unmanaged
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|String
name|appType
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
name|unmanaged
argument_list|,
name|queue
argument_list|,
name|maxAppAttempts
argument_list|,
name|ts
argument_list|,
name|appType
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, boolean unmanaged, String queue, int maxAppAttempts, Credentials ts, String appType, boolean waitForAccepted)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|boolean
name|unmanaged
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|String
name|appType
parameter_list|,
name|boolean
name|waitForAccepted
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|masterMemory
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
name|unmanaged
argument_list|,
name|queue
argument_list|,
name|maxAppAttempts
argument_list|,
name|ts
argument_list|,
name|appType
argument_list|,
name|waitForAccepted
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, boolean unmanaged, String queue, int maxAppAttempts, Credentials ts, String appType, boolean waitForAccepted, boolean keepContainers)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|boolean
name|unmanaged
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|String
name|appType
parameter_list|,
name|boolean
name|waitForAccepted
parameter_list|,
name|boolean
name|keepContainers
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
name|masterMemory
argument_list|)
expr_stmt|;
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
name|unmanaged
argument_list|,
name|queue
argument_list|,
name|maxAppAttempts
argument_list|,
name|ts
argument_list|,
name|appType
argument_list|,
name|waitForAccepted
argument_list|,
name|keepContainers
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, long attemptFailuresValidityInterval)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|long
name|attemptFailuresValidityInterval
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
name|masterMemory
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|attemptFailuresValidityInterval
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, String name, String user, Map<ApplicationAccessType, String> acls, boolean unmanaged, String queue, int maxAppAttempts, Credentials ts, String appType, boolean waitForAccepted, boolean keepContainers, boolean isAppIdProvided, ApplicationId applicationId)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|boolean
name|unmanaged
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|String
name|appType
parameter_list|,
name|boolean
name|waitForAccepted
parameter_list|,
name|boolean
name|keepContainers
parameter_list|,
name|boolean
name|isAppIdProvided
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
name|masterMemory
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
name|unmanaged
argument_list|,
name|queue
argument_list|,
name|maxAppAttempts
argument_list|,
name|ts
argument_list|,
name|appType
argument_list|,
name|waitForAccepted
argument_list|,
name|keepContainers
argument_list|,
name|isAppIdProvided
argument_list|,
name|applicationId
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|submitApp (int masterMemory, LogAggregationContext logAggregationContext)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
name|masterMemory
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
name|logAggregationContext
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|)
return|;
block|}
DECL|method|submitApp (Resource capability, String name, String user, Map<ApplicationAccessType, String> acls, boolean unmanaged, String queue, int maxAppAttempts, Credentials ts, String appType, boolean waitForAccepted, boolean keepContainers, boolean isAppIdProvided, ApplicationId applicationId, long attemptFailuresValidityInterval, LogAggregationContext logAggregationContext, boolean cancelTokensWhenComplete, Priority priority)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|boolean
name|unmanaged
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|String
name|appType
parameter_list|,
name|boolean
name|waitForAccepted
parameter_list|,
name|boolean
name|keepContainers
parameter_list|,
name|boolean
name|isAppIdProvided
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|long
name|attemptFailuresValidityInterval
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|Priority
name|priority
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|submitApp
argument_list|(
name|capability
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|acls
argument_list|,
name|unmanaged
argument_list|,
name|queue
argument_list|,
name|maxAppAttempts
argument_list|,
name|ts
argument_list|,
name|appType
argument_list|,
name|waitForAccepted
argument_list|,
name|keepContainers
argument_list|,
name|isAppIdProvided
argument_list|,
name|applicationId
argument_list|,
name|attemptFailuresValidityInterval
argument_list|,
name|logAggregationContext
argument_list|,
name|cancelTokensWhenComplete
argument_list|,
name|priority
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|submitApp (Resource capability, String name, String user, Map<ApplicationAccessType, String> acls, boolean unmanaged, String queue, int maxAppAttempts, Credentials ts, String appType, boolean waitForAccepted, boolean keepContainers, boolean isAppIdProvided, ApplicationId applicationId, long attemptFailuresValidityInterval, LogAggregationContext logAggregationContext, boolean cancelTokensWhenComplete, Priority priority, String amLabel, Map<ApplicationTimeoutType, Long> applicationTimeouts)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|Resource
name|capability
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|user
parameter_list|,
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
parameter_list|,
name|boolean
name|unmanaged
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|maxAppAttempts
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|String
name|appType
parameter_list|,
name|boolean
name|waitForAccepted
parameter_list|,
name|boolean
name|keepContainers
parameter_list|,
name|boolean
name|isAppIdProvided
parameter_list|,
name|ApplicationId
name|applicationId
parameter_list|,
name|long
name|attemptFailuresValidityInterval
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|boolean
name|cancelTokensWhenComplete
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|String
name|amLabel
parameter_list|,
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|applicationTimeouts
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|isAppIdProvided
condition|?
name|applicationId
else|:
literal|null
decl_stmt|;
name|ApplicationClientProtocol
name|client
init|=
name|getClientRMService
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isAppIdProvided
condition|)
block|{
name|GetNewApplicationResponse
name|resp
init|=
name|client
operator|.
name|getNewApplication
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|appId
operator|=
name|resp
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
block|}
name|SubmitApplicationRequest
name|req
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|SubmitApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|sub
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub
operator|.
name|setKeepContainersAcrossApplicationAttempts
argument_list|(
name|keepContainers
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setApplicationName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setMaxAppAttempts
argument_list|(
name|maxAppAttempts
argument_list|)
expr_stmt|;
if|if
condition|(
name|applicationTimeouts
operator|!=
literal|null
operator|&&
name|applicationTimeouts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sub
operator|.
name|setApplicationTimeouts
argument_list|(
name|applicationTimeouts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|unmanaged
condition|)
block|{
name|sub
operator|.
name|setUnmanagedAM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|priority
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|setApplicationType
argument_list|(
name|appType
argument_list|)
expr_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerLaunchContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|sub
operator|.
name|setResource
argument_list|(
name|capability
argument_list|)
expr_stmt|;
name|clc
operator|.
name|setApplicationACLs
argument_list|(
name|acls
argument_list|)
expr_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
operator|&&
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|securityTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|clc
operator|.
name|setTokens
argument_list|(
name|securityTokens
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|setAMContainerSpec
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setAttemptFailuresValidityInterval
argument_list|(
name|attemptFailuresValidityInterval
argument_list|)
expr_stmt|;
if|if
condition|(
name|logAggregationContext
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|setLogAggregationContext
argument_list|(
name|logAggregationContext
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|setCancelTokensWhenComplete
argument_list|(
name|cancelTokensWhenComplete
argument_list|)
expr_stmt|;
name|ResourceRequest
name|amResourceRequest
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|capability
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|amLabel
operator|!=
literal|null
operator|&&
operator|!
name|amLabel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|amResourceRequest
operator|.
name|setNodeLabelExpression
argument_list|(
name|amLabel
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|setAMContainerResourceRequest
argument_list|(
name|amResourceRequest
argument_list|)
expr_stmt|;
name|req
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|fakeUser
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|user
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"someGroup"
block|}
argument_list|)
decl_stmt|;
name|PrivilegedAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
name|action
init|=
operator|new
name|PrivilegedAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
argument_list|()
block|{
name|ApplicationClientProtocol
name|client
decl_stmt|;
name|SubmitApplicationRequest
name|req
decl_stmt|;
annotation|@
name|Override
specifier|public
name|SubmitApplicationResponse
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|client
operator|.
name|submitApplication
argument_list|(
name|req
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|PrivilegedAction
argument_list|<
name|SubmitApplicationResponse
argument_list|>
name|setClientReq
parameter_list|(
name|ApplicationClientProtocol
name|client
parameter_list|,
name|SubmitApplicationRequest
name|req
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
operator|.
name|setClientReq
argument_list|(
name|client
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|fakeUser
operator|.
name|doAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
comment|// make sure app is immediately available after submit
if|if
condition|(
name|waitForAccepted
condition|)
block|{
name|waitForState
argument_list|(
name|appId
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
name|RMApp
name|rmApp
init|=
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
comment|// unmanaged AM won't go to RMAppAttemptState.SCHEDULED.
if|if
condition|(
name|waitForAccepted
operator|&&
operator|!
name|unmanaged
condition|)
block|{
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
block|}
return|return
name|rmApp
return|;
block|}
DECL|method|registerNode (String nodeIdStr, int memory)
specifier|public
name|MockNM
name|registerNode
parameter_list|(
name|String
name|nodeIdStr
parameter_list|,
name|int
name|memory
parameter_list|)
throws|throws
name|Exception
block|{
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
name|nodeIdStr
argument_list|,
name|memory
argument_list|,
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|drainEvents
argument_list|()
expr_stmt|;
return|return
name|nm
return|;
block|}
DECL|method|registerNode (String nodeIdStr, int memory, int vCores)
specifier|public
name|MockNM
name|registerNode
parameter_list|(
name|String
name|nodeIdStr
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|)
throws|throws
name|Exception
block|{
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
name|nodeIdStr
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|,
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|drainEvents
argument_list|()
expr_stmt|;
return|return
name|nm
return|;
block|}
DECL|method|registerNode (String nodeIdStr, int memory, int vCores, List<ApplicationId> runningApplications)
specifier|public
name|MockNM
name|registerNode
parameter_list|(
name|String
name|nodeIdStr
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|,
name|List
argument_list|<
name|ApplicationId
argument_list|>
name|runningApplications
parameter_list|)
throws|throws
name|Exception
block|{
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
name|nodeIdStr
argument_list|,
name|memory
argument_list|,
name|vCores
argument_list|,
name|getResourceTrackerService
argument_list|()
argument_list|,
name|YarnVersionInfo
operator|.
name|getVersion
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|(
name|runningApplications
argument_list|)
expr_stmt|;
name|drainEvents
argument_list|()
expr_stmt|;
return|return
name|nm
return|;
block|}
DECL|method|sendNodeStarted (MockNM nm)
specifier|public
name|void
name|sendNodeStarted
parameter_list|(
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMNodeImpl
name|node
init|=
operator|(
name|RMNodeImpl
operator|)
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeStartedEvent
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|sendNodeLost (MockNM nm)
specifier|public
name|void
name|sendNodeLost
parameter_list|(
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMNodeImpl
name|node
init|=
operator|(
name|RMNodeImpl
operator|)
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|RMNodeEventType
operator|.
name|EXPIRE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until a node has reached a specified state.    * The timeout is 10 seconds.    * @param nodeId the id of a node    * @param finalState the node state waited    * @throws InterruptedException    *         if interrupted while waiting for the state transition    */
DECL|method|waitForState (NodeId nodeId, NodeState finalState)
specifier|public
name|void
name|waitForState
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|NodeState
name|finalState
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|RMNode
name|node
init|=
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|node
operator|=
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"node shouldn't be null"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|finalState
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getState
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|TIMEOUT_MS_FOR_CONTAINER_AND_NODE
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Node State is : "
operator|+
name|node
operator|.
name|getState
argument_list|()
operator|+
literal|" Waiting for state : "
operator|+
name|finalState
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Node "
operator|+
name|nodeId
operator|+
literal|" State is : "
operator|+
name|node
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Node state is not correct (timedout)"
argument_list|,
name|finalState
argument_list|,
name|node
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sendNodeEvent (MockNM nm, RMNodeEventType event)
specifier|public
name|void
name|sendNodeEvent
parameter_list|(
name|MockNM
name|nm
parameter_list|,
name|RMNodeEventType
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|RMNodeImpl
name|node
init|=
operator|(
name|RMNodeImpl
operator|)
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|handle
argument_list|(
operator|new
name|RMNodeEvent
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|killApp (ApplicationId appId)
specifier|public
name|KillApplicationResponse
name|killApp
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|client
init|=
name|getClientRMService
argument_list|()
decl_stmt|;
name|KillApplicationRequest
name|req
init|=
name|KillApplicationRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|forceKillApplication
argument_list|(
name|req
argument_list|)
return|;
block|}
DECL|method|failApplicationAttempt ( ApplicationAttemptId attemptId)
specifier|public
name|FailApplicationAttemptResponse
name|failApplicationAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|client
init|=
name|getClientRMService
argument_list|()
decl_stmt|;
name|FailApplicationAttemptRequest
name|req
init|=
name|FailApplicationAttemptRequest
operator|.
name|newInstance
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|failApplicationAttempt
argument_list|(
name|req
argument_list|)
return|;
block|}
comment|/**    * recommend to use launchAM, or use sendAMLaunched like:    * 1, wait RMAppAttempt scheduled    * 2, send node heartbeat    * 3, sendAMLaunched    */
DECL|method|sendAMLaunched (ApplicationAttemptId appAttemptId)
specifier|public
name|MockAM
name|sendAMLaunched
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|Exception
block|{
name|MockAM
name|am
init|=
operator|new
name|MockAM
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|masterService
argument_list|,
name|appAttemptId
argument_list|)
decl_stmt|;
name|waitForState
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|//create and set AMRMToken
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|this
operator|.
name|rmContext
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|createAndGetAMRMToken
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
operator|(
operator|(
name|RMAppAttemptImpl
operator|)
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|)
operator|.
name|setAMRMToken
argument_list|(
name|amrmToken
argument_list|)
expr_stmt|;
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|sendAMLaunchFailed (ApplicationAttemptId appAttemptId)
specifier|public
name|void
name|sendAMLaunchFailed
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|)
throws|throws
name|Exception
block|{
name|MockAM
name|am
init|=
operator|new
name|MockAM
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|masterService
argument_list|,
name|appAttemptId
argument_list|)
decl_stmt|;
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptEvent
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptEventType
operator|.
name|LAUNCH_FAILED
argument_list|,
literal|"Failed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createClientRMService ()
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|getResourceScheduler
argument_list|()
argument_list|,
name|rmAppManager
argument_list|,
name|applicationACLsManager
argument_list|,
name|queueACLsManager
argument_list|,
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
comment|// override to not start rpc handler
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
comment|// don't do anything
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createResourceTrackerService ()
specifier|protected
name|ResourceTrackerService
name|createResourceTrackerService
parameter_list|()
block|{
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
decl_stmt|;
name|containerTokenSecretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|NMTokenSecretManagerInRM
name|nmTokenSecretManager
init|=
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
decl_stmt|;
name|nmTokenSecretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
return|return
operator|new
name|ResourceTrackerService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|nodesListManager
argument_list|,
name|this
operator|.
name|nmLivelinessMonitor
argument_list|,
name|containerTokenSecretManager
argument_list|,
name|nmTokenSecretManager
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
comment|// override to not start rpc handler
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
comment|// don't do anything
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createApplicationMasterService ()
specifier|protected
name|ApplicationMasterService
name|createApplicationMasterService
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|rmContext
operator|.
name|getYarnConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED
argument_list|,
name|YarnConfiguration
operator|.
name|OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED_DEFAULT
argument_list|)
condition|)
block|{
return|return
operator|new
name|OpportunisticContainerAllocatorAMService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|scheduler
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
comment|// override to not start rpc handler
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
comment|// don't do anything
block|}
block|}
return|;
block|}
return|return
operator|new
name|ApplicationMasterService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|scheduler
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
comment|// override to not start rpc handler
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
comment|// don't do anything
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createAMLauncher ()
specifier|protected
name|ApplicationMasterLauncher
name|createAMLauncher
parameter_list|()
block|{
return|return
operator|new
name|ApplicationMasterLauncher
argument_list|(
name|getRMContext
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
block|{
comment|// override to not start rpc handler
block|}
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|AMLauncherEvent
name|appEvent
parameter_list|)
block|{
comment|// don't do anything
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
block|{
comment|// don't do anything
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|createAdminService ()
specifier|protected
name|AdminService
name|createAdminService
parameter_list|()
block|{
return|return
operator|new
name|AdminService
argument_list|(
name|this
argument_list|,
name|getRMContext
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|startServer
parameter_list|()
block|{
comment|// override to not start rpc handler
block|}
annotation|@
name|Override
specifier|protected
name|void
name|stopServer
parameter_list|()
block|{
comment|// don't do anything
block|}
annotation|@
name|Override
specifier|protected
name|EmbeddedElectorService
name|createEmbeddedElectorService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
DECL|method|getNodesListManager ()
specifier|public
name|NodesListManager
name|getNodesListManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|nodesListManager
return|;
block|}
DECL|method|getClientToAMTokenSecretManager ()
specifier|public
name|ClientToAMTokenSecretManagerInRM
name|getClientToAMTokenSecretManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|getRMContext
argument_list|()
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
return|;
block|}
DECL|method|getRMAppManager ()
specifier|public
name|RMAppManager
name|getRMAppManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|rmAppManager
return|;
block|}
DECL|method|getAdminService ()
specifier|public
name|AdminService
name|getAdminService
parameter_list|()
block|{
return|return
name|this
operator|.
name|adminService
return|;
block|}
annotation|@
name|Override
DECL|method|startWepApp ()
specifier|protected
name|void
name|startWepApp
parameter_list|()
block|{
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|ENABLE_WEBAPP
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|super
operator|.
name|startWepApp
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Disable webapp
block|}
DECL|method|finishAMAndVerifyAppState (RMApp rmApp, MockRM rm, MockNM nm, MockAM am)
specifier|public
specifier|static
name|void
name|finishAMAndVerifyAppState
parameter_list|(
name|RMApp
name|rmApp
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockAM
name|am
parameter_list|)
throws|throws
name|Exception
block|{
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|waitForSchedulerAppAttemptAdded ( ApplicationAttemptId attemptId, MockRM rm)
specifier|private
specifier|static
name|void
name|waitForSchedulerAppAttemptAdded
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|MockRM
name|rm
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|tick
init|=
literal|0
decl_stmt|;
comment|// Wait for at most 5 sec
while|while
condition|(
literal|null
operator|==
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
operator|&&
name|tick
operator|<
literal|50
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|tick
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for SchedulerApplicationAttempt="
operator|+
name|attemptId
operator|+
literal|" added."
argument_list|)
expr_stmt|;
block|}
name|tick
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Timed out waiting for SchedulerApplicationAttempt="
operator|+
name|attemptId
operator|+
literal|" to be added."
argument_list|,
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getApplicationAttempt
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * NOTE: nm.nodeHeartbeat is explicitly invoked,    * don't invoke it before calling launchAM    */
DECL|method|launchAM (RMApp app, MockRM rm, MockNM nm)
specifier|public
specifier|static
name|MockAM
name|launchAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMAppAttempt
name|attempt
init|=
name|waitForAttemptScheduled
argument_list|(
name|app
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Launch AM "
operator|+
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|launchUAM (RMApp app, MockRM rm, MockNM nm)
specifier|public
specifier|static
name|MockAM
name|launchUAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
comment|// UAMs go directly to LAUNCHED state
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|waitForSchedulerAppAttemptAdded
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Launch AM "
operator|+
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am
init|=
operator|new
name|MockAM
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|rm
operator|.
name|masterService
argument_list|,
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|waitForAttemptScheduled (RMApp app, MockRM rm)
specifier|public
specifier|static
name|RMAppAttempt
name|waitForAttemptScheduled
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|)
throws|throws
name|Exception
block|{
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|waitForSchedulerAppAttemptAdded
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
return|return
name|attempt
return|;
block|}
DECL|method|launchAndRegisterAM (RMApp app, MockRM rm, MockNM nm)
specifier|public
specifier|static
name|MockAM
name|launchAndRegisterAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|MockAM
name|am
init|=
name|launchAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|getApplicationReport (ApplicationId appId)
specifier|public
name|ApplicationReport
name|getApplicationReport
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|ApplicationClientProtocol
name|client
init|=
name|getClientRMService
argument_list|()
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|client
operator|.
name|getApplicationReport
argument_list|(
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
DECL|method|updateReservationState (ReservationUpdateRequest request)
specifier|public
name|void
name|updateReservationState
parameter_list|(
name|ReservationUpdateRequest
name|request
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|ApplicationClientProtocol
name|client
init|=
name|getClientRMService
argument_list|()
decl_stmt|;
name|client
operator|.
name|updateReservation
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
comment|// Explicitly reset queue metrics for testing.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
DECL|method|clearQueueMetrics (RMApp app)
specifier|public
name|void
name|clearQueueMetrics
parameter_list|(
name|RMApp
name|app
parameter_list|)
block|{
operator|(
operator|(
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
operator|)
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getMetrics
argument_list|()
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
block|}
DECL|method|getRMActiveService ()
specifier|public
name|RMActiveServices
name|getRMActiveService
parameter_list|()
block|{
return|return
name|activeServices
return|;
block|}
DECL|method|signalToContainer (ContainerId containerId, SignalContainerCommand command)
specifier|public
name|void
name|signalToContainer
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|SignalContainerCommand
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationClientProtocol
name|client
init|=
name|getClientRMService
argument_list|()
decl_stmt|;
name|SignalContainerRequest
name|req
init|=
name|SignalContainerRequest
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|client
operator|.
name|signalToContainer
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
comment|/**    * Wait until an app removed from scheduler.    * The timeout is 40 seconds.    * @param appId the id of an app    * @throws InterruptedException    *         if interrupted while waiting for app removed    */
DECL|method|waitForAppRemovedFromScheduler (ApplicationId appId)
specifier|public
name|void
name|waitForAppRemovedFromScheduler
parameter_list|(
name|ApplicationId
name|appId
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|timeWaiting
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|SchedulerApplication
argument_list|>
name|apps
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulerApplications
argument_list|()
decl_stmt|;
while|while
condition|(
name|apps
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
condition|)
block|{
if|if
condition|(
name|timeWaiting
operator|>=
name|TIMEOUT_MS_FOR_APP_REMOVED
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"wait for app removed, "
operator|+
name|appId
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|WAIT_MS_PER_LOOP
argument_list|)
expr_stmt|;
name|timeWaiting
operator|+=
name|WAIT_MS_PER_LOOP
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"app is not removed from scheduler (timeout)."
argument_list|,
operator|!
name|apps
operator|.
name|containsKey
argument_list|(
name|appId
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"app is removed from scheduler, "
operator|+
name|appId
argument_list|)
expr_stmt|;
block|}
DECL|method|submitApp (int masterMemory, Priority priority, Map<ApplicationTimeoutType, Long> applicationTimeouts)
specifier|public
name|RMApp
name|submitApp
parameter_list|(
name|int
name|masterMemory
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|Map
argument_list|<
name|ApplicationTimeoutType
argument_list|,
name|Long
argument_list|>
name|applicationTimeouts
parameter_list|)
throws|throws
name|Exception
block|{
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|masterMemory
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|submitApp
argument_list|(
name|resource
argument_list|,
literal|""
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|super
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
literal|null
argument_list|,
name|applicationTimeouts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

