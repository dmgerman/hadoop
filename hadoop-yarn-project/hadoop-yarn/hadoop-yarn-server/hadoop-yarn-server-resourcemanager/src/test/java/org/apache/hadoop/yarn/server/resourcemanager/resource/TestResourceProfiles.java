begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.resource
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|TestResourceProfiles
specifier|public
class|class
name|TestResourceProfiles
block|{
annotation|@
name|Test
DECL|method|testProfilesEnabled ()
specifier|public
name|void
name|testProfilesEnabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceProfilesManager
name|manager
init|=
operator|new
name|ResourceProfilesManagerImpl
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// be default resource profiles should not be enabled
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|getResourceProfiles
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should be thrown as resource profile is not enabled"
operator|+
literal|" and getResourceProfiles is invoked."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ie
parameter_list|)
block|{     }
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception should be thrown due to missing resource profiles file"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{     }
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_SOURCE_FILE
argument_list|,
literal|"profiles/sample-profiles-1.json"
argument_list|)
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLoadProfiles ()
specifier|public
name|void
name|testLoadProfiles
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceProfilesManager
name|manager
init|=
operator|new
name|ResourceProfilesManagerImpl
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_SOURCE_FILE
argument_list|,
literal|"profiles/sample-profiles-1.json"
argument_list|)
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|profiles
init|=
name|manager
operator|.
name|getResourceProfiles
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"minimum"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"maximum"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|expected
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|profile
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Resource
name|res
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Mandatory profile '"
operator|+
name|profile
operator|+
literal|"' missing"
argument_list|,
name|profiles
operator|.
name|containsKey
argument_list|(
name|profile
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Profile "
operator|+
name|profile
operator|+
literal|"' resources don't match"
argument_list|,
name|res
argument_list|,
name|manager
operator|.
name|getProfile
argument_list|(
name|profile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLoadProfilesMissingMandatoryProfile ()
specifier|public
name|void
name|testLoadProfilesMissingMandatoryProfile
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|badProfiles
init|=
block|{
literal|"profiles/illegal-profiles-1.json"
block|,
literal|"profiles/illegal-profiles-2.json"
block|,
literal|"profiles/illegal-profiles-3.json"
block|}
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|badProfiles
control|)
block|{
name|ResourceProfilesManager
name|manager
init|=
operator|new
name|ResourceProfilesManagerImpl
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_SOURCE_FILE
argument_list|,
name|file
argument_list|)
expr_stmt|;
try|try
block|{
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Bad profile '"
operator|+
name|file
operator|+
literal|"' is not valid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ie
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|Test
DECL|method|testGetProfile ()
specifier|public
name|void
name|testGetProfile
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ResourceProfilesManager
name|manager
init|=
operator|new
name|ResourceProfilesManagerImpl
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_SOURCE_FILE
argument_list|,
literal|"profiles/sample-profiles-2.json"
argument_list|)
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"minimum"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"maximum"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"small"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"medium"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"large"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|entry
range|:
name|expected
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|profile
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Resource
name|res
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Profile "
operator|+
name|profile
operator|+
literal|"' resources don't match"
argument_list|,
name|res
argument_list|,
name|manager
operator|.
name|getProfile
argument_list|(
name|profile
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testGetMandatoryProfiles ()
specifier|public
name|void
name|testGetMandatoryProfiles
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceProfilesManager
name|manager
init|=
operator|new
name|ResourceProfilesManagerImpl
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_RESOURCE_PROFILES_SOURCE_FILE
argument_list|,
literal|"profiles/sample-profiles-1.json"
argument_list|)
expr_stmt|;
name|manager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|expected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"minimum"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|put
argument_list|(
literal|"maximum"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Profile 'minimum' resources don't match"
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|"minimum"
argument_list|)
argument_list|,
name|manager
operator|.
name|getMinimumProfile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Profile 'default' resources don't match"
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|"default"
argument_list|)
argument_list|,
name|manager
operator|.
name|getDefaultProfile
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Profile 'maximum' resources don't match"
argument_list|,
name|expected
operator|.
name|get
argument_list|(
literal|"maximum"
argument_list|)
argument_list|,
name|manager
operator|.
name|getMaximumProfile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

