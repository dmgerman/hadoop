begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ExitUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AMCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|ApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStoreEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMRestart
specifier|public
class|class
name|TestRMRestart
block|{
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
comment|// Fake rmAddr for token-renewal
DECL|field|rmAddr
specifier|private
specifier|static
name|InetSocketAddress
name|rmAddr
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|UnknownHostException
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|ExitUtil
operator|.
name|disableSystemExit
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rmAddr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|8032
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testRMRestart ()
specifier|public
name|void
name|testRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// PHASE 1: create state in an RM
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
comment|// start like normal because state is empty
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.2:5678"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// nm2 will not heartbeat with RM1
comment|// create app that will finish and the final state should be saved.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt0
init|=
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// spot check that app is saved
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rmAppState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am0
init|=
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|)
expr_stmt|;
comment|// create app that gets launched and does allocate before RM restart
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// assert app1 info is saved
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|//kick the scheduling to allocate AM container
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// assert app1 attempt is saved
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptState
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch the AM
name|MockAM
name|am1
init|=
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// AM request for containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// kick the scheduler
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|conts
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|conts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// create app that does not get launched by RM before RM restart
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// assert app2 info is saved
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app2
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// create unmanaged app
name|RMApp
name|appUnmanaged
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"someApp"
argument_list|,
literal|"someUser"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|unmanagedAttemptId
init|=
name|appUnmanaged
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
comment|// assert appUnmanaged info is saved
name|ApplicationId
name|unmanagedAppId
init|=
name|appUnmanaged
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|unmanagedAppId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// wait for attempt to reach LAUNCHED state
name|rm1
operator|.
name|waitForState
argument_list|(
name|unmanagedAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|unmanagedAppId
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// assert unmanaged attempt info is saved
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appUnmanaged
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// PHASE 2: create new RM and start from old state
comment|// create new RM to represent restart and recover state
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
comment|// start new RM
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// change NM to point to new RM
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify load of old state
comment|// 4 apps are loaded.
comment|// FINISHED app and attempt is also loaded back.
comment|// Unmanaged app state is still loaded back but it cannot be restarted by
comment|// the RM. this will change with work preserving RM restart in which AMs/NMs
comment|// are not rebooted.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that earlier finished app and attempt is also loaded back and move
comment|// to finished state.
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// verify correct number of attempts and other data
name|RMApp
name|loadedApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|loadedApp1
argument_list|)
expr_stmt|;
comment|//Assert.assertEquals(1, loadedApp1.getAppAttempts().size());
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|loadedApp1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|loadedApp2
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|loadedApp2
argument_list|)
expr_stmt|;
comment|//Assert.assertEquals(0, loadedApp2.getAppAttempts().size());
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app2
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|loadedApp2
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify state machine kicked into expected states
name|rm2
operator|.
name|waitForState
argument_list|(
name|loadedApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|loadedApp2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// verify new attempts created
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadedApp1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp2
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify old AM is not accepted
comment|// change running AM to talk to new RM
name|am1
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocResponse
operator|.
name|getAMCommand
argument_list|()
operator|==
name|AMCommand
operator|.
name|AM_RESYNC
argument_list|)
expr_stmt|;
comment|// NM should be rebooted on heartbeat, even first heartbeat for nm2
name|NodeHeartbeatResponse
name|hbResponse
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|hbResponse
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// new NM to represent NM re-register
name|nm1
operator|=
name|rm2
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|)
expr_stmt|;
name|nm2
operator|=
name|rm2
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:5678"
argument_list|,
literal|15120
argument_list|)
expr_stmt|;
comment|// verify no more reboot response sent
name|hbResponse
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|RESYNC
operator|!=
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|hbResponse
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|RESYNC
operator|!=
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert app1 attempt is saved
name|attempt1
operator|=
name|loadedApp1
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
name|attemptId1
operator|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|loadedApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|attemptState
operator|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nodes on which the AM's run
name|MockNM
name|am1Node
init|=
name|nm1
decl_stmt|;
if|if
condition|(
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"127.0.0.2"
argument_list|)
condition|)
block|{
name|am1Node
operator|=
name|nm2
expr_stmt|;
block|}
comment|// assert app2 attempt is saved
name|RMAppAttempt
name|attempt2
init|=
name|loadedApp2
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|loadedApp2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|attemptState
operator|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|MockNM
name|am2Node
init|=
name|nm1
decl_stmt|;
if|if
condition|(
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"127.0.0.2"
argument_list|)
condition|)
block|{
name|am2Node
operator|=
name|nm2
expr_stmt|;
block|}
comment|// start the AM's
name|am1
operator|=
name|rm2
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|MockAM
name|am2
init|=
name|rm2
operator|.
name|sendAMLaunched
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|//request for containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify container allocate continues to work
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
while|while
condition|(
name|conts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// finish the AMs
name|finishApplicationMaster
argument_list|(
name|loadedApp1
argument_list|,
name|rm2
argument_list|,
name|am1Node
argument_list|,
name|am1
argument_list|)
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|loadedApp2
argument_list|,
name|rm2
argument_list|,
name|am2Node
argument_list|,
name|am2
argument_list|)
expr_stmt|;
comment|// stop RM's
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// completed apps are not removed immediately after app finish
comment|// And finished app is also loaded back.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rmAppState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMRestartAppRunningAMFailed ()
specifier|public
name|void
name|testRMRestartAppRunningAMFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am0
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// assert the AM failed state is saved.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert app state has not been saved.
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// new AM started but not registered, app still stays at ACCECPTED state.
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// assert the previous AM state is loaded back on RM recovery.
name|RMApp
name|recoveredApp
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|recoveredApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMRestartFailedApp ()
specifier|public
name|void
name|testRMRestartFailedApp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am0
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// assert the app/attempt failed state is saved.
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|appState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// no new attempt is created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppReportAfterRMRestart
argument_list|(
name|app0
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app0
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failing the application."
argument_list|)
argument_list|)
expr_stmt|;
comment|// failed diagnostics from attempt is lost because the diagnostics from
comment|// attempt is not yet available by the time app is saving the app state.
block|}
annotation|@
name|Test
DECL|method|testRMRestartKilledApp ()
specifier|public
name|void
name|testRMRestartKilledApp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// kill the app.
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// killed state is saved.
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|appState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// no new attempt is created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
name|verifyAppReportAfterRMRestart
argument_list|(
name|app0
argument_list|,
name|rm2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app0
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|appReport
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMRestartSucceededApp ()
specifier|public
name|void
name|testRMRestartSucceededApp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create an app and finish the app.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// unregister am
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"trackingUrl"
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|,
name|req
argument_list|)
expr_stmt|;
comment|// check the state store about the unregistered info.
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptState
name|attemptState0
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"diagnostics"
argument_list|,
name|attemptState0
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|attemptState0
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"trackingUrl"
argument_list|,
name|attemptState0
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app0
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|appState
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify application report returns the same app info as the app info
comment|// before RM restarts.
name|ApplicationReport
name|appReport
init|=
name|verifyAppReportAfterRMRestart
argument_list|(
name|app0
argument_list|,
name|rm2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|appReport
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"trackingUrl"
argument_list|,
name|appReport
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMRestartGetApplicationList ()
specifier|public
name|void
name|testRMRestartGetApplicationList
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// a succeeded app.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"myType"
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|)
expr_stmt|;
comment|// a failed app.
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"myType"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am1
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// a killed app.
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"myType"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|launchAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|killApp
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMAppManager
name|createRMAppManager
parameter_list|()
block|{
return|return
name|spy
argument_list|(
name|super
operator|.
name|createRMAppManager
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|GetApplicationsRequest
name|request1
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
argument_list|)
decl_stmt|;
name|GetApplicationsResponse
name|response1
init|=
name|rm2
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appList1
init|=
name|response1
operator|.
name|getApplicationList
argument_list|()
decl_stmt|;
comment|// assert all applications exist according to application state after RM
comment|// restarts.
name|boolean
name|forApp0
init|=
literal|false
decl_stmt|,
name|forApp1
init|=
literal|false
decl_stmt|,
name|forApp2
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|appList1
control|)
block|{
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|forApp0
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|FAILED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|forApp1
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|forApp2
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|forApp0
operator|&&
name|forApp1
operator|&&
name|forApp2
argument_list|)
expr_stmt|;
comment|// assert all applications exist according to application type after RM
comment|// restarts.
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appTypes
operator|.
name|add
argument_list|(
literal|"myType"
argument_list|)
expr_stmt|;
name|GetApplicationsRequest
name|request2
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|appTypes
argument_list|)
decl_stmt|;
name|GetApplicationsResponse
name|response2
init|=
name|rm2
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appList2
init|=
name|response2
operator|.
name|getApplicationList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|3
operator|==
name|appList2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check application summary is logged for the completed apps after RM restart.
name|verify
argument_list|(
name|rm2
operator|.
name|getRMAppManager
argument_list|()
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|logApplicationSummary
argument_list|(
name|isA
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|launchAM (RMApp app, MockRM rm, MockNM nm)
specifier|private
name|MockAM
name|launchAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|verifyAppReportAfterRMRestart (RMApp app, MockRM rm)
specifier|private
name|ApplicationReport
name|verifyAppReportAfterRMRestart
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|)
throws|throws
name|Exception
block|{
name|GetApplicationReportRequest
name|reportRequest
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|reportRequest
argument_list|)
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|response
operator|.
name|getApplicationReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|createApplicationState
argument_list|()
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|1
operator|==
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
DECL|method|finishApplicationMaster (RMApp rmApp, MockRM rm, MockNM nm, MockAM am)
specifier|private
name|void
name|finishApplicationMaster
parameter_list|(
name|RMApp
name|rmApp
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockAM
name|am
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|rmApp
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|,
name|am
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
DECL|method|finishApplicationMaster (RMApp rmApp, MockRM rm, MockNM nm, MockAM am, FinishApplicationMasterRequest req)
specifier|private
name|void
name|finishApplicationMaster
parameter_list|(
name|RMApp
name|rmApp
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockAM
name|am
parameter_list|,
name|FinishApplicationMasterRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|RMState
name|rmState
init|=
operator|(
operator|(
name|MemoryRMStateStore
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|)
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForState
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// check that app/attempt is saved with the final state
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|appState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMRestartOnMaxAppAttempts ()
specifier|public
name|void
name|testRMRestartOnMaxAppAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// submit an app with maxAppAttempts equals to 1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// submit an app with maxAppAttempts equals to -1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// assert app1 info is saved
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate the AM
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptState
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify that maxAppAttempts is set to global value
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
expr_stmt|;
comment|// app1 and app2 are loaded back, but app1 failed because it's
comment|// hitting max-retry.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// app1 failed state is saved in state store. app2 final saved state is not
comment|// determined yet.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmAppState
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// stop the RM
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenRestoredInDelegationTokenRenewer ()
specifier|public
name|void
name|testDelegationTokenRestoredInDelegationTokenRenewer
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|>
name|tokenSet
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// create an empty credential
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// create tokens and add into credential
name|Text
name|userText1
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
name|userText1
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId1
argument_list|,
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token1
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|userText1
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|tokenSet
operator|.
name|add
argument_list|(
name|token1
argument_list|)
expr_stmt|;
name|Text
name|userText2
init|=
operator|new
name|Text
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId2
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
name|userText2
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer2"
argument_list|)
argument_list|,
name|userText2
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId2
argument_list|,
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token2
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|userText2
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|tokenSet
operator|.
name|add
argument_list|(
name|token2
argument_list|)
expr_stmt|;
comment|// submit an app with customized credential
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// assert app info is saved
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// assert delegation tokens exist in rm1 DelegationTokenRenewr
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenSet
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert delegation tokens are saved
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|securityTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|securityTokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|securityTokens
argument_list|,
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify tokens are properly populated back to rm2 DelegationTokenRenewer
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenSet
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|// stop the RM
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAttemptTokensRestoredOnRMRestart ()
specifier|public
name|void
name|testAppAttemptTokensRestoredOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"0.0.0.0:4321"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// submit an app
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
comment|// assert app info is saved
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// Allocate the AM
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|// assert attempt info is saved
name|ApplicationAttemptState
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// the appToken and clientTokenMasterKey that are generated when
comment|// RMAppAttempt is created,
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|tokenSet
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tokenSet
operator|.
name|add
argument_list|(
name|attempt1
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|clientTokenMasterKey
init|=
name|attempt1
operator|.
name|getClientTokenMasterKey
argument_list|()
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
comment|// assert application credentials are saved
name|Credentials
name|savedCredentials
init|=
name|attemptState
operator|.
name|getAppAttemptCredentials
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
name|savedTokens
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|savedTokens
operator|.
name|addAll
argument_list|(
name|savedCredentials
operator|.
name|getAllTokens
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenSet
argument_list|,
name|savedTokens
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"client token master key not saved"
argument_list|,
name|clientTokenMasterKey
argument_list|,
name|savedCredentials
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|loadedAttempt1
init|=
name|loadedApp1
operator|.
name|getRMAppAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
comment|// assert loaded attempt recovered attempt tokens
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|loadedAttempt1
argument_list|)
expr_stmt|;
name|savedTokens
operator|.
name|clear
argument_list|()
expr_stmt|;
name|savedTokens
operator|.
name|add
argument_list|(
name|loadedAttempt1
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenSet
argument_list|,
name|savedTokens
argument_list|)
expr_stmt|;
comment|// assert client token master key is recovered back to api-versioned
comment|// client token master key
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"client token master key not restored"
argument_list|,
name|attempt1
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|,
name|loadedAttempt1
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert ClientTokenSecretManager also knows about the key
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|clientTokenMasterKey
argument_list|,
name|rm2
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|getMasterKey
argument_list|(
name|attemptId1
argument_list|)
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert AMRMTokenSecretManager also knows about the AMRMToken password
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|loadedAttempt1
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|amrmToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|rm2
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|retrievePassword
argument_list|(
name|amrmToken
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMDelegationTokenRestoredOnRMRestart ()
specifier|public
name|void
name|testRMDelegationTokenRestoredOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"localhost:8032"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|rmDTState
init|=
name|rmState
operator|.
name|getRMDTSecretManagerState
argument_list|()
operator|.
name|getTokenState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|DelegationKey
argument_list|>
name|rmDTMasterKeyState
init|=
name|rmState
operator|.
name|getRMDTSecretManagerState
argument_list|()
operator|.
name|getMasterKeyState
argument_list|()
decl_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create an empty credential
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// request a token and add into credential
name|GetDelegationTokenRequest
name|request1
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
literal|"renewer1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|GetDelegationTokenResponse
name|response1
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|request1
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|delegationToken1
init|=
name|response1
operator|.
name|getRMDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token1
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|delegationToken1
argument_list|,
name|rmAddr
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
name|token1
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|tokenIdentSet
init|=
operator|new
name|HashSet
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|token1
operator|.
name|getService
argument_list|()
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|tokenIdentSet
operator|.
name|add
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
comment|// submit an app with customized credential
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// assert app info is saved
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// assert all master keys are saved
name|Set
argument_list|<
name|DelegationKey
argument_list|>
name|allKeysRM1
init|=
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getAllMasterKeys
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allKeysRM1
argument_list|,
name|rmDTMasterKeyState
argument_list|)
expr_stmt|;
comment|// assert all tokens are saved
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|allTokensRM1
init|=
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenIdentSet
argument_list|,
name|allTokensRM1
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allTokensRM1
argument_list|,
name|rmDTState
argument_list|)
expr_stmt|;
comment|// assert sequence number is saved
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|,
name|rmState
operator|.
name|getRMDTSecretManagerState
argument_list|()
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// request one more token
name|GetDelegationTokenRequest
name|request2
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
literal|"renewer2"
argument_list|)
decl_stmt|;
name|GetDelegationTokenResponse
name|response2
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|request2
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|delegationToken2
init|=
name|response2
operator|.
name|getRMDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token2
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|delegationToken2
argument_list|,
name|rmAddr
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId2
init|=
name|token2
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
comment|// cancel token2
try|try
block|{
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|cancelToken
argument_list|(
name|token2
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// Assert the token which has the latest delegationTokenSequenceNumber is removed
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|,
name|dtId2
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmDTState
operator|.
name|containsKey
argument_list|(
name|dtId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// assert master keys and tokens are populated back to DTSecretManager
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|allTokensRM2
init|=
name|rm2
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allTokensRM2
operator|.
name|keySet
argument_list|()
argument_list|,
name|allTokensRM1
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// rm2 has its own master keys when it starts, we use containsAll here
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm2
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getAllMasterKeys
argument_list|()
operator|.
name|containsAll
argument_list|(
name|allKeysRM1
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert sequenceNumber is properly recovered,
comment|// even though the token which has max sequenceNumber is not stored
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm1
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// renewDate before renewing
name|Long
name|renewDateBeforeRenew
init|=
name|allTokensRM2
operator|.
name|get
argument_list|(
name|dtId1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// renew recovered token
name|rm2
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|renewToken
argument_list|(
name|token1
argument_list|,
literal|"renewer1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|allTokensRM2
operator|=
name|rm2
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
expr_stmt|;
name|Long
name|renewDateAfterRenew
init|=
name|allTokensRM2
operator|.
name|get
argument_list|(
name|dtId1
argument_list|)
decl_stmt|;
comment|// assert token is renewed
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewDateAfterRenew
operator|>
name|renewDateBeforeRenew
argument_list|)
expr_stmt|;
comment|// assert new token is added into state store
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmDTState
operator|.
name|containsValue
argument_list|(
name|renewDateAfterRenew
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert old token is removed from state store
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmDTState
operator|.
name|containsValue
argument_list|(
name|renewDateBeforeRenew
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rm2
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|cancelToken
argument_list|(
name|token1
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// assert token is removed from state after its cancelled
name|allTokensRM2
operator|=
name|rm2
operator|.
name|getRMDTSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allTokensRM2
operator|.
name|containsKey
argument_list|(
name|dtId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmDTState
operator|.
name|containsKey
argument_list|(
name|dtId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// stop the RM
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// This is to test submit an application to the new RM with the old delegation
comment|// token got from previous RM.
annotation|@
name|Test
DECL|method|testAppSubmissionWithOldDelegationTokenAfterRMRestart ()
specifier|public
name|void
name|testAppSubmissionWithOldDelegationTokenAfterRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"localhost:8032"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GetDelegationTokenRequest
name|request1
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
literal|"renewer1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|GetDelegationTokenResponse
name|response1
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|request1
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token1
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|response1
operator|.
name|getRMDelegationToken
argument_list|()
argument_list|,
name|rmAddr
argument_list|)
decl_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit an app with the old delegation token got from previous RM.
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|token1
operator|.
name|getService
argument_list|()
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm2
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMStateStoreDispatcherDrainedOnRMStop ()
specifier|public
name|void
name|testRMStateStoreDispatcherDrainedOnRMStop
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
block|{
specifier|volatile
name|boolean
name|wait
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Unblock app saving request.
name|wait
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleStoreEvent
parameter_list|(
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
comment|// Block app saving request.
while|while
condition|(
name|wait
condition|)
empty_stmt|;
name|super
operator|.
name|handleStoreEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start RM
specifier|final
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create apps.
specifier|final
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
name|appList
init|=
operator|new
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUM_APPS
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_APPS
condition|;
name|i
operator|++
control|)
block|{
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|appList
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|)
expr_stmt|;
block|}
comment|// all apps's saving request are now enqueued to RMStateStore's dispatcher
comment|// queue, and will be processed once rm.stop() is called.
comment|// Nothing exist in state store before stop is called.
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationState
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmAppState
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// stop rm
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Assert app info is still saved even if stop is called with pending saving
comment|// request on dispatcher.
for|for
control|(
name|RMApp
name|app
range|:
name|appList
control|)
block|{
name|ApplicationState
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmAppState
operator|.
name|size
argument_list|()
operator|==
name|NUM_APPS
argument_list|)
expr_stmt|;
block|}
DECL|class|TestSecurityMockRM
specifier|public
specifier|static
class|class
name|TestSecurityMockRM
extends|extends
name|MockRM
block|{
DECL|method|TestSecurityMockRM (Configuration conf, RMStateStore store)
specifier|public
name|TestSecurityMockRM
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createClientRMService ()
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|getResourceScheduler
argument_list|()
argument_list|,
name|rmAppManager
argument_list|,
name|applicationACLsManager
argument_list|,
literal|null
argument_list|,
name|rmDTSecretManager
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|//do nothing
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|doSecureLogin ()
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
block|}
block|}
end_class

end_unit

