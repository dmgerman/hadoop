begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SaslRpcServer
operator|.
name|AuthMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
operator|.
name|STATE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationReportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetApplicationsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|KillApplicationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AllocateRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|YarnApplicationState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|ApplicationAttemptNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|metrics
operator|.
name|SystemMetricsPublisher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStoreAMRMTokenEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStoreEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStoreRMDTEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStoreRMDTMasterKeyEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|TestSchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|DelegationTokenRenewer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|collector
operator|.
name|TimelineCollectorContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|FileSystemTimelineWriterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|timelineservice
operator|.
name|storage
operator|.
name|TimelineWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestRMRestart
specifier|public
class|class
name|TestRMRestart
extends|extends
name|ParameterizedSchedulerTestBase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRMRestart
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|TEMP_DIR
specifier|private
specifier|final
specifier|static
name|File
name|TEMP_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|,
literal|"decommision"
argument_list|)
decl_stmt|;
DECL|field|hostFile
specifier|private
name|File
name|hostFile
init|=
operator|new
name|File
argument_list|(
name|TEMP_DIR
operator|+
name|File
operator|.
name|separator
operator|+
literal|"hostFile.txt"
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
comment|// Fake rmAddr for token-renewal
DECL|field|rmAddr
specifier|private
specifier|static
name|InetSocketAddress
name|rmAddr
decl_stmt|;
DECL|field|rms
specifier|private
name|List
argument_list|<
name|MockRM
argument_list|>
name|rms
init|=
operator|new
name|ArrayList
argument_list|<
name|MockRM
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|TestRMRestart (SchedulerType type)
specifier|public
name|TestRMRestart
parameter_list|(
name|SchedulerType
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|getConf
argument_list|()
expr_stmt|;
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_WRITER_CLASS
argument_list|,
name|FileSystemTimelineWriterImpl
operator|.
name|class
argument_list|,
name|TimelineWriter
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmAddr
operator|=
operator|new
name|InetSocketAddress
argument_list|(
literal|"localhost"
argument_list|,
literal|8032
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
for|for
control|(
name|MockRM
name|rm
range|:
name|rms
control|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|rms
operator|.
name|clear
argument_list|()
expr_stmt|;
name|TEMP_DIR
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/**    *    * @return a new MockRM that will be stopped at the end of the test.    */
DECL|method|createMockRM (YarnConfiguration conf, RMStateStore store)
specifier|private
name|MockRM
name|createMockRM
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|)
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|rms
operator|.
name|add
argument_list|(
name|rm
argument_list|)
expr_stmt|;
return|return
name|rm
return|;
block|}
DECL|method|createMockRM (YarnConfiguration config)
specifier|private
name|MockRM
name|createMockRM
parameter_list|(
name|YarnConfiguration
name|config
parameter_list|)
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|rms
operator|.
name|add
argument_list|(
name|rm
argument_list|)
expr_stmt|;
return|return
name|rm
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
DECL|method|testRMRestart ()
specifier|public
name|void
name|testRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
comment|// PHASE 1: create RM and get state
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start like normal because state is empty
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.2:5678"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// nm2 will not heartbeat with RM1
comment|// create app that will finish and the final state should be saved.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt0
init|=
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// spot check that app is saved
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rmAppState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am0
init|=
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|)
expr_stmt|;
comment|// create app that gets launched and does allocate before RM restart
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// assert app1 info is saved
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|//kick the scheduling to allocate AM container
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// assert app1 attempt is saved
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch the AM
name|MockAM
name|am1
init|=
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// AM request for containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// kick the scheduler
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|conts
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|conts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// create app that does not get launched by RM before RM restart
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// assert app2 info is saved
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app2
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// create unmanaged app
name|RMApp
name|appUnmanaged
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"someApp"
argument_list|,
literal|"someUser"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|unmanagedAttemptId
init|=
name|appUnmanaged
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
comment|// assert appUnmanaged info is saved
name|ApplicationId
name|unmanagedAppId
init|=
name|appUnmanaged
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|unmanagedAppId
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// wait for attempt to reach LAUNCHED state
name|rm1
operator|.
name|waitForState
argument_list|(
name|unmanagedAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|unmanagedAppId
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// assert unmanaged attempt info is saved
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appUnmanaged
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// PHASE 2: create new RM and start from old state
comment|// create new RM to represent restart and recover state
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
comment|// start new RM
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// change NM to point to new RM
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify load of old state
comment|// 4 apps are loaded.
comment|// FINISHED app and attempt is also loaded back.
comment|// Unmanaged app state is still loaded back but it cannot be restarted by
comment|// the RM. this will change with work preserving RM restart in which AMs/NMs
comment|// are not rebooted.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that earlier finished app and attempt is also loaded back and move
comment|// to finished state.
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// verify correct number of attempts and other data
name|RMApp
name|loadedApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|loadedApp1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|loadedApp1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|loadedApp2
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|loadedApp2
argument_list|)
expr_stmt|;
comment|//Assert.assertEquals(0, loadedApp2.getAppAttempts().size());
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app2
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|loadedApp2
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify state machine kicked into expected states
name|rm2
operator|.
name|waitForState
argument_list|(
name|loadedApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|loadedApp2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// verify attempts for apps
comment|// The app for which AM was started will wait for previous am
comment|// container finish event to arrive. However for an application for which
comment|// no am container was running will start new application attempt.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp2
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify old AM is not accepted
comment|// change running AM to talk to new RM
name|am1
operator|.
name|setAMRMProtocol
argument_list|(
name|rm2
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ApplicationAttemptNotFoundException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|ApplicationAttemptNotFoundException
argument_list|)
expr_stmt|;
block|}
comment|// NM should be rebooted on heartbeat, even first heartbeat for nm2
name|NodeHeartbeatResponse
name|hbResponse
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|hbResponse
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// new NM to represent NM re-register
name|nm1
operator|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm2
operator|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.2:5678"
argument_list|,
literal|15120
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|status
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|loadedApp1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|status
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|loadedApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// wait for the 2nd attempt to be started.
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|loadedApp1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|40
condition|)
block|{
empty_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// verify no more reboot response sent
name|hbResponse
operator|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|RESYNC
operator|!=
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|hbResponse
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|RESYNC
operator|!=
name|hbResponse
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert app1 attempt is saved
name|attempt1
operator|=
name|loadedApp1
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
name|attemptId1
operator|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|loadedApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|attemptState
operator|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Nodes on which the AM's run
name|MockNM
name|am1Node
init|=
name|nm1
decl_stmt|;
if|if
condition|(
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"127.0.0.2"
argument_list|)
condition|)
block|{
name|am1Node
operator|=
name|nm2
expr_stmt|;
block|}
comment|// assert app2 attempt is saved
name|RMAppAttempt
name|attempt2
init|=
name|loadedApp2
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|appState
operator|=
name|rmAppState
operator|.
name|get
argument_list|(
name|loadedApp2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|attemptState
operator|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|MockNM
name|am2Node
init|=
name|nm1
decl_stmt|;
if|if
condition|(
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"127.0.0.2"
argument_list|)
condition|)
block|{
name|am2Node
operator|=
name|nm2
expr_stmt|;
block|}
comment|// start the AM's
name|am1
operator|=
name|rm2
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|MockAM
name|am2
init|=
name|rm2
operator|.
name|sendAMLaunched
argument_list|(
name|attempt2
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|//request for containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"127.0.0.2"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify container allocate continues to work
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
while|while
condition|(
name|conts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// finish the AMs
name|finishApplicationMaster
argument_list|(
name|loadedApp1
argument_list|,
name|rm2
argument_list|,
name|am1Node
argument_list|,
name|am1
argument_list|)
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|loadedApp2
argument_list|,
name|rm2
argument_list|,
name|am2Node
argument_list|,
name|am2
argument_list|)
expr_stmt|;
comment|// stop RM's
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// completed apps are not removed immediately after app finish
comment|// And finished app is also loaded back.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rmAppState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppReportNodeLabelRMRestart ()
specifier|public
name|void
name|testAppReportNodeLabelRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|!=
name|SchedulerType
operator|.
name|CAPACITY
condition|)
block|{
return|return;
block|}
comment|// Create RM
name|YarnConfiguration
name|newConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
name|NodeLabel
name|amLabel
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"AMLABEL"
argument_list|)
decl_stmt|;
name|NodeLabel
name|appLabel
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"APPLABEL"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeLabel
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|amLabel
argument_list|)
expr_stmt|;
name|labels
operator|.
name|add
argument_list|(
name|appLabel
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Add label
name|rm1
operator|.
name|getAdminService
argument_list|()
operator|.
name|addToClusterNodeLabels
argument_list|(
name|AddToClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|(
name|labels
argument_list|)
argument_list|)
expr_stmt|;
comment|// create app and launch the AM
name|ResourceRequest
name|amResourceRequest
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|200
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|amLabel
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
name|resReqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|resReqs
operator|.
name|add
argument_list|(
name|amResourceRequest
argument_list|)
expr_stmt|;
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
name|resReqs
argument_list|,
name|appLabel
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
name|rm2
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|amLabel
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
operator|.
name|getAmNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appLabel
operator|.
name|getName
argument_list|()
argument_list|,
name|appReport
operator|.
name|getAppNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUnManagedRMRestart ()
specifier|public
name|void
name|testUnManagedRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|null
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
name|rm2
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getApplicationReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|appReport
operator|.
name|isUnmanagedApp
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartAppRunningAMFailed ()
specifier|public
name|void
name|testRMRestartAppRunningAMFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
comment|// Create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// assert the AM failed state is saved.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert app state has not been saved.
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// new AM started but not registered, app still stays at ACCECPTED state.
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// assert the previous AM state is loaded back on RM recovery.
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartWaitForPreviousAMToFinish ()
specifier|public
name|void
name|testRMRestartWaitForPreviousAMToFinish
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testing 3 cases
comment|// After RM restarts
comment|// 1) New application attempt is not started until previous AM container
comment|// finish event is reported back to RM as a part of nm registration.
comment|// 2) If previous AM container finish event is never reported back (i.e.
comment|// node manager on which this AM container was running also went down) in
comment|// that case AMLivenessMonitor should time out previous attempt and start
comment|// new attempt.
comment|// 3) If all the stored attempts had finished then new attempt should
comment|// be started immediately.
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|40
argument_list|)
expr_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|AbstractYarnScheduler
name|ys
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|16382
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// submitting app
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|MockAM
name|am1
init|=
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// Fail first AM.
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|ys
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch another AM.
name|MockAM
name|am2
init|=
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rmAppState
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getState
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|//  start new RM.
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|res
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NodeAction
operator|.
name|RESYNC
argument_list|,
name|res
operator|.
name|getNodeAction
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// application should be in ACCEPTED state
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// new attempt should not be started
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// am1 attempt should be in FAILED state where as am2 attempt should be in
comment|// LAUNCHED state
name|rm2
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|status
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|status
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|ys
operator|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|ys
argument_list|,
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|launchAM
argument_list|(
name|rmApp
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Now restart RM ...
comment|// Setting AMLivelinessMonitor interval to be 10 Secs.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|MockRM
name|rm3
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm3
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for RM to process all the events as a part of rm recovery.
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm3
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|rmApp
operator|=
name|rm3
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// application should be in ACCEPTED state
name|rm3
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// new attempt should not be started
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// am1 and am2 attempts should be in FAILED state where as am3 should be
comment|// in LAUNCHED state
name|rm3
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm3
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|latestAppAttemptId
init|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm3
operator|.
name|waitForState
argument_list|(
name|latestAppAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|latestAppAttemptId
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|rm3
operator|.
name|waitForState
argument_list|(
name|latestAppAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm3
operator|.
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxRetry
init|=
literal|10
decl_stmt|;
specifier|final
name|RMApp
name|rmAppForCheck
init|=
name|rmApp
decl_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|rmAppForCheck
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
name|maxRetry
operator|*
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|latestAppAttemptId
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|latestAppAttemptId
operator|=
name|rmApp
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
comment|// The 4th attempt has started but is not yet saved into RMStateStore
comment|// It will be saved only when we launch AM.
comment|// submitting app but not starting AM for it.
name|RMApp
name|app2
init|=
name|rm3
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|rm3
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|MockRM
name|rm4
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm4
operator|.
name|start
argument_list|()
expr_stmt|;
name|rmApp
operator|=
name|rm4
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm4
operator|.
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// wait for the attempt to be created.
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|40
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|rmApp
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|rm4
operator|.
name|waitForState
argument_list|(
name|latestAppAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|rmApp
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|latestAppAttemptId
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
comment|// The initial application for which an AM was not started should be in
comment|// ACCEPTED state with one application attempt started.
name|app2
operator|=
name|rm4
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm4
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|ACCEPTED
argument_list|,
name|app2
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm4
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|app2
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test RM restarts after previous attempt succeeded and was saved into state
comment|// store but before the RMAppAttempt notifies RMApp that it has succeeded. On
comment|// recovery, RMAppAttempt should send the AttemptFinished event to RMApp so
comment|// that RMApp can recover its state.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartWaitForPreviousSucceededAttempt ()
specifier|public
name|void
name|testRMRestartWaitForPreviousSucceededAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MockMemoryRMStateStore
argument_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateData
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
comment|// do nothing; simulate app final state is not saved.
name|LOG
operator|.
name|info
argument_list|(
name|appId
operator|+
literal|" final state is not saved."
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|updateApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appStateData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|)
decl_stmt|;
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|am0
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
expr_stmt|;
comment|// app final state is not saved. This guarantees that RMApp cannot be
comment|// recovered via its own saved state, but only via the event notification
comment|// from the RMAppAttempt on recovery.
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// app final state is saved via the finish event from attempt.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartFailedApp ()
specifier|public
name|void
name|testRMRestartFailedApp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// assert the app/attempt failed state is saved.
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|appState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app0
operator|.
name|getUser
argument_list|()
argument_list|,
name|loadedApp0
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// no new attempt is created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyAppReportAfterRMRestart
argument_list|(
name|app0
argument_list|,
name|rm2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|app0
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failing the application."
argument_list|)
argument_list|)
expr_stmt|;
comment|// failed diagnostics from attempt is lost because the diagnostics from
comment|// attempt is not yet available by the time app is saving the app state.
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartKilledApp ()
specifier|public
name|void
name|testRMRestartKilledApp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// kill the app.
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// killed state is saved.
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|,
name|appState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|trackingUrl
init|=
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getOriginalTrackingUrl
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|trackingUrl
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// no new attempt is created.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationReport
name|appReport
init|=
name|verifyAppReportAfterRMRestart
argument_list|(
name|app0
argument_list|,
name|rm2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app0
operator|.
name|getDiagnostics
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|appReport
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|trackingUrl
argument_list|,
name|loadedApp0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartKilledAppWithNoAttempts ()
specifier|public
name|void
name|testRMRestartKilledAppWithNoAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|MockMemoryRMStateStore
name|memStore
init|=
operator|new
name|MockMemoryRMStateStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|storeApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ignore attempt saving request.
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|updateApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ignore attempt saving request.
block|}
block|}
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create app
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// kill the app.
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|loadedApp0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartSucceededApp ()
specifier|public
name|void
name|testRMRestartSucceededApp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
comment|// PHASE 1: create RM and get state
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start like normal because state is empty
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create an app and finish the app.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// unregister am
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|"diagnostics"
argument_list|,
literal|"trackingUrl"
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|,
name|req
argument_list|)
expr_stmt|;
comment|// check the state store about the unregistered info.
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|ApplicationAttemptStateData
name|attemptState0
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"diagnostics"
argument_list|,
name|attemptState0
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|attemptState0
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"trackingUrl"
argument_list|,
name|attemptState0
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app0
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|appState
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify application report returns the same app info as the app info
comment|// before RM restarts.
name|ApplicationReport
name|appReport
init|=
name|verifyAppReportAfterRMRestart
argument_list|(
name|app0
argument_list|,
name|rm2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|appReport
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"trackingUrl"
argument_list|,
name|appReport
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartGetApplicationList ()
specifier|public
name|void
name|testRMRestartGetApplicationList
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|SystemMetricsPublisher
name|createSystemMetricsPublisher
parameter_list|()
block|{
return|return
name|spy
argument_list|(
name|super
operator|.
name|createSystemMetricsPublisher
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|rms
operator|.
name|add
argument_list|(
name|rm1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
comment|// a succeeded app.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"myType"
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|)
expr_stmt|;
comment|// a failed app.
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"myType"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// a killed app.
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"myType"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|launchAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|killApp
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getSystemMetricsPublisher
argument_list|()
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|appCreated
argument_list|(
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMAppManager
name|createRMAppManager
parameter_list|()
block|{
return|return
name|spy
argument_list|(
name|super
operator|.
name|createRMAppManager
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SystemMetricsPublisher
name|createSystemMetricsPublisher
parameter_list|()
block|{
return|return
name|spy
argument_list|(
name|super
operator|.
name|createSystemMetricsPublisher
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|rms
operator|.
name|add
argument_list|(
name|rm2
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getSystemMetricsPublisher
argument_list|()
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|appCreated
argument_list|(
name|any
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|GetApplicationsRequest
name|request1
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|YarnApplicationState
operator|.
name|KILLED
argument_list|,
name|YarnApplicationState
operator|.
name|FAILED
argument_list|)
argument_list|)
decl_stmt|;
name|GetApplicationsResponse
name|response1
init|=
name|rm2
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appList1
init|=
name|response1
operator|.
name|getApplicationList
argument_list|()
decl_stmt|;
comment|// assert all applications exist according to application state after RM
comment|// restarts.
name|boolean
name|forApp0
init|=
literal|false
decl_stmt|,
name|forApp1
init|=
literal|false
decl_stmt|,
name|forApp2
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ApplicationReport
name|report
range|:
name|appList1
control|)
block|{
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|FINISHED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|forApp0
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|FAILED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|forApp1
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|report
operator|.
name|getApplicationId
argument_list|()
operator|.
name|equals
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|YarnApplicationState
operator|.
name|KILLED
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|forApp2
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|forApp0
operator|&&
name|forApp1
operator|&&
name|forApp2
argument_list|)
expr_stmt|;
comment|// assert all applications exist according to application type after RM
comment|// restarts.
name|Set
argument_list|<
name|String
argument_list|>
name|appTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|appTypes
operator|.
name|add
argument_list|(
literal|"myType"
argument_list|)
expr_stmt|;
name|GetApplicationsRequest
name|request2
init|=
name|GetApplicationsRequest
operator|.
name|newInstance
argument_list|(
name|appTypes
argument_list|)
decl_stmt|;
name|GetApplicationsResponse
name|response2
init|=
name|rm2
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplications
argument_list|(
name|request2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationReport
argument_list|>
name|appList2
init|=
name|response2
operator|.
name|getApplicationList
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|3
operator|==
name|appList2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check application summary is logged for the completed apps with timeout
comment|// to make sure APP_COMPLETED events are processed, after RM restart.
name|verify
argument_list|(
name|rm2
operator|.
name|getRMAppManager
argument_list|()
argument_list|,
name|timeout
argument_list|(
literal|1000
argument_list|)
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|logApplicationSummary
argument_list|(
name|isA
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|launchAM (RMApp app, MockRM rm, MockNM nm)
specifier|private
name|MockAM
name|launchAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMAppAttempt
name|attempt
init|=
name|MockRM
operator|.
name|waitForAttemptScheduled
argument_list|(
name|app
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|verifyAppReportAfterRMRestart (RMApp app, MockRM rm)
specifier|private
name|ApplicationReport
name|verifyAppReportAfterRMRestart
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|)
throws|throws
name|Exception
block|{
name|GetApplicationReportRequest
name|reportRequest
init|=
name|GetApplicationReportRequest
operator|.
name|newInstance
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|GetApplicationReportResponse
name|response
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getApplicationReport
argument_list|(
name|reportRequest
argument_list|)
decl_stmt|;
name|ApplicationReport
name|report
init|=
name|response
operator|.
name|getApplicationReport
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getStartTime
argument_list|()
argument_list|,
name|report
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|getFinishTime
argument_list|()
argument_list|,
name|report
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app
operator|.
name|createApplicationState
argument_list|()
argument_list|,
name|report
operator|.
name|getYarnApplicationState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|1
operator|==
name|report
operator|.
name|getProgress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
operator|.
name|getApplicationReport
argument_list|()
return|;
block|}
DECL|method|finishApplicationMaster (RMApp rmApp, MockRM rm, MockNM nm, MockAM am)
specifier|private
name|void
name|finishApplicationMaster
parameter_list|(
name|RMApp
name|rmApp
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockAM
name|am
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|FinishApplicationMasterRequest
name|req
init|=
name|FinishApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|rmApp
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|,
name|am
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
DECL|method|finishApplicationMaster (RMApp rmApp, MockRM rm, MockNM nm, MockAM am, FinishApplicationMasterRequest req)
specifier|private
name|void
name|finishApplicationMaster
parameter_list|(
name|RMApp
name|rmApp
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockAM
name|am
parameter_list|,
name|FinishApplicationMasterRequest
name|req
parameter_list|)
throws|throws
name|Exception
block|{
name|RMState
name|rmState
init|=
operator|(
operator|(
name|MemoryRMStateStore
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|)
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|am
operator|.
name|unregisterAppAttempt
argument_list|(
name|req
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHING
argument_list|)
expr_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// check that app/attempt is saved with the final state
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|rmApp
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|appState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartOnMaxAppAttempts ()
specifier|public
name|void
name|testRMRestartOnMaxAppAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// submit an app with maxAppAttempts equals to 1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// submit an app with maxAppAttempts equals to -1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// assert app1 info is saved
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app1
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate the AM
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setting AMLivelinessMonitor interval to be 3 Secs.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// verify that maxAppAttempts is set to global value
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getMaxAppAttempts
argument_list|()
argument_list|)
expr_stmt|;
comment|// app1 and app2 are loaded back, but app1 failed because it's
comment|// hitting max-retry.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// app1 failed state is saved in state store. app2 final saved state is not
comment|// determined yet.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmAppState
operator|.
name|get
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartTimelineCollectorContext ()
specifier|public
name|void
name|testRMRestartTimelineCollectorContext
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_VERSION
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|;
name|MockRM
name|rm2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm1
operator|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// submit an app.
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Check if app info has been saved.
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocate the AM
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|TimelineCollectorContext
name|contextBeforeRestart
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMTimelineCollectorManager
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getTimelineEntityContext
argument_list|()
decl_stmt|;
comment|// Restart RM.
name|rm2
operator|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|TimelineCollectorContext
name|contextAfterRestart
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMTimelineCollectorManager
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getTimelineEntityContext
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Collector contexts for an app should be same "
operator|+
literal|"across restarts"
argument_list|,
name|contextBeforeRestart
argument_list|,
name|contextAfterRestart
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|TIMELINE_SERVICE_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rm2
operator|!=
literal|null
condition|)
block|{
name|rm2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDelegationTokenRestoredInDelegationTokenRenewer ()
specifier|public
name|void
name|testDelegationTokenRestoredInDelegationTokenRenewer
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|HashSet
argument_list|<
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|>
name|tokenSet
init|=
operator|new
name|HashSet
argument_list|<
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// create an empty credential
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// create tokens and add into credential
name|Text
name|userText1
init|=
operator|new
name|Text
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
name|userText1
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
name|userText1
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token1
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId1
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token1
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|userText1
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|tokenSet
operator|.
name|add
argument_list|(
name|token1
argument_list|)
expr_stmt|;
name|Text
name|userText2
init|=
operator|new
name|Text
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId2
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
name|userText2
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer2"
argument_list|)
argument_list|,
name|userText2
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token2
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|dtId2
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token2
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|userText2
argument_list|,
name|token2
argument_list|)
expr_stmt|;
name|tokenSet
operator|.
name|add
argument_list|(
name|token2
argument_list|)
expr_stmt|;
comment|// submit an app with customized credential
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// assert app info is saved
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// assert delegation tokens exist in rm1 DelegationTokenRenewr
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenSet
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert delegation tokens are saved
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|securityTokens
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|securityTokens
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|securityTokens
argument_list|,
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getTokens
argument_list|()
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Need to wait for a while as now token renewal happens on another thread
comment|// and is asynchronous in nature.
name|waitForTokensToBeRenewed
argument_list|(
name|rm2
argument_list|,
name|tokenSet
argument_list|)
expr_stmt|;
comment|// verify tokens are properly populated back to rm2 DelegationTokenRenewer
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenSet
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForTokensToBeRenewed (MockRM rm2, HashSet<Token<RMDelegationTokenIdentifier>> tokenSet)
specifier|private
name|void
name|waitForTokensToBeRenewed
parameter_list|(
name|MockRM
name|rm2
parameter_list|,
name|HashSet
argument_list|<
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|>
name|tokenSet
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Max wait time to get the token renewal can be kept as 1sec (100 * 10ms)
name|int
name|waitCnt
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|waitCnt
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|tokenSet
operator|.
name|equals
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDelegationTokenRenewer
argument_list|()
operator|.
name|getDelegationTokens
argument_list|()
argument_list|)
condition|)
block|{
comment|// Stop waiting as tokens are populated to DelegationTokenRenewer.
break|break;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppAttemptTokensRestoredOnRMRestart ()
specifier|public
name|void
name|testAppAttemptTokensRestoredOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"0.0.0.0:4321"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// submit an app
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
comment|// assert app info is saved
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// Allocate the AM
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|// assert attempt info is saved
name|ApplicationAttemptStateData
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|attemptState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|BuilderUtils
operator|.
name|newContainerId
argument_list|(
name|attemptId1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// the clientTokenMasterKey that are generated when
comment|// RMAppAttempt is created,
name|byte
index|[]
name|clientTokenMasterKey
init|=
name|attempt1
operator|.
name|getClientTokenMasterKey
argument_list|()
operator|.
name|getEncoded
argument_list|()
decl_stmt|;
comment|// assert application credentials are saved
name|Credentials
name|savedCredentials
init|=
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"client token master key not saved"
argument_list|,
name|clientTokenMasterKey
argument_list|,
name|savedCredentials
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|loadedAttempt1
init|=
name|loadedApp1
operator|.
name|getRMAppAttempt
argument_list|(
name|attemptId1
argument_list|)
decl_stmt|;
comment|// assert loaded attempt recovered
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|loadedAttempt1
argument_list|)
expr_stmt|;
comment|// assert client token master key is recovered back to api-versioned
comment|// client token master key
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"client token master key not restored"
argument_list|,
name|attempt1
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|,
name|loadedAttempt1
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert ClientTokenSecretManager also knows about the key
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|clientTokenMasterKey
argument_list|,
name|rm2
operator|.
name|getClientToAMTokenSecretManager
argument_list|()
operator|.
name|getMasterKey
argument_list|(
name|attemptId1
argument_list|)
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert AMRMTokenSecretManager also knows about the AMRMToken password
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|loadedAttempt1
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|amrmToken
operator|.
name|getPassword
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|retrievePassword
argument_list|(
name|amrmToken
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMDelegationTokenRestoredOnRMRestart ()
specifier|public
name|void
name|testRMDelegationTokenRestoredOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"localhost:8032"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|rmDTState
init|=
name|rmState
operator|.
name|getRMDTSecretManagerState
argument_list|()
operator|.
name|getTokenState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|DelegationKey
argument_list|>
name|rmDTMasterKeyState
init|=
name|rmState
operator|.
name|getRMDTSecretManagerState
argument_list|()
operator|.
name|getMasterKeyState
argument_list|()
decl_stmt|;
comment|// create an empty credential
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
comment|// request a token and add into credential
name|GetDelegationTokenRequest
name|request1
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
literal|"renewer1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|GetDelegationTokenResponse
name|response1
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|request1
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|delegationToken1
init|=
name|response1
operator|.
name|getRMDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token1
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|delegationToken1
argument_list|,
name|rmAddr
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
name|token1
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|tokenIdentSet
init|=
operator|new
name|HashSet
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|token1
operator|.
name|getService
argument_list|()
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|tokenIdentSet
operator|.
name|add
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
comment|// submit an app with customized credential
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// assert app info is saved
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
comment|// assert all master keys are saved
name|Set
argument_list|<
name|DelegationKey
argument_list|>
name|allKeysRM1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllMasterKeys
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allKeysRM1
argument_list|,
name|rmDTMasterKeyState
argument_list|)
expr_stmt|;
comment|// assert all tokens are saved
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|allTokensRM1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tokenIdentSet
argument_list|,
name|allTokensRM1
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allTokensRM1
argument_list|,
name|rmDTState
argument_list|)
expr_stmt|;
comment|// assert sequence number is saved
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|,
name|rmState
operator|.
name|getRMDTSecretManagerState
argument_list|()
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// request one more token
name|GetDelegationTokenRequest
name|request2
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
literal|"renewer2"
argument_list|)
decl_stmt|;
name|GetDelegationTokenResponse
name|response2
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|request2
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
name|delegationToken2
init|=
name|response2
operator|.
name|getRMDelegationToken
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token2
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|delegationToken2
argument_list|,
name|rmAddr
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
name|dtId2
init|=
name|token2
operator|.
name|decodeIdentifier
argument_list|()
decl_stmt|;
comment|// cancel token2
try|try
block|{
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|cancelToken
argument_list|(
name|token2
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// Assert the token which has the latest delegationTokenSequenceNumber is removed
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|,
name|dtId2
operator|.
name|getSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmDTState
operator|.
name|containsKey
argument_list|(
name|dtId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// assert master keys and tokens are populated back to DTSecretManager
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|allTokensRM2
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|allTokensRM2
operator|.
name|keySet
argument_list|()
argument_list|,
name|allTokensRM1
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// rm2 has its own master keys when it starts, we use containsAll here
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllMasterKeys
argument_list|()
operator|.
name|containsAll
argument_list|(
name|allKeysRM1
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert sequenceNumber is properly recovered,
comment|// even though the token which has max sequenceNumber is not stored
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getLatestDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// renewDate before renewing
name|Long
name|renewDateBeforeRenew
init|=
name|allTokensRM2
operator|.
name|get
argument_list|(
name|dtId1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Sleep for one millisecond to make sure renewDataAfterRenew is greater
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// renew recovered token
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|renewToken
argument_list|(
name|token1
argument_list|,
literal|"renewer1"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|allTokensRM2
operator|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
expr_stmt|;
name|Long
name|renewDateAfterRenew
init|=
name|allTokensRM2
operator|.
name|get
argument_list|(
name|dtId1
argument_list|)
decl_stmt|;
comment|// assert token is renewed
name|Assert
operator|.
name|assertTrue
argument_list|(
name|renewDateAfterRenew
operator|>
name|renewDateBeforeRenew
argument_list|)
expr_stmt|;
comment|// assert new token is added into state store
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmDTState
operator|.
name|containsValue
argument_list|(
name|renewDateAfterRenew
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert old token is removed from state store
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmDTState
operator|.
name|containsValue
argument_list|(
name|renewDateBeforeRenew
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|cancelToken
argument_list|(
name|token1
argument_list|,
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// assert token is removed from state after its cancelled
name|allTokensRM2
operator|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
operator|.
name|getAllTokens
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allTokensRM2
operator|.
name|containsKey
argument_list|(
name|dtId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|rmDTState
operator|.
name|containsKey
argument_list|(
name|dtId1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This is to test submit an application to the new RM with the old delegation
comment|// token got from previous RM.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAppSubmissionWithOldDelegationTokenAfterRMRestart ()
specifier|public
name|void
name|testAppSubmissionWithOldDelegationTokenAfterRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
literal|"localhost:8032"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GetDelegationTokenRequest
name|request1
init|=
name|GetDelegationTokenRequest
operator|.
name|newInstance
argument_list|(
literal|"renewer1"
argument_list|)
decl_stmt|;
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|GetDelegationTokenResponse
name|response1
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getDelegationToken
argument_list|(
name|request1
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token1
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|response1
operator|.
name|getRMDelegationToken
argument_list|()
argument_list|,
name|rmAddr
argument_list|)
decl_stmt|;
comment|// start new RM
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|rm1
operator|.
name|getRMStateStore
argument_list|()
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// submit an app with the old delegation token got from previous RM.
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|ts
operator|.
name|addToken
argument_list|(
name|token1
operator|.
name|getService
argument_list|()
argument_list|,
name|token1
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm2
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMStateStoreDispatcherDrainedOnRMStop ()
specifier|public
name|void
name|testRMStateStoreDispatcherDrainedOnRMStop
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
block|{
specifier|volatile
name|boolean
name|wait
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Unblock app saving request.
name|wait
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|serviceStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|handleStoreEvent
parameter_list|(
name|RMStateStoreEvent
name|event
parameter_list|)
block|{
comment|// Block app saving request.
comment|// Skip if synchronous updation of DTToken
if|if
condition|(
operator|!
operator|(
name|event
operator|instanceof
name|RMStateStoreAMRMTokenEvent
operator|)
operator|&&
operator|!
operator|(
name|event
operator|instanceof
name|RMStateStoreRMDTEvent
operator|)
operator|&&
operator|!
operator|(
name|event
operator|instanceof
name|RMStateStoreRMDTMasterKeyEvent
operator|)
condition|)
block|{
while|while
condition|(
name|wait
condition|)
empty_stmt|;
block|}
name|super
operator|.
name|handleStoreEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start RM
specifier|final
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|disableDrainEventsImplicitly
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// create apps.
specifier|final
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
name|appList
init|=
operator|new
name|ArrayList
argument_list|<
name|RMApp
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUM_APPS
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_APPS
condition|;
name|i
operator|++
control|)
block|{
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|appList
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|NEW_SAVING
argument_list|)
expr_stmt|;
block|}
comment|// all apps's saving request are now enqueued to RMStateStore's dispatcher
comment|// queue, and will be processed once rm.stop() is called.
comment|// Nothing exist in state store before stop is called.
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmAppState
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// stop rm
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Assert app info is still saved even if stop is called with pending saving
comment|// request on dispatcher.
for|for
control|(
name|RMApp
name|app
range|:
name|appList
control|)
block|{
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmAppState
operator|.
name|size
argument_list|()
operator|==
name|NUM_APPS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testFinishedAppRemovalAfterRMRestart ()
specifier|public
name|void
name|testFinishedAppRemovalAfterRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_MAX_COMPLETED_APPLICATIONS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|RMState
name|rmState
init|=
name|memStore
operator|.
name|getState
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create an app and finish the app.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am0
argument_list|)
expr_stmt|;
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|=
name|rm2
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// app0 exits in both state store and rmContext
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|,
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// create one more app and finish the app.
name|RMApp
name|app1
init|=
name|rm2
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|finishApplicationMaster
argument_list|(
name|app1
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
comment|// the first app0 get kicked out from both rmContext and state store
name|Assert
operator|.
name|assertNull
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rmAppState
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This is to test RM does not get hang on shutdown.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testRMShutdown ()
specifier|public
name|void
name|testRMShutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MockMemoryRMStateStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|checkVersion
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Invalid version."
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
comment|// start RM
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm1
operator|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid version."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|getServiceState
argument_list|()
operator|==
name|STATE
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
block|}
comment|// This is to test Killing application should be able to wait until app
comment|// reaches killed state and also check that attempt state is saved before app
comment|// state is saved.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testClientRetryOnKillingApplication ()
specifier|public
name|void
name|testClientRetryOnKillingApplication
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|TestMemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|"myType"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|KillApplicationResponse
name|response
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|response
operator|=
name|rm1
operator|.
name|killApp
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getIsKillCompleted
argument_list|()
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
comment|// we expect at least 2 calls for killApp as the first killApp always return
comment|// false.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|count
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|TestMemoryRMStateStore
operator|)
name|memStore
operator|)
operator|.
name|updateAttempt
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|TestMemoryRMStateStore
operator|)
name|memStore
operator|)
operator|.
name|updateApp
argument_list|)
expr_stmt|;
block|}
comment|// Test Application that fails on submission is saved in state store.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAppFailedOnSubmissionSavedInStateStore ()
specifier|public
name|void
name|testAppFailedOnSubmissionSavedInStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|)
block|{
class|class
name|TestDelegationTokenRenewer
extends|extends
name|DelegationTokenRenewer
block|{
specifier|public
name|void
name|addApplicationAsync
parameter_list|(
name|ApplicationId
name|applicationId
parameter_list|,
name|Credentials
name|ts
parameter_list|,
name|boolean
name|shouldCancelAtEnd
parameter_list|,
name|String
name|user
parameter_list|,
name|Configuration
name|appConf
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to submit app"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DelegationTokenRenewer
name|createDelegationTokenRenewer
parameter_list|()
block|{
return|return
operator|new
name|TestDelegationTokenRenewer
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|RMApp
name|app1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|app1
operator|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{      }
name|app1
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// Check app staet is saved in state store.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|,
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Restarted RM has the failed app info too.
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAppRecoveredInOrderOnRMRestart ()
specifier|public
name|void
name|testAppRecoveredInOrderOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|10
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ApplicationStateData
name|appState
init|=
name|mock
argument_list|(
name|ApplicationStateData
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
name|mock
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|context
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|put
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appState
argument_list|)
expr_stmt|;
block|}
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMAppManager
name|createRMAppManager
parameter_list|()
block|{
return|return
operator|new
name|TestRMAppManager
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|masterService
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|conf
argument_list|)
return|;
block|}
class|class
name|TestRMAppManager
extends|extends
name|RMAppManager
block|{
name|ApplicationId
name|prevId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|TestRMAppManager
parameter_list|(
name|RMContext
name|context
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|ApplicationACLsManager
name|applicationACLsManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|applicationACLsManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|recoverApplication
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|,
name|RMState
name|rmState
parameter_list|)
throws|throws
name|Exception
block|{
comment|// check application is recovered in order.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|prevId
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|prevId
operator|=
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQueueMetricsOnRMRestart ()
specifier|public
name|void
name|testQueueMetricsOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|QueueMetrics
name|qm1
init|=
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
name|resetQueueMetrics
argument_list|(
name|qm1
argument_list|)
expr_stmt|;
name|assertQueueMetrics
argument_list|(
name|qm1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// create app that gets launched and does allocate before RM restart
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// Need to wait first for AppAttempt to be started (RMAppState.ACCEPTED)
comment|// and then for it to reach RMAppAttemptState.SCHEDULED
comment|// inorder to ensure appsPending metric is incremented
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|assertQueueMetrics
argument_list|(
name|qm1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|MockAM
name|am1
init|=
name|rm1
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|conts
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|conts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|assertQueueMetrics
argument_list|(
name|qm1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// PHASE 2: create new RM and start from old state
comment|// create new RM to represent restart and recover state
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|rm1
operator|.
name|getRMStateStore
argument_list|()
argument_list|)
decl_stmt|;
name|QueueMetrics
name|qm2
init|=
name|rm2
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
name|resetQueueMetrics
argument_list|(
name|qm2
argument_list|)
expr_stmt|;
name|assertQueueMetrics
argument_list|(
name|qm2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// recover app
name|RMApp
name|loadedApp1
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm1
operator|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|status
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|loadedApp1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|status
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|loadedApp1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|attempt1
operator|=
name|loadedApp1
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
name|attemptId1
operator|=
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|assertQueueMetrics
argument_list|(
name|qm2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|assertQueueMetrics
argument_list|(
name|qm2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|am1
operator|=
name|rm2
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|,
literal|3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
while|while
condition|(
name|conts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conts
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
comment|// finish the AMs
name|finishApplicationMaster
argument_list|(
name|loadedApp1
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|)
expr_stmt|;
comment|// now AppAttempt and App becomes FINISHED,
comment|// we should also grant APP_ATTEMPT_REMOVE/APP_REMOVE event
comment|// had processed by scheduler
name|rm2
operator|.
name|waitForAppRemovedFromScheduler
argument_list|(
name|loadedApp1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertQueueMetrics
argument_list|(
name|qm2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// The metrics has some carry-on value from the previous RM, because the
comment|// test case is in-memory, for the same queue name (e.g. root), there's
comment|// always a singleton QueueMetrics object.
DECL|field|appsSubmittedCarryOn
specifier|private
name|int
name|appsSubmittedCarryOn
init|=
literal|0
decl_stmt|;
DECL|field|appsPendingCarryOn
specifier|private
name|int
name|appsPendingCarryOn
init|=
literal|0
decl_stmt|;
DECL|field|appsRunningCarryOn
specifier|private
name|int
name|appsRunningCarryOn
init|=
literal|0
decl_stmt|;
DECL|field|appsCompletedCarryOn
specifier|private
name|int
name|appsCompletedCarryOn
init|=
literal|0
decl_stmt|;
DECL|method|resetQueueMetrics (QueueMetrics qm)
specifier|private
name|void
name|resetQueueMetrics
parameter_list|(
name|QueueMetrics
name|qm
parameter_list|)
block|{
name|appsSubmittedCarryOn
operator|=
name|qm
operator|.
name|getAppsSubmitted
argument_list|()
expr_stmt|;
name|appsPendingCarryOn
operator|=
name|qm
operator|.
name|getAppsPending
argument_list|()
expr_stmt|;
name|appsRunningCarryOn
operator|=
name|qm
operator|.
name|getAppsRunning
argument_list|()
expr_stmt|;
name|appsCompletedCarryOn
operator|=
name|qm
operator|.
name|getAppsCompleted
argument_list|()
expr_stmt|;
block|}
DECL|method|assertQueueMetrics (QueueMetrics qm, int appsSubmitted, int appsPending, int appsRunning, int appsCompleted)
specifier|private
name|void
name|assertQueueMetrics
parameter_list|(
name|QueueMetrics
name|qm
parameter_list|,
name|int
name|appsSubmitted
parameter_list|,
name|int
name|appsPending
parameter_list|,
name|int
name|appsRunning
parameter_list|,
name|int
name|appsCompleted
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsSubmitted
operator|+
name|appsSubmittedCarryOn
argument_list|,
name|qm
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsPending
operator|+
name|appsPendingCarryOn
argument_list|,
name|qm
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsRunning
operator|+
name|appsRunningCarryOn
argument_list|,
name|qm
operator|.
name|getAppsRunning
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appsCompleted
operator|+
name|appsCompletedCarryOn
argument_list|,
name|qm
operator|.
name|getAppsCompleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testDecomissionedNMsMetricsOnRMRestart ()
specifier|public
name|void
name|testDecomissionedNMsMetricsOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|hostFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|writeToHostsFile
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|,
name|rm2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"localhost:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"host2:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|Resource
name|expectedCapability
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|nm1
operator|.
name|getMemory
argument_list|()
argument_list|,
name|nm1
operator|.
name|getvCores
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedVersion
init|=
name|nm1
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ip
init|=
name|NetUtils
operator|.
name|normalizeHostName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
comment|// Add 2 hosts to exclude list.
name|writeToHostsFile
argument_list|(
literal|"host2"
argument_list|,
name|ip
argument_list|)
expr_stmt|;
comment|// refresh nodes
name|rm1
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|refreshNodes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NodeHeartbeatResponse
name|nodeHeartbeat
init|=
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|NodeAction
operator|.
name|SHUTDOWN
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nodeHeartbeat
operator|=
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The decommisioned metrics are not updated"
argument_list|,
name|NodeAction
operator|.
name|SHUTDOWN
operator|.
name|equals
argument_list|(
name|nodeHeartbeat
operator|.
name|getNodeAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodesAfterDecom
argument_list|(
name|rm1
argument_list|,
literal|2
argument_list|,
name|expectedCapability
argument_list|,
name|expectedVersion
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm1
operator|=
literal|null
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart RM.
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ClusterMetrics
operator|.
name|getMetrics
argument_list|()
operator|.
name|getNumDecommisionedNMs
argument_list|()
argument_list|)
expr_stmt|;
name|verifyNodesAfterDecom
argument_list|(
name|rm2
argument_list|,
literal|2
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"unknown"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rm2
operator|!=
literal|null
condition|)
block|{
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyNodesAfterDecom (MockRM rm, int numNodes, Resource expectedCapability, String expectedVersion)
specifier|private
name|void
name|verifyNodesAfterDecom
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|Resource
name|expectedCapability
parameter_list|,
name|String
name|expectedVersion
parameter_list|)
block|{
name|ConcurrentMap
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|inactiveRMNodes
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|numNodes
argument_list|,
name|inactiveRMNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RMNode
name|rmNode
range|:
name|inactiveRMNodes
operator|.
name|values
argument_list|()
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedCapability
argument_list|,
name|rmNode
operator|.
name|getTotalCapability
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedVersion
argument_list|,
name|rmNode
operator|.
name|getNodeManagerVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test Delegation token is renewed synchronously so that recover events
comment|// can be processed before any other external incoming events, specifically
comment|// the ContainerFinished event on NM re-registraton.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testSynchronouslyRenewDTOnRecovery ()
specifier|public
name|void
name|testSynchronouslyRenewDTOnRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
specifier|final
name|MockAM
name|am0
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|rm1
operator|.
name|getRMStateStore
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|ResourceTrackerService
name|createResourceTrackerService
parameter_list|()
block|{
return|return
operator|new
name|ResourceTrackerService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|nodesListManager
argument_list|,
name|this
operator|.
name|nmLivelinessMonitor
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getNMTokenSecretManager
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// send the container_finished event as soon as the
comment|// ResourceTrackerService is started.
name|super
operator|.
name|serviceStart
argument_list|()
expr_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|status
init|=
name|TestRMRestart
operator|.
name|createNMContainerStatus
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|status
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
comment|// Re-start RM
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for the 2nd attempt to be started.
name|RMApp
name|loadedApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|timeoutSecs
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|2
operator|&&
name|timeoutSecs
operator|++
operator|<
literal|40
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|loadedApp0
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|loadedApp0
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeToHostsFile (String... hosts)
specifier|private
name|void
name|writeToHostsFile
parameter_list|(
name|String
modifier|...
name|hosts
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|hostFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|TEMP_DIR
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|hostFile
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|FileOutputStream
name|fStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|hostFile
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|fStream
operator|.
name|write
argument_list|(
name|hosts
index|[
name|i
index|]
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|fStream
operator|.
name|write
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|fStream
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|fStream
argument_list|)
expr_stmt|;
name|fStream
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|createNMContainerStatus ( ApplicationAttemptId appAttemptId, int id, ContainerState containerState)
specifier|public
specifier|static
name|NMContainerStatus
name|createNMContainerStatus
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|int
name|id
parameter_list|,
name|ContainerState
name|containerState
parameter_list|)
block|{
return|return
name|createNMContainerStatus
argument_list|(
name|appAttemptId
argument_list|,
name|id
argument_list|,
name|containerState
argument_list|,
name|RMNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
return|;
block|}
DECL|method|createNMContainerStatus ( ApplicationAttemptId appAttemptId, int id, ContainerState containerState, String nodeLabelExpression)
specifier|public
specifier|static
name|NMContainerStatus
name|createNMContainerStatus
parameter_list|(
name|ApplicationAttemptId
name|appAttemptId
parameter_list|,
name|int
name|id
parameter_list|,
name|ContainerState
name|containerState
parameter_list|,
name|String
name|nodeLabelExpression
parameter_list|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|NMContainerStatus
name|containerReport
init|=
name|NMContainerStatus
operator|.
name|newInstance
argument_list|(
name|containerId
argument_list|,
literal|0
argument_list|,
name|containerState
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"recover container"
argument_list|,
literal|0
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
name|nodeLabelExpression
argument_list|,
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|containerReport
return|;
block|}
DECL|class|TestMemoryRMStateStore
specifier|public
class|class
name|TestMemoryRMStateStore
extends|extends
name|MemoryRMStateStore
block|{
DECL|field|count
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|updateApp
specifier|public
name|int
name|updateApp
init|=
literal|0
decl_stmt|;
DECL|field|updateAttempt
specifier|public
name|int
name|updateAttempt
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|updateApplicationStateInternal (ApplicationId appId, ApplicationStateData appStateData)
specifier|public
name|void
name|updateApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appStateData
parameter_list|)
throws|throws
name|Exception
block|{
name|updateApp
operator|=
operator|++
name|count
expr_stmt|;
name|super
operator|.
name|updateApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appStateData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
DECL|method|updateApplicationAttemptStateInternal ( ApplicationAttemptId attemptId, ApplicationAttemptStateData attemptStateData)
name|updateApplicationAttemptStateInternal
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ApplicationAttemptStateData
name|attemptStateData
parameter_list|)
throws|throws
name|Exception
block|{
name|updateAttempt
operator|=
operator|++
name|count
expr_stmt|;
name|super
operator|.
name|updateApplicationAttemptStateInternal
argument_list|(
name|attemptId
argument_list|,
name|attemptStateData
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestSecurityMockRM
specifier|public
specifier|static
class|class
name|TestSecurityMockRM
extends|extends
name|MockRM
block|{
DECL|method|TestSecurityMockRM (Configuration conf, RMStateStore store)
specifier|public
name|TestSecurityMockRM
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMStateStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
DECL|method|TestSecurityMockRM (Configuration conf)
specifier|public
name|TestSecurityMockRM
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init (Configuration conf)
specifier|public
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// reset localServiceAddress.
name|RMDelegationTokenIdentifier
operator|.
name|Renewer
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createClientRMService ()
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|getRMContext
argument_list|()
argument_list|,
name|getResourceScheduler
argument_list|()
argument_list|,
name|rmAppManager
argument_list|,
name|applicationACLsManager
argument_list|,
literal|null
argument_list|,
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|serviceStart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|protected
name|void
name|serviceStop
parameter_list|()
throws|throws
name|Exception
block|{
comment|//do nothing
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|doSecureLogin ()
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do nothing.
block|}
block|}
comment|// Test does following verification
comment|// 1. Start RM1 with store patch /tmp
comment|// 2. Add/remove/replace labels to cluster and node lable and verify
comment|// 3. Start RM2 with store patch /tmp only
comment|// 4. Get cluster and node lobel, it should be present by recovering it
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRMRestartRecoveringNodeLabelManager ()
specifier|public
name|void
name|testRMRestartRecoveringNodeLabelManager
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initial FS node label store root dir to a random tmp dir
name|File
name|nodeLabelFsStoreDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-testRMRestartRecoveringNodeLabelManager"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLabelFsStoreDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|nodeLabelFsStoreDir
argument_list|)
expr_stmt|;
block|}
name|nodeLabelFsStoreDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|nodeLabelFsStoreDirURI
init|=
name|nodeLabelFsStoreDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_NODE_LABELS_STORE_ROOT_DIR
argument_list|,
name|nodeLabelFsStoreDirURI
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|RMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMNodeLabelsManager
name|nodeLabelManager
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|clusterNodeLabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|clusterNodeLabels
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|clusterNodeLabels
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|clusterNodeLabels
operator|.
name|add
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
comment|// Add node label x,y,z
name|nodeLabelManager
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|clusterNodeLabels
argument_list|)
expr_stmt|;
comment|// Add node Label to Node h1->x
name|NodeId
name|n1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|nodeLabelManager
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|n1
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|clusterNodeLabels
operator|.
name|remove
argument_list|(
literal|"z"
argument_list|)
expr_stmt|;
comment|// Remove cluster label z
name|nodeLabelManager
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|toSet
argument_list|(
literal|"z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace nodelabel h1->x,y
name|nodeLabelManager
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|n1
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for updating store.It is expected NodeStore update should happen
comment|// very fast since it has separate dispatcher. So waiting for max 5 seconds,
comment|// which is sufficient time to update NodeStore.
name|int
name|count
init|=
literal|10
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|nodeLabelManager
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterNodeLabels
operator|.
name|size
argument_list|()
argument_list|,
name|nodeLabelManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|nodeLabels
init|=
name|nodeLabelManager
operator|.
name|getNodeLabels
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeLabelManager
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeLabels
operator|.
name|get
argument_list|(
name|n1
argument_list|)
operator|.
name|equals
argument_list|(
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|rm1
operator|.
name|getRMStateStore
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|RMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm2
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nodeLabelManager
operator|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|clusterNodeLabels
operator|.
name|size
argument_list|()
argument_list|,
name|nodeLabelManager
operator|.
name|getClusterNodeLabelNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|nodeLabels
operator|=
name|nodeLabelManager
operator|.
name|getNodeLabels
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodeLabelManager
operator|.
name|getNodeLabels
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|nodeLabels
operator|.
name|get
argument_list|(
name|n1
argument_list|)
operator|.
name|equals
argument_list|(
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartFailAppAttempt ()
specifier|public
name|void
name|testRMRestartFailAppAttempt
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
expr_stmt|;
name|int
name|maxAttempt
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|)
decl_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|app0
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appAttemptId1
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// fail the 1st app attempt.
name|rm1
operator|.
name|failApplicationAttempt
argument_list|(
name|appAttemptId1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|appAttemptId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|applicationId
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId2
init|=
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|appAttemptId2
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|appAttemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|loadedApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|applicationId
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|applicationId
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|//Wait to make sure the loadedApp0 has the right number of attempts
comment|//TODO explore a better way than sleeping for a while (YARN-4929)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|appAttemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|)
expr_stmt|;
name|appAttemptId2
operator|=
name|loadedApp0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|appAttemptId2
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// fail 2nd attempt
name|rm2
operator|.
name|failApplicationAttempt
argument_list|(
name|appAttemptId2
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|appAttemptId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|applicationId
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAttempt
argument_list|,
name|loadedApp0
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|toSet (E... elements)
specifier|private
parameter_list|<
name|E
parameter_list|>
name|Set
argument_list|<
name|E
argument_list|>
name|toSet
parameter_list|(
name|E
modifier|...
name|elements
parameter_list|)
block|{
name|Set
argument_list|<
name|E
argument_list|>
name|set
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|elements
argument_list|)
decl_stmt|;
return|return
name|set
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRMRestartNodeMapping ()
specifier|public
name|void
name|testRMRestartNodeMapping
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initial FS node label store root dir to a random tmp dir
name|File
name|nodeLabelFsStoreDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-testRMRestartNodeMapping"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLabelFsStoreDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|nodeLabelFsStoreDir
argument_list|)
expr_stmt|;
block|}
name|nodeLabelFsStoreDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|nodeLabelFsStoreDirURI
init|=
name|nodeLabelFsStoreDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_NODE_LABELS_STORE_ROOT_DIR
argument_list|,
name|nodeLabelFsStoreDirURI
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|RMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMNodeLabelsManager
name|nodeLabelManager
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|clusterNodeLabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|clusterNodeLabels
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|clusterNodeLabels
operator|.
name|add
argument_list|(
literal|"y"
argument_list|)
expr_stmt|;
name|nodeLabelManager
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|clusterNodeLabels
argument_list|)
expr_stmt|;
comment|// Add node Label to Node h1->x
name|NodeId
name|n1
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|NodeId
name|n2
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|1235
argument_list|)
decl_stmt|;
name|NodeId
name|nihost
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|nodeLabelManager
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|n1
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nodeLabelManager
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|n2
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nodeLabelManager
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|nihost
argument_list|,
name|toSet
argument_list|(
literal|"y"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nodeLabelManager
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|n1
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MockRM
name|rm2
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|rm1
operator|.
name|getRMStateStore
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|RMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
expr_stmt|;
name|rm2
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|nodeLabelManager
operator|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|NodeId
argument_list|>
argument_list|>
name|labelsToNodes
init|=
name|nodeLabelManager
operator|.
name|getLabelsToNodes
argument_list|(
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
literal|null
operator|==
name|labelsToNodes
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
condition|?
literal|0
else|:
name|labelsToNodes
operator|.
name|get
argument_list|(
literal|"x"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRMRestartAfterPreemption ()
specifier|public
name|void
name|testRMRestartAfterPreemption
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getSchedulerType
argument_list|()
operator|.
name|equals
argument_list|(
name|SchedulerType
operator|.
name|CAPACITY
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|int
name|CONTAINER_MEMORY
init|=
literal|1024
decl_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MEMORY
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|cs
argument_list|,
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|am0
operator|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
comment|// get scheduler app
name|FiCaSchedulerApp
name|schedulerAppAttempt
init|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// kill app0-attempt
name|cs
operator|.
name|markContainerForKillable
argument_list|(
name|schedulerAppAttempt
operator|.
name|getRMContainer
argument_list|(
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|cs
argument_list|,
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|am0
operator|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|killApp
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|MockRM
name|rm2
init|=
literal|null
decl_stmt|;
comment|// start RM2
try|try
block|{
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"RM start successfully"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception on start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"RM should start with out any issue"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartOnMissingAttempts ()
specifier|public
name|void
name|testRMRestartOnMissingAttempts
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// create RM
name|MockRM
name|rm1
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
comment|// start RM
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create an app and finish the app.
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|ApplicationStateData
name|app0State
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAndFailAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|launchAndFailAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|launchAndFailAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// am1 is missed from MemoryRMStateStore
name|memStore
operator|.
name|removeApplicationAttemptInternal
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|am2State
init|=
name|app0State
operator|.
name|getAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// am2's state is not consistent: MemoryRMStateStore just saved its initial
comment|// state and failed to store its final state
name|am2State
operator|.
name|setState
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// restart rm
name|MockRM
name|rm2
init|=
name|createMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|recoveredApp0
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|recoveredAppAttempts
init|=
name|recoveredApp0
operator|.
name|getAppAttempts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|recoveredAppAttempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|recoveredAppAttempts
operator|.
name|get
argument_list|(
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
name|recoveredAppAttempts
operator|.
name|get
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|,
name|recoveredAppAttempts
operator|.
name|get
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
operator|(
operator|(
name|RMAppImpl
operator|)
name|app0
operator|)
operator|.
name|getNextAttemptId
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|launchAndFailAM (RMApp app, MockRM rm, MockNM nm)
specifier|private
name|MockAM
name|launchAndFailAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|MockAM
name|am
init|=
name|launchAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|)
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testRMRestartAfterNodeLabelDisabled ()
specifier|public
name|void
name|testRMRestartAfterNodeLabelDisabled
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|getSchedulerType
argument_list|()
operator|!=
name|SchedulerType
operator|.
name|CAPACITY
condition|)
block|{
return|return;
block|}
comment|// Initial FS node label store root dir to a random tmp dir
name|File
name|nodeLabelFsStoreDir
init|=
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-testRMRestartAfterNodeLabelDisabled"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeLabelFsStoreDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|nodeLabelFsStoreDir
argument_list|)
expr_stmt|;
block|}
name|nodeLabelFsStoreDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|nodeLabelFsStoreDirURI
init|=
name|nodeLabelFsStoreDir
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_NODE_LABELS_STORE_ROOT_DIR
argument_list|,
name|nodeLabelFsStoreDirURI
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithDefaultQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|RMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockMemoryRMStateStore
name|memStore
init|=
operator|(
name|MockMemoryRMStateStore
operator|)
name|rm1
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
comment|// add node label "x" and set node to label mapping
name|Set
argument_list|<
name|String
argument_list|>
name|clusterNodeLabels
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|clusterNodeLabels
operator|.
name|add
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|nodeLabelManager
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|nodeLabelManager
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|clusterNodeLabels
argument_list|)
expr_stmt|;
name|nodeLabelManager
operator|.
name|addLabelsToNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"h1"
argument_list|,
literal|0
argument_list|)
argument_list|,
name|toSet
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// label = x
comment|// submit an application with specifying am node label expression as "x"
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"someApp"
argument_list|,
literal|"someUser"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
comment|// check am container allocated with correct node label expression
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|ContainerId
name|amContainerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|amContainerId1
argument_list|)
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
expr_stmt|;
name|finishApplicationMaster
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am1
argument_list|)
expr_stmt|;
comment|// restart rm with node label disabled
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|NODE_LABELS_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithDefaultQueueLabels
argument_list|(
name|conf
argument_list|)
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|RMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
comment|// rm should successfully start with app1 loaded back in SUCCESS state
comment|// by pushing app to run default label for am container and let other
comment|// containers to run normally.
try|try
block|{
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"RM start successfully"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception on start"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"RM should start without any issue"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRMRestartAfterPriorityChangesInAllocatedResponse ()
specifier|public
name|void
name|testRMRestartAfterPriorityChangesInAllocatedResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set Max Application Priority as 10
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//Start RM
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|6
operator|*
literal|1024
argument_list|)
decl_stmt|;
comment|// Submit an application
name|Priority
name|appPriority1
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|,
name|appPriority1
argument_list|,
name|getCreds
argument_list|()
argument_list|,
name|getTokensConf
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|AllocateRequestPBImpl
name|allocateRequest
init|=
operator|new
name|AllocateRequestPBImpl
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ContainerId
argument_list|>
name|release
init|=
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|allocateRequest
operator|.
name|setReleaseList
argument_list|(
name|release
argument_list|)
expr_stmt|;
name|allocateRequest
operator|.
name|setAskList
argument_list|(
name|ask
argument_list|)
expr_stmt|;
name|AllocateResponse
name|response1
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority1
argument_list|,
name|response1
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the priority of App1 to 8
name|Priority
name|appPriority2
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|app1
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getRMAppManager
argument_list|()
operator|.
name|updateApplicationPriority
argument_list|(
name|ugi
argument_list|,
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|appPriority2
argument_list|)
expr_stmt|;
name|AllocateResponse
name|response2
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority2
argument_list|,
name|response2
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Ensure tokensConf has been retained even after UPDATE_APP event in      * RMStateStore, which gets triggered because of change in priority.      *      */
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getTokensConf
argument_list|()
argument_list|,
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getTokensConf
argument_list|()
argument_list|)
expr_stmt|;
name|MockRM
name|rm2
init|=
operator|new
name|TestSecurityMockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|AllocateResponse
name|response3
init|=
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|appPriority2
argument_list|,
name|response3
operator|.
name|getApplicationPriority
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Ensure tokensConf has been retained even after RECOVER event in      * RMStateStore, which gets triggered as part of RM START.      */
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppStateNew
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appStateNew
init|=
name|rmAppStateNew
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getTokensConf
argument_list|()
argument_list|,
name|appStateNew
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getAMContainerSpec
argument_list|()
operator|.
name|getTokensConf
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRMRestartAfterUpdateTrackingUrl ()
specifier|public
name|void
name|testRMRestartAfterUpdateTrackingUrl
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|6
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|AllocateRequestPBImpl
name|allocateRequest
init|=
operator|new
name|AllocateRequestPBImpl
argument_list|()
decl_stmt|;
name|String
name|newTrackingUrl
init|=
literal|"hadoop.apache.org"
decl_stmt|;
name|allocateRequest
operator|.
name|setTrackingUrl
argument_list|(
name|newTrackingUrl
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
comment|// Check in-memory and stored tracking url
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTrackingUrl
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTrackingUrl
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTrackingUrl
argument_list|,
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getAttempt
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start new RM, should recover updated tracking url
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTrackingUrl
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newTrackingUrl
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getOriginalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|getCreds ()
specifier|private
name|Credentials
name|getCreds
parameter_list|()
throws|throws
name|IOException
block|{
name|Credentials
name|ts
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|ts
operator|.
name|writeTokenStorageToStream
argument_list|(
name|dob
argument_list|)
expr_stmt|;
return|return
name|ts
return|;
block|}
DECL|method|getTokensConf ()
specifier|private
name|ByteBuffer
name|getTokensConf
parameter_list|()
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|dob
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
name|Configuration
name|appConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|appConf
operator|.
name|clear
argument_list|()
expr_stmt|;
name|appConf
operator|.
name|set
argument_list|(
literal|"dfs.nameservices"
argument_list|,
literal|"mycluster1,mycluster2"
argument_list|)
expr_stmt|;
name|appConf
operator|.
name|set
argument_list|(
literal|"dfs.namenode.rpc-address.mycluster2.nn1"
argument_list|,
literal|"123.0.0.1"
argument_list|)
expr_stmt|;
name|appConf
operator|.
name|set
argument_list|(
literal|"dfs.namenode.rpc-address.mycluster3.nn2"
argument_list|,
literal|"123.0.0.2"
argument_list|)
expr_stmt|;
name|appConf
operator|.
name|write
argument_list|(
name|dob
argument_list|)
expr_stmt|;
name|ByteBuffer
name|tokenConf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|dob
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|dob
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|tokenConf
return|;
block|}
block|}
end_class

end_unit

