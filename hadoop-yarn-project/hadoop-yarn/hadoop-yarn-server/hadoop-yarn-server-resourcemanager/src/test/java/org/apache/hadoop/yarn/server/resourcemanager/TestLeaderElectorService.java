begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|CuratorZookeeperClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|InstanceSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|KillSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|TestLeaderElectorService
specifier|public
class|class
name|TestLeaderElectorService
block|{
DECL|field|RM1_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM1_ADDRESS
init|=
literal|"1.1.1.1:1"
decl_stmt|;
DECL|field|RM1_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM1_NODE_ID
init|=
literal|"rm1"
decl_stmt|;
DECL|field|RM2_ADDRESS
specifier|private
specifier|static
specifier|final
name|String
name|RM2_ADDRESS
init|=
literal|"0.0.0.0:0"
decl_stmt|;
DECL|field|RM2_NODE_ID
specifier|private
specifier|static
specifier|final
name|String
name|RM2_NODE_ID
init|=
literal|"rm2"
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|rm1
name|MockRM
name|rm1
decl_stmt|;
DECL|field|rm2
name|MockRM
name|rm2
decl_stmt|;
DECL|field|zkCluster
name|TestingCluster
name|zkCluster
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|CURATOR_LEADER_ELECTOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
literal|"cluster1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|RM1_NODE_ID
operator|+
literal|","
operator|+
name|RM2_NODE_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM1_NODE_ID
argument_list|)
argument_list|,
name|RM1_ADDRESS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
name|RM2_NODE_ID
argument_list|)
argument_list|,
name|RM2_ADDRESS
argument_list|)
expr_stmt|;
block|}
name|zkCluster
operator|=
operator|new
name|TestingCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|zkCluster
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|zkCluster
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rm2
operator|!=
literal|null
condition|)
block|{
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// 1. rm1 active
comment|// 2. rm2 standby
comment|// 3. stop rm1
comment|// 4. rm2 become active
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testRMShutDownCauseFailover ()
specifier|public
name|void
name|testRMShutDownCauseFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|rm1
operator|=
name|startRM
argument_list|(
literal|"rm1"
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|rm2
operator|=
name|startRM
argument_list|(
literal|"rm2"
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// wait for some time to make sure rm2 will not become active;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|rm2
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// rm2 should become active;
name|waitFor
argument_list|(
name|rm2
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
comment|// 1. rm1 active
comment|// 2. rm2 standby
comment|// 3. submit a job to rm1 which triggers state-store failure.
comment|// 4. rm2 become
annotation|@
name|Test
DECL|method|testStateStoreFailureCauseFailover ()
specifier|public
name|void
name|testStateStoreFailureCauseFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|storeApplicationStateInternal
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationStateData
name|appState
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"store app failure."
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitFor
argument_list|(
name|rm1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|rm2
operator|=
name|startRM
argument_list|(
literal|"rm2"
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// submit an app which will trigger state-store failure.
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app1"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|rm1
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// rm2 should become active;
name|waitFor
argument_list|(
name|rm2
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// rm1 will become active again
name|waitFor
argument_list|(
name|rm1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
comment|// 1. rm1 active
comment|// 2. restart zk cluster
comment|// 3. rm1 will first relinquish leadership and re-acquire leadership
annotation|@
name|Test
DECL|method|testZKClusterDown ()
specifier|public
name|void
name|testZKClusterDown
parameter_list|()
throws|throws
name|Exception
block|{
name|rm1
operator|=
name|startRM
argument_list|(
literal|"rm1"
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// stop zk cluster
name|zkCluster
operator|.
name|stop
argument_list|()
expr_stmt|;
name|waitFor
argument_list|(
name|rm1
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|InstanceSpec
argument_list|>
name|instanceSpecs
init|=
name|zkCluster
operator|.
name|getInstances
argument_list|()
decl_stmt|;
name|zkCluster
operator|=
operator|new
name|TestingCluster
argument_list|(
name|instanceSpecs
argument_list|)
expr_stmt|;
name|zkCluster
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// rm becomes active again
name|waitFor
argument_list|(
name|rm1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
comment|// 1. rm1 active
comment|// 2. kill the zk session between the rm and zk cluster.
comment|// 3. rm1 will first relinquish leadership and re-acquire leadership
annotation|@
name|Test
DECL|method|testExpireCurrentZKSession ()
specifier|public
name|void
name|testExpireCurrentZKSession
parameter_list|()
throws|throws
name|Exception
block|{
name|rm1
operator|=
name|startRM
argument_list|(
literal|"rm1"
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|CuratorBasedElectorService
name|service
init|=
operator|(
name|CuratorBasedElectorService
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getLeaderElectorService
argument_list|()
decl_stmt|;
name|CuratorZookeeperClient
name|client
init|=
name|service
operator|.
name|getCuratorClient
argument_list|()
operator|.
name|getZookeeperClient
argument_list|()
decl_stmt|;
comment|// this will expire current curator client session. curator will re-establish
comment|// the session. RM will first relinquish leadership and re-acquire leadership
name|KillSession
operator|.
name|kill
argument_list|(
name|client
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|client
operator|.
name|getCurrentConnectionString
argument_list|()
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|rm1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
comment|// 1. rm1 fail to become active.
comment|// 2. rm1 will rejoin leader election and retry the leadership
annotation|@
name|Test
DECL|method|testRMFailToTransitionToActive ()
specifier|public
name|void
name|testRMFailToTransitionToActive
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|throwException
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Thread
name|launchRM
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|synchronized
name|void
name|transitionToActive
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|throwException
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Fail to transition to active"
argument_list|)
throw|;
block|}
else|else
block|{
name|super
operator|.
name|transitionToActive
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|launchRM
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait some time, rm will keep retry the leadership;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|throwException
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|waitFor
argument_list|(
name|rm1
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
comment|// 1. rm1 active
comment|// 2. rm2 standby
comment|// 3. kill the current connected zk instance
comment|// 4. either rm1 or rm2 will become active.
annotation|@
name|Test
DECL|method|testKillZKInstance ()
specifier|public
name|void
name|testKillZKInstance
parameter_list|()
throws|throws
name|Exception
block|{
name|rm1
operator|=
name|startRM
argument_list|(
literal|"rm1"
argument_list|,
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|rm2
operator|=
name|startRM
argument_list|(
literal|"rm2"
argument_list|,
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|CuratorBasedElectorService
name|service
init|=
operator|(
name|CuratorBasedElectorService
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getLeaderElectorService
argument_list|()
decl_stmt|;
name|ZooKeeper
name|zkClient
init|=
name|service
operator|.
name|getCuratorClient
argument_list|()
operator|.
name|getZookeeperClient
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|InstanceSpec
name|connectionInstance
init|=
name|zkCluster
operator|.
name|findConnectionInstance
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|zkCluster
operator|.
name|killServer
argument_list|(
name|connectionInstance
argument_list|)
expr_stmt|;
comment|// wait for rm1 or rm2 to be active by randomness
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
name|HAServiceState
name|rm1State
init|=
name|rm1
operator|.
name|getAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|HAServiceState
name|rm2State
init|=
name|rm2
operator|.
name|getAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
return|return
operator|(
name|rm1State
operator|.
name|equals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
operator|&&
name|rm2State
operator|.
name|equals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
operator|)
operator|||
operator|(
name|rm1State
operator|.
name|equals
argument_list|(
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
operator|&&
name|rm2State
operator|.
name|equals
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|15000
argument_list|)
expr_stmt|;
block|}
DECL|method|startRM (String rmId, HAServiceState state)
specifier|private
name|MockRM
name|startRM
parameter_list|(
name|String
name|rmId
parameter_list|,
name|HAServiceState
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|yarnConf
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|yarnConf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitFor
argument_list|(
name|rm
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|rm
return|;
block|}
DECL|method|waitFor (final MockRM rm, final HAServiceState state)
specifier|private
name|void
name|waitFor
parameter_list|(
specifier|final
name|MockRM
name|rm
parameter_list|,
specifier|final
name|HAServiceState
name|state
parameter_list|)
throws|throws
name|TimeoutException
throws|,
name|InterruptedException
block|{
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
try|try
block|{
return|return
name|rm
operator|.
name|getAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|state
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|2000
argument_list|,
literal|15000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

