begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|CommonNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRMAppSubmissionData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRMAppSubmitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Queue States.  */
end_comment

begin_class
DECL|class|TestQueueState
specifier|public
class|class
name|TestQueueState
block|{
DECL|field|Q1
specifier|private
specifier|static
specifier|final
name|String
name|Q1
init|=
literal|"q1"
decl_stmt|;
DECL|field|Q2
specifier|private
specifier|static
specifier|final
name|String
name|Q2
init|=
literal|"q2"
decl_stmt|;
DECL|field|Q3
specifier|private
specifier|static
specifier|final
name|String
name|Q3
init|=
literal|"q3"
decl_stmt|;
DECL|field|Q1_PATH
specifier|private
specifier|final
specifier|static
name|String
name|Q1_PATH
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|Q1
decl_stmt|;
DECL|field|Q2_PATH
specifier|private
specifier|final
specifier|static
name|String
name|Q2_PATH
init|=
name|Q1_PATH
operator|+
literal|"."
operator|+
name|Q2
decl_stmt|;
DECL|field|Q3_PATH
specifier|private
specifier|final
specifier|static
name|String
name|Q3_PATH
init|=
name|Q1_PATH
operator|+
literal|"."
operator|+
name|Q3
decl_stmt|;
DECL|field|cs
specifier|private
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testQueueState ()
specifier|public
name|void
name|testQueueState
parameter_list|()
throws|throws
name|IOException
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q1
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|Q1_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q2
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q1_PATH
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q2_PATH
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|CapacityScheduler
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//by default, the state of both queues should be RUNNING
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the state of Q1 to STOPPED, and re-initiate the CS
name|csConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// The state of Q1 and its child: Q2 should be STOPPED
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the state of Q1 to RUNNING, and change the state of Q2 to STOPPED
name|csConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setState
argument_list|(
name|Q2_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|// reinitialize the CS, the operation should be successful
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the state of Q1 to STOPPED, and change the state of Q2 to RUNNING
name|csConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setState
argument_list|(
name|Q2_PATH
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|// reinitialize the CS, the operation should be failed.
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw an Exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The parent queue:q1 cannot be STOPPED as the child"
operator|+
literal|" queue:q2 is in RUNNING state."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testQueueStateTransit ()
specifier|public
name|void
name|testQueueStateTransit
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q1
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|Q1_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q2
block|,
name|Q3
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q1_PATH
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q2_PATH
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q3_PATH
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|CapacityScheduler
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//by default, the state of ALL queues should be RUNNING
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q3
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit an application to Q2
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
literal|"testUser"
decl_stmt|;
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|submitApplication
argument_list|(
name|appId
argument_list|,
name|userName
argument_list|,
name|Q2
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|getMockApplication
argument_list|(
name|appId
argument_list|,
name|userName
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|submitApplicationAttempt
argument_list|(
name|app
argument_list|,
name|userName
argument_list|)
expr_stmt|;
comment|// set Q2 state to stop and do reinitialize.
name|csConf
operator|.
name|setState
argument_list|(
name|Q2_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|DRAINING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q3
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// set Q1 state to stop and do reinitialize.
name|csConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|DRAINING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|DRAINING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q3
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Active Q3, should fail
name|csConf
operator|.
name|setState
argument_list|(
name|Q3_PATH
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw an Exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Do Nothing
block|}
comment|// stop the app running in q2
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|finishApplicationAttempt
argument_list|(
name|app
argument_list|,
name|Q2
argument_list|)
expr_stmt|;
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|finishApplication
argument_list|(
name|appId
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q3
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getMockApplication (ApplicationId appId, String user, Resource amResource)
specifier|private
name|FiCaSchedulerApp
name|getMockApplication
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|Resource
name|amResource
parameter_list|)
block|{
name|FiCaSchedulerApp
name|application
init|=
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|applicationAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getApplicationId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|applicationAttemptId
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getApplicationAttemptId
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|user
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|amResource
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getAMResource
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getAppAMNodePartitionName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|amResource
argument_list|)
operator|.
name|when
argument_list|(
name|application
argument_list|)
operator|.
name|getAMResource
argument_list|(
name|CommonNodeLabelsManager
operator|.
name|NO_LABEL
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|application
operator|.
name|compareInputOrderTo
argument_list|(
name|any
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
return|return
name|application
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRecoverDrainingStateAfterRMRestart ()
specifier|public
name|void
name|testRecoverDrainingStateAfterRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// init conf
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_MAX_COMPLETED_APPLICATIONS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q1
block|}
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setQueues
argument_list|(
name|Q1_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q2
block|}
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setCapacity
argument_list|(
name|Q1_PATH
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setCapacity
argument_list|(
name|Q2_PATH
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// init state store
name|MemoryRMStateStore
name|newMemStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|newMemStore
operator|.
name|init
argument_list|(
name|newConf
argument_list|)
expr_stmt|;
comment|// init RM& NMs& Nodes
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|newConf
argument_list|,
name|newMemStore
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|204800
argument_list|)
decl_stmt|;
comment|// submit an app, AM is running on nm1
name|MockRMAppSubmissionData
name|data
init|=
name|MockRMAppSubmissionData
operator|.
name|Builder
operator|.
name|createWithMemory
argument_list|(
literal|1024
argument_list|,
name|rm
argument_list|)
operator|.
name|withAppName
argument_list|(
literal|"appname"
argument_list|)
operator|.
name|withUser
argument_list|(
literal|"appuser"
argument_list|)
operator|.
name|withAcls
argument_list|(
literal|null
argument_list|)
operator|.
name|withQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|withUnmanagedAM
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RMApp
name|app
init|=
name|MockRMAppSubmitter
operator|.
name|submit
argument_list|(
name|rm
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// update queue state to STOPPED
name|newConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|capacityScheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|capacityScheduler
operator|.
name|reinitialize
argument_list|(
name|newConf
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// current queue state should be DRAINING
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|DRAINING
argument_list|,
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|DRAINING
argument_list|,
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// RM restart
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|newConf
argument_list|,
name|newMemStore
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|204800
argument_list|)
expr_stmt|;
comment|// queue state should be DRAINING after app recovered
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|capacityScheduler
operator|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|DRAINING
argument_list|,
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|DRAINING
argument_list|,
name|capacityScheduler
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// close rm
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

