begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test Queue States.  */
end_comment

begin_class
DECL|class|TestQueueState
specifier|public
class|class
name|TestQueueState
block|{
DECL|field|Q1
specifier|private
specifier|static
specifier|final
name|String
name|Q1
init|=
literal|"q1"
decl_stmt|;
DECL|field|Q2
specifier|private
specifier|static
specifier|final
name|String
name|Q2
init|=
literal|"q2"
decl_stmt|;
DECL|field|Q1_PATH
specifier|private
specifier|final
specifier|static
name|String
name|Q1_PATH
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|Q1
decl_stmt|;
DECL|field|Q2_PATH
specifier|private
specifier|final
specifier|static
name|String
name|Q2_PATH
init|=
name|Q1_PATH
operator|+
literal|"."
operator|+
name|Q2
decl_stmt|;
DECL|field|cs
specifier|private
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
DECL|method|testQueueState ()
specifier|public
name|void
name|testQueueState
parameter_list|()
throws|throws
name|IOException
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q1
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setQueues
argument_list|(
name|Q1_PATH
argument_list|,
operator|new
name|String
index|[]
block|{
name|Q2
block|}
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q1_PATH
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|Q2_PATH
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|CapacityScheduler
argument_list|()
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|//by default, the state of both queues should be RUNNING
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the state of Q1 to STOPPED, and re-initiate the CS
name|csConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// The state of Q1 and its child: Q2 should be STOPPED
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the state of Q1 to RUNNING, and change the state of Q2 to STOPPED
name|csConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setState
argument_list|(
name|Q2_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|// reinitialize the CS, the operation should be successful
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|RUNNING
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|QueueState
operator|.
name|STOPPED
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
name|Q2
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the state of Q1 to STOPPED, and change the state of Q2 to RUNNING
name|csConf
operator|.
name|setState
argument_list|(
name|Q1_PATH
argument_list|,
name|QueueState
operator|.
name|STOPPED
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setState
argument_list|(
name|Q2_PATH
argument_list|,
name|QueueState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
comment|// reinitialize the CS, the operation should be failed.
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should throw an Exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The parent queue:q1 state is STOPPED, "
operator|+
literal|"child queue:q2 state cannot be RUNNING."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

