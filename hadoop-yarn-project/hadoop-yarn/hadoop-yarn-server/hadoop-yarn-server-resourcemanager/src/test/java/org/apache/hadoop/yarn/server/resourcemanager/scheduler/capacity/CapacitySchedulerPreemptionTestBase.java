begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|SchedulingEditPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|SchedulingMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|CapacitySchedulerPreemptionTestBase
specifier|public
class|class
name|CapacitySchedulerPreemptionTestBase
block|{
DECL|field|GB
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
name|Configuration
name|conf
decl_stmt|;
DECL|field|mgr
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
DECL|field|clock
name|Clock
name|clock
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|,
name|ProportionalCapacityPreemptionPolicy
operator|.
name|class
argument_list|,
name|SchedulingEditPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|=
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// Set preemption related configurations
name|conf
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_WAIT_TIME_BEFORE_KILL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|TOTAL_PREEMPTION_PER_ROUND
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_NATURAL_TERMINATION_FACTOR
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_MONITORING_INTERVAL
argument_list|,
literal|60000L
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|clock
operator|=
name|mock
argument_list|(
name|Clock
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
DECL|method|getSchedulingEditPolicy (MockRM rm)
name|SchedulingEditPolicy
name|getSchedulingEditPolicy
parameter_list|(
name|MockRM
name|rm
parameter_list|)
block|{
name|ResourceManager
operator|.
name|RMActiveServices
name|activeServices
init|=
name|rm
operator|.
name|getRMActiveService
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|mon
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|activeServices
operator|.
name|getServices
argument_list|()
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|SchedulingMonitor
condition|)
block|{
name|mon
operator|=
operator|(
name|SchedulingMonitor
operator|)
name|service
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|mon
operator|!=
literal|null
condition|)
block|{
return|return
name|mon
operator|.
name|getSchedulingEditPolicy
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|waitNumberOfLiveContainersFromApp (FiCaSchedulerApp app, int expected)
specifier|public
name|void
name|waitNumberOfLiveContainersFromApp
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|waitNum
operator|<
literal|10
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|expected
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|waitNum
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|waitNumberOfReservedContainersFromApp (FiCaSchedulerApp app, int expected)
specifier|public
name|void
name|waitNumberOfReservedContainersFromApp
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|waitNum
operator|<
literal|10
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|expected
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|waitNum
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
DECL|method|waitNumberOfLiveContainersOnNodeFromApp (FiCaSchedulerNode node, ApplicationAttemptId appId, int expected)
specifier|public
name|void
name|waitNumberOfLiveContainersOnNodeFromApp
parameter_list|(
name|FiCaSchedulerNode
name|node
parameter_list|,
name|ApplicationAttemptId
name|appId
parameter_list|,
name|int
name|expected
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|waitNum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|waitNum
operator|<
literal|500
condition|)
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|node
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|equals
argument_list|(
name|appId
argument_list|)
condition|)
block|{
name|total
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|total
operator|==
name|expected
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|waitNum
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

