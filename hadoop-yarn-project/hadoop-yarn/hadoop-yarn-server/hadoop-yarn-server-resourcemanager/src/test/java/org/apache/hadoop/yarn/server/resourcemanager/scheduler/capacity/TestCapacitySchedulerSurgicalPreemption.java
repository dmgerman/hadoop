begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|SchedulingMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|SchedulingMonitorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|TestCapacitySchedulerSurgicalPreemption
specifier|public
class|class
name|TestCapacitySchedulerSurgicalPreemption
extends|extends
name|CapacitySchedulerPreemptionTestBase
block|{
DECL|field|NUM_NM
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NM
init|=
literal|5
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_SELECT_CANDIDATES_FOR_RESERVED_CONTAINERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSimpleSurgicalPreemption ()
specifier|public
name|void
name|testSimpleSurgicalPreemption
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *             Root      *            /  |  \      *           a   b   c      *          10   20  70      *</pre>      *      * 1) Two nodes (n1/n2) in the cluster, each of them has 20G.      *      * 2) app1 submit to queue-a first, it asked 32 * 1G containers      * We will allocate 16 on n1 and 16 on n2.      *      * 3) app2 submit to queue-c, ask for one 1G container (for AM)      *      * 4) app2 asks for another 6G container, it will be reserved on n1      *      * Now: we have:      * n1: 17 from app1, 1 from app2, and 1 reserved from app2      * n2: 16 from app1.      *      * After preemption, we should expect:      * Preempt 4 containers from app1 on n1.      */
name|testSimpleSurgicalPreemption
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|,
literal|"user"
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSimpleSurgicalPreemption (String queue1, String queue2, String user1, String user2)
specifier|protected
name|void
name|testSimpleSurgicalPreemption
parameter_list|(
name|String
name|queue1
parameter_list|,
name|String
name|queue2
parameter_list|,
name|String
name|user1
parameter_list|,
name|String
name|user2
parameter_list|)
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
name|user1
argument_list|,
literal|null
argument_list|,
name|queue1
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|32
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for node1/node2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|32
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App1 should have 33 containers now
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|33
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 17 from n1 and 16 from n2
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|// Submit app2 to queue-c and asks for a 1G container for AM
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
name|user2
argument_list|,
literal|null
argument_list|,
name|queue2
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// NM1/NM2 has available resource = 2G/4G
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// AM asks for a 1 * GB container
name|am2
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Call allocation once on n1, we should expect the container reserved on n1
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get edit policy and do one update
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
comment|// Call edit schedule twice, and check if 4 containers from app1 at n1 killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|29
argument_list|)
expr_stmt|;
comment|// 13 from n1 (4 preempted) and 16 from n2
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|// Ensure preemption metrics were recored.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Number of preempted containers incorrectly recorded:"
argument_list|,
literal|4
argument_list|,
name|cs
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAggregatePreemptedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testSurgicalPreemptionWithAvailableResource ()
specifier|public
name|void
name|testSurgicalPreemptionWithAvailableResource
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *             Root      *            /  |  \      *           a   b   c      *          10   20  70      *</pre>      *      * 1) Two nodes (n1/n2) in the cluster, each of them has 20G.      *      * 2) app1 submit to queue-b, asks for 1G * 5      *      * 3) app2 submit to queue-c, ask for one 4G container (for AM)      *      * After preemption, we should expect:      * Preempt 3 containers from app1 and AM of app2 successfully allocated.      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|38
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for node1/node2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|38
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App1 should have 31 containers now
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|39
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 17 from n1 and 16 from n2
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|19
argument_list|)
expr_stmt|;
comment|// Submit app2 to queue-c and asks for a 4G container for AM
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Call editSchedule: containers are selected to be preemption candidate
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|36
argument_list|)
expr_stmt|;
comment|// Call allocation, containers are reserved
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|waitNumberOfReservedContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Call editSchedule twice and allocation once, container should get allocated
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|int
name|tick
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|&&
name|tick
operator|<
literal|10
condition|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|tick
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfReservedContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testPriorityPreemptionWhenAllQueuesAreBelowGuaranteedCapacities ()
specifier|public
name|void
name|testPriorityPreemptionWhenAllQueuesAreBelowGuaranteedCapacities
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *             Root      *            /  |  \      *           a   b   c      *          10   20  70      *</pre>      *      * 1) Two nodes (n1/n2) in the cluster, each of them has 20G.      *      * 2) app1 submit to queue-b first, it asked 6 * 1G containers      * We will allocate 4 on n1 (including AM) and 3 on n2.      *      * 3) app2 submit to queue-c, ask for one 18G container (for AM)      *      * After preemption, we should expect:      * Preempt 3 containers from app1 and AM of app2 successfully allocated.      */
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueueOrderingPolicy
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY
argument_list|)
expr_stmt|;
comment|// Queue c has higher priority than a/b
name|conf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|6
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for node1/node2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App1 should have 7 containers now, so the abs-used-cap of b is
comment|// 7 / 40 = 17.5%< 20% (guaranteed)
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 4 from n1 and 3 from n2
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Submit app2 to queue-c and asks for a 1G container for AM
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|18
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// Call editSchedule immediately: containers are not selected
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep the timeout interval, we should be able to see containers selected
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed, and new AM
comment|// container launched
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// Do allocation till reserved container allocated
while|while
condition|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testPriorityPreemptionRequiresMoveReservation ()
specifier|public
name|void
name|testPriorityPreemptionRequiresMoveReservation
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *             Root      *            /  |  \      *           a   b   c      *          10   20  70      *</pre>      *      * 1) 3 nodes in the cluster, 10G for each      *      * 2) app1 submit to queue-b first, it asked 2G each,      *    it can get 2G on n1 (AM), 2 * 2G on n2      *      * 3) app2 submit to queue-c, with 2G AM container (allocated on n3)      *    app2 requires 9G resource, which will be reserved on n3      *      * We should expect container unreserved from n3 and allocated on n1/n2      */
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueueOrderingPolicy
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionMoveReservation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Queue c has higher priority than a/b
name|conf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode3
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for node2 twice
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 from n1 and 2 from n2
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode1
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Submit app2 to queue-c and asks for a 2G container for AM, on n3
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm3
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Asks 1 * 9G container
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|9
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for node3 once
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure container reserved on node3
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode3
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule immediately: nothing happens
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode3
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Sleep the timeout interval, we should be able to see reserved container
comment|// moved to n2 (n1 occupied by AM)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode3
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|rmNode2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do it again, we should see containers marked to be preempt
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// Do allocation till reserved container allocated
while|while
condition|(
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testPriorityPreemptionOnlyTriggeredWhenDemandingQueueUnsatisfied ()
specifier|public
name|void
name|testPriorityPreemptionOnlyTriggeredWhenDemandingQueueUnsatisfied
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *             Root      *            /  |  \      *           a   b   c      *          10   20  70      *</pre>      *      * 1) 10 nodes (n0-n9) in the cluster, each of them has 10G.      *      * 2) app1 submit to queue-b first, it asked 8 * 1G containers      * We will allocate 1 container on each of n0-n10      *      * 3) app2 submit to queue-c, ask for 10 * 10G containers (including AM)      *      * After preemption, we should expect:      * Preempt 7 containers from app1 and usage of app2 is 70%      */
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueueOrderingPolicy
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY
argument_list|)
expr_stmt|;
comment|// Queue c has higher priority than a/b
name|conf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
index|[]
name|mockNMs
init|=
operator|new
name|MockNM
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|mockNMs
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
expr_stmt|;
block|}
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|mockNMs
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|8
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for nm1-nm8
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App1 should have 9 containers now, so the abs-used-cap of b is 9%
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Submit app2 to queue-c and asks for a 10G container for AM
comment|// Launch AM in NM9
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|9
index|]
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Ask 10 * 10GB containers
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for all nms
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check am2 reserved resource from nm1-nm9
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Should reserve on nm-"
operator|+
name|i
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Sleep the timeout interval, we should be able to see 6 containers selected
comment|// 6 (selected) + 1 (allocated) which makes target capacity to 70%
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|checkNumberOfPreemptionCandidateFromApp
argument_list|(
name|editPolicy
argument_list|,
literal|6
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Do allocation for all nms
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
DECL|method|testPriorityPreemptionFromHighestPriorityQueueAndOldestContainer ()
specifier|public
name|void
name|testPriorityPreemptionFromHighestPriorityQueueAndOldestContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to different queues, queue      * structure:      *      *<pre>      *             Root      *            /  |  \      *           a   b   c      *          45  45  10      *</pre>      *      * Priority of queue_a = 1      * Priority of queue_b = 2      *      * 1) 5 nodes (n0-n4) in the cluster, each of them has 4G.      *      * 2) app1 submit to queue-c first (AM=1G), it asked 4 * 1G containers      *    We will allocate 1 container on each of n0-n4. AM on n4.      *      * 3) app2 submit to queue-a, AM container=0.5G, allocated on n0      *    Ask for 2 * 3.5G containers. (Reserved on n0/n1)      *      * 4) app2 submit to queue-b, AM container=0.5G, allocated on n2      *    Ask for 2 * 3.5G containers. (Reserved on n2/n3)      *      * First we will preempt container on n2 since it is the oldest container of      * Highest priority queue (b)      */
comment|// A/B has higher priority
name|conf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
argument_list|,
literal|45f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
argument_list|,
literal|45f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
argument_list|,
literal|10f
argument_list|)
expr_stmt|;
name|testPriorityPreemptionFromHighestPriorityQueueAndOldestContainer
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"user"
block|,
literal|"user"
block|,
literal|"user"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
DECL|method|testPriorityPreemptionFromHighestPriorityQueueAndOldestContainer (String[] queues, String[] users)
name|testPriorityPreemptionFromHighestPriorityQueueAndOldestContainer
parameter_list|(
name|String
index|[]
name|queues
parameter_list|,
name|String
index|[]
name|users
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Total preemption = 1G per round, which is 5% of cluster resource (20G)
name|conf
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|TOTAL_PREEMPTION_PER_ROUND
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPUOrderingPolicyUnderUtilizedPreemptionDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueueOrderingPolicy
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
index|[]
name|mockNMs
init|=
operator|new
name|MockNM
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|mockNMs
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
expr_stmt|;
block|}
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|mockNMs
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
name|users
index|[
literal|2
index|]
argument_list|,
literal|null
argument_list|,
name|queues
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|4
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for nm1-nm8
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App1 should have 5 containers now, one for each node
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Submit app2 to queue-a and asks for a 0.5G container for AM (on n0)
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|512
argument_list|,
literal|"app"
argument_list|,
name|users
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|queues
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Ask 2 * 3.5GB containers
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|3
operator|*
name|GB
operator|+
literal|512
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for n0-n1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check am2 reserved resource from nm0-nm1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Should reserve on nm-"
operator|+
name|i
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|queues
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Submit app3 to queue-b and asks for a 0.5G container for AM (on n2)
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|512
argument_list|,
literal|"app"
argument_list|,
name|users
index|[
literal|1
index|]
argument_list|,
literal|null
argument_list|,
name|queues
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp3
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Ask 2 * 3.5GB containers
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|3
operator|*
name|GB
operator|+
literal|512
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for n2-n3
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check am2 reserved resource from nm2-nm3
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Should reserve on nm-"
operator|+
name|i
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|queues
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Sleep the timeout interval, we should be able to see 1 container selected
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|/* 1st container preempted is on n2 */
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// We should have one to-preempt container, on node[2]
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|selectedToPreempt
init|=
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectedToPreempt
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockNMs
index|[
literal|2
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|selectedToPreempt
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Make sure the container killed, then do allocation for all nms
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|/* 2nd container preempted is on n3 */
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// We should have one to-preempt container, on node[3]
name|selectedToPreempt
operator|=
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectedToPreempt
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockNMs
index|[
literal|3
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|selectedToPreempt
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Do allocation for all nms
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|/* 3rd container preempted is on n0 */
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// We should have one to-preempt container, on node[0]
name|selectedToPreempt
operator|=
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectedToPreempt
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockNMs
index|[
literal|0
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|selectedToPreempt
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Do allocation for all nms
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|/* 4th container preempted is on n1 */
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// We should have one to-preempt container, on node[0]
name|selectedToPreempt
operator|=
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|keySet
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|selectedToPreempt
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|mockNMs
index|[
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|selectedToPreempt
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// Call editSchedule again: selected containers are killed
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Do allocation for all nms
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|waitNumberOfLiveContainersFromApp
argument_list|(
name|schedulerApp3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|initializeConfProperties (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|initializeConfProperties
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setQueues
argument_list|(
literal|"root"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
literal|"root.A"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
literal|"root.B"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePriority
argument_list|(
literal|"root.A"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueuePriority
argument_list|(
literal|"root.B"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.ordering-policy"
argument_list|,
literal|"priority-utilization"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"ordering-policy.priority-utilization.underutilized-preemption.enabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"ordering-policy.priority-utilization.underutilized-preemption.allow-move-reservation"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"ordering-policy.priority-utilization.underutilized-preemption.reserved-container-delay-ms"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.accessible-node-labels.x.capacity"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
comment|// Setup queue access to node labels
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.A.accessible-node-labels"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.B.accessible-node-labels"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.A.default-node-label-expression"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.B.default-node-label-expression"
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.A.accessible-node-labels.x.capacity"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.B.accessible-node-labels.x.capacity"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.A.user-limit-factor"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"root.B.user-limit-factor"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"maximum-am-resource-percent"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_WAIT_TIME_BEFORE_KILL
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_MONITORING_INTERVAL
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|TOTAL_PREEMPTION_PER_ROUND
argument_list|,
literal|"0.5"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREEMPTION_NATURAL_TERMINATION_FACTOR
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriorityPreemptionWithNodeLabels ()
specifier|public
name|void
name|testPriorityPreemptionWithNodeLabels
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set up queue priority and capacity
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|initializeConfProperties
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
index|[]
name|mockNMs
init|=
operator|new
name|MockNM
index|[
name|NUM_NM
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NM
condition|;
name|i
operator|++
control|)
block|{
name|mockNMs
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|6144
argument_list|)
expr_stmt|;
block|}
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|addToCluserNodeLabels
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RMNode
index|[]
name|rmNodes
init|=
operator|new
name|RMNode
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NM
condition|;
name|i
operator|++
control|)
block|{
name|rmNodes
index|[
name|i
index|]
operator|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|mockNMs
index|[
name|i
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// launch an app to queue B, AM container launched in nm4
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|4096
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4096
argument_list|,
name|NUM_NM
operator|-
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for nm0-nm3
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NM
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App1 should have 5 containers now, one for each node
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|NUM_NM
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NM
condition|;
name|i
operator|++
control|)
block|{
name|waitNumberOfLiveContainersOnNodeFromApp
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|rmNodes
index|[
name|i
index|]
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Submit app2 to queue A and asks for a 750MB container for AM (on n0)
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"A"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Ask NUM_NM-1 * 1500MB containers
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|2048
argument_list|,
name|NUM_NM
operator|-
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for n1-n4
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|NUM_NM
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// kill app1
name|rm1
operator|.
name|killApp
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit app3 to queue B and asks for a 5000MB container for AM (on n2)
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"B"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|mockNMs
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp3
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Ask NUM_NM * 5000MB containers
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|5120
argument_list|,
name|NUM_NM
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for n0-n4
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NM
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNodes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Sleep the timeout interval, we should see 2 containers selected
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// We should only allow to preempt 2 containers, on node1 and node2
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|selectedToPreempt
init|=
name|editPolicy
operator|.
name|getToPreemptContainers
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|selectedToPreempt
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeId
argument_list|>
name|selectedToPreemptNodeIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|rmc
range|:
name|selectedToPreempt
control|)
block|{
name|selectedToPreemptNodeIds
operator|.
name|add
argument_list|(
name|rmc
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|selectedToPreemptNodeIds
argument_list|,
name|CoreMatchers
operator|.
name|hasItems
argument_list|(
name|mockNMs
index|[
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|mockNMs
index|[
literal|2
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testPreemptionForFragmentatedCluster ()
specifier|public
name|void
name|testPreemptionForFragmentatedCluster
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set additional_balance_queue_based_on_reserved_res to true to get
comment|// additional preemptions.
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ADDITIONAL_RESOURCE_BALANCE_BASED_ON_RESERVED_CONTAINERS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|/**      * Two queues, a/b, each of them are 50/50      * 5 nodes in the cluster, each of them is 30G.      *      * Submit first app, AM = 3G, and 4 * 21G containers.      * Submit second app, AM = 3G, and 4 * 21G containers,      *      * We can get one container preempted from 1st app.      */
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|1024
operator|*
literal|21
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
literal|"root"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
literal|"root.a"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
literal|"root.a"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
literal|"root.b"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
literal|"root.b"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MockNM
argument_list|>
name|nms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|nms
operator|.
name|add
argument_list|(
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|30
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|21
operator|*
name|GB
argument_list|,
literal|4
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for all nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|MockNM
name|mockNM
init|=
name|nms
operator|.
name|get
argument_list|(
name|i
operator|%
name|nms
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|cs
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|mockNM
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App1 should have 5 containers now
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nms
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|21
operator|*
name|GB
argument_list|,
literal|4
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocation for all nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|MockNM
name|mockNM
init|=
name|nms
operator|.
name|get
argument_list|(
name|i
operator|%
name|nms
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|cs
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|mockNM
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// App2 should have 2 containers now
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitNumberOfReservedContainersFromApp
argument_list|(
name|schedulerApp2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Call editSchedule twice and allocation once, container should get allocated
name|SchedulingMonitorManager
name|smm
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getSchedulingMonitorManager
argument_list|()
decl_stmt|;
name|SchedulingMonitor
name|smon
init|=
name|smm
operator|.
name|getAvailableSchedulingMonitor
argument_list|()
decl_stmt|;
name|ProportionalCapacityPreemptionPolicy
name|editPolicy
init|=
operator|(
name|ProportionalCapacityPreemptionPolicy
operator|)
name|smon
operator|.
name|getSchedulingEditPolicy
argument_list|()
decl_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|editPolicy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|int
name|tick
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|4
operator|&&
name|tick
operator|<
literal|10
condition|)
block|{
comment|// Do allocation for all nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|MockNM
name|mockNM
init|=
name|nms
operator|.
name|get
argument_list|(
name|i
operator|%
name|nms
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode
init|=
name|cs
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|mockNM
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tick
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

