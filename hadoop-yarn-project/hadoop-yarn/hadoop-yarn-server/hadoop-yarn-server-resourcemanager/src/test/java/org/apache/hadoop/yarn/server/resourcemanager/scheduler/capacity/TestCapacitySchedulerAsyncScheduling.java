begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ContainerAllocationProposal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|ResourceCommitRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|SchedulerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|TestCapacitySchedulerAsyncScheduling
specifier|public
class|class
name|TestCapacitySchedulerAsyncScheduling
block|{
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|mgr
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
DECL|field|nmHeartbeatThread
specifier|private
name|NMHeartbeatThread
name|nmHeartbeatThread
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_ENABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testSingleThreadAsyncContainerAllocation ()
specifier|public
name|void
name|testSingleThreadAsyncContainerAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|testAsyncContainerAllocation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testTwoThreadsAsyncContainerAllocation ()
specifier|public
name|void
name|testTwoThreadsAsyncContainerAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|testAsyncContainerAllocation
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
DECL|method|testThreeThreadsAsyncContainerAllocation ()
specifier|public
name|void
name|testThreeThreadsAsyncContainerAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|testAsyncContainerAllocation
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testAsyncContainerAllocation (int numThreads)
specifier|public
name|void
name|testAsyncContainerAllocation
parameter_list|(
name|int
name|numThreads
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_MAXIMUM_THREAD
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_PREFIX
operator|+
literal|".scheduling-interval-ms"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MockNM
argument_list|>
name|nms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add 10 nodes to the cluster, in the cluster we have 200 GB resource
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|nms
operator|.
name|add
argument_list|(
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|keepNMHeartbeat
argument_list|(
name|nms
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MockAM
argument_list|>
name|ams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add 3 applications to the cluster, one app in one queue
comment|// the i-th app ask (20 * i) containers. So in total we will have
comment|// 123G container allocated
name|int
name|totalAsked
init|=
literal|3
operator|*
name|GB
decl_stmt|;
comment|// 3 AMs
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
call|(
name|char
call|)
argument_list|(
name|i
operator|%
literal|34
operator|+
literal|97
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAMWhenAsyncSchedulingEnabled
argument_list|(
name|rmApp
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|ams
operator|.
name|add
argument_list|(
name|am
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|ams
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|20
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|totalAsked
operator|+=
literal|20
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
name|GB
expr_stmt|;
block|}
comment|// Wait for at most 15000 ms
name|int
name|waitTime
init|=
literal|15000
decl_stmt|;
comment|// ms
while|while
condition|(
name|waitTime
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
operator|==
name|totalAsked
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|waitTime
operator|-=
literal|50
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|,
name|totalAsked
argument_list|)
expr_stmt|;
comment|// Wait for another 2 sec to make sure we will not allocate more than
comment|// required
name|waitTime
operator|=
literal|2000
expr_stmt|;
comment|// ms
while|while
condition|(
name|waitTime
operator|>
literal|0
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|,
name|totalAsked
argument_list|)
expr_stmt|;
name|waitTime
operator|-=
literal|50
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Testcase for YARN-6714
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCommitProposalForFailedAppAttempt ()
specifier|public
name|void
name|testCommitProposalForFailedAppAttempt
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable async-scheduling for simulating complex since scene
name|Configuration
name|disableAsyncConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|disableAsyncConf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// init RM& NMs& Nodes
specifier|final
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|disableAsyncConf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.1:1234"
argument_list|,
literal|9
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.2:2234"
argument_list|,
literal|9
operator|*
name|GB
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MockNM
argument_list|>
name|nmLst
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nmLst
operator|.
name|add
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|nmLst
operator|.
name|add
argument_list|(
name|nm2
argument_list|)
expr_stmt|;
comment|// init scheduler& nodes
while|while
condition|(
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
operator|<
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|SchedulerNode
name|sn1
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|sn2
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// allocate and launch 1 containers and running on nm2
name|allocateAndLaunchContainers
argument_list|(
name|am
argument_list|,
name|nm2
argument_list|,
name|rm
argument_list|,
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// nm1 runs 1 container(app1-container_01/AM)
comment|// nm2 runs 1 container(app1-container_02)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sn1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sn2
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill app attempt1
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait until app attempt1 removed on nm1
while|while
condition|(
name|sn1
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// wait until app attempt2 launched on nm1
while|while
condition|(
name|sn1
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// generate reserved proposal of stopped app attempt
comment|// and it could be committed for async-scheduling
comment|// this kind of proposal should be skipped
name|Resource
name|reservedResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|,
name|sn2
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|sn2
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|reservedResource
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|SchedulerRequestKey
operator|.
name|create
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|reservedResource
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|sn2
operator|.
name|getNodeID
argument_list|()
argument_list|,
literal|"user"
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerContainer
name|reservedContainer
init|=
operator|new
name|SchedulerContainer
argument_list|(
name|schedulerApp
argument_list|,
name|scheduler
operator|.
name|getNode
argument_list|(
name|sn2
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|rmContainer
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ContainerAllocationProposal
name|reservedForAttempt1Proposal
init|=
operator|new
name|ContainerAllocationProposal
argument_list|(
name|reservedContainer
argument_list|,
literal|null
argument_list|,
name|reservedContainer
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|,
name|reservedResource
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|>
name|reservedProposals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|reservedProposals
operator|.
name|add
argument_list|(
name|reservedForAttempt1Proposal
argument_list|)
expr_stmt|;
name|ResourceCommitRequest
name|request
init|=
operator|new
name|ResourceCommitRequest
argument_list|(
literal|null
argument_list|,
name|reservedProposals
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|tryCommit
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
literal|"Outdated proposal should not be accepted!"
argument_list|,
name|sn2
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Testcase for YARN-6678
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCommitOutdatedReservedProposal ()
specifier|public
name|void
name|testCommitOutdatedReservedProposal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable async-scheduling for simulating complex since scene
name|Configuration
name|disableAsyncConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|disableAsyncConf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// init RM& NMs& Nodes
specifier|final
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|disableAsyncConf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|9
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:2234"
argument_list|,
literal|9
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// init scheduler nodes
name|int
name|waitTime
init|=
literal|1000
decl_stmt|;
while|while
condition|(
name|waitTime
operator|>
literal|0
operator|&&
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
operator|<
literal|2
condition|)
block|{
name|waitTime
operator|-=
literal|10
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|YarnScheduler
name|scheduler
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
specifier|final
name|SchedulerNode
name|sn1
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SchedulerNode
name|sn2
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|scheduler
operator|)
operator|.
name|getSchedulerNode
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// submit app1, am1 is running on nm1
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
specifier|final
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// submit app2, am2 is running on nm1
name|RMApp
name|app2
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
specifier|final
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// allocate and launch 2 containers for app1
name|allocateAndLaunchContainers
argument_list|(
name|am
argument_list|,
name|nm1
argument_list|,
name|rm
argument_list|,
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|allocateAndLaunchContainers
argument_list|(
name|am
argument_list|,
name|nm2
argument_list|,
name|rm
argument_list|,
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// nm1 runs 3 containers(app1-container_01/AM, app1-container_02,
comment|//                       app2-container_01/AM)
comment|// nm2 runs 1 container(app1-container_03)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|sn1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sn2
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// reserve 1 container(app1-container_04) for app1 on nm1
name|ResourceRequest
name|rr2
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|am
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rr2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait app1-container_04 reserved on nm1
name|waitTime
operator|=
literal|1000
expr_stmt|;
while|while
condition|(
name|waitTime
operator|>
literal|0
operator|&&
name|sn1
operator|.
name|getReservedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|waitTime
operator|-=
literal|10
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sn1
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|scheduler
decl_stmt|;
specifier|final
name|CapacityScheduler
name|spyCs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|cs
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|isFirstReserve
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|isChecked
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// handle CapacityScheduler#tryCommit,
comment|// reproduce the process that can raise IllegalStateException before
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
name|ResourceCommitRequest
name|request
init|=
operator|(
name|ResourceCommitRequest
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getContainersToReserve
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|isFirstReserve
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
comment|// release app1-container_03 on nm2
name|RMContainer
name|killableContainer
init|=
name|sn2
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cs
operator|.
name|completedContainer
argument_list|(
name|killableContainer
argument_list|,
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|killableContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sn2
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// unreserve app1-container_04 on nm1
comment|// and allocate app1-container_05 on nm2
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|sn2
operator|.
name|getRMNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|waitTime
init|=
literal|1000
decl_stmt|;
while|while
condition|(
name|waitTime
operator|>
literal|0
operator|&&
name|sn2
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|waitTime
operator|-=
literal|10
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sn2
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|sn1
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// reserve app2-container_02 on nm1
name|ResourceRequest
name|rr3
init|=
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rr3
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|sn1
operator|.
name|getRMNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|waitTime
operator|=
literal|1000
expr_stmt|;
while|while
condition|(
name|waitTime
operator|>
literal|0
operator|&&
name|sn1
operator|.
name|getReservedContainer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|waitTime
operator|-=
literal|10
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|sn1
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// call real apply
try|try
block|{
name|cs
operator|.
name|tryCommit
argument_list|(
operator|(
name|Resource
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|(
name|ResourceCommitRequest
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|isChecked
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cs
operator|.
name|tryCommit
argument_list|(
operator|(
name|Resource
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|(
name|ResourceCommitRequest
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyCs
argument_list|)
operator|.
name|tryCommit
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ResourceCommitRequest
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|spyCs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|sn1
operator|.
name|getRMNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|waitTime
operator|=
literal|1000
expr_stmt|;
while|while
condition|(
name|waitTime
operator|>
literal|0
operator|&&
operator|!
name|isChecked
operator|.
name|get
argument_list|()
condition|)
block|{
name|waitTime
operator|-=
literal|10
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNodeResourceOverAllocated ()
specifier|public
name|void
name|testNodeResourceOverAllocated
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable async-scheduling for simulating complex scene
name|Configuration
name|disableAsyncConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|disableAsyncConf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// init RM& NMs& Nodes
specifier|final
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|disableAsyncConf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|9
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.2:1234"
argument_list|,
literal|9
operator|*
name|GB
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MockNM
argument_list|>
name|nmLst
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|nmLst
operator|.
name|add
argument_list|(
name|nm1
argument_list|)
expr_stmt|;
name|nmLst
operator|.
name|add
argument_list|(
name|nm2
argument_list|)
expr_stmt|;
comment|// init scheduler& nodes
while|while
condition|(
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
operator|<
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|SchedulerNode
name|sn1
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// allocate 2 containers and running on nm1
name|Resource
name|containerResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
decl_stmt|;
name|am
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|containerResource
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// generate over-allocated proposals for nm1
for|for
control|(
name|int
name|containerNo
init|=
literal|2
init|;
name|containerNo
operator|<=
literal|3
condition|;
name|containerNo
operator|++
control|)
block|{
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerNo
argument_list|)
argument_list|,
name|sn1
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|sn1
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|containerResource
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|SchedulerRequestKey
operator|.
name|create
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|containerResource
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|sn1
operator|.
name|getNodeID
argument_list|()
argument_list|,
literal|"user"
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerContainer
name|newContainer
init|=
operator|new
name|SchedulerContainer
argument_list|(
name|schedulerApp
argument_list|,
name|scheduler
operator|.
name|getNode
argument_list|(
name|sn1
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|,
name|rmContainer
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ContainerAllocationProposal
name|newContainerProposal
init|=
operator|new
name|ContainerAllocationProposal
argument_list|(
name|newContainer
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|,
name|containerResource
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|>
name|newProposals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|newProposals
operator|.
name|add
argument_list|(
name|newContainerProposal
argument_list|)
expr_stmt|;
name|ResourceCommitRequest
name|request
init|=
operator|new
name|ResourceCommitRequest
argument_list|(
name|newProposals
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|tryCommit
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// make sure node resource can't be over-allocated!
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Node resource is Over-allocated!"
argument_list|,
name|sn1
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**    * Make sure scheduler skips NMs which haven't heartbeat for a while.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAsyncSchedulerSkipNoHeartbeatNMs ()
specifier|public
name|void
name|testAsyncSchedulerSkipNoHeartbeatNMs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|heartbeatInterval
init|=
literal|100
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_MAXIMUM_THREAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_PREFIX
operator|+
literal|".scheduling-interval-ms"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Heartbeat interval is 100 ms.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NM_HEARTBEAT_INTERVAL_MS
argument_list|,
name|heartbeatInterval
argument_list|)
expr_stmt|;
specifier|final
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// inject node label manager
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
return|return
name|mgr
return|;
block|}
block|}
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|MockNM
argument_list|>
name|nms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Add 10 nodes to the cluster, in the cluster we have 200 GB resource
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|nms
operator|.
name|add
argument_list|(
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0."
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
literal|20
operator|*
name|GB
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MockAM
argument_list|>
name|ams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|keepNMHeartbeat
argument_list|(
name|nms
argument_list|,
name|heartbeatInterval
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|RMApp
name|rmApp
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|Character
operator|.
name|toString
argument_list|(
call|(
name|char
call|)
argument_list|(
name|i
operator|%
literal|34
operator|+
literal|97
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAMWhenAsyncSchedulingEnabled
argument_list|(
name|rmApp
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|ams
operator|.
name|add
argument_list|(
name|am
argument_list|)
expr_stmt|;
block|}
name|pauseNMHeartbeat
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|heartbeatInterval
operator|*
literal|3
argument_list|)
expr_stmt|;
comment|// Applications request containers.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|ams
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1024
argument_list|,
literal|20
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// Do heartbeat for NM 0-4
name|nms
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Wait for 2000 ms.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Make sure that NM5-9 don't have non-AM containers.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|5
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|checkNumNonAMContainersOnNode
argument_list|(
name|cs
argument_list|,
name|nms
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|checkNumNonAMContainersOnNode
argument_list|(
name|cs
argument_list|,
name|nms
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|NMHeartbeatThread
specifier|public
specifier|static
class|class
name|NMHeartbeatThread
extends|extends
name|Thread
block|{
DECL|field|mockNMS
specifier|private
name|List
argument_list|<
name|MockNM
argument_list|>
name|mockNMS
decl_stmt|;
DECL|field|interval
specifier|private
name|int
name|interval
decl_stmt|;
DECL|field|shouldStop
specifier|private
specifier|volatile
name|boolean
name|shouldStop
init|=
literal|false
decl_stmt|;
DECL|method|NMHeartbeatThread (List<MockNM> mockNMs, int interval)
specifier|public
name|NMHeartbeatThread
parameter_list|(
name|List
argument_list|<
name|MockNM
argument_list|>
name|mockNMs
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
name|this
operator|.
name|mockNMS
operator|=
name|mockNMs
expr_stmt|;
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|shouldStop
condition|)
block|{
break|break;
block|}
for|for
control|(
name|MockNM
name|nm
range|:
name|mockNMS
control|)
block|{
try|try
block|{
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|setShouldStop ()
specifier|public
name|void
name|setShouldStop
parameter_list|()
block|{
name|shouldStop
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Testcase for YARN-8127
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testCommitDuplicatedAllocateFromReservedProposals ()
specifier|public
name|void
name|testCommitDuplicatedAllocateFromReservedProposals
parameter_list|()
throws|throws
name|Exception
block|{
comment|// disable async-scheduling for simulating complex scene
name|Configuration
name|disableAsyncConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|disableAsyncConf
operator|.
name|setBoolean
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|SCHEDULE_ASYNCHRONOUSLY_ENABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// init RM& NMs
specifier|final
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|disableAsyncConf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"192.168.0.2:2234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
expr_stmt|;
comment|// init scheduler& nodes
while|while
condition|(
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
operator|<
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|nodeCount
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|SchedulerNode
name|sn1
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_AM_MAX_ATTEMPTS
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// app asks 1 * 6G container
comment|// nm1 runs 2 container(container_01/AM, container_02)
name|allocateAndLaunchContainers
argument_list|(
name|am
argument_list|,
name|nm1
argument_list|,
name|rm
argument_list|,
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6
operator|*
name|GB
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sn1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|sn1
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// app asks 5 * 2G container
comment|// nm1 reserves 1 * 2G containers
name|am
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|sn1
operator|.
name|getRMNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// rm kills 1 * 6G container_02
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|sn1
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|cs
operator|.
name|completedContainer
argument_list|(
name|rmContainer
argument_list|,
name|ContainerStatus
operator|.
name|newInstance
argument_list|(
name|rmContainer
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
name|sn1
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CapacityScheduler
name|spyCs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|cs
argument_list|)
decl_stmt|;
comment|// handle CapacityScheduler#tryCommit, submit duplicated proposals
comment|// that do allocation for reserved container for three times,
comment|// to simulate that case in YARN-8127
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Exception
block|{
name|ResourceCommitRequest
name|request
init|=
operator|(
name|ResourceCommitRequest
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getFirstAllocatedOrReservedContainer
argument_list|()
operator|.
name|getAllocateFromReservedContainer
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|tryCommit
argument_list|(
operator|(
name|Resource
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
operator|(
name|ResourceCommitRequest
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|,
operator|(
name|Boolean
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sn1
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|sn1
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spyCs
argument_list|)
operator|.
name|tryCommit
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|ResourceCommitRequest
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|spyCs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|sn1
operator|.
name|getRMNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReleaseOutdatedReservedContainer ()
specifier|public
name|void
name|testReleaseOutdatedReservedContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Submit a application, reserved container_02 on nm1,      * submit two allocate proposals which contain the same reserved      * container_02 as to-released container.      * First proposal should be accepted, second proposal should be rejected      * because it try to release an outdated reserved container      */
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm3
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h3:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|LeafQueue
name|defaultQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|SchedulerNode
name|sn1
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|sn2
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|sn3
init|=
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nm3
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// launch another app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|Resource
name|allocateResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
operator|(
name|int
operator|)
name|allocateResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp1
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
name|defaultQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|RMContainer
name|reservedContainer
init|=
name|schedulerApp1
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceCommitRequest
name|allocateFromSameReservedContainerProposal1
init|=
name|createAllocateFromReservedProposal
argument_list|(
literal|3
argument_list|,
name|allocateResource
argument_list|,
name|schedulerApp1
argument_list|,
name|sn2
argument_list|,
name|sn1
argument_list|,
name|cs
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|reservedContainer
argument_list|)
decl_stmt|;
name|boolean
name|tryCommitResult
init|=
name|cs
operator|.
name|tryCommit
argument_list|(
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|allocateFromSameReservedContainerProposal1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tryCommitResult
argument_list|)
expr_stmt|;
name|ResourceCommitRequest
name|allocateFromSameReservedContainerProposal2
init|=
name|createAllocateFromReservedProposal
argument_list|(
literal|4
argument_list|,
name|allocateResource
argument_list|,
name|schedulerApp1
argument_list|,
name|sn3
argument_list|,
name|sn1
argument_list|,
name|cs
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|reservedContainer
argument_list|)
decl_stmt|;
name|tryCommitResult
operator|=
name|cs
operator|.
name|tryCommit
argument_list|(
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|,
name|allocateFromSameReservedContainerProposal2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"This proposal should be rejected because "
operator|+
literal|"it try to release an outdated reserved container"
argument_list|,
name|tryCommitResult
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createAllocateFromReservedProposal ( int containerId, Resource allocateResource, FiCaSchedulerApp schedulerApp, SchedulerNode allocateNode, SchedulerNode reservedNode, RMContext rmContext, RMContainer reservedContainer)
specifier|private
name|ResourceCommitRequest
name|createAllocateFromReservedProposal
parameter_list|(
name|int
name|containerId
parameter_list|,
name|Resource
name|allocateResource
parameter_list|,
name|FiCaSchedulerApp
name|schedulerApp
parameter_list|,
name|SchedulerNode
name|allocateNode
parameter_list|,
name|SchedulerNode
name|reservedNode
parameter_list|,
name|RMContext
name|rmContext
parameter_list|,
name|RMContainer
name|reservedContainer
parameter_list|)
block|{
name|Container
name|container
init|=
name|Container
operator|.
name|newInstance
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|schedulerApp
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|containerId
argument_list|)
argument_list|,
name|allocateNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|allocateNode
operator|.
name|getHttpAddress
argument_list|()
argument_list|,
name|allocateResource
argument_list|,
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
operator|new
name|RMContainerImpl
argument_list|(
name|container
argument_list|,
name|SchedulerRequestKey
operator|.
name|create
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|allocateResource
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|schedulerApp
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|allocateNode
operator|.
name|getNodeID
argument_list|()
argument_list|,
literal|"user"
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|SchedulerContainer
name|allocateContainer
init|=
operator|new
name|SchedulerContainer
argument_list|(
name|schedulerApp
argument_list|,
name|allocateNode
argument_list|,
name|rmContainer
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SchedulerContainer
name|reservedSchedulerContainer
init|=
operator|new
name|SchedulerContainer
argument_list|(
name|schedulerApp
argument_list|,
name|reservedNode
argument_list|,
name|reservedContainer
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SchedulerContainer
argument_list|>
name|toRelease
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|toRelease
operator|.
name|add
argument_list|(
name|reservedSchedulerContainer
argument_list|)
expr_stmt|;
name|ContainerAllocationProposal
name|allocateFromReservedProposal
init|=
operator|new
name|ContainerAllocationProposal
argument_list|(
name|allocateContainer
argument_list|,
name|toRelease
argument_list|,
literal|null
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|,
name|allocateResource
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerAllocationProposal
argument_list|>
name|allocateProposals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|allocateProposals
operator|.
name|add
argument_list|(
name|allocateFromReservedProposal
argument_list|)
expr_stmt|;
return|return
operator|new
name|ResourceCommitRequest
argument_list|(
name|allocateProposals
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|keepNMHeartbeat (List<MockNM> mockNMs, int interval)
specifier|private
name|void
name|keepNMHeartbeat
parameter_list|(
name|List
argument_list|<
name|MockNM
argument_list|>
name|mockNMs
parameter_list|,
name|int
name|interval
parameter_list|)
block|{
if|if
condition|(
name|nmHeartbeatThread
operator|!=
literal|null
condition|)
block|{
name|nmHeartbeatThread
operator|.
name|setShouldStop
argument_list|()
expr_stmt|;
name|nmHeartbeatThread
operator|=
literal|null
expr_stmt|;
block|}
name|nmHeartbeatThread
operator|=
operator|new
name|NMHeartbeatThread
argument_list|(
name|mockNMs
argument_list|,
name|interval
argument_list|)
expr_stmt|;
name|nmHeartbeatThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|method|pauseNMHeartbeat ()
specifier|private
name|void
name|pauseNMHeartbeat
parameter_list|()
block|{
if|if
condition|(
name|nmHeartbeatThread
operator|!=
literal|null
condition|)
block|{
name|nmHeartbeatThread
operator|.
name|setShouldStop
argument_list|()
expr_stmt|;
name|nmHeartbeatThread
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|checkNumNonAMContainersOnNode (CapacityScheduler cs, MockNM nm)
specifier|private
name|int
name|checkNumNonAMContainersOnNode
parameter_list|(
name|CapacityScheduler
name|cs
parameter_list|,
name|MockNM
name|nm
parameter_list|)
block|{
name|SchedulerNode
name|node
init|=
name|cs
operator|.
name|getNode
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|nonAMContainer
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|node
operator|.
name|getCopiedListOfRunningContainers
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
name|nonAMContainer
operator|++
expr_stmt|;
block|}
block|}
return|return
name|nonAMContainer
return|;
block|}
DECL|method|allocateAndLaunchContainers (MockAM am, MockNM nm, MockRM rm, int nContainer, Resource resource, int priority, int startContainerId)
specifier|private
name|void
name|allocateAndLaunchContainers
parameter_list|(
name|MockAM
name|am
parameter_list|,
name|MockNM
name|nm
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|int
name|nContainer
parameter_list|,
name|Resource
name|resource
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|startContainerId
parameter_list|)
throws|throws
name|Exception
block|{
name|am
operator|.
name|allocate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ResourceRequest
operator|.
name|newInstance
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priority
argument_list|)
argument_list|,
literal|"*"
argument_list|,
name|resource
argument_list|,
name|nContainer
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ContainerId
name|lastContainerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|startContainerId
operator|+
name|nContainer
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|lastContainerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Acquire them, and NM report RUNNING
name|am
operator|.
name|allocate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cId
init|=
name|startContainerId
init|;
name|cId
operator|<
name|startContainerId
operator|+
name|nContainer
condition|;
name|cId
operator|++
control|)
block|{
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cId
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|cs
operator|.
name|getRMContainer
argument_list|(
name|containerId
argument_list|)
decl_stmt|;
if|if
condition|(
name|rmContainer
operator|!=
literal|null
condition|)
block|{
name|rmContainer
operator|.
name|handle
argument_list|(
operator|new
name|RMContainerEvent
argument_list|(
name|containerId
argument_list|,
name|RMContainerEventType
operator|.
name|LAUNCHED
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Cannot find RMContainer"
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|waitForState
argument_list|(
name|nm
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|cId
argument_list|)
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

