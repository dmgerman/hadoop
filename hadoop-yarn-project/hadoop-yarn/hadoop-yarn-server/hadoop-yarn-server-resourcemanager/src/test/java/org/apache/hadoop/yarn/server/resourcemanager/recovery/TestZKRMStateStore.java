begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryNTimes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerLaunchContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ResourcePBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|RMStateStore
operator|.
name|RMState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationStateDataPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AggregateAppResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|AMRMTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Perms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_class
DECL|class|TestZKRMStateStore
specifier|public
class|class
name|TestZKRMStateStore
extends|extends
name|RMStateStoreTestBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestZKRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZK_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|ZK_TIMEOUT_MS
init|=
literal|1000
decl_stmt|;
DECL|field|curatorTestingServer
specifier|private
name|TestingServer
name|curatorTestingServer
decl_stmt|;
DECL|field|curatorFramework
specifier|private
name|CuratorFramework
name|curatorFramework
decl_stmt|;
DECL|method|setupCuratorServer ()
specifier|public
specifier|static
name|TestingServer
name|setupCuratorServer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestingServer
name|curatorTestingServer
init|=
operator|new
name|TestingServer
argument_list|()
decl_stmt|;
name|curatorTestingServer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curatorTestingServer
return|;
block|}
DECL|method|setupCuratorFramework ( TestingServer curatorTestingServer)
specifier|public
specifier|static
name|CuratorFramework
name|setupCuratorFramework
parameter_list|(
name|TestingServer
name|curatorTestingServer
parameter_list|)
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curatorFramework
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curatorFramework
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curatorFramework
return|;
block|}
annotation|@
name|Before
DECL|method|setupCurator ()
specifier|public
name|void
name|setupCurator
parameter_list|()
throws|throws
name|Exception
block|{
name|curatorTestingServer
operator|=
name|setupCuratorServer
argument_list|()
expr_stmt|;
name|curatorFramework
operator|=
name|setupCuratorFramework
argument_list|(
name|curatorTestingServer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanupCuratorServer ()
specifier|public
name|void
name|cleanupCuratorServer
parameter_list|()
throws|throws
name|IOException
block|{
name|curatorFramework
operator|.
name|close
argument_list|()
expr_stmt|;
name|curatorTestingServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|TestZKRMStateStoreTester
class|class
name|TestZKRMStateStoreTester
implements|implements
name|RMStateStoreHelper
block|{
DECL|field|store
name|TestZKRMStateStoreInternal
name|store
decl_stmt|;
DECL|field|workingZnode
name|String
name|workingZnode
decl_stmt|;
DECL|class|TestZKRMStateStoreInternal
class|class
name|TestZKRMStateStoreInternal
extends|extends
name|ZKRMStateStore
block|{
DECL|method|TestZKRMStateStoreInternal (Configuration conf, String workingZnode)
name|TestZKRMStateStoreInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|workingZnode
parameter_list|)
throws|throws
name|Exception
block|{
name|setResourceManager
argument_list|(
operator|new
name|ResourceManager
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|disableExitOnDispatchException
argument_list|()
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|znodeWorkingPath
operator|.
name|equals
argument_list|(
name|workingZnode
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getVersionNode ()
specifier|private
name|String
name|getVersionNode
parameter_list|()
block|{
return|return
name|znodeWorkingPath
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|VERSION_NODE
return|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
DECL|method|getAppNode (String appId, int splitIdx)
specifier|private
name|String
name|getAppNode
parameter_list|(
name|String
name|appId
parameter_list|,
name|int
name|splitIdx
parameter_list|)
block|{
name|String
name|rootPath
init|=
name|workingZnode
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|RM_APP_ROOT
decl_stmt|;
name|String
name|appPath
init|=
name|appId
decl_stmt|;
if|if
condition|(
name|splitIdx
operator|!=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|appId
operator|.
name|length
argument_list|()
operator|-
name|splitIdx
decl_stmt|;
name|appPath
operator|=
name|appId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|+
literal|"/"
operator|+
name|appId
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
return|return
name|rootPath
operator|+
literal|"/"
operator|+
name|RM_APP_ROOT_HIERARCHIES
operator|+
literal|"/"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|splitIdx
argument_list|)
operator|+
literal|"/"
operator|+
name|appPath
return|;
block|}
return|return
name|rootPath
operator|+
literal|"/"
operator|+
name|appPath
return|;
block|}
DECL|method|getAppNode (String appId)
specifier|private
name|String
name|getAppNode
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
return|return
name|getAppNode
argument_list|(
name|appId
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|getAttemptNode (String appId, String attemptId)
specifier|private
name|String
name|getAttemptNode
parameter_list|(
name|String
name|appId
parameter_list|,
name|String
name|attemptId
parameter_list|)
block|{
return|return
name|getAppNode
argument_list|(
name|appId
argument_list|)
operator|+
literal|"/"
operator|+
name|attemptId
return|;
block|}
comment|/**        * Emulating retrying createRootDir not to raise NodeExist exception        * @throws Exception        */
DECL|method|testRetryingCreateRootDir ()
specifier|private
name|void
name|testRetryingCreateRootDir
parameter_list|()
throws|throws
name|Exception
block|{
name|create
argument_list|(
name|znodeWorkingPath
argument_list|)
expr_stmt|;
block|}
DECL|method|getDelegationTokenNode (int rmDTSequenceNumber, int splitIdx)
specifier|private
name|String
name|getDelegationTokenNode
parameter_list|(
name|int
name|rmDTSequenceNumber
parameter_list|,
name|int
name|splitIdx
parameter_list|)
block|{
name|String
name|rootPath
init|=
name|workingZnode
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|RM_DT_SECRET_MANAGER_ROOT
operator|+
literal|"/"
operator|+
name|RMStateStore
operator|.
name|RM_DELEGATION_TOKENS_ROOT_ZNODE_NAME
decl_stmt|;
name|String
name|nodeName
init|=
name|DELEGATION_TOKEN_PREFIX
decl_stmt|;
if|if
condition|(
name|splitIdx
operator|==
literal|0
condition|)
block|{
name|nodeName
operator|+=
name|rmDTSequenceNumber
expr_stmt|;
block|}
else|else
block|{
name|nodeName
operator|+=
name|String
operator|.
name|format
argument_list|(
literal|"%04d"
argument_list|,
name|rmDTSequenceNumber
argument_list|)
expr_stmt|;
block|}
name|String
name|path
init|=
name|nodeName
decl_stmt|;
if|if
condition|(
name|splitIdx
operator|!=
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|nodeName
operator|.
name|length
argument_list|()
operator|-
name|splitIdx
decl_stmt|;
name|path
operator|=
name|splitIdx
operator|+
literal|"/"
operator|+
name|nodeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|+
literal|"/"
operator|+
name|nodeName
operator|.
name|substring
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|rootPath
operator|+
literal|"/"
operator|+
name|path
return|;
block|}
block|}
DECL|method|createStore (Configuration conf)
specifier|private
name|RMStateStore
name|createStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|workingZnode
operator|=
literal|"/jira/issue/3077/rmstore"
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|,
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_PARENT_PATH
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_EPOCH
argument_list|,
name|epoch
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_EPOCH_RANGE
argument_list|,
name|getEpochRange
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|TestZKRMStateStoreInternal
argument_list|(
name|conf
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|store
return|;
block|}
DECL|method|getRMStateStore (Configuration conf)
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createStore
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRMStateStore ()
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
return|return
name|createStore
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isFinalStateValid ()
specifier|public
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|1
operator|==
name|curatorFramework
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|znodeWorkingPath
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeVersion (Version version)
specifier|public
name|void
name|writeVersion
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|curatorFramework
operator|.
name|setData
argument_list|()
operator|.
name|withVersion
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|getVersionNode
argument_list|()
argument_list|,
operator|(
operator|(
name|VersionPBImpl
operator|)
name|version
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|store
operator|.
name|getCurrentVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|appExists (RMApp app)
specifier|public
name|boolean
name|appExists
parameter_list|(
name|RMApp
name|app
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appIdPath
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|split
init|=
name|store
operator|.
name|getConfig
argument_list|()
operator|.
name|getInt
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_APPID_NODE_SPLIT_INDEX
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_APPID_NODE_SPLIT_INDEX
argument_list|)
decl_stmt|;
return|return
literal|null
operator|!=
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|getAppNode
argument_list|(
name|appIdPath
argument_list|,
name|split
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|attemptExists (RMAppAttempt attempt)
specifier|public
name|boolean
name|attemptExists
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
return|return
literal|null
operator|!=
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|getAttemptNode
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|delegationTokenExists (RMDelegationTokenIdentifier token, int index)
specifier|public
name|boolean
name|delegationTokenExists
parameter_list|(
name|RMDelegationTokenIdentifier
name|token
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|rmDTSequenceNumber
init|=
name|token
operator|.
name|getSequenceNumber
argument_list|()
decl_stmt|;
return|return
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|getDelegationTokenNode
argument_list|(
name|rmDTSequenceNumber
argument_list|,
name|index
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
DECL|method|getDelegationTokenNodeSplitIndex ()
specifier|public
name|int
name|getDelegationTokenNodeSplitIndex
parameter_list|()
block|{
return|return
name|store
operator|.
name|delegationTokenNodeSplitIndex
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testZKRMStateStoreRealZK ()
specifier|public
name|void
name|testZKRMStateStoreRealZK
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|testRMAppStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testRMDTSecretManagerStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testCheckVersion
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testEpoch
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testAppDeletion
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testDeleteStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testRemoveApplication
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testRemoveAttempt
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testAMRMTokenSecretManagerStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testReservationStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TestZKRMStateStoreTester
operator|.
name|TestZKRMStateStoreInternal
operator|)
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
operator|)
operator|.
name|testRetryingCreateRootDir
argument_list|()
expr_stmt|;
name|testProxyCA
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZKNodeLimit ()
specifier|public
name|void
name|testZKNodeLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1234
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ZNODE_SIZE_LIMIT_BYTES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TestAppRejDispatcher
name|dispatcher
init|=
operator|new
name|TestAppRejDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
literal|"application_1352994193343_0001"
argument_list|)
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|dispatcher
operator|.
name|appsavefailedEvnt
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
DECL|class|TestAppRejDispatcher
specifier|static
class|class
name|TestAppRejDispatcher
extends|extends
name|TestDispatcher
block|{
DECL|field|appsavefailedEvnt
specifier|private
name|boolean
name|appsavefailedEvnt
decl_stmt|;
annotation|@
name|Override
DECL|method|handle (Event event)
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|RMAppEvent
operator|&&
name|event
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAppEventType
operator|.
name|APP_SAVE_FAILED
argument_list|)
condition|)
block|{
name|appsavefailedEvnt
operator|=
literal|true
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCheckMajorVersionChange ()
specifier|public
name|void
name|testCheckMajorVersionChange
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
block|{
name|Version
name|VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|VERSION_INFO
return|;
block|}
annotation|@
name|Override
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|workingZnode
operator|=
literal|"/jira/issue/3077/rmstore"
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|,
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_PARENT_PATH
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|TestZKRMStateStoreInternal
argument_list|(
name|conf
argument_list|,
name|workingZnode
argument_list|)
block|{
name|Version
name|storedVersion
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|VERSION_INFO
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|storedVersion
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|storedVersion
operator|=
name|VERSION_INFO
expr_stmt|;
block|}
block|}
expr_stmt|;
return|return
name|this
operator|.
name|store
return|;
block|}
block|}
decl_stmt|;
comment|// default version
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Version
name|defaultVersion
init|=
name|zkTester
operator|.
name|getCurrentVersion
argument_list|()
decl_stmt|;
name|store
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Store had wrong version"
argument_list|,
name|defaultVersion
argument_list|,
name|store
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createHARMConf (String rmIds, String rmId, int adminPort, boolean autoFailoverEnabled, TestingServer curatorTestServer)
specifier|public
specifier|static
name|Configuration
name|createHARMConf
parameter_list|(
name|String
name|rmIds
parameter_list|,
name|String
name|rmId
parameter_list|,
name|int
name|adminPort
parameter_list|,
name|boolean
name|autoFailoverEnabled
parameter_list|,
name|TestingServer
name|curatorTestServer
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|rmIds
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|ZKRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_ADDRESS
argument_list|,
name|curatorTestServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|CommonConfigurationKeys
operator|.
name|ZK_TIMEOUT_MS
argument_list|,
name|ZK_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
name|autoFailoverEnabled
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|rpcAddress
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|rpcAddress
argument_list|,
name|id
argument_list|)
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|rmId
argument_list|)
argument_list|,
literal|"localhost:"
operator|+
name|adminPort
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|verifyZKACL (String id, String scheme, int perm, List<ACL> acls)
specifier|private
specifier|static
name|boolean
name|verifyZKACL
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|scheme
parameter_list|,
name|int
name|perm
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
parameter_list|)
block|{
for|for
control|(
name|ACL
name|acl
range|:
name|acls
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getId
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
operator|&&
name|acl
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|id
argument_list|)
operator|&&
name|acl
operator|.
name|getPerms
argument_list|()
operator|==
name|perm
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Test if RM can successfully start in HA disabled mode if it was previously    * running in HA enabled mode. And then start it in HA mode after running it    * with HA disabled. NoAuth Exception should not be sent by zookeeper and RM    * should start successfully.    */
annotation|@
name|Test
DECL|method|testZKRootPathAcls ()
specifier|public
name|void
name|testZKRootPathAcls
parameter_list|()
throws|throws
name|Exception
block|{
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|String
name|parentPath
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
decl_stmt|;
name|String
name|rootPath
init|=
name|parentPath
operator|+
literal|"/"
operator|+
name|ZKRMStateStore
operator|.
name|ROOT_ZNODE_NAME
decl_stmt|;
comment|// Start RM with HA enabled
name|Configuration
name|conf
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ACL
argument_list|,
literal|"world:anyone:rwca"
argument_list|)
expr_stmt|;
name|int
name|perm
init|=
literal|23
decl_stmt|;
comment|// rwca=1+2+4+16
name|ResourceManager
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|ZKRMStateStore
name|stateStore
init|=
operator|(
name|ZKRMStateStore
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
init|=
name|stateStore
operator|.
name|getACL
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|acls
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// CREATE and DELETE permissions for root node based on RM ID
name|verifyZKACL
argument_list|(
literal|"digest"
argument_list|,
literal|"localhost"
argument_list|,
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"world"
argument_list|,
literal|"anyone"
argument_list|,
name|Perms
operator|.
name|ALL
operator|^
operator|(
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
operator|)
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|acls
operator|=
name|stateStore
operator|.
name|getACL
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|acls
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|perm
argument_list|,
name|acls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPerms
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now start RM with HA disabled. NoAuth Exception should not be thrown.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ACL
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ZK_ACL
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|acls
operator|=
name|stateStore
operator|.
name|getACL
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acls
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"world"
argument_list|,
literal|"anyone"
argument_list|,
name|Perms
operator|.
name|ALL
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start RM with HA enabled.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|acls
operator|=
name|stateStore
operator|.
name|getACL
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|acls
argument_list|)
operator|.
name|hasSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"digest"
argument_list|,
literal|"localhost"
argument_list|,
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"world"
argument_list|,
literal|"anyone"
argument_list|,
name|Perms
operator|.
name|ALL
operator|^
operator|(
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
operator|)
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFencing ()
specifier|public
name|void
name|testFencing
parameter_list|()
throws|throws
name|Exception
block|{
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|Configuration
name|conf1
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm1
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm2"
argument_list|,
literal|5678
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm2
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ZK_TIMEOUT_MS
operator|/
literal|50
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"RM should have been fenced"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFencedState ()
specifier|public
name|void
name|testFencedState
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
comment|// Move state to FENCED from ACTIVE
name|store
operator|.
name|updateFencedState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|submitTime
operator|+
literal|1000
decl_stmt|;
comment|// Add a new app
name|RMApp
name|mockApp
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeNewApplication
argument_list|(
name|mockApp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a new attempt
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenMgr
init|=
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
literal|"appattempt_1234567894321_0001_000001"
argument_list|)
decl_stmt|;
name|SecretKey
name|clientTokenMasterKey
init|=
name|clientToAMTokenMgr
operator|.
name|createMasterKey
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|RMAppAttemptMetrics
name|mockRmAppAttemptMetrics
init|=
name|mock
argument_list|(
name|RMAppAttemptMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerPBImpl
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1234567891234_0001_01_000001"
argument_list|)
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|mockAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clientTokenMasterKey
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRmAppAttemptMetrics
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRmAppAttemptMetrics
operator|.
name|getAggregateAppResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AggregateAppResourceUsage
argument_list|(
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeNewApplicationAttempt
argument_list|(
name|mockAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|finishTime
init|=
name|submitTime
operator|+
literal|1000
decl_stmt|;
comment|// Update attempt
name|ApplicationAttemptStateData
name|newAttemptState
init|=
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|attemptId
argument_list|,
name|container
argument_list|,
name|store
operator|.
name|getCredentialsFromAppAttempt
argument_list|(
name|mockAttempt
argument_list|)
argument_list|,
name|startTime
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|"testUrl"
argument_list|,
literal|"test"
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|100
argument_list|,
name|finishTime
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateApplicationAttemptState
argument_list|(
name|newAttemptState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update app
name|ApplicationStateData
name|appState
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|context
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateApplicationState
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove app
name|store
operator|.
name|removeApplication
argument_list|(
name|mockApp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// store RM delegation token;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser1"
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|renewDate1
init|=
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|dtId1
operator|.
name|setSequenceNumber
argument_list|(
literal|1111
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token "
operator|+
name|dtId1
operator|+
literal|" should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|dtId1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeRMDelegationToken
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token "
operator|+
name|dtId1
operator|+
literal|" should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|dtId1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateRMDelegationToken
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token "
operator|+
name|dtId1
operator|+
literal|" should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|dtId1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove delegation key;
name|store
operator|.
name|removeRMDelegationToken
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// store delegation master key;
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|(
literal|1234
argument_list|,
literal|4321
argument_list|,
literal|"keyBytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|storeRMDTMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove delegation master key;
name|store
operator|.
name|removeRMDTMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// store or update AMRMToken;
name|store
operator|.
name|storeOrUpdateAMRMTokenSecretManager
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicateRMAppDeletion ()
specifier|public
name|void
name|testDuplicateRMAppDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1234
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptIdRemoved
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
literal|"appattempt_1352994193343_0002_000001"
argument_list|)
decl_stmt|;
name|ApplicationId
name|appIdRemoved
init|=
name|attemptIdRemoved
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appIdRemoved
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptIdRemoved
argument_list|,
literal|"container_1352994193343_0002_01_000001"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appIdRemoved
argument_list|)
expr_stmt|;
name|ApplicationStateData
name|appStateRemoved
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|context
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|appStateRemoved
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptIdRemoved
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeApplicationStateInternal
argument_list|(
name|appStateRemoved
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|removeApplicationStateInternal
argument_list|(
name|appStateRemoved
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|fail
argument_list|(
literal|"NoNodeException should not happen."
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createPath (String... parts)
specifier|private
specifier|static
name|String
name|createPath
parameter_list|(
name|String
modifier|...
name|parts
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|"/"
argument_list|)
operator|.
name|join
argument_list|(
name|parts
argument_list|)
return|;
block|}
DECL|method|createConfForAppNodeSplit (int splitIndex)
specifier|private
specifier|static
name|Configuration
name|createConfForAppNodeSplit
parameter_list|(
name|int
name|splitIndex
parameter_list|)
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_APPID_NODE_SPLIT_INDEX
argument_list|,
name|splitIndex
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|createMockAppForRemove (ApplicationId appId, ApplicationAttemptId... attemptIds)
specifier|private
specifier|static
name|RMApp
name|createMockAppForRemove
parameter_list|(
name|ApplicationId
name|appId
parameter_list|,
name|ApplicationAttemptId
modifier|...
name|attemptIds
parameter_list|)
block|{
name|RMApp
name|app
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContextPBImpl
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attemptIds
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|HashMap
argument_list|<
name|ApplicationAttemptId
argument_list|,
name|RMAppAttempt
argument_list|>
name|attempts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ApplicationAttemptId
name|attemptId
range|:
name|attemptIds
control|)
block|{
name|RMAppAttempt
name|appAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|appAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|attempts
operator|.
name|put
argument_list|(
name|attemptId
argument_list|,
name|appAttempt
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|app
operator|.
name|getAppAttempts
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attempts
argument_list|)
expr_stmt|;
block|}
return|return
name|app
return|;
block|}
DECL|method|verifyLoadedApp (ApplicationStateData appState, ApplicationId appId, String user, long submitTime, long startTime, RMAppState state, long finishTime, String diagnostics)
specifier|private
specifier|static
name|void
name|verifyLoadedApp
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|String
name|user
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|RMAppState
name|state
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|String
name|diagnostics
parameter_list|)
block|{
comment|// Check if app is loaded correctly
name|assertNotNull
argument_list|(
literal|"App "
operator|+
name|appId
operator|+
literal|" should have been loaded."
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App submit time in app state"
argument_list|,
name|submitTime
argument_list|,
name|appState
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App start time in app state"
argument_list|,
name|startTime
argument_list|,
name|appState
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App ID in app state"
argument_list|,
name|appId
argument_list|,
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App state"
argument_list|,
name|state
argument_list|,
name|appState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finish time in app state"
argument_list|,
name|finishTime
argument_list|,
name|appState
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"User in app state"
argument_list|,
name|user
argument_list|,
name|appState
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Diagnostics in app state"
argument_list|,
name|diagnostics
argument_list|,
name|appState
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLoadedApp (RMState rmState, ApplicationId appId, long submitTime, long startTime, long finishTime, boolean isFinished, List<ApplicationAttemptId> attempts)
specifier|private
specifier|static
name|void
name|verifyLoadedApp
parameter_list|(
name|RMState
name|rmState
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|boolean
name|isFinished
parameter_list|,
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|attempts
parameter_list|)
block|{
name|verifyLoadedApp
argument_list|(
name|rmState
argument_list|,
name|appId
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|finishTime
argument_list|,
name|isFinished
argument_list|,
name|attempts
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLoadedApp (RMState rmState, ApplicationId appId, long submitTime, long startTime, long finishTime, boolean isFinished, List<ApplicationAttemptId> attempts, List<Integer> amExitStatuses, List<FinalApplicationStatus> finalStatuses)
specifier|private
specifier|static
name|void
name|verifyLoadedApp
parameter_list|(
name|RMState
name|rmState
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|boolean
name|isFinished
parameter_list|,
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|attempts
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|amExitStatuses
parameter_list|,
name|List
argument_list|<
name|FinalApplicationStatus
argument_list|>
name|finalStatuses
parameter_list|)
block|{
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationStateData
argument_list|>
name|rmAppState
init|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appState
init|=
name|rmAppState
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|appId
operator|+
literal|" is not there in loaded apps"
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|appState
argument_list|,
name|appId
argument_list|,
literal|"test"
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|isFinished
condition|?
name|RMAppState
operator|.
name|FINISHED
else|:
literal|null
argument_list|,
name|finishTime
argument_list|,
name|isFinished
condition|?
literal|"appDiagnostics"
else|:
literal|""
argument_list|)
expr_stmt|;
comment|// Check attempt state.
if|if
condition|(
name|attempts
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Attempts loaded for app "
operator|+
name|appId
argument_list|,
name|attempts
operator|.
name|size
argument_list|()
argument_list|,
name|appState
operator|.
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|finalStatuses
operator|!=
literal|null
operator|&&
name|amExitStatuses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attempts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|finalStatuses
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|verifyLoadedAttempt
argument_list|(
name|appState
argument_list|,
name|attempts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|amExitStatuses
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verifyLoadedAttempt
argument_list|(
name|appState
argument_list|,
name|attempts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|amExitStatuses
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Attempts loaded for app "
operator|+
name|appId
argument_list|,
literal|0
argument_list|,
name|appState
operator|.
name|attempts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyLoadedAttempt (ApplicationStateData appState, ApplicationAttemptId attemptId, int amExitStatus, boolean isFinished)
specifier|private
specifier|static
name|void
name|verifyLoadedAttempt
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|int
name|amExitStatus
parameter_list|,
name|boolean
name|isFinished
parameter_list|)
block|{
name|verifyLoadedAttempt
argument_list|(
name|appState
argument_list|,
name|attemptId
argument_list|,
name|isFinished
condition|?
literal|"myTrackingUrl"
else|:
literal|"N/A"
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
name|isFinished
condition|?
name|RMAppAttemptState
operator|.
name|FINISHED
else|:
literal|null
argument_list|,
name|isFinished
condition|?
literal|"attemptDiagnostics"
else|:
literal|""
argument_list|,
literal|0
argument_list|,
name|amExitStatus
argument_list|,
name|isFinished
condition|?
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyLoadedAttempt (ApplicationStateData appState, ApplicationAttemptId attemptId, String trackingURL, ContainerId masterContainerId, SecretKey clientTokenKey, RMAppAttemptState state, String diagnostics, long finishTime, int amExitStatus, FinalApplicationStatus finalStatus)
specifier|private
specifier|static
name|void
name|verifyLoadedAttempt
parameter_list|(
name|ApplicationStateData
name|appState
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|String
name|trackingURL
parameter_list|,
name|ContainerId
name|masterContainerId
parameter_list|,
name|SecretKey
name|clientTokenKey
parameter_list|,
name|RMAppAttemptState
name|state
parameter_list|,
name|String
name|diagnostics
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|int
name|amExitStatus
parameter_list|,
name|FinalApplicationStatus
name|finalStatus
parameter_list|)
block|{
name|ApplicationAttemptStateData
name|attemptState
init|=
name|appState
operator|.
name|getAttempt
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
comment|// Check if attempt is loaded correctly
name|assertNotNull
argument_list|(
literal|"Attempt "
operator|+
name|attemptId
operator|+
literal|" should have been loaded."
argument_list|,
name|attemptState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Attempt Id in attempt state"
argument_list|,
name|attemptId
argument_list|,
name|attemptState
operator|.
name|getAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Master Container Id in attempt state"
argument_list|,
name|masterContainerId
argument_list|,
name|attemptState
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|clientTokenKey
condition|)
block|{
name|assertArrayEquals
argument_list|(
literal|"Client token key in attempt state"
argument_list|,
name|clientTokenKey
operator|.
name|getEncoded
argument_list|()
argument_list|,
name|attemptState
operator|.
name|getAppAttemptTokens
argument_list|()
operator|.
name|getSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Attempt state"
argument_list|,
name|state
argument_list|,
name|attemptState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finish time in attempt state"
argument_list|,
name|finishTime
argument_list|,
name|attemptState
operator|.
name|getFinishTime
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Diagnostics in attempt state"
argument_list|,
name|diagnostics
argument_list|,
name|attemptState
operator|.
name|getDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AM Container exit status in attempt state"
argument_list|,
name|amExitStatus
argument_list|,
name|attemptState
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Final app status in attempt state"
argument_list|,
name|finalStatus
argument_list|,
name|attemptState
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tracking URL in attempt state"
argument_list|,
name|trackingURL
argument_list|,
name|attemptState
operator|.
name|getFinalTrackingUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createAppState ( ApplicationSubmissionContext ctxt, long submitTime, long startTime, long finishTime, boolean isFinished)
specifier|private
specifier|static
name|ApplicationStateData
name|createAppState
parameter_list|(
name|ApplicationSubmissionContext
name|ctxt
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|boolean
name|isFinished
parameter_list|)
block|{
return|return
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|"test"
argument_list|,
name|ctxt
argument_list|,
name|isFinished
condition|?
name|RMAppState
operator|.
name|FINISHED
else|:
literal|null
argument_list|,
name|isFinished
condition|?
literal|"appDiagnostics"
else|:
literal|""
argument_list|,
literal|0
argument_list|,
name|isFinished
condition|?
name|finishTime
else|:
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|createFinishedAttempt ( ApplicationAttemptId attemptId, Container container, long startTime, int amExitStatus)
specifier|private
specifier|static
name|ApplicationAttemptStateData
name|createFinishedAttempt
parameter_list|(
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|Container
name|container
parameter_list|,
name|long
name|startTime
parameter_list|,
name|int
name|amExitStatus
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|resourceSecondsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|preemptedResoureSecondsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|resourceSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|resourceSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|preemptedResoureSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|preemptedResoureSecondsMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
return|return
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|attemptId
argument_list|,
name|container
argument_list|,
literal|null
argument_list|,
name|startTime
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|"myTrackingUrl"
argument_list|,
literal|"attemptDiagnostics"
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
name|amExitStatus
argument_list|,
literal|0
argument_list|,
name|resourceSecondsMap
argument_list|,
name|preemptedResoureSecondsMap
argument_list|)
return|;
block|}
DECL|method|storeAttempt (RMStateStore store, TestDispatcher dispatcher, String appAttemptIdStr, AMRMTokenSecretManager appTokenMgr, ClientToAMTokenSecretManagerInRM clientToAMTokenMgr, boolean createContainer)
specifier|private
name|ApplicationAttemptId
name|storeAttempt
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|,
name|String
name|appAttemptIdStr
parameter_list|,
name|AMRMTokenSecretManager
name|appTokenMgr
parameter_list|,
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenMgr
parameter_list|,
name|boolean
name|createContainer
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
name|appAttemptIdStr
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|appAttemptToken
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|appTokenMgr
operator|!=
literal|null
condition|)
block|{
name|appAttemptToken
operator|=
name|generateAMRMToken
argument_list|(
name|attemptId
argument_list|,
name|appTokenMgr
argument_list|)
expr_stmt|;
block|}
name|SecretKey
name|clientTokenKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clientToAMTokenMgr
operator|!=
literal|null
condition|)
block|{
name|clientTokenKey
operator|=
name|clientToAMTokenMgr
operator|.
name|createMasterKey
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|Credentials
name|attemptCred
init|=
operator|new
name|Credentials
argument_list|()
decl_stmt|;
name|attemptCred
operator|.
name|addSecretKey
argument_list|(
name|RMStateStore
operator|.
name|AM_CLIENT_TOKEN_MASTER_KEY_NAME
argument_list|,
name|clientTokenKey
operator|.
name|getEncoded
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ContainerId
name|containerId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|createContainer
condition|)
block|{
name|containerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptId
argument_list|,
name|containerId
operator|.
name|toString
argument_list|()
argument_list|,
name|appAttemptToken
argument_list|,
name|clientTokenKey
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
return|return
name|attemptId
return|;
block|}
DECL|method|finishAppWithAttempts (RMState state, RMStateStore store, TestDispatcher dispatcher, ApplicationAttemptId attemptId, long submitTime, long startTime, int amExitStatus, long finishTime, boolean createNewApp)
specifier|private
name|void
name|finishAppWithAttempts
parameter_list|(
name|RMState
name|state
parameter_list|,
name|RMStateStore
name|store
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|int
name|amExitStatus
parameter_list|,
name|long
name|finishTime
parameter_list|,
name|boolean
name|createNewApp
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|attemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|ApplicationStateData
name|appStateNew
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|createNewApp
condition|)
block|{
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setAMContainerSpec
argument_list|(
operator|new
name|ContainerLaunchContextPBImpl
argument_list|()
argument_list|)
expr_stmt|;
name|appStateNew
operator|=
name|createAppState
argument_list|(
name|context
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|finishTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ApplicationStateData
name|appState
init|=
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|appStateNew
operator|=
name|createAppState
argument_list|(
name|appState
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|finishTime
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|appStateNew
operator|.
name|attempts
operator|.
name|putAll
argument_list|(
name|appState
operator|.
name|attempts
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|updateApplicationState
argument_list|(
name|appStateNew
argument_list|)
expr_stmt|;
name|waitNotify
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerPBImpl
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptStateData
name|newAttemptState
init|=
name|createFinishedAttempt
argument_list|(
name|attemptId
argument_list|,
name|container
argument_list|,
name|startTime
argument_list|,
name|amExitStatus
argument_list|)
decl_stmt|;
name|updateAttempt
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|newAttemptState
argument_list|)
expr_stmt|;
block|}
DECL|method|storeAppWithAttempts (RMStateStore store, TestDispatcher dispatcher, ApplicationAttemptId attemptId, long submitTime, long startTime)
specifier|private
name|void
name|storeAppWithAttempts
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|)
throws|throws
name|Exception
block|{
name|storeAppWithAttempts
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|attemptId
argument_list|)
expr_stmt|;
block|}
DECL|method|storeApp (RMStateStore store, TestDispatcher dispatcher, ApplicationId appId, long submitTime, long startTime)
specifier|private
name|void
name|storeApp
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|)
throws|throws
name|Exception
block|{
name|storeApp
argument_list|(
name|store
argument_list|,
name|appId
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|waitNotify
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
DECL|method|storeAppWithAttempts (RMStateStore store, TestDispatcher dispatcher, long submitTime, long startTime, AMRMTokenSecretManager appTokenMgr, ClientToAMTokenSecretManagerInRM clientToAMTokenMgr, ApplicationAttemptId attemptId, ApplicationAttemptId... attemptIds)
specifier|private
name|void
name|storeAppWithAttempts
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|TestDispatcher
name|dispatcher
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|long
name|startTime
parameter_list|,
name|AMRMTokenSecretManager
name|appTokenMgr
parameter_list|,
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenMgr
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|ApplicationAttemptId
modifier|...
name|attemptIds
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationId
name|appId
init|=
name|attemptId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|appId
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|,
name|appTokenMgr
argument_list|,
name|clientToAMTokenMgr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ApplicationAttemptId
name|attempt
range|:
name|attemptIds
control|)
block|{
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|attempt
operator|.
name|toString
argument_list|()
argument_list|,
name|appTokenMgr
argument_list|,
name|clientToAMTokenMgr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removeApps (RMStateStore store, Map<ApplicationId, ApplicationAttemptId[]> appWithAttempts)
specifier|private
specifier|static
name|void
name|removeApps
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationAttemptId
index|[]
argument_list|>
name|appWithAttempts
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ApplicationId
argument_list|,
name|ApplicationAttemptId
index|[]
argument_list|>
name|entry
range|:
name|appWithAttempts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|RMApp
name|mockApp
init|=
name|createMockAppForRemove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|removeApplication
argument_list|(
name|mockApp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAppPathPath (RMStateStore store, ApplicationId appId, int splitIndex)
specifier|private
specifier|static
name|void
name|verifyAppPathPath
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|ApplicationId
name|appId
parameter_list|,
name|int
name|splitIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|appIdStr
init|=
name|appId
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|appParent
init|=
name|appIdStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|appIdStr
operator|.
name|length
argument_list|()
operator|-
name|splitIndex
argument_list|)
decl_stmt|;
name|String
name|appPath
init|=
name|appIdStr
operator|.
name|substring
argument_list|(
name|appIdStr
operator|.
name|length
argument_list|()
operator|-
name|splitIndex
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|createPath
argument_list|(
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|store
operator|)
operator|.
name|znodeWorkingPath
argument_list|,
name|ZKRMStateStore
operator|.
name|ROOT_ZNODE_NAME
argument_list|,
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT
argument_list|,
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT_HIERARCHIES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|splitIndex
argument_list|)
argument_list|,
name|appParent
argument_list|,
name|appPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Application with id "
operator|+
name|appIdStr
operator|+
literal|" does not exist as per "
operator|+
literal|"split in state store."
argument_list|,
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|store
operator|)
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAppInHierarchicalPath (RMStateStore store, String appId, int splitIdx)
specifier|private
specifier|static
name|void
name|verifyAppInHierarchicalPath
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|String
name|appId
parameter_list|,
name|int
name|splitIdx
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|path
init|=
name|createPath
argument_list|(
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|store
operator|)
operator|.
name|znodeWorkingPath
argument_list|,
name|ZKRMStateStore
operator|.
name|ROOT_ZNODE_NAME
argument_list|,
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitIdx
operator|!=
literal|0
condition|)
block|{
name|path
operator|=
name|createPath
argument_list|(
name|path
argument_list|,
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT_HIERARCHIES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|splitIdx
argument_list|)
argument_list|,
name|appId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|appId
operator|.
name|length
argument_list|()
operator|-
name|splitIdx
argument_list|)
argument_list|,
name|appId
operator|.
name|substring
argument_list|(
name|appId
operator|.
name|length
argument_list|()
operator|-
name|splitIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|createPath
argument_list|(
name|path
argument_list|,
name|appId
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|appId
operator|+
literal|" should exist in path "
operator|+
name|path
argument_list|,
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|store
operator|)
operator|.
name|exists
argument_list|(
name|createPath
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertHierarchicalPaths (RMStateStore store, Map<Integer, Integer> pathToApps)
specifier|private
specifier|static
name|void
name|assertHierarchicalPaths
parameter_list|(
name|RMStateStore
name|store
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|pathToApps
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|pathToApps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|createPath
argument_list|(
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|store
operator|)
operator|.
name|znodeWorkingPath
argument_list|,
name|ZKRMStateStore
operator|.
name|ROOT_ZNODE_NAME
argument_list|,
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|path
operator|=
name|createPath
argument_list|(
name|path
argument_list|,
name|ZKRMStateStore
operator|.
name|RM_APP_ROOT_HIERARCHIES
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of childrens for path "
operator|+
name|path
argument_list|,
operator|(
name|int
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|store
operator|)
operator|.
name|getChildren
argument_list|(
name|path
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test to verify storing of apps and app attempts in ZK state store with app
comment|// node split index configured more than 0.
annotation|@
name|Test
DECL|method|testAppNodeSplit ()
specifier|public
name|void
name|testAppNodeSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|submitTime
operator|+
literal|1234
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// Get store with app node split config set as 1.
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
comment|// Create RM Context and app token manager.
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|AMRMTokenSecretManager
name|appTokenMgr
init|=
name|spy
argument_list|(
operator|new
name|AMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|MasterKeyData
name|masterKeyData
init|=
name|appTokenMgr
operator|.
name|createNewMasterKey
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|appTokenMgr
operator|.
name|getMasterKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|masterKeyData
argument_list|)
expr_stmt|;
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenMgr
init|=
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
decl_stmt|;
comment|// Store app1.
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1352994193343L
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|storeAppWithAttempts
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|appTokenMgr
argument_list|,
name|clientToAMTokenMgr
argument_list|,
name|attemptId1
argument_list|,
name|attemptId2
argument_list|)
expr_stmt|;
comment|// Store app2 with app id application_1352994193343_120213.
name|ApplicationId
name|appId21
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1352994193343L
argument_list|,
literal|120213
argument_list|)
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appId21
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|waitNotify
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
comment|// Store another app which will be removed.
name|ApplicationId
name|appIdRemoved
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1352994193343L
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptIdRemoved
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appIdRemoved
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeAppWithAttempts
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|attemptIdRemoved
argument_list|)
expr_stmt|;
comment|// Remove the app.
name|RMApp
name|mockRemovedApp
init|=
name|createMockAppForRemove
argument_list|(
name|appIdRemoved
argument_list|,
name|attemptIdRemoved
argument_list|)
decl_stmt|;
name|store
operator|.
name|removeApplication
argument_list|(
name|mockRemovedApp
argument_list|)
expr_stmt|;
comment|// Close state store
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Load state store
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
comment|// Check if application_1352994193343_120213 (i.e. app2) exists in state
comment|// store as per split index.
name|verifyAppPathPath
argument_list|(
name|store
argument_list|,
name|appId21
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify loaded apps and attempts based on the operations we did before
comment|// reloading the state store.
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|attemptId1
argument_list|,
name|attemptId2
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|-
literal|1000
argument_list|,
operator|-
literal|1000
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|(
name|FinalApplicationStatus
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update app state for app1.
name|finishAppWithAttempts
argument_list|(
name|state
argument_list|,
name|store
argument_list|,
name|dispatcher
argument_list|,
name|attemptId2
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|100
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test updating app/attempt for app whose initial state is not saved
name|ApplicationId
name|dummyAppId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|dummyAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|dummyAppId
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|finishAppWithAttempts
argument_list|(
name|state
argument_list|,
name|store
argument_list|,
name|dispatcher
argument_list|,
name|dummyAttemptId
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|111
argument_list|,
literal|1234
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Close the store
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check updated application state.
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|newRMState
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|verifyLoadedApp
argument_list|(
name|newRMState
argument_list|,
name|dummyAppId
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|1234
argument_list|,
literal|true
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|dummyAttemptId
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|111
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|newRMState
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|1234
argument_list|,
literal|true
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|attemptId1
argument_list|,
name|attemptId2
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|-
literal|1000
argument_list|,
literal|100
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
comment|// assert store is in expected state after everything is cleaned
name|assertTrue
argument_list|(
literal|"Store is not in expected state"
argument_list|,
name|zkTester
operator|.
name|isFinalStateValid
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Test to verify storing of apps and app attempts in ZK state store with app
comment|// node split index config changing across restarts.
annotation|@
name|Test
DECL|method|testAppNodeSplitChangeAcrossRestarts ()
specifier|public
name|void
name|testAppNodeSplitChangeAcrossRestarts
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|submitTime
operator|+
literal|1234
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// Create store with app node split set as 1.
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getStateStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|AMRMTokenSecretManager
name|appTokenMgr
init|=
name|spy
argument_list|(
operator|new
name|AMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|MasterKeyData
name|masterKeyData
init|=
name|appTokenMgr
operator|.
name|createNewMasterKey
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|appTokenMgr
operator|.
name|getMasterKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|masterKeyData
argument_list|)
expr_stmt|;
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenMgr
init|=
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
decl_stmt|;
comment|// Store app1 with 2 attempts.
name|ApplicationId
name|appId1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1442994194053L
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId1
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId2
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|storeAppWithAttempts
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|appTokenMgr
argument_list|,
name|clientToAMTokenMgr
argument_list|,
name|attemptId1
argument_list|,
name|attemptId2
argument_list|)
expr_stmt|;
comment|// Store app2 and associated attempt.
name|ApplicationId
name|appId11
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1442994194053L
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attemptId11
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId11
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeAppWithAttempts
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|attemptId11
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
comment|// Close state store
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Load state store with app node split config of 2.
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|RMState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId21
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1442994194053L
argument_list|,
literal|120213
argument_list|)
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|appId21
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
comment|// Check if app is loaded correctly despite change in split index.
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|attemptId1
argument_list|,
name|attemptId2
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|-
literal|1000
argument_list|,
operator|-
literal|1000
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|(
name|FinalApplicationStatus
operator|)
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Finish app/attempt state
name|finishAppWithAttempts
argument_list|(
name|state
argument_list|,
name|store
argument_list|,
name|dispatcher
argument_list|,
name|attemptId2
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|100
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test updating app/attempt for app whose initial state is not saved
name|ApplicationId
name|dummyAppId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1234
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|dummyAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|dummyAppId
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|finishAppWithAttempts
argument_list|(
name|state
argument_list|,
name|store
argument_list|,
name|dispatcher
argument_list|,
name|dummyAttemptId
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|111
argument_list|,
literal|1234
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Close the store
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Load state store this time with split index of 0.
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|state
operator|=
name|store
operator|.
name|loadState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of Apps loaded should be 4."
argument_list|,
literal|4
argument_list|,
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|1234
argument_list|,
literal|true
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|attemptId1
argument_list|,
name|attemptId2
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|-
literal|1000
argument_list|,
literal|100
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|null
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove attempt1
name|store
operator|.
name|removeApplicationAttempt
argument_list|(
name|attemptId1
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId31
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1442994195071L
argument_list|,
literal|45
argument_list|)
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|appId31
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
comment|// Close state store.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Load state store with split index of 3.
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|state
operator|=
name|store
operator|.
name|loadState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of apps loaded should be 5."
argument_list|,
literal|5
argument_list|,
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|dummyAppId
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|1234
argument_list|,
literal|true
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|dummyAttemptId
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|111
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|appId31
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|appId21
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|appId11
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|attemptId11
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|-
literal|1000
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|(
name|FinalApplicationStatus
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|verifyLoadedApp
argument_list|(
name|state
argument_list|,
name|appId1
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|,
literal|1234
argument_list|,
literal|true
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|attemptId2
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|100
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store another app.
name|ApplicationId
name|appId41
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1442994195087L
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|dispatcher
argument_list|,
name|appId41
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
comment|// Check how many apps exist in each of the hierarchy based paths. 0 paths
comment|// should exist in "HIERARCHIES/4" path as app split index was never set
comment|// as 4 in tests above.
name|assertHierarchicalPaths
argument_list|(
name|store
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAppInHierarchicalPath
argument_list|(
name|store
argument_list|,
literal|"application_1442994195087_0001"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId71
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1442994195087L
argument_list|,
literal|7
argument_list|)
decl_stmt|;
comment|//storeApp(store, dispatcher, appId71, submitTime, startTime);
name|storeApp
argument_list|(
name|store
argument_list|,
name|appId71
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|waitNotify
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId71
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId71
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId71
argument_list|,
literal|1
argument_list|)
argument_list|,
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId71
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
comment|// Remove applications.
name|removeApps
argument_list|(
name|store
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|appId11
argument_list|,
operator|new
name|ApplicationAttemptId
index|[]
block|{
name|attemptId11
block|}
argument_list|,
name|appId71
argument_list|,
operator|new
name|ApplicationAttemptId
index|[]
block|{
name|attemptId71
block|}
argument_list|,
name|appId41
argument_list|,
operator|new
name|ApplicationAttemptId
index|[
literal|0
index|]
argument_list|,
name|appId31
argument_list|,
operator|new
name|ApplicationAttemptId
index|[
literal|0
index|]
argument_list|,
name|appId21
argument_list|,
operator|new
name|ApplicationAttemptId
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|removeApps
argument_list|(
name|store
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|dummyAppId
argument_list|,
operator|new
name|ApplicationAttemptId
index|[]
block|{
name|dummyAttemptId
block|}
argument_list|,
name|appId1
argument_list|,
operator|new
name|ApplicationAttemptId
index|[]
block|{
name|attemptId1
block|,
name|attemptId2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Load state store with split index of 3 again. As all apps have been
comment|// removed nothing should be loaded back.
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForAppNodeSplit
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|state
operator|=
name|store
operator|.
name|loadState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Number of apps loaded should be 0."
argument_list|,
literal|0
argument_list|,
name|state
operator|.
name|getApplicationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Close the state store.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|createConfForDelegationTokenNodeSplit ( int splitIndex)
specifier|private
specifier|static
name|Configuration
name|createConfForDelegationTokenNodeSplit
parameter_list|(
name|int
name|splitIndex
parameter_list|)
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_DELEGATION_TOKEN_NODE_SPLIT_INDEX
argument_list|,
name|splitIndex
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|verifyDelegationTokensStateStore ( TestZKRMStateStoreTester zkTester, Map<RMDelegationTokenIdentifier, Long> tokensWithRenewal, Map<RMDelegationTokenIdentifier, Integer> tokensWithIndex, int sequenceNumber)
specifier|private
name|void
name|verifyDelegationTokensStateStore
parameter_list|(
name|TestZKRMStateStoreTester
name|zkTester
parameter_list|,
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|tokensWithRenewal
parameter_list|,
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Integer
argument_list|>
name|tokensWithIndex
parameter_list|,
name|int
name|sequenceNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
operator|.
name|RMDTSecretManagerState
name|secretManagerState
init|=
name|zkTester
operator|.
name|store
operator|.
name|loadState
argument_list|()
operator|.
name|getRMDTSecretManagerState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected token state"
argument_list|,
name|tokensWithRenewal
argument_list|,
name|secretManagerState
operator|.
name|getTokenState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected sequence number"
argument_list|,
name|sequenceNumber
argument_list|,
name|secretManagerState
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Integer
argument_list|>
name|tokenEntry
range|:
name|tokensWithIndex
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected to find token "
operator|+
name|tokenEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|" in zookeeper but did not"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|tokenEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tokenEntry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyDelegationTokenInStateStore ( TestZKRMStateStoreTester zkTester, RMDelegationTokenIdentifier token, long renewDate, int index)
specifier|private
name|void
name|verifyDelegationTokenInStateStore
parameter_list|(
name|TestZKRMStateStoreTester
name|zkTester
parameter_list|,
name|RMDelegationTokenIdentifier
name|token
parameter_list|,
name|long
name|renewDate
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|RMStateStore
operator|.
name|RMDTSecretManagerState
name|secretManagerState
init|=
name|zkTester
operator|.
name|store
operator|.
name|loadState
argument_list|()
operator|.
name|getRMDTSecretManagerState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|tokenState
init|=
name|secretManagerState
operator|.
name|getTokenState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"token state does not contain "
operator|+
name|token
argument_list|,
name|tokenState
operator|.
name|containsKey
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"token state does not contain a token with renewal "
operator|+
name|renewDate
argument_list|,
name|tokenState
operator|.
name|containsValue
argument_list|(
name|renewDate
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Token "
operator|+
name|token
operator|+
literal|"should exist but was not found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|storeUpdateAndVerifyDelegationToken ( TestZKRMStateStoreTester zkTester, Map<RMDelegationTokenIdentifier, Long> tokensWithRenewal, Map<RMDelegationTokenIdentifier, Integer> tokensWithIndex, int sequenceNumber, int split)
specifier|private
name|RMDelegationTokenIdentifier
name|storeUpdateAndVerifyDelegationToken
parameter_list|(
name|TestZKRMStateStoreTester
name|zkTester
parameter_list|,
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|tokensWithRenewal
parameter_list|,
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Integer
argument_list|>
name|tokensWithIndex
parameter_list|,
name|int
name|sequenceNumber
parameter_list|,
name|int
name|split
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Store token
name|RMDelegationTokenIdentifier
name|token
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Token should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token
argument_list|,
name|split
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|.
name|setSequenceNumber
argument_list|(
name|sequenceNumber
argument_list|)
expr_stmt|;
name|Long
name|renewDate
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|zkTester
operator|.
name|store
operator|.
name|storeRMDelegationToken
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|modifyRMDelegationTokenState
argument_list|()
expr_stmt|;
name|tokensWithRenewal
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|tokensWithIndex
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|split
argument_list|)
expr_stmt|;
comment|// Verify the token
name|verifyDelegationTokensStateStore
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|)
expr_stmt|;
comment|// Update the token
name|renewDate
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|zkTester
operator|.
name|store
operator|.
name|updateRMDelegationToken
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|tokensWithRenewal
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|tokensWithIndex
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|split
argument_list|)
expr_stmt|;
comment|// Verify updates
name|verifyDelegationTokensStateStore
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenSplitIndexConfig ()
specifier|public
name|void
name|testDelegationTokenSplitIndexConfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Valid values
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect split index"
argument_list|,
literal|0
argument_list|,
name|zkTester
operator|.
name|getDelegationTokenNodeSplitIndex
argument_list|()
argument_list|)
expr_stmt|;
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect split index"
argument_list|,
literal|1
argument_list|,
name|zkTester
operator|.
name|getDelegationTokenNodeSplitIndex
argument_list|()
argument_list|)
expr_stmt|;
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect split index"
argument_list|,
literal|2
argument_list|,
name|zkTester
operator|.
name|getDelegationTokenNodeSplitIndex
argument_list|()
argument_list|)
expr_stmt|;
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect split index"
argument_list|,
literal|3
argument_list|,
name|zkTester
operator|.
name|getDelegationTokenNodeSplitIndex
argument_list|()
argument_list|)
expr_stmt|;
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect split index"
argument_list|,
literal|4
argument_list|,
name|zkTester
operator|.
name|getDelegationTokenNodeSplitIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalid values --> override to 0
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForDelegationTokenNodeSplit
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect split index"
argument_list|,
literal|0
argument_list|,
name|zkTester
operator|.
name|getDelegationTokenNodeSplitIndex
argument_list|()
argument_list|)
expr_stmt|;
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|5
argument_list|)
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect split index"
argument_list|,
literal|0
argument_list|,
name|zkTester
operator|.
name|getDelegationTokenNodeSplitIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenNodeNoSplit ()
specifier|public
name|void
name|testDelegationTokenNodeNoSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenNode
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenNodeWithSplitOne ()
specifier|public
name|void
name|testDelegationTokenNodeWithSplitOne
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenNode
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenNodeWithSplitTwo ()
specifier|public
name|void
name|testDelegationTokenNodeWithSplitTwo
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenNode
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenNodeWithSplitThree ()
specifier|public
name|void
name|testDelegationTokenNodeWithSplitThree
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenNode
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenNodeWithSplitFour ()
specifier|public
name|void
name|testDelegationTokenNodeWithSplitFour
parameter_list|()
throws|throws
name|Exception
block|{
name|testDelegationTokenNode
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegationTokenNode (int split)
specifier|public
name|void
name|testDelegationTokenNode
parameter_list|(
name|int
name|split
parameter_list|)
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConfForDelegationTokenNodeSplit
argument_list|(
name|split
argument_list|)
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Store the token and verify
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|tokensWithRenewal
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Integer
argument_list|>
name|tokensWithIndex
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|sequenceNumber
init|=
literal|0
decl_stmt|;
name|RMDelegationTokenIdentifier
name|token
init|=
name|storeUpdateAndVerifyDelegationToken
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|,
name|split
argument_list|)
decl_stmt|;
comment|// Delete the token and verify
name|store
operator|.
name|removeRMDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|RMStateStore
operator|.
name|RMDTSecretManagerState
name|state
init|=
name|store
operator|.
name|loadState
argument_list|()
operator|.
name|getRMDTSecretManagerState
argument_list|()
decl_stmt|;
name|tokensWithRenewal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tokensWithIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected token state"
argument_list|,
name|tokensWithRenewal
argument_list|,
name|state
operator|.
name|getTokenState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected sequence number"
argument_list|,
name|sequenceNumber
argument_list|,
name|state
operator|.
name|getDTSequenceNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token
argument_list|,
name|split
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenNodeWithSplitMultiple ()
specifier|public
name|void
name|testDelegationTokenNodeWithSplitMultiple
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// With the split set to 1, we can store 10 tokens under a znode (i.e. 0-9)
comment|// Try to store more than 10
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|tokensWithRenewal
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Integer
argument_list|>
name|tokensWithIndex
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|tokensToDelete
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|sequenceNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|RMDelegationTokenIdentifier
name|token
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner"
operator|+
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
operator|+
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|sequenceNumber
operator|=
name|i
expr_stmt|;
name|token
operator|.
name|setSequenceNumber
argument_list|(
name|sequenceNumber
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|renewDate
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|store
operator|.
name|storeRMDelegationToken
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|modifyRMDelegationTokenState
argument_list|()
expr_stmt|;
name|tokensWithRenewal
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|tokensWithIndex
operator|.
name|put
argument_list|(
name|token
argument_list|,
literal|1
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|i
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|3
case|:
case|case
literal|6
case|:
case|case
literal|11
case|:
name|tokensToDelete
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
comment|// Verify
name|verifyDelegationTokensStateStore
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|)
expr_stmt|;
comment|// Try deleting some tokens and adding some new ones
for|for
control|(
name|RMDelegationTokenIdentifier
name|tokenToDelete
range|:
name|tokensToDelete
control|)
block|{
name|store
operator|.
name|removeRMDelegationToken
argument_list|(
name|tokenToDelete
argument_list|)
expr_stmt|;
name|tokensWithRenewal
operator|.
name|remove
argument_list|(
name|tokenToDelete
argument_list|)
expr_stmt|;
name|tokensWithIndex
operator|.
name|remove
argument_list|(
name|tokenToDelete
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|13
init|;
name|i
operator|<=
literal|22
condition|;
name|i
operator|++
control|)
block|{
name|RMDelegationTokenIdentifier
name|token
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner"
operator|+
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
operator|+
name|i
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|sequenceNumber
operator|=
name|i
expr_stmt|;
name|token
operator|.
name|setSequenceNumber
argument_list|(
name|sequenceNumber
argument_list|)
expr_stmt|;
name|Long
name|renewDate
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|store
operator|.
name|storeRMDelegationToken
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|modifyRMDelegationTokenState
argument_list|()
expr_stmt|;
name|tokensWithRenewal
operator|.
name|put
argument_list|(
name|token
argument_list|,
name|renewDate
argument_list|)
expr_stmt|;
name|tokensWithIndex
operator|.
name|put
argument_list|(
name|token
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Verify
name|verifyDelegationTokensStateStore
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|)
expr_stmt|;
for|for
control|(
name|RMDelegationTokenIdentifier
name|token
range|:
name|tokensToDelete
control|)
block|{
name|assertFalse
argument_list|(
literal|"Token "
operator|+
name|token
operator|+
literal|" should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationTokenNodeWithSplitChangeAcrossRestarts ()
specifier|public
name|void
name|testDelegationTokenNodeWithSplitChangeAcrossRestarts
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Long
argument_list|>
name|tokensWithRenewal
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|,
name|Integer
argument_list|>
name|tokensWithIndex
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|sequenceNumber
init|=
literal|0
decl_stmt|;
comment|// Start the store with index 1
name|Configuration
name|conf
init|=
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Store a token with index 1
name|RMDelegationTokenIdentifier
name|token1
init|=
name|storeUpdateAndVerifyDelegationToken
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start the store with index 2
name|conf
operator|=
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Verify token1 is still there and under the /1/ znode
name|verifyDelegationTokenInStateStore
argument_list|(
name|zkTester
argument_list|,
name|token1
argument_list|,
name|tokensWithRenewal
operator|.
name|get
argument_list|(
name|token1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Store a token with index 2
name|sequenceNumber
operator|++
expr_stmt|;
name|RMDelegationTokenIdentifier
name|token2
init|=
name|storeUpdateAndVerifyDelegationToken
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// Update and verify token1
name|long
name|renewDate1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|zkTester
operator|.
name|store
operator|.
name|updateRMDelegationToken
argument_list|(
name|token1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|tokensWithRenewal
operator|.
name|put
argument_list|(
name|token1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|verifyDelegationTokenInStateStore
argument_list|(
name|zkTester
argument_list|,
name|token1
argument_list|,
name|tokensWithRenewal
operator|.
name|get
argument_list|(
name|token1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start the store with index 0
name|conf
operator|=
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Verify token1 is still there and under the /1/ znode
name|verifyDelegationTokenInStateStore
argument_list|(
name|zkTester
argument_list|,
name|token1
argument_list|,
name|tokensWithRenewal
operator|.
name|get
argument_list|(
name|token1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify token2 is still there and under the /2/ znode
name|verifyDelegationTokenInStateStore
argument_list|(
name|zkTester
argument_list|,
name|token2
argument_list|,
name|tokensWithRenewal
operator|.
name|get
argument_list|(
name|token2
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Store a token with no index
name|sequenceNumber
operator|++
expr_stmt|;
name|RMDelegationTokenIdentifier
name|token0
init|=
name|storeUpdateAndVerifyDelegationToken
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start the store with index 3
name|conf
operator|=
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|store
operator|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Verify token1 is still there and under the /1/ znode
name|verifyDelegationTokenInStateStore
argument_list|(
name|zkTester
argument_list|,
name|token1
argument_list|,
name|tokensWithRenewal
operator|.
name|get
argument_list|(
name|token1
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify token2 is still there and under the /2/ znode
name|verifyDelegationTokenInStateStore
argument_list|(
name|zkTester
argument_list|,
name|token2
argument_list|,
name|tokensWithRenewal
operator|.
name|get
argument_list|(
name|token2
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Verify token0 is still there and under the token root node
name|verifyDelegationTokenInStateStore
argument_list|(
name|zkTester
argument_list|,
name|token0
argument_list|,
name|tokensWithRenewal
operator|.
name|get
argument_list|(
name|token0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Delete all tokens and verify
for|for
control|(
name|RMDelegationTokenIdentifier
name|token
range|:
name|tokensWithRenewal
operator|.
name|keySet
argument_list|()
control|)
block|{
name|store
operator|.
name|removeRMDelegationToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|tokensWithRenewal
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tokensWithIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verifyDelegationTokensStateStore
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token "
operator|+
name|token1
operator|+
literal|" should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token "
operator|+
name|token1
operator|+
literal|" should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Token "
operator|+
name|token1
operator|+
literal|" should not exist but was found in ZooKeeper"
argument_list|,
name|zkTester
operator|.
name|delegationTokenExists
argument_list|(
name|token0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store a token with index 3
name|sequenceNumber
operator|++
expr_stmt|;
name|storeUpdateAndVerifyDelegationToken
argument_list|(
name|zkTester
argument_list|,
name|tokensWithRenewal
argument_list|,
name|tokensWithIndex
argument_list|,
name|sequenceNumber
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppSubmissionContextIsPrunedInFinalApplicationState ()
specifier|public
name|void
name|testAppSubmissionContextIsPrunedInFinalApplicationState
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|fromString
argument_list|(
literal|"application_1234_0010"
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConfForDelegationTokenNodeSplit
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|ctx
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setQueue
argument_list|(
literal|"a_queue"
argument_list|)
expr_stmt|;
name|ContainerLaunchContextPBImpl
name|containerLaunchCtx
init|=
operator|new
name|ContainerLaunchContextPBImpl
argument_list|()
decl_stmt|;
name|containerLaunchCtx
operator|.
name|setCommands
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"a_command"
argument_list|)
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setAMContainerSpec
argument_list|(
name|containerLaunchCtx
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
operator|new
name|ResourcePBImpl
argument_list|()
decl_stmt|;
name|resource
operator|.
name|setMemorySize
argument_list|(
literal|17L
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schedulingPropertiesMap
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"a_key"
argument_list|,
literal|"a_value"
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|setApplicationSchedulingPropertiesMap
argument_list|(
name|schedulingPropertiesMap
argument_list|)
expr_stmt|;
name|ApplicationStateDataPBImpl
name|appState
init|=
operator|new
name|ApplicationStateDataPBImpl
argument_list|()
decl_stmt|;
name|appState
operator|.
name|setState
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|appState
operator|.
name|setApplicationSubmissionContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeApplicationStateInternal
argument_list|(
name|appId
argument_list|,
name|appState
argument_list|)
expr_stmt|;
name|RMState
name|rmState
init|=
name|store
operator|.
name|loadState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rmState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getApplicationSubmissionContext
argument_list|()
expr_stmt|;
name|appState
operator|.
name|setState
argument_list|(
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|store
operator|.
name|handleStoreEvent
argument_list|(
operator|new
name|RMStateUpdateAppEvent
argument_list|(
name|appState
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rmState
operator|=
name|store
operator|.
name|loadState
argument_list|()
expr_stmt|;
name|ctx
operator|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getApplicationSubmissionContext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ApplicationSchedulingPropertiesMap should not have been "
operator|+
literal|"pruned from the application submission context before the "
operator|+
literal|"FINISHED state"
argument_list|,
name|schedulingPropertiesMap
argument_list|,
name|ctx
operator|.
name|getApplicationSchedulingPropertiesMap
argument_list|()
argument_list|)
expr_stmt|;
name|appState
operator|.
name|setState
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|store
operator|.
name|handleStoreEvent
argument_list|(
operator|new
name|RMStateUpdateAppEvent
argument_list|(
name|appState
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rmState
operator|=
name|store
operator|.
name|loadState
argument_list|()
expr_stmt|;
name|ctx
operator|=
name|rmState
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getApplicationSubmissionContext
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|appId
argument_list|,
name|ctx
operator|.
name|getApplicationId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a_queue"
argument_list|,
name|ctx
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ctx
operator|.
name|getAMContainerSpec
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17L
argument_list|,
name|ctx
operator|.
name|getResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ApplicationSchedulingPropertiesMap should have been pruned"
operator|+
literal|" from the application submission context when in FINISHED STATE"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|ctx
operator|.
name|getApplicationSchedulingPropertiesMap
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

