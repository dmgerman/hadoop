begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|RetryNTimes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|test
operator|.
name|TestingServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|DelegationKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ContainerPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|VersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationAttemptStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|AggregateAppResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Perms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|SecretKey
import|;
end_import

begin_class
DECL|class|TestZKRMStateStore
specifier|public
class|class
name|TestZKRMStateStore
extends|extends
name|RMStateStoreTestBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestZKRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ZK_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|ZK_TIMEOUT_MS
init|=
literal|1000
decl_stmt|;
DECL|field|curatorTestingServer
specifier|private
name|TestingServer
name|curatorTestingServer
decl_stmt|;
DECL|field|curatorFramework
specifier|private
name|CuratorFramework
name|curatorFramework
decl_stmt|;
DECL|method|setupCuratorServer ()
specifier|public
specifier|static
name|TestingServer
name|setupCuratorServer
parameter_list|()
throws|throws
name|Exception
block|{
name|TestingServer
name|curatorTestingServer
init|=
operator|new
name|TestingServer
argument_list|()
decl_stmt|;
name|curatorTestingServer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curatorTestingServer
return|;
block|}
DECL|method|setupCuratorFramework ( TestingServer curatorTestingServer)
specifier|public
specifier|static
name|CuratorFramework
name|setupCuratorFramework
parameter_list|(
name|TestingServer
name|curatorTestingServer
parameter_list|)
throws|throws
name|Exception
block|{
name|CuratorFramework
name|curatorFramework
init|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|connectString
argument_list|(
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
operator|.
name|retryPolicy
argument_list|(
operator|new
name|RetryNTimes
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|curatorFramework
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curatorFramework
return|;
block|}
annotation|@
name|Before
DECL|method|setupCurator ()
specifier|public
name|void
name|setupCurator
parameter_list|()
throws|throws
name|Exception
block|{
name|curatorTestingServer
operator|=
name|setupCuratorServer
argument_list|()
expr_stmt|;
name|curatorFramework
operator|=
name|setupCuratorFramework
argument_list|(
name|curatorTestingServer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanupCuratorServer ()
specifier|public
name|void
name|cleanupCuratorServer
parameter_list|()
throws|throws
name|IOException
block|{
name|curatorFramework
operator|.
name|close
argument_list|()
expr_stmt|;
name|curatorTestingServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|class|TestZKRMStateStoreTester
class|class
name|TestZKRMStateStoreTester
implements|implements
name|RMStateStoreHelper
block|{
DECL|field|store
name|TestZKRMStateStoreInternal
name|store
decl_stmt|;
DECL|field|workingZnode
name|String
name|workingZnode
decl_stmt|;
DECL|class|TestZKRMStateStoreInternal
class|class
name|TestZKRMStateStoreInternal
extends|extends
name|ZKRMStateStore
block|{
DECL|method|TestZKRMStateStoreInternal (Configuration conf, String workingZnode)
specifier|public
name|TestZKRMStateStoreInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|workingZnode
parameter_list|)
throws|throws
name|Exception
block|{
name|setResourceManager
argument_list|(
operator|new
name|ResourceManager
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|disableExitOnDispatchException
argument_list|()
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|znodeWorkingPath
operator|.
name|equals
argument_list|(
name|workingZnode
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getVersionNode ()
specifier|public
name|String
name|getVersionNode
parameter_list|()
block|{
return|return
name|znodeWorkingPath
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|VERSION_NODE
return|;
block|}
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
DECL|method|getAppNode (String appId)
specifier|public
name|String
name|getAppNode
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
return|return
name|workingZnode
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|RM_APP_ROOT
operator|+
literal|"/"
operator|+
name|appId
return|;
block|}
DECL|method|getAttemptNode (String appId, String attemptId)
specifier|public
name|String
name|getAttemptNode
parameter_list|(
name|String
name|appId
parameter_list|,
name|String
name|attemptId
parameter_list|)
block|{
return|return
name|getAppNode
argument_list|(
name|appId
argument_list|)
operator|+
literal|"/"
operator|+
name|attemptId
return|;
block|}
comment|/**        * Emulating retrying createRootDir not to raise NodeExist exception        * @throws Exception        */
DECL|method|testRetryingCreateRootDir ()
specifier|public
name|void
name|testRetryingCreateRootDir
parameter_list|()
throws|throws
name|Exception
block|{
name|create
argument_list|(
name|znodeWorkingPath
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getRMStateStore ()
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|workingZnode
operator|=
literal|"/jira/issue/3077/rmstore"
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_PARENT_PATH
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|TestZKRMStateStoreInternal
argument_list|(
name|conf
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|store
return|;
block|}
annotation|@
name|Override
DECL|method|isFinalStateValid ()
specifier|public
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|1
operator|==
name|curatorFramework
operator|.
name|getChildren
argument_list|()
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|znodeWorkingPath
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|writeVersion (Version version)
specifier|public
name|void
name|writeVersion
parameter_list|(
name|Version
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|curatorFramework
operator|.
name|setData
argument_list|()
operator|.
name|withVersion
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|getVersionNode
argument_list|()
argument_list|,
operator|(
operator|(
name|VersionPBImpl
operator|)
name|version
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|store
operator|.
name|getCurrentVersion
argument_list|()
return|;
block|}
DECL|method|appExists (RMApp app)
specifier|public
name|boolean
name|appExists
parameter_list|(
name|RMApp
name|app
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
operator|!=
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|getAppNode
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|attemptExists (RMAppAttempt attempt)
specifier|public
name|boolean
name|attemptExists
parameter_list|(
name|RMAppAttempt
name|attempt
parameter_list|)
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|attemptId
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
return|return
literal|null
operator|!=
name|curatorFramework
operator|.
name|checkExists
argument_list|()
operator|.
name|forPath
argument_list|(
name|store
operator|.
name|getAttemptNode
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|attemptId
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testZKRMStateStoreRealZK ()
specifier|public
name|void
name|testZKRMStateStoreRealZK
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|testRMAppStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testRMDTSecretManagerStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testCheckVersion
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testEpoch
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testAppDeletion
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testDeleteStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testRemoveApplication
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testRemoveAttempt
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testAMRMTokenSecretManagerStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testReservationStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TestZKRMStateStoreTester
operator|.
name|TestZKRMStateStoreInternal
operator|)
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
operator|)
operator|.
name|testRetryingCreateRootDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testCheckMajorVersionChange ()
specifier|public
name|void
name|testCheckMajorVersionChange
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
block|{
name|Version
name|VERSION_INFO
init|=
name|Version
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|VERSION_INFO
return|;
block|}
annotation|@
name|Override
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|workingZnode
operator|=
literal|"/jira/issue/3077/rmstore"
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|curatorTestingServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_PARENT_PATH
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|TestZKRMStateStoreInternal
argument_list|(
name|conf
argument_list|,
name|workingZnode
argument_list|)
block|{
name|Version
name|storedVersion
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Version
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|VERSION_INFO
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Version
name|loadVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|storedVersion
return|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|storeVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|storedVersion
operator|=
name|VERSION_INFO
expr_stmt|;
block|}
block|}
expr_stmt|;
return|return
name|this
operator|.
name|store
return|;
block|}
block|}
decl_stmt|;
comment|// default version
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|Version
name|defaultVersion
init|=
name|zkTester
operator|.
name|getCurrentVersion
argument_list|()
decl_stmt|;
name|store
operator|.
name|checkVersion
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|defaultVersion
argument_list|,
name|store
operator|.
name|loadVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createHARMConf (String rmIds, String rmId, int adminPort, boolean autoFailoverEnabled, TestingServer curatorTestServer)
specifier|public
specifier|static
name|Configuration
name|createHARMConf
parameter_list|(
name|String
name|rmIds
parameter_list|,
name|String
name|rmId
parameter_list|,
name|int
name|adminPort
parameter_list|,
name|boolean
name|autoFailoverEnabled
parameter_list|,
name|TestingServer
name|curatorTestServer
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|rmIds
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|ZKRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|curatorTestServer
operator|.
name|getConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_TIMEOUT_MS
argument_list|,
name|ZK_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WEBAPP_ADDRESS
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
name|autoFailoverEnabled
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|rpcAddress
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|conf
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|rpcAddress
argument_list|,
name|id
argument_list|)
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|rmId
argument_list|)
argument_list|,
literal|"localhost:"
operator|+
name|adminPort
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|verifyZKACL (String id, String scheme, int perm, List<ACL> acls)
specifier|private
specifier|static
name|boolean
name|verifyZKACL
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|scheme
parameter_list|,
name|int
name|perm
parameter_list|,
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
parameter_list|)
block|{
for|for
control|(
name|ACL
name|acl
range|:
name|acls
control|)
block|{
if|if
condition|(
name|acl
operator|.
name|getId
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
operator|&&
name|acl
operator|.
name|getId
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|startsWith
argument_list|(
name|id
argument_list|)
operator|&&
name|acl
operator|.
name|getPerms
argument_list|()
operator|==
name|perm
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Test if RM can successfully start in HA disabled mode if it was previously    * running in HA enabled mode. And then start it in HA mode after running it    * with HA disabled. NoAuth Exception should not be sent by zookeeper and RM    * should start successfully.    */
annotation|@
name|Test
DECL|method|testZKRootPathAcls ()
specifier|public
name|void
name|testZKRootPathAcls
parameter_list|()
throws|throws
name|Exception
block|{
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|String
name|rootPath
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH
operator|+
literal|"/"
operator|+
name|ZKRMStateStore
operator|.
name|ROOT_ZNODE_NAME
decl_stmt|;
comment|// Start RM with HA enabled
name|Configuration
name|conf
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
init|=
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|)
operator|.
name|getACL
argument_list|(
name|rootPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|acls
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// CREATE and DELETE permissions for root node based on RM ID
name|verifyZKACL
argument_list|(
literal|"digest"
argument_list|,
literal|"localhost"
argument_list|,
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"world"
argument_list|,
literal|"anyone"
argument_list|,
name|Perms
operator|.
name|ALL
operator|^
operator|(
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
operator|)
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now start RM with HA disabled. NoAuth Exception should not be thrown.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|acls
operator|=
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|)
operator|.
name|getACL
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acls
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"world"
argument_list|,
literal|"anyone"
argument_list|,
name|Perms
operator|.
name|ALL
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Start RM with HA enabled.
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|acls
operator|=
operator|(
operator|(
name|ZKRMStateStore
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|)
operator|.
name|getACL
argument_list|(
name|rootPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acls
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"digest"
argument_list|,
literal|"localhost"
argument_list|,
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|verifyZKACL
argument_list|(
literal|"world"
argument_list|,
literal|"anyone"
argument_list|,
name|Perms
operator|.
name|ALL
operator|^
operator|(
name|Perms
operator|.
name|CREATE
operator||
name|Perms
operator|.
name|DELETE
operator|)
argument_list|,
name|acls
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testFencing ()
specifier|public
name|void
name|testFencing
parameter_list|()
throws|throws
name|Exception
block|{
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|Configuration
name|conf1
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm1
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm2"
argument_list|,
literal|5678
argument_list|,
literal|false
argument_list|,
name|curatorTestingServer
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm2
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ZK_TIMEOUT_MS
operator|/
literal|50
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"RM should have been fenced"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFencedState ()
specifier|public
name|void
name|testFencedState
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
comment|// Move state to FENCED from ACTIVE
name|store
operator|.
name|updateFencedState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|submitTime
operator|+
literal|1000
decl_stmt|;
comment|// Add a new app
name|RMApp
name|mockApp
init|=
name|mock
argument_list|(
name|RMApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getSubmitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|submitTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getApplicationSubmissionContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockApp
operator|.
name|getUser
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeNewApplication
argument_list|(
name|mockApp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a new attempt
name|ClientToAMTokenSecretManagerInRM
name|clientToAMTokenMgr
init|=
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
literal|"appattempt_1234567894321_0001_000001"
argument_list|)
decl_stmt|;
name|SecretKey
name|clientTokenMasterKey
init|=
name|clientToAMTokenMgr
operator|.
name|createMasterKey
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|RMAppAttemptMetrics
name|mockRmAppAttemptMetrics
init|=
name|mock
argument_list|(
name|RMAppAttemptMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
operator|new
name|ContainerPBImpl
argument_list|()
decl_stmt|;
name|container
operator|.
name|setId
argument_list|(
name|ContainerId
operator|.
name|fromString
argument_list|(
literal|"container_1234567891234_0001_01_000001"
argument_list|)
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|mockAttempt
init|=
name|mock
argument_list|(
name|RMAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getMasterContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getClientTokenMasterKey
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clientTokenMasterKey
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockAttempt
operator|.
name|getRMAppAttemptMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRmAppAttemptMetrics
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockRmAppAttemptMetrics
operator|.
name|getAggregateAppResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AggregateAppResourceUsage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeNewApplicationAttempt
argument_list|(
name|mockAttempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|finishTime
init|=
name|submitTime
operator|+
literal|1000
decl_stmt|;
comment|// Update attempt
name|ApplicationAttemptStateData
name|newAttemptState
init|=
name|ApplicationAttemptStateData
operator|.
name|newInstance
argument_list|(
name|attemptId
argument_list|,
name|container
argument_list|,
name|store
operator|.
name|getCredentialsFromAppAttempt
argument_list|(
name|mockAttempt
argument_list|)
argument_list|,
name|startTime
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|"testUrl"
argument_list|,
literal|"test"
argument_list|,
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|,
literal|100
argument_list|,
name|finishTime
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateApplicationAttemptState
argument_list|(
name|newAttemptState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update app
name|ApplicationStateData
name|appState
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|context
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|store
operator|.
name|updateApplicationState
argument_list|(
name|appState
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove app
name|store
operator|.
name|removeApplication
argument_list|(
name|mockApp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// store RM delegation token;
name|RMDelegationTokenIdentifier
name|dtId1
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer1"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"realuser1"
argument_list|)
argument_list|)
decl_stmt|;
name|Long
name|renewDate1
init|=
operator|new
name|Long
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|dtId1
operator|.
name|setSequenceNumber
argument_list|(
literal|1111
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeRMDelegationToken
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateRMDelegationToken
argument_list|(
name|dtId1
argument_list|,
name|renewDate1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove delegation key;
name|store
operator|.
name|removeRMDelegationToken
argument_list|(
name|dtId1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// store delegation master key;
name|DelegationKey
name|key
init|=
operator|new
name|DelegationKey
argument_list|(
literal|1234
argument_list|,
literal|4321
argument_list|,
literal|"keyBytes"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|storeRMDTMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove delegation master key;
name|store
operator|.
name|removeRMDTMasterKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
comment|// store or update AMRMToken;
name|store
operator|.
name|storeOrUpdateAMRMTokenSecretManager
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RMStateStore should have been in fenced state"
argument_list|,
literal|true
argument_list|,
name|store
operator|.
name|isFencedState
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicateRMAppDeletion ()
specifier|public
name|void
name|testDuplicateRMAppDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|long
name|submitTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1234
decl_stmt|;
name|RMStateStore
name|store
init|=
name|zkTester
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|TestDispatcher
name|dispatcher
init|=
operator|new
name|TestDispatcher
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRMDispatcher
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptIdRemoved
init|=
name|ApplicationAttemptId
operator|.
name|fromString
argument_list|(
literal|"appattempt_1352994193343_0002_000001"
argument_list|)
decl_stmt|;
name|ApplicationId
name|appIdRemoved
init|=
name|attemptIdRemoved
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|storeApp
argument_list|(
name|store
argument_list|,
name|appIdRemoved
argument_list|,
name|submitTime
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
name|storeAttempt
argument_list|(
name|store
argument_list|,
name|attemptIdRemoved
argument_list|,
literal|"container_1352994193343_0002_01_000001"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|dispatcher
argument_list|)
expr_stmt|;
name|ApplicationSubmissionContext
name|context
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|context
operator|.
name|setApplicationId
argument_list|(
name|appIdRemoved
argument_list|)
expr_stmt|;
name|ApplicationStateData
name|appStateRemoved
init|=
name|ApplicationStateData
operator|.
name|newInstance
argument_list|(
name|submitTime
argument_list|,
name|startTime
argument_list|,
name|context
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|appStateRemoved
operator|.
name|attempts
operator|.
name|put
argument_list|(
name|attemptIdRemoved
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeApplicationStateInternal
argument_list|(
name|appStateRemoved
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|removeApplicationStateInternal
argument_list|(
name|appStateRemoved
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"NoNodeException should not happen."
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

