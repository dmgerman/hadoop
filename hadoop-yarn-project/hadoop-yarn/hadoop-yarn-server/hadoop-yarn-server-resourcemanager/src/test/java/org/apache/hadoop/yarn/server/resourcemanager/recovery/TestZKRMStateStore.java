begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.recovery
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|SubmitApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ClientRMService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|RMStateVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|RMStateVersionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestZKRMStateStore
specifier|public
class|class
name|TestZKRMStateStore
extends|extends
name|RMStateStoreTestBase
block|{
DECL|field|LOG
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestZKRMStateStore
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|class|TestZKRMStateStoreTester
class|class
name|TestZKRMStateStoreTester
implements|implements
name|RMStateStoreHelper
block|{
DECL|field|client
name|ZooKeeper
name|client
decl_stmt|;
DECL|field|store
name|TestZKRMStateStoreInternal
name|store
decl_stmt|;
DECL|field|workingZnode
name|String
name|workingZnode
decl_stmt|;
DECL|class|TestZKRMStateStoreInternal
class|class
name|TestZKRMStateStoreInternal
extends|extends
name|ZKRMStateStore
block|{
DECL|method|TestZKRMStateStoreInternal (Configuration conf, String workingZnode)
specifier|public
name|TestZKRMStateStoreInternal
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|workingZnode
parameter_list|)
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|znodeWorkingPath
operator|.
name|equals
argument_list|(
name|workingZnode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getNewZooKeeper ()
specifier|public
name|ZooKeeper
name|getNewZooKeeper
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|client
return|;
block|}
DECL|method|getVersionNode ()
specifier|public
name|String
name|getVersionNode
parameter_list|()
block|{
return|return
name|znodeWorkingPath
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|VERSION_NODE
return|;
block|}
DECL|method|getCurrentVersion ()
specifier|public
name|RMStateVersion
name|getCurrentVersion
parameter_list|()
block|{
return|return
name|CURRENT_VERSION_INFO
return|;
block|}
DECL|method|getAppNode (String appId)
specifier|public
name|String
name|getAppNode
parameter_list|(
name|String
name|appId
parameter_list|)
block|{
return|return
name|workingZnode
operator|+
literal|"/"
operator|+
name|ROOT_ZNODE_NAME
operator|+
literal|"/"
operator|+
name|RM_APP_ROOT
operator|+
literal|"/"
operator|+
name|appId
return|;
block|}
block|}
DECL|method|getRMStateStore ()
specifier|public
name|RMStateStore
name|getRMStateStore
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|workingZnode
operator|=
literal|"/Test"
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|hostPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|ZK_RM_STATE_STORE_PARENT_PATH
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
name|this
operator|.
name|client
operator|=
name|createClient
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|TestZKRMStateStoreInternal
argument_list|(
name|conf
argument_list|,
name|workingZnode
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|store
return|;
block|}
annotation|@
name|Override
DECL|method|isFinalStateValid ()
specifier|public
name|boolean
name|isFinalStateValid
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|client
operator|.
name|getChildren
argument_list|(
name|store
operator|.
name|znodeWorkingPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|nodes
operator|.
name|size
argument_list|()
operator|==
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|writeVersion (RMStateVersion version)
specifier|public
name|void
name|writeVersion
parameter_list|(
name|RMStateVersion
name|version
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|setData
argument_list|(
name|store
operator|.
name|getVersionNode
argument_list|()
argument_list|,
operator|(
operator|(
name|RMStateVersionPBImpl
operator|)
name|version
operator|)
operator|.
name|getProto
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCurrentVersion ()
specifier|public
name|RMStateVersion
name|getCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|store
operator|.
name|getCurrentVersion
argument_list|()
return|;
block|}
DECL|method|appExists (RMApp app)
specifier|public
name|boolean
name|appExists
parameter_list|(
name|RMApp
name|app
parameter_list|)
throws|throws
name|Exception
block|{
name|Stat
name|node
init|=
name|client
operator|.
name|exists
argument_list|(
name|store
operator|.
name|getAppNode
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|node
operator|!=
literal|null
return|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testZKRMStateStoreRealZK ()
specifier|public
name|void
name|testZKRMStateStoreRealZK
parameter_list|()
throws|throws
name|Exception
block|{
name|TestZKRMStateStoreTester
name|zkTester
init|=
operator|new
name|TestZKRMStateStoreTester
argument_list|()
decl_stmt|;
name|testRMAppStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testRMDTSecretManagerStateStore
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testCheckVersion
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
name|testAppDeletion
argument_list|(
name|zkTester
argument_list|)
expr_stmt|;
block|}
DECL|method|createHARMConf ( String rmIds, String rmId, int adminPort)
specifier|private
name|Configuration
name|createHARMConf
parameter_list|(
name|String
name|rmIds
parameter_list|,
name|String
name|rmId
parameter_list|,
name|int
name|adminPort
parameter_list|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
name|rmIds
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|ZKRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|hostPort
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
name|rmId
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|rpcAddress
range|:
name|YarnConfiguration
operator|.
name|RM_SERVICES_ADDRESS_CONF_KEYS
control|)
block|{
for|for
control|(
name|String
name|id
range|:
name|HAUtil
operator|.
name|getRMHAIds
argument_list|(
name|conf
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|rpcAddress
argument_list|,
name|id
argument_list|)
argument_list|,
literal|"localhost:0"
argument_list|)
expr_stmt|;
block|}
block|}
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADMIN_ADDRESS
argument_list|,
name|rmId
argument_list|)
argument_list|,
literal|"localhost:"
operator|+
name|adminPort
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testFencing ()
specifier|public
name|void
name|testFencing
parameter_list|()
throws|throws
name|Exception
block|{
name|StateChangeRequestInfo
name|req
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|Configuration
name|conf1
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm1"
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm1
init|=
operator|new
name|ResourceManager
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm1
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
name|createHARMConf
argument_list|(
literal|"rm1,rm2"
argument_list|,
literal|"rm2"
argument_list|,
literal|5678
argument_list|)
decl_stmt|;
name|ResourceManager
name|rm2
init|=
operator|new
name|ResourceManager
argument_list|()
decl_stmt|;
name|rm2
operator|.
name|init
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM with ZKStore didn't start"
argument_list|,
name|Service
operator|.
name|STATE
operator|.
name|STARTED
argument_list|,
name|rm2
operator|.
name|getServiceState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submitting an application to RM1 to trigger a state store operation.
comment|// RM1 should realize that it got fenced and is not the Active RM anymore.
name|Map
name|mockMap
init|=
name|mock
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|asc
init|=
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1000
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"testApplication"
argument_list|,
comment|// app Name
literal|"default"
argument_list|,
comment|// queue name
name|Priority
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
name|mockMap
argument_list|,
name|mockMap
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
name|mockMap
argument_list|,
name|mock
argument_list|(
name|ByteBuffer
operator|.
name|class
argument_list|)
argument_list|,
name|mockMap
argument_list|)
argument_list|,
literal|false
argument_list|,
comment|// unmanaged AM
literal|true
argument_list|,
comment|// cancelTokens
literal|1
argument_list|,
comment|// max app attempts
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ClientRMService
name|rmService
init|=
name|rm1
operator|.
name|getClientRMService
argument_list|()
decl_stmt|;
name|rmService
operator|.
name|submitApplication
argument_list|(
name|SubmitApplicationRequest
operator|.
name|newInstance
argument_list|(
name|asc
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
operator|==
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"RM should have been fenced"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|STANDBY
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"RM should be Active"
argument_list|,
name|HAServiceProtocol
operator|.
name|HAServiceState
operator|.
name|ACTIVE
argument_list|,
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMAdminService
argument_list|()
operator|.
name|getServiceStatus
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

