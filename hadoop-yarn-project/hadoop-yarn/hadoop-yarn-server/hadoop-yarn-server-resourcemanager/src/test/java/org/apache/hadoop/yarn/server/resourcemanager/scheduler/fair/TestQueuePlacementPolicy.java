begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
DECL|class|TestQueuePlacementPolicy
specifier|public
class|class
name|TestQueuePlacementPolicy
block|{
DECL|field|conf
specifier|private
specifier|final
specifier|static
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
DECL|field|configuredQueues
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|configuredQueues
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.someuser"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecifiedUserPolicy ()
specifier|public
name|void
name|testSpecifiedUserPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|QueuePlacementPolicy
name|policy
init|=
name|parse
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"specifiedq"
argument_list|,
literal|"someuser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.someuser"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"default"
argument_list|,
literal|"someuser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.otheruser"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"default"
argument_list|,
literal|"otheruser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoCreate ()
specifier|public
name|void
name|testNoCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' create=\"false\" />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|QueuePlacementPolicy
name|policy
init|=
name|parse
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"specifiedq"
argument_list|,
literal|"someuser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.someuser"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"default"
argument_list|,
literal|"someuser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"specifiedq"
argument_list|,
literal|"otheruser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"default"
argument_list|,
literal|"otheruser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecifiedThenReject ()
specifier|public
name|void
name|testSpecifiedThenReject
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='reject' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|QueuePlacementPolicy
name|policy
init|=
name|parse
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"specifiedq"
argument_list|,
literal|"someuser"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|policy
operator|.
name|assignAppToQueue
argument_list|(
literal|"default"
argument_list|,
literal|"someuser"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testOmittedTerminalRule ()
specifier|public
name|void
name|testOmittedTerminalRule
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' create=\"false\" />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|parse
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testTerminalRuleInMiddle ()
specifier|public
name|void
name|testTerminalRuleInMiddle
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|parse
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|parse (String str)
specifier|private
name|QueuePlacementPolicy
name|parse
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read and parse the allocations file.
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
return|return
name|QueuePlacementPolicy
operator|.
name|fromXml
argument_list|(
name|root
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

