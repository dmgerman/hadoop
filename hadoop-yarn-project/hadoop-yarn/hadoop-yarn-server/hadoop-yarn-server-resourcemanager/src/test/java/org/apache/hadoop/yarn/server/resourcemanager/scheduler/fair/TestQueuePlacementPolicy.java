begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|ApplicationPlacementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|DefaultPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|FSPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|UserPlacementRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|SystemClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * Tests for the queue placement policy for the {@link FairScheduler}.  */
end_comment

begin_class
DECL|class|TestQueuePlacementPolicy
specifier|public
class|class
name|TestQueuePlacementPolicy
block|{
DECL|field|CONF
specifier|private
specifier|final
specifier|static
name|FairSchedulerConfiguration
name|CONF
init|=
operator|new
name|FairSchedulerConfiguration
argument_list|()
decl_stmt|;
comment|// Base setup needed, policy is an intermediate object
DECL|field|placementManager
specifier|private
name|PlacementManager
name|placementManager
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|queueManager
specifier|private
name|QueueManager
name|queueManager
decl_stmt|;
comment|// Locals used in each assignment
DECL|field|asc
specifier|private
name|ApplicationSubmissionContext
name|asc
decl_stmt|;
DECL|field|context
specifier|private
name|ApplicationPlacementContext
name|context
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup ()
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
block|{
name|CONF
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|initTest ()
specifier|public
name|void
name|initTest
parameter_list|()
block|{
name|SystemClock
name|clock
init|=
name|SystemClock
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|placementManager
operator|=
operator|new
name|PlacementManager
argument_list|()
expr_stmt|;
name|scheduler
operator|=
name|mock
argument_list|(
name|FairScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getClock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getQueuePlacementManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|placementManager
argument_list|)
expr_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
operator|new
name|AllocationConfiguration
argument_list|(
name|scheduler
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|allocConf
argument_list|)
expr_stmt|;
name|queueManager
operator|=
operator|new
name|QueueManager
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getQueueManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|cleanTest ()
specifier|public
name|void
name|cleanTest
parameter_list|()
block|{
name|placementManager
operator|=
literal|null
expr_stmt|;
name|queueManager
operator|=
literal|null
expr_stmt|;
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecifiedUserPolicy ()
specifier|public
name|void
name|testSpecifiedUserPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"specifiedq"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.someuser"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.otheruser"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoCreate ()
specifier|public
name|void
name|testNoCreate
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' create=\"false\" />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
literal|"root.someuser"
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"specifiedq"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.someuser"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"specifiedq"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecifiedThenReject ()
specifier|public
name|void
name|testSpecifiedThenReject
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='reject' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"specifiedq"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Assignment should have been rejected and was not"
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOmittedTerminalRule ()
specifier|public
name|void
name|testOmittedTerminalRule
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' create=\"false\" />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTerminalRuleInMiddle ()
specifier|public
name|void
name|testTerminalRuleInMiddle
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTerminals ()
specifier|public
name|void
name|testTerminals
parameter_list|()
block|{
comment|// The default rule is no longer considered terminal when the create flag
comment|// is false. The throw now happens when configuring not when assigning the
comment|// application
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='secondaryGroupExistingQueue' create='true'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' queue='otherdefault' create='false'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultRuleWithQueueAttribute ()
specifier|public
name|void
name|testDefaultRuleWithQueueAttribute
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test covers the use case where we would like default rule
comment|// to point to a different queue by default rather than root.default
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
literal|"root.someDefaultQueue"
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' queue='root.someDefaultQueue'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.someDefaultQueue"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueueParsingErrors ()
specifier|public
name|void
name|testNestedUserQueueParsingErrors
parameter_list|()
block|{
comment|// No nested rule specified in hierarchical user queue
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
comment|// Specified nested rule is not a FSPlacementRule
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='unknownRule'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
comment|// Parent rule is rule that cannot be one: reject or nestedUserQueue
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='reject'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
comment|// If the parent rule does not have the create flag the nested rule is not
comment|// terminal
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup' create='false'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleParentRules ()
specifier|public
name|void
name|testMultipleParentRules
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PlacementRule
name|nested
init|=
name|placementManager
operator|.
name|getPlacementRules
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|nested
operator|instanceof
name|UserPlacementRule
condition|)
block|{
name|PlacementRule
name|parent
init|=
operator|(
operator|(
name|FSPlacementRule
operator|)
name|nested
operator|)
operator|.
name|getParentRule
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Nested rule should have been Default rule"
argument_list|,
name|parent
operator|instanceof
name|DefaultPlacementRule
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Policy parsing failed: rule with multiple parents not set"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testBrokenRules ()
specifier|public
name|void
name|testBrokenRules
parameter_list|()
throws|throws
name|Exception
block|{
comment|// broken rule should fail configuring
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
comment|// policy without rules ignoring policy
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<notarule />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// broken rule should fail configuring
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
name|sb
argument_list|)
expr_stmt|;
comment|// parent rule not set to something known: no parent rule is required
comment|// required case is only for nestedUserQueue tested earlier
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<notarule />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIfExceptionThrown (StringBuffer sb)
specifier|private
name|void
name|assertIfExceptionThrown
parameter_list|(
name|StringBuffer
name|sb
parameter_list|)
block|{
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
try|try
block|{
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|th
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|th
operator|instanceof
name|AllocationConfigurationException
argument_list|)
expr_stmt|;
block|}
DECL|method|assertIfExceptionThrown (String user)
specifier|private
name|void
name|assertIfExceptionThrown
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
try|try
block|{
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|th
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|th
operator|instanceof
name|YarnException
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueueParsing ()
specifier|public
name|void
name|testNestedUserQueueParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueuePrimaryGroup ()
specifier|public
name|void
name|testNestedUserQueuePrimaryGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
comment|// User queue would be created under primary group queue
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1group.user1"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Other rules above and below hierarchical user queue rule should work as
comment|// usual
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
literal|"root.specifiedq"
argument_list|)
expr_stmt|;
comment|// test if specified rule(above nestedUserQueue rule) works ok
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"root.specifiedq"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.specifiedq"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit should fail if we cannot create the queue
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
literal|"root.user3group"
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Submission should have failed and did not"
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueuePrimaryGroupNoCreate ()
specifier|public
name|void
name|testNestedUserQueuePrimaryGroupNoCreate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Primary group rule has create='false'
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup' create='false'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should return root.default since primary group 'root.user1group' is not
comment|// configured
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let's configure primary group and check if user queue is created
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
literal|"root.user1group"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1group.user1"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both Primary group and nestedUserQueue rule has create='false'
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue' create='false'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup' create='false'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
comment|// Should return root.default since primary group and user queue for user 2
comment|// are not configured.
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now configure both primary group and the user queue for user2
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
literal|"root.user2group.user2"
argument_list|)
expr_stmt|;
comment|// Try placing the same app again
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user2group.user2"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueueSecondaryGroup ()
specifier|public
name|void
name|testNestedUserQueueSecondaryGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='secondaryGroupExistingQueue'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should return root.default since secondary groups are not configured
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// configure secondary group for user1
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
literal|"root.user1subgroup1"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// user queue created should be created under secondary group
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1subgroup1.user1"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueueSpecificRule ()
specifier|public
name|void
name|testNestedUserQueueSpecificRule
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test covers the use case where users can specify different parent
comment|// queues and want user queues under those.
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
comment|// Let's create couple of parent queues
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
literal|"root.parent1"
argument_list|)
expr_stmt|;
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
literal|"root.parent2"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"root.parent1"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.parent1.user1"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"root.parent2"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.parent2.user2"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueueDefaultRule ()
specifier|public
name|void
name|testNestedUserQueueDefaultRule
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test covers the use case where we would like user queues to be
comment|// created under a default parent queue
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' queue='root.parent'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.parent.user1"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Same as above but now with the create flag false for the parent
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
literal|"root.parent"
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' queue='root.parent' create='false'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.parent.user1"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Parent queue returned is already a configured LEAF, should fail and the
comment|// context is null.
name|createQueue
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
literal|"root.parent"
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' queue='root.parent' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Submission should have failed and did not"
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserContainsPeriod ()
specifier|public
name|void
name|testUserContainsPeriod
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test covers the user case where the username contains periods.
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='user' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"first.last"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.first_dot_last"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
comment|// specified create is false, bypass the rule
comment|// default rule has create which requires a PARENT queue: remove the LEAF
name|queueManager
operator|.
name|removeLeafQueue
argument_list|(
literal|"root.default"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"first_dot_last"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default.first_dot_last"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGroupContainsPeriod ()
specifier|public
name|void
name|testGroupContainsPeriod
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified' create='false' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|PeriodGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// User queue would be created under primary group queue, and the period
comment|// in the group name should be converted into _dot_
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|context
operator|=
name|placementManager
operator|.
name|placeApplication
argument_list|(
name|asc
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1_dot_group.user1"
argument_list|,
name|context
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyGroupsPrimaryGroupRule ()
specifier|public
name|void
name|testEmptyGroupsPrimaryGroupRule
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='primaryGroup' create=\"false\" />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
comment|// Add a static mapping that returns empty groups for users
name|CONF
operator|.
name|setStrings
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_USER_GROUP_STATIC_OVERRIDES
argument_list|,
literal|"emptygroupuser="
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"root.fake"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
literal|"emptygroupuser"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecifiedQueueWithSpaces ()
specifier|public
name|void
name|testSpecifiedQueueWithSpaces
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='specified'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<rule name='default'/>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|createPolicy
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"A "
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|asc
operator|=
name|newAppSubmissionContext
argument_list|(
literal|"A\u00a0"
argument_list|)
expr_stmt|;
name|assertIfExceptionThrown
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
block|}
DECL|method|createPolicy (String str)
specifier|private
name|void
name|createPolicy
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|AllocationConfigurationException
block|{
comment|// Read and parse the allocations file.
name|Element
name|root
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DocumentBuilderFactory
name|docBuilderFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docBuilderFactory
operator|.
name|setIgnoringComments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|docBuilderFactory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|IOUtils
operator|.
name|toInputStream
argument_list|(
name|str
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|root
operator|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Don't really want to test the xml parsing side,
comment|// let it fail with a null config below.
block|}
name|QueuePlacementPolicy
operator|.
name|fromXml
argument_list|(
name|root
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
DECL|method|newAppSubmissionContext (String queue)
specifier|private
name|ApplicationSubmissionContext
name|newAppSubmissionContext
parameter_list|(
name|String
name|queue
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1L
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Priority
name|prio
init|=
name|Priority
operator|.
name|UNDEFINED
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ContainerLaunchContext
name|amContainer
init|=
name|ContainerLaunchContext
operator|.
name|newInstance
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|ApplicationSubmissionContext
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|"test"
argument_list|,
name|queue
argument_list|,
name|prio
argument_list|,
name|amContainer
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
name|resource
argument_list|,
literal|"testing"
argument_list|)
return|;
block|}
DECL|method|createQueue (FSQueueType type, String name)
specifier|private
name|void
name|createQueue
parameter_list|(
name|FSQueueType
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
comment|// Create a queue as if it is in the config.
name|FSQueue
name|queue
init|=
name|queueManager
operator|.
name|createQueue
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue not created"
argument_list|,
name|queue
argument_list|)
expr_stmt|;
comment|// walk up the list till we have a non dynamic queue
comment|// root is always non dynamic
do|do
block|{
name|queue
operator|.
name|setDynamic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|queue
operator|=
name|queue
operator|.
name|parent
expr_stmt|;
block|}
do|while
condition|(
name|queue
operator|.
name|isDynamic
argument_list|()
condition|)
do|;
block|}
block|}
end_class

end_unit

