begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
operator|.
name|QueueAdminConfigurationMutationACLPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|QueueConfigInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|webapp
operator|.
name|dao
operator|.
name|SchedConfUpdateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestConfigurationMutationACLPolicies
specifier|public
class|class
name|TestConfigurationMutationACLPolicies
block|{
DECL|field|policy
specifier|private
name|ConfigurationMutationACLPolicy
name|policy
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|scheduler
specifier|private
name|MutableConfScheduler
name|scheduler
decl_stmt|;
DECL|field|GOOD_USER
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|GOOD_USER
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"goodUser"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
DECL|field|BAD_USER
specifier|private
specifier|static
specifier|final
name|UserGroupInformation
name|BAD_USER
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"badUser"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
decl_stmt|;
DECL|field|EMPTY_MAP
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|EMPTY_MAP
init|=
name|Collections
operator|.
expr|<
name|String
decl_stmt|,
name|String
decl|>
name|emptyMap
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|rmContext
operator|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|mock
argument_list|(
name|MutableConfScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|mockQueue
argument_list|(
literal|"a"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|mockQueue
argument_list|(
literal|"b"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|mockQueue
argument_list|(
literal|"b1"
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
block|}
DECL|method|mockQueue (String queueName, MutableConfScheduler scheduler)
specifier|private
name|void
name|mockQueue
parameter_list|(
name|String
name|queueName
parameter_list|,
name|MutableConfScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
name|QueueInfo
name|queueInfo
init|=
name|QueueInfo
operator|.
name|newInstance
argument_list|(
name|queueName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
name|eq
argument_list|(
name|queueName
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueInfo
argument_list|)
expr_stmt|;
name|Queue
name|queue
init|=
name|mock
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|hasAccess
argument_list|(
name|eq
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
argument_list|,
name|eq
argument_list|(
name|GOOD_USER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|hasAccess
argument_list|(
name|eq
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
argument_list|,
name|eq
argument_list|(
name|BAD_USER
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scheduler
operator|.
name|getQueue
argument_list|(
name|eq
argument_list|(
name|queueName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultPolicy ()
specifier|public
name|void
name|testDefaultPolicy
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|GOOD_USER
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
argument_list|,
name|DefaultConfigurationMutationACLPolicy
operator|.
name|class
argument_list|,
name|ConfigurationMutationACLPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|policy
operator|=
name|ConfigurationMutationACLPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|GOOD_USER
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|BAD_USER
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueAdminBasedPolicy ()
specifier|public
name|void
name|testQueueAdminBasedPolicy
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
argument_list|,
name|QueueAdminConfigurationMutationACLPolicy
operator|.
name|class
argument_list|,
name|ConfigurationMutationACLPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|policy
operator|=
name|ConfigurationMutationACLPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|SchedConfUpdateInfo
name|updateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|QueueConfigInfo
name|configInfo
init|=
operator|new
name|QueueConfigInfo
argument_list|(
literal|"root.a"
argument_list|,
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|updateInfo
operator|.
name|getUpdateQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
name|configInfo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|GOOD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|BAD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueAdminPolicyAddQueue ()
specifier|public
name|void
name|testQueueAdminPolicyAddQueue
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
argument_list|,
name|QueueAdminConfigurationMutationACLPolicy
operator|.
name|class
argument_list|,
name|ConfigurationMutationACLPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|policy
operator|=
name|ConfigurationMutationACLPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// Add root.b.b1. Should check ACL of root.b queue.
name|SchedConfUpdateInfo
name|updateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|QueueConfigInfo
name|configInfo
init|=
operator|new
name|QueueConfigInfo
argument_list|(
literal|"root.b.b2"
argument_list|,
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|updateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
name|configInfo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|GOOD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|BAD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueAdminPolicyAddNestedQueue ()
specifier|public
name|void
name|testQueueAdminPolicyAddNestedQueue
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
argument_list|,
name|QueueAdminConfigurationMutationACLPolicy
operator|.
name|class
argument_list|,
name|ConfigurationMutationACLPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|policy
operator|=
name|ConfigurationMutationACLPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// Add root.b.b1.b11. Should check ACL of root.b queue.
name|SchedConfUpdateInfo
name|updateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|QueueConfigInfo
name|configInfo
init|=
operator|new
name|QueueConfigInfo
argument_list|(
literal|"root.b.b2.b21"
argument_list|,
name|EMPTY_MAP
argument_list|)
decl_stmt|;
name|updateInfo
operator|.
name|getAddQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
name|configInfo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|GOOD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|BAD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueAdminPolicyRemoveQueue ()
specifier|public
name|void
name|testQueueAdminPolicyRemoveQueue
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
argument_list|,
name|QueueAdminConfigurationMutationACLPolicy
operator|.
name|class
argument_list|,
name|ConfigurationMutationACLPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|policy
operator|=
name|ConfigurationMutationACLPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// Remove root.b.b1.
name|SchedConfUpdateInfo
name|updateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|updateInfo
operator|.
name|getRemoveQueueInfo
argument_list|()
operator|.
name|add
argument_list|(
literal|"root.b.b1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|GOOD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|BAD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueAdminPolicyGlobal ()
specifier|public
name|void
name|testQueueAdminPolicyGlobal
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|GOOD_USER
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MUTATION_ACL_POLICY_CLASS
argument_list|,
name|QueueAdminConfigurationMutationACLPolicy
operator|.
name|class
argument_list|,
name|ConfigurationMutationACLPolicy
operator|.
name|class
argument_list|)
expr_stmt|;
name|policy
operator|=
name|ConfigurationMutationACLPolicyFactory
operator|.
name|getPolicy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|policy
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|SchedConfUpdateInfo
name|updateInfo
init|=
operator|new
name|SchedConfUpdateInfo
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|GOOD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|BAD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
name|updateInfo
operator|.
name|getGlobalParams
argument_list|()
operator|.
name|put
argument_list|(
literal|"globalKey"
argument_list|,
literal|"globalValue"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|GOOD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|isMutationAllowed
argument_list|(
name|BAD_USER
argument_list|,
name|updateInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

