begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
package|;
end_package

begin_comment
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.constraint
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|AllocationTagNamespaceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test class for {@link AllocationTagNamespace}.  */
end_comment

begin_class
DECL|class|TestAllocationTagsNamespace
specifier|public
class|class
name|TestAllocationTagsNamespace
block|{
annotation|@
name|Test
DECL|method|testNamespaceParse ()
specifier|public
name|void
name|testNamespaceParse
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|AllocationTagNamespace
name|namespace
decl_stmt|;
name|String
name|namespaceStr
init|=
literal|"self"
decl_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|SELF
argument_list|,
name|namespace
operator|.
name|getNamespaceType
argument_list|()
argument_list|)
expr_stmt|;
name|namespaceStr
operator|=
literal|"not-self"
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|NOT_SELF
argument_list|,
name|namespace
operator|.
name|getNamespaceType
argument_list|()
argument_list|)
expr_stmt|;
name|namespaceStr
operator|=
literal|"all"
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|ALL
argument_list|,
name|namespace
operator|.
name|getNamespaceType
argument_list|()
argument_list|)
expr_stmt|;
name|namespaceStr
operator|=
literal|"app-label"
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|APP_LABEL
argument_list|,
name|namespace
operator|.
name|getNamespaceType
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationId
name|applicationId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|12345
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|namespaceStr
operator|=
literal|"app-id/"
operator|+
name|applicationId
operator|.
name|toString
argument_list|()
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|APP_ID
argument_list|,
name|namespace
operator|.
name|getNamespaceType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalid app-id namespace syntax, invalid app ID.
try|try
block|{
name|namespaceStr
operator|=
literal|"app-id/apppppp_12345_99999"
expr_stmt|;
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Parsing should fail as the given app ID is invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InvalidAllocationTagsQueryException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid application ID for app-id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Invalid app-id namespace syntax, missing app ID.
try|try
block|{
name|namespaceStr
operator|=
literal|"app-id"
expr_stmt|;
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Parsing should fail as the given namespace"
operator|+
literal|" is missing application ID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InvalidAllocationTagsQueryException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Missing the application ID in the namespace string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Invalid namespace type.
try|try
block|{
name|namespaceStr
operator|=
literal|"non_exist_ns"
expr_stmt|;
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Parsing should fail as the giving type is not supported."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|InvalidAllocationTagsQueryException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid namespace prefix"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNamespaceEvaluation ()
specifier|public
name|void
name|testNamespaceEvaluation
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|AllocationTagNamespace
name|namespace
decl_stmt|;
name|TargetApplications
name|targetApplications
decl_stmt|;
name|ApplicationId
name|app1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|10000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|app2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|10000
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationId
name|app3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|10000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationId
name|app4
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|10000
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationId
name|app5
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|10000
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// Ensure eval is called before using the scope.
name|String
name|namespaceStr
init|=
literal|"self"
decl_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
try|try
block|{
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Call getNamespaceScope before evaluate is not allowed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|IllegalStateException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Evaluate must be called before a namespace can be consumed."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|namespaceStr
operator|=
literal|"self"
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|targetApplications
operator|=
operator|new
name|TargetApplications
argument_list|(
name|app1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|app1
argument_list|)
argument_list|)
expr_stmt|;
name|namespace
operator|.
name|evaluate
argument_list|(
name|targetApplications
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app1
argument_list|,
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|namespaceStr
operator|=
literal|"not-self"
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|targetApplications
operator|=
operator|new
name|TargetApplications
argument_list|(
name|app1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|app1
argument_list|)
argument_list|)
expr_stmt|;
name|namespace
operator|.
name|evaluate
argument_list|(
name|targetApplications
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|targetApplications
operator|=
operator|new
name|TargetApplications
argument_list|(
name|app1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|app1
argument_list|,
name|app2
argument_list|,
name|app3
argument_list|)
argument_list|)
expr_stmt|;
name|namespace
operator|.
name|evaluate
argument_list|(
name|targetApplications
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
operator|.
name|contains
argument_list|(
name|app1
argument_list|)
argument_list|)
expr_stmt|;
name|namespaceStr
operator|=
literal|"all"
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|AllocationTagNamespaceType
operator|.
name|ALL
argument_list|,
name|namespace
operator|.
name|getNamespaceType
argument_list|()
argument_list|)
expr_stmt|;
name|namespaceStr
operator|=
literal|"app-id/"
operator|+
name|app2
operator|.
name|toString
argument_list|()
expr_stmt|;
name|namespace
operator|=
name|AllocationTagNamespace
operator|.
name|parse
argument_list|(
name|namespaceStr
argument_list|)
expr_stmt|;
name|targetApplications
operator|=
operator|new
name|TargetApplications
argument_list|(
name|app1
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|app1
argument_list|,
name|app2
argument_list|,
name|app3
argument_list|,
name|app4
argument_list|,
name|app5
argument_list|)
argument_list|)
expr_stmt|;
name|namespace
operator|.
name|evaluate
argument_list|(
name|targetApplications
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|app2
argument_list|,
name|namespace
operator|.
name|getNamespaceScope
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

