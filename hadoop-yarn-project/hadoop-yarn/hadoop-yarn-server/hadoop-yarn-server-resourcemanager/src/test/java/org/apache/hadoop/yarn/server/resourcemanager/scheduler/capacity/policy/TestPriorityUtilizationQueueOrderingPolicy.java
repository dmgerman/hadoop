begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.policy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueResourceQuotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestPriorityUtilizationQueueOrderingPolicy
specifier|public
class|class
name|TestPriorityUtilizationQueueOrderingPolicy
block|{
DECL|method|mockCSQueues (String[] queueNames, int[] priorities, float[] utilizations, String partition)
specifier|private
name|List
argument_list|<
name|CSQueue
argument_list|>
name|mockCSQueues
parameter_list|(
name|String
index|[]
name|queueNames
parameter_list|,
name|int
index|[]
name|priorities
parameter_list|,
name|float
index|[]
name|utilizations
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
comment|// sanity check
assert|assert
name|queueNames
operator|!=
literal|null
operator|&&
name|priorities
operator|!=
literal|null
operator|&&
name|utilizations
operator|!=
literal|null
operator|&&
name|queueNames
operator|.
name|length
operator|>
literal|0
operator|&&
name|queueNames
operator|.
name|length
operator|==
name|priorities
operator|.
name|length
operator|&&
name|priorities
operator|.
name|length
operator|==
name|utilizations
operator|.
name|length
assert|;
name|List
argument_list|<
name|CSQueue
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queueNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CSQueue
name|q
init|=
name|mock
argument_list|(
name|CSQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|QueueCapacities
name|qc
init|=
operator|new
name|QueueCapacities
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|qc
operator|.
name|setUsedCapacity
argument_list|(
name|partition
argument_list|,
name|utilizations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getQueueCapacities
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
name|priorities
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QueueResourceQuotas
name|qr
init|=
operator|new
name|QueueResourceQuotas
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|q
operator|.
name|getQueueResourceQuotas
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qr
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
DECL|method|verifyOrder (QueueOrderingPolicy orderingPolicy, String partition, String[] expectedOrder)
specifier|private
name|void
name|verifyOrder
parameter_list|(
name|QueueOrderingPolicy
name|orderingPolicy
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
index|[]
name|expectedOrder
parameter_list|)
block|{
name|Iterator
argument_list|<
name|CSQueue
argument_list|>
name|iter
init|=
name|orderingPolicy
operator|.
name|getAssignmentIterator
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CSQueue
name|q
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedOrder
index|[
name|i
index|]
argument_list|,
name|q
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
assert|assert
name|i
operator|==
name|expectedOrder
operator|.
name|length
assert|;
block|}
annotation|@
name|Test
DECL|method|testUtilizationOrdering ()
specifier|public
name|void
name|testUtilizationOrdering
parameter_list|()
block|{
name|PriorityUtilizationQueueOrderingPolicy
name|policy
init|=
operator|new
name|PriorityUtilizationQueueOrderingPolicy
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Case 1, one queue
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
expr_stmt|;
comment|// Case 2, 2 queues
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|0.0f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
comment|// Case 3, 3 queues
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|0.0f
block|,
literal|0.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
comment|// Case 4, 3 queues, ignore priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|0.0f
block|,
literal|0.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
comment|// Case 5, 3 queues, look at partition (default)
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|0.0f
block|,
literal|0.2f
block|}
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
comment|// Case 5, 3 queues, look at partition (x)
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|0.0f
block|,
literal|0.2f
block|}
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|"x"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
comment|// Case 6, 3 queues, with different accessibility to partition
name|List
argument_list|<
name|CSQueue
argument_list|>
name|queues
init|=
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|0.0f
block|,
literal|0.2f
block|}
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
comment|// a can access "x"
name|when
argument_list|(
name|queues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// c can access "x"
name|when
argument_list|(
name|queues
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|"x"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"c"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPriorityUtilizationOrdering ()
specifier|public
name|void
name|testPriorityUtilizationOrdering
parameter_list|()
block|{
name|PriorityUtilizationQueueOrderingPolicy
name|policy
init|=
operator|new
name|PriorityUtilizationQueueOrderingPolicy
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// Case 1, one queue
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
expr_stmt|;
comment|// Case 2, 2 queues, both under utilized, same priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.2f
block|,
literal|0.1f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
comment|// Case 3, 2 queues, both over utilized, same priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1.1f
block|,
literal|1.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Case 4, 2 queues, one under and one over, same priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|1.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Case 5, 2 queues, both over utilized, different priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1.1f
block|,
literal|1.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
comment|// Case 6, 2 queues, both under utilized, different priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|0.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
comment|// Case 7, 2 queues, one under utilized and one over utilized,
comment|// different priority (1)
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|1.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Case 8, 2 queues, one under utilized and one over utilized,
comment|// different priority (1)
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|1.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Case 9, 2 queues, one under utilized and one meet, different priority (1)
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|1.0f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Case 10, 2 queues, one under utilized and one meet, different priority (2)
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|1.0f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Case 11, 2 queues, one under utilized and one meet, same priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|0.1f
block|,
literal|1.0f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
comment|// Case 12, 2 queues, both meet, different priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1.0f
block|,
literal|1.0f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|}
argument_list|)
expr_stmt|;
comment|// Case 13, 5 queues, different priority
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1.2f
block|,
literal|1.0f
block|,
literal|0.2f
block|,
literal|1.1f
block|,
literal|0.2f
block|}
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"e"
block|,
literal|"c"
block|,
literal|"b"
block|,
literal|"a"
block|,
literal|"d"
block|}
argument_list|)
expr_stmt|;
comment|// Case 14, 5 queues, different priority, partition default;
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1.2f
block|,
literal|1.0f
block|,
literal|0.2f
block|,
literal|1.1f
block|,
literal|0.2f
block|}
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|""
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"e"
block|,
literal|"b"
block|,
literal|"a"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
expr_stmt|;
comment|// Case 15, 5 queues, different priority, partition x;
name|policy
operator|.
name|setQueues
argument_list|(
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1.2f
block|,
literal|1.0f
block|,
literal|0.2f
block|,
literal|1.1f
block|,
literal|0.2f
block|}
argument_list|,
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|"x"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"e"
block|,
literal|"c"
block|,
literal|"b"
block|,
literal|"a"
block|,
literal|"d"
block|}
argument_list|)
expr_stmt|;
comment|// Case 16, 5 queues, different priority, partition x; and different
comment|// accessibility
name|List
argument_list|<
name|CSQueue
argument_list|>
name|queues
init|=
name|mockCSQueues
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|3
block|}
argument_list|,
operator|new
name|float
index|[]
block|{
literal|1.2f
block|,
literal|1.0f
block|,
literal|0.2f
block|,
literal|1.1f
block|,
literal|0.2f
block|}
argument_list|,
literal|"x"
argument_list|)
decl_stmt|;
comment|// Only a/d has access to x
name|when
argument_list|(
name|queues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queues
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getAccessibleNodeLabels
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setQueues
argument_list|(
name|queues
argument_list|)
expr_stmt|;
name|verifyOrder
argument_list|(
name|policy
argument_list|,
literal|"x"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"d"
block|,
literal|"e"
block|,
literal|"c"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

