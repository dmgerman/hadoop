begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.policy
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFifoOrderingPolicyForPendingApps
specifier|public
class|class
name|TestFifoOrderingPolicyForPendingApps
block|{
annotation|@
name|Test
DECL|method|testFifoOrderingPolicyForPendingApps ()
specifier|public
name|void
name|testFifoOrderingPolicyForPendingApps
parameter_list|()
block|{
name|FifoOrderingPolicyForPendingApps
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|policy
init|=
operator|new
name|FifoOrderingPolicyForPendingApps
argument_list|<
name|MockSchedulableEntity
argument_list|>
argument_list|()
decl_stmt|;
name|MockSchedulableEntity
name|r1
init|=
operator|new
name|MockSchedulableEntity
argument_list|()
decl_stmt|;
name|MockSchedulableEntity
name|r2
init|=
operator|new
name|MockSchedulableEntity
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|policy
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setSerial
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setRecovering
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|policy
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|r1
operator|.
name|setRecovering
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|r2
operator|.
name|setSerial
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|r2
operator|.
name|setRecovering
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|policy
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Entities submitted with E1-Recovering, E2-Recovering, E3-Recovering, E4-not    * recovering, E5-not recovering.    * Expected Iterator Output : E-3 E-2 E-1 E-5 E-4    */
annotation|@
name|Test
DECL|method|testIterators ()
specifier|public
name|void
name|testIterators
parameter_list|()
block|{
name|OrderingPolicy
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|schedOrder
init|=
operator|new
name|FifoOrderingPolicyForPendingApps
argument_list|<
name|MockSchedulableEntity
argument_list|>
argument_list|()
decl_stmt|;
name|MockSchedulableEntity
name|msp1
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockSchedulableEntity
name|msp2
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockSchedulableEntity
name|msp3
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockSchedulableEntity
name|msp4
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockSchedulableEntity
name|msp5
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockSchedulableEntity
name|msp6
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockSchedulableEntity
name|msp7
init|=
operator|new
name|MockSchedulableEntity
argument_list|(
literal|7
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|schedOrder
operator|.
name|addSchedulableEntity
argument_list|(
name|msp1
argument_list|)
expr_stmt|;
name|schedOrder
operator|.
name|addSchedulableEntity
argument_list|(
name|msp2
argument_list|)
expr_stmt|;
name|schedOrder
operator|.
name|addSchedulableEntity
argument_list|(
name|msp3
argument_list|)
expr_stmt|;
name|schedOrder
operator|.
name|addSchedulableEntity
argument_list|(
name|msp4
argument_list|)
expr_stmt|;
name|schedOrder
operator|.
name|addSchedulableEntity
argument_list|(
name|msp5
argument_list|)
expr_stmt|;
name|schedOrder
operator|.
name|addSchedulableEntity
argument_list|(
name|msp6
argument_list|)
expr_stmt|;
name|schedOrder
operator|.
name|addSchedulableEntity
argument_list|(
name|msp7
argument_list|)
expr_stmt|;
comment|// Assignment with serial id's are 3,2,4,1,6,5,7
name|checkSerials
argument_list|(
name|schedOrder
operator|.
name|getAssignmentIterator
argument_list|()
argument_list|,
operator|new
name|long
index|[]
block|{
literal|3
block|,
literal|2
block|,
literal|4
block|,
literal|1
block|,
literal|6
block|,
literal|5
block|,
literal|7
block|}
argument_list|)
expr_stmt|;
comment|//Preemption, youngest to oldest
name|checkSerials
argument_list|(
name|schedOrder
operator|.
name|getPreemptionIterator
argument_list|()
argument_list|,
operator|new
name|long
index|[]
block|{
literal|7
block|,
literal|5
block|,
literal|6
block|,
literal|1
block|,
literal|4
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSerials (Iterator<MockSchedulableEntity> si, long[] serials)
specifier|public
name|void
name|checkSerials
parameter_list|(
name|Iterator
argument_list|<
name|MockSchedulableEntity
argument_list|>
name|si
parameter_list|,
name|long
index|[]
name|serials
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|serials
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|si
operator|.
name|next
argument_list|()
operator|.
name|getSerial
argument_list|()
argument_list|,
name|serials
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

