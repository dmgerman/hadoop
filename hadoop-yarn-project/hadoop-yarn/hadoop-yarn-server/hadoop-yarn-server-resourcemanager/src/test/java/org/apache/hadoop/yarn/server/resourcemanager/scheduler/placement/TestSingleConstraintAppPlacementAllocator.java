begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|AllocationTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionTypeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceSizing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|SchedulingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|resource
operator|.
name|PlacementConstraints
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|SchedulerInvalidResoureRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AppSchedulingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|SchedulingMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|AllocationTagsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|InvalidAllocationTagsQueryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|MemoryPlacementConstraintManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|constraint
operator|.
name|PlacementConstraintManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|SchedulerRequestKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|LongBinaryOperator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test behaviors of single constraint app placement allocator.  */
end_comment

begin_class
DECL|class|TestSingleConstraintAppPlacementAllocator
specifier|public
class|class
name|TestSingleConstraintAppPlacementAllocator
block|{
DECL|field|appSchedulingInfo
specifier|private
name|AppSchedulingInfo
name|appSchedulingInfo
decl_stmt|;
DECL|field|spyAllocationTagsManager
specifier|private
name|AllocationTagsManager
name|spyAllocationTagsManager
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|schedulerRequestKey
specifier|private
name|SchedulerRequestKey
name|schedulerRequestKey
decl_stmt|;
DECL|field|allocator
specifier|private
name|SingleConstraintAppPlacementAllocator
name|allocator
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// stub app scheduling info.
name|appSchedulingInfo
operator|=
name|mock
argument_list|(
name|AppSchedulingInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appSchedulingInfo
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TestUtils
operator|.
name|getMockApplicationId
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|appSchedulingInfo
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// stub RMContext
name|rmContext
operator|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
expr_stmt|;
comment|// Create allocation tags manager
name|AllocationTagsManager
name|allocationTagsManager
init|=
operator|new
name|AllocationTagsManager
argument_list|(
name|rmContext
argument_list|)
decl_stmt|;
name|PlacementConstraintManager
name|placementConstraintManager
init|=
operator|new
name|MemoryPlacementConstraintManager
argument_list|()
decl_stmt|;
name|spyAllocationTagsManager
operator|=
name|spy
argument_list|(
name|allocationTagsManager
argument_list|)
expr_stmt|;
name|schedulerRequestKey
operator|=
operator|new
name|SchedulerRequestKey
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|2L
argument_list|,
name|TestUtils
operator|.
name|getMockContainerId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setAllocationTagsManager
argument_list|(
name|spyAllocationTagsManager
argument_list|)
expr_stmt|;
name|rmContext
operator|.
name|setPlacementConstraintManager
argument_list|(
name|placementConstraintManager
argument_list|)
expr_stmt|;
comment|// Create allocator
name|allocator
operator|=
operator|new
name|SingleConstraintAppPlacementAllocator
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|initialize
argument_list|(
name|appSchedulingInfo
argument_list|,
name|schedulerRequestKey
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
DECL|method|assertValidSchedulingRequest ( SchedulingRequest schedulingRequest)
specifier|private
name|void
name|assertValidSchedulingRequest
parameter_list|(
name|SchedulingRequest
name|schedulingRequest
parameter_list|)
block|{
comment|// Create allocator to avoid fields polluted by previous runs
name|allocator
operator|=
operator|new
name|SingleConstraintAppPlacementAllocator
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|initialize
argument_list|(
name|appSchedulingInfo
argument_list|,
name|schedulerRequestKey
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|assertInvalidSchedulingRequest ( SchedulingRequest schedulingRequest, boolean recreateAllocator)
specifier|private
name|void
name|assertInvalidSchedulingRequest
parameter_list|(
name|SchedulingRequest
name|schedulingRequest
parameter_list|,
name|boolean
name|recreateAllocator
parameter_list|)
block|{
try|try
block|{
comment|// Create allocator
if|if
condition|(
name|recreateAllocator
condition|)
block|{
name|allocator
operator|=
operator|new
name|SingleConstraintAppPlacementAllocator
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|initialize
argument_list|(
name|appSchedulingInfo
argument_list|,
name|schedulerRequestKey
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerInvalidResoureRequestException
name|e
parameter_list|)
block|{
comment|// Expected
return|return;
block|}
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expect failure for schedulingRequest="
operator|+
name|schedulingRequest
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingRequestValidation ()
specifier|public
name|void
name|testSchedulingRequestValidation
parameter_list|()
block|{
comment|// Valid
name|assertValidSchedulingRequest
argument_list|(
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|allocator
operator|.
name|getTargetNodePartition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Valid (with partition)
name|assertValidSchedulingRequest
argument_list|(
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|"x"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"x"
argument_list|,
name|allocator
operator|.
name|getTargetNodePartition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Valid (without specifying node partition)
name|assertValidSchedulingRequest
argument_list|(
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|allocator
operator|.
name|getTargetNodePartition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Valid (with application Id target)
name|assertValidSchedulingRequest
argument_list|(
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocation tags should not include application Id
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|allocator
operator|.
name|getTargetNodePartition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalid (without sizing)
name|assertInvalidSchedulingRequest
argument_list|(
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Invalid (without target tags)
name|assertInvalidSchedulingRequest
argument_list|(
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Invalid (not GUARANTEED)
name|assertInvalidSchedulingRequest
argument_list|(
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingRequestUpdate ()
specifier|public
name|void
name|testSchedulingRequestUpdate
parameter_list|()
block|{
name|SchedulingRequest
name|schedulingRequest
init|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Update allocator with exactly same scheduling request, should succeeded.
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Update allocator with scheduling request different at #allocations,
comment|// should succeeded.
name|schedulingRequest
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|setNumAllocations
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Update allocator with scheduling request different at resource,
comment|// should failed.
name|schedulingRequest
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|setResources
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertInvalidSchedulingRequest
argument_list|(
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Update allocator with a different placement target (allocator tag),
comment|// should failed
name|schedulingRequest
operator|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetCardinality
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|assertInvalidSchedulingRequest
argument_list|(
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Update allocator with recover == true
name|int
name|existingNumAllocations
init|=
name|allocator
operator|.
name|getSchedulingRequest
argument_list|()
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|getNumAllocations
argument_list|()
decl_stmt|;
name|schedulingRequest
operator|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|existingNumAllocations
operator|+
literal|1
argument_list|,
name|allocator
operator|.
name|getSchedulingRequest
argument_list|()
operator|.
name|getResourceSizing
argument_list|()
operator|.
name|getNumAllocations
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFunctionality ()
specifier|public
name|void
name|testFunctionality
parameter_list|()
throws|throws
name|InvalidAllocationTagsQueryException
block|{
name|SchedulingRequest
name|schedulingRequest
init|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|""
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|canAllocate
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host1"
argument_list|,
literal|"/rack1"
argument_list|,
literal|123
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyAllocationTagsManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getNodeCardinalityByOp
argument_list|(
name|eq
argument_list|(
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"host1:123"
argument_list|)
argument_list|)
argument_list|,
name|any
argument_list|(
name|AllocationTags
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|LongBinaryOperator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|allocator
operator|=
operator|new
name|SingleConstraintAppPlacementAllocator
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|initialize
argument_list|(
name|appSchedulingInfo
argument_list|,
name|schedulerRequestKey
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
comment|// Valid (with partition)
name|schedulingRequest
operator|=
name|SchedulingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|executionType
argument_list|(
name|ExecutionTypeRequest
operator|.
name|newInstance
argument_list|(
name|ExecutionType
operator|.
name|GUARANTEED
argument_list|)
argument_list|)
operator|.
name|allocationRequestId
argument_list|(
literal|10L
argument_list|)
operator|.
name|priority
argument_list|(
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|placementConstraintExpression
argument_list|(
name|PlacementConstraints
operator|.
name|targetNotIn
argument_list|(
name|PlacementConstraints
operator|.
name|NODE
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|allocationTag
argument_list|(
literal|"mapper"
argument_list|,
literal|"reducer"
argument_list|)
argument_list|,
name|PlacementConstraints
operator|.
name|PlacementTargets
operator|.
name|nodePartition
argument_list|(
literal|"x"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|resourceSizing
argument_list|(
name|ResourceSizing
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|allocator
operator|.
name|updatePendingAsk
argument_list|(
name|schedulerRequestKey
argument_list|,
name|schedulingRequest
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|allocator
operator|.
name|canAllocate
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|TestUtils
operator|.
name|getMockNode
argument_list|(
literal|"host1"
argument_list|,
literal|"/rack1"
argument_list|,
literal|123
argument_list|,
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyAllocationTagsManager
argument_list|,
name|Mockito
operator|.
name|atLeast
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getNodeCardinalityByOp
argument_list|(
name|eq
argument_list|(
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"host1:123"
argument_list|)
argument_list|)
argument_list|,
name|any
argument_list|(
name|AllocationTags
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|LongBinaryOperator
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerNode
name|node1
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node1
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"host1:123"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|allocator
operator|.
name|precheckNode
argument_list|(
name|node1
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
name|SchedulerNode
name|node2
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|node1
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"host2:123"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|allocator
operator|.
name|precheckNode
argument_list|(
name|node2
argument_list|,
name|SchedulingMode
operator|.
name|RESPECT_PARTITION_EXCLUSIVITY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

