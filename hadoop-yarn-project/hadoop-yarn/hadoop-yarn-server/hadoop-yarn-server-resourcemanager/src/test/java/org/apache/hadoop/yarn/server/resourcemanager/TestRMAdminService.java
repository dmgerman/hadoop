begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ServiceAuthorizationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetClusterNodeLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|DecommissionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeAttributeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AddToClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AttributeMappingOperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodeToAttributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NodesToAttributesMappingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshClusterMaxPriorityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshNodesResourcesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshServiceAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshUserToGroupsMappingsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RemoveFromClusterNodeLabelsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReplaceLabelsOnNodeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|AddToClusterNodeLabelsRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|DynamicResourceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|RM_PROXY_USER_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|DynamicResourceConfiguration
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|DynamicResourceConfiguration
operator|.
name|PREFIX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|nodelabels
operator|.
name|NodeAttributesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|proto
operator|.
name|YarnServerResourceManagerServiceProtos
operator|.
name|AddToClusterNodeLabelsRequestProto
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
DECL|class|TestRMAdminService
specifier|public
class|class
name|TestRMAdminService
block|{
DECL|field|configuration
specifier|private
name|Configuration
name|configuration
decl_stmt|;
empty_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|workingPath
specifier|private
name|Path
name|workingPath
decl_stmt|;
DECL|field|tmpDir
specifier|private
name|Path
name|tmpDir
decl_stmt|;
static|static
block|{
name|YarnConfiguration
operator|.
name|addDefaultResource
argument_list|(
name|YarnConfiguration
operator|.
name|CS_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
name|YarnConfiguration
operator|.
name|addDefaultResource
argument_list|(
name|YarnConfiguration
operator|.
name|DR_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|workingPath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-remoteDir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_BASED_RM_CONF_STORE
argument_list|,
name|workingPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tmpDir
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|workingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
comment|// reset the groups to what it default test settings
name|MockUnixGroupsMapping
operator|.
name|resetGroups
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|workingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAdminRefreshQueuesWithLocalConfigurationProvider ()
specifier|public
name|void
name|testAdminRefreshQueuesWithLocalConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|int
name|maxAppsBefore
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAppsBefore
argument_list|,
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAdminRefreshQueuesWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testAdminRefreshQueuesWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|int
name|maxAppsBefore
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_SYSTEM_APPLICATIONS
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|csConf
argument_list|,
literal|"capacity-scheduler.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxAppsAfter
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAppsAfter
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|maxAppsAfter
operator|!=
name|maxAppsBefore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAdminRefreshQueuesWithMutableSchedulerConfiguration ()
specifier|public
name|void
name|testAdminRefreshQueuesWithMutableSchedulerConfiguration
parameter_list|()
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|SCHEDULER_CONFIGURATION_STORE_CLASS
argument_list|,
name|YarnConfiguration
operator|.
name|MEMORY_CONFIGURATION_STORE
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception while calling refreshQueues when scheduler"
operator|+
literal|" configuration is mutable."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Scheduler configuration is "
operator|+
literal|"mutable. refreshQueues is not allowed in this scenario."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAdminRefreshNodesWithoutConfiguration ()
specifier|public
name|void
name|testAdminRefreshNodesWithoutConfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|// upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshNodesResources
argument_list|(
name|RefreshNodesResourcesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions even when no configurations "
operator|+
literal|"are done for node resources refresh"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesResourceWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testRefreshNodesResourceWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|nid
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"h1:1234"
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|ni
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:5120, vCores:5>"
argument_list|,
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DynamicResourceConfiguration
name|drConf
init|=
operator|new
name|DynamicResourceConfiguration
argument_list|()
decl_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|NODES
argument_list|,
literal|"h1:1234"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.vcores"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.memory"
argument_list|,
literal|"4096"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|drConf
argument_list|,
literal|"dynamic-resources.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshNodesResources
argument_list|(
name|RefreshNodesResourcesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|RMNode
name|niAfter
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resourceAfter
init|=
name|niAfter
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:4096, vCores:4>"
argument_list|,
name|resourceAfter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesResourceWithResourceReturnInRegistration ()
specifier|public
name|void
name|testRefreshNodesResourceWithResourceReturnInRegistration
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|2048
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|nid
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"h1:1234"
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|ni
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:2048, vCores:2>"
argument_list|,
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DynamicResourceConfiguration
name|drConf
init|=
operator|new
name|DynamicResourceConfiguration
argument_list|()
decl_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|NODES
argument_list|,
literal|"h1:1234"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.vcores"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.memory"
argument_list|,
literal|"4096"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|drConf
argument_list|,
literal|"dynamic-resources.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshNodesResources
argument_list|(
name|RefreshNodesResourcesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// register the same node again with original resource.
comment|// validate this will get new resource back;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|RMNode
name|niAfter
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resourceAfter
init|=
name|niAfter
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:4096, vCores:4>"
argument_list|,
name|resourceAfter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|nm
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nm
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesResourceWithResourceReturnInHeartbeat ()
specifier|public
name|void
name|testRefreshNodesResourceWithResourceReturnInHeartbeat
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|nm
operator|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|2048
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|nid
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"h1:1234"
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|ni
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:2048, vCores:2>"
argument_list|,
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DynamicResourceConfiguration
name|drConf
init|=
operator|new
name|DynamicResourceConfiguration
argument_list|()
decl_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|NODES
argument_list|,
literal|"h1:1234"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.vcores"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.memory"
argument_list|,
literal|"4096"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|drConf
argument_list|,
literal|"dynamic-resources.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshNodesResources
argument_list|(
name|RefreshNodesResourcesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// NM-RM heartbeat, validate that this will get new resource back.
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|RMNode
name|niAfter
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resourceAfter
init|=
name|niAfter
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:4096, vCores:4>"
argument_list|,
name|resourceAfter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|nm
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nm
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourcePersistentForNMRegistrationWithNewResource ()
specifier|public
name|void
name|testResourcePersistentForNMRegistrationWithNewResource
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|5120
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|nid
init|=
name|NodeId
operator|.
name|fromString
argument_list|(
literal|"h1:1234"
argument_list|)
decl_stmt|;
name|RMNode
name|ni
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|ni
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:5120, vCores:5>"
argument_list|,
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DynamicResourceConfiguration
name|drConf
init|=
operator|new
name|DynamicResourceConfiguration
argument_list|()
decl_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
name|NODES
argument_list|,
literal|"h1:1234"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.vcores"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|drConf
operator|.
name|set
argument_list|(
name|PREFIX
operator|+
literal|"h1:1234.memory"
argument_list|,
literal|"4096"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|drConf
argument_list|,
literal|"dynamic-resources.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshNodesResources
argument_list|(
name|RefreshNodesResourcesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// register the same node again with a different resource.
comment|// validate this won't work as resource cached in RM side.
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8192
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|RMNode
name|niAfter
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
decl_stmt|;
name|Resource
name|resourceAfter
init|=
name|niAfter
operator|.
name|getTotalCapability
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:4096, vCores:4>"
argument_list|,
name|resourceAfter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Replace original dr file with an empty dr file, and validate node
comment|// registration with new resources will take effective now.
name|deleteOnRemoteFileSystem
argument_list|(
literal|"dynamic-resources.xml"
argument_list|)
expr_stmt|;
name|DynamicResourceConfiguration
name|emptyDRConf
init|=
operator|new
name|DynamicResourceConfiguration
argument_list|()
decl_stmt|;
name|uploadConfiguration
argument_list|(
name|emptyDRConf
argument_list|,
literal|"dynamic-resources.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshNodesResources
argument_list|(
name|RefreshNodesResourcesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
comment|// register the same node third time, this time the register resource
comment|// should work.
name|rm
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8192
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|niAfter
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nid
argument_list|)
expr_stmt|;
name|resourceAfter
operator|=
name|niAfter
operator|.
name|getTotalCapability
argument_list|()
expr_stmt|;
comment|// new resource in registration should take effective as we empty
comment|// dynamic resource file already.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"<memory:8192, vCores:8>"
argument_list|,
name|resourceAfter
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAdminAclsWithLocalConfigurationProvider ()
specifier|public
name|void
name|testAdminAclsWithLocalConfigurationProvider
parameter_list|()
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshAdminAcls
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAdminAclsWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testAdminAclsWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|String
name|aclStringBefore
init|=
name|rm
operator|.
name|adminService
operator|.
name|getAccessControlList
argument_list|()
operator|.
name|getAclString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"world:anyone:rwcda"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshAdminAcls
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|aclStringAfter
init|=
name|rm
operator|.
name|adminService
operator|.
name|getAccessControlList
argument_list|()
operator|.
name|getAclString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|aclStringAfter
operator|.
name|equals
argument_list|(
name|aclStringBefore
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclStringAfter
argument_list|,
literal|"world:anyone:rwcda,"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testServiceAclsRefreshWithLocalConfigurationProvider ()
specifier|public
name|void
name|testServiceAclsRefreshWithLocalConfigurationProvider
parameter_list|()
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ResourceManager
name|resourceManager
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|adminService
operator|.
name|refreshServiceAcls
argument_list|(
name|RefreshServiceAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testServiceAclsRefreshWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testServiceAclsRefreshWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|ResourceManager
name|resourceManager
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|conf
argument_list|,
literal|"core-site.xml"
argument_list|)
expr_stmt|;
try|try
block|{
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|String
name|aclsString
init|=
literal|"alice,bob users,wheel"
decl_stmt|;
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
literal|"security.applicationclient.protocol.acl"
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|newConf
argument_list|,
literal|"hadoop-policy.xml"
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|adminService
operator|.
name|refreshServiceAcls
argument_list|(
name|RefreshServiceAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify service Acls refresh for AdminService
name|ServiceAuthorizationManager
name|adminServiceServiceManager
init|=
name|resourceManager
operator|.
name|adminService
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|adminServiceServiceManager
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
comment|// verify service ACLs refresh for ClientRMService
name|ServiceAuthorizationManager
name|clientRMServiceServiceManager
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|clientRMServiceServiceManager
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
comment|// verify service ACLs refresh for ApplicationMasterService
name|ServiceAuthorizationManager
name|appMasterService
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|appMasterService
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
comment|// verify service ACLs refresh for ResourceTrackerService
name|ServiceAuthorizationManager
name|RTService
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|RTService
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|verifyServiceACLsRefresh (ServiceAuthorizationManager manager, Class<?> protocol, String aclString)
specifier|private
name|void
name|verifyServiceACLsRefresh
parameter_list|(
name|ServiceAuthorizationManager
name|manager
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|protocol
parameter_list|,
name|String
name|aclString
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|protocolClass
range|:
name|manager
operator|.
name|getProtocolsWithAcls
argument_list|()
control|)
block|{
name|AccessControlList
name|accessList
init|=
name|manager
operator|.
name|getProtocolsAcls
argument_list|(
name|protocolClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocolClass
operator|==
name|protocol
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|accessList
operator|.
name|getAclString
argument_list|()
argument_list|,
name|aclString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|accessList
operator|.
name|getAclString
argument_list|()
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testRefreshSuperUserGroupsWithLocalConfigurationProvider ()
name|testRefreshSuperUserGroupsWithLocalConfigurationProvider
parameter_list|()
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testRefreshSuperUserGroupsWithFileSystemBasedConfigurationProvider ()
name|testRefreshSuperUserGroupsWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|//upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|coreConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|coreConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|,
literal|"test_groups"
argument_list|)
expr_stmt|;
name|coreConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|,
literal|"test_hosts"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|coreConf
argument_list|,
literal|"core-site.xml"
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_groups"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_hosts"
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|yarnConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|RM_PROXY_USER_PREFIX
operator|+
literal|"test.groups"
argument_list|,
literal|"test_groups_1"
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|RM_PROXY_USER_PREFIX
operator|+
literal|"test.hosts"
argument_list|,
literal|"test_hosts_1"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
comment|// RM specific configs will overwrite the common ones
name|rm
operator|.
name|adminService
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_groups_1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_hosts_1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshUserToGroupsMappingsWithLocalConfigurationProvider ()
specifier|public
name|void
name|testRefreshUserToGroupsMappingsWithLocalConfigurationProvider
parameter_list|()
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshUserToGroupsMappings
argument_list|(
name|RefreshUserToGroupsMappingsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider ()
name|testRefreshUserToGroupsMappingsWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|String
index|[]
name|defaultTestUserGroups
init|=
block|{
literal|"dummy_group1"
block|,
literal|"dummy_group2"
block|}
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
literal|"dummyUser"
argument_list|,
name|defaultTestUserGroups
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|ugi
operator|.
name|getUserName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groupWithInit
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ugi
operator|.
name|getGroupNames
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|groupWithInit
operator|.
name|add
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|MockUnixGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|conf
argument_list|,
literal|"core-site.xml"
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
comment|// Make sure RM will use the updated GroupMappingServiceProvider
name|Groups
operator|.
name|getUserToGroupsMappingServiceWithLoadedConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groupBefore
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|configuration
argument_list|)
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|groupBefore
operator|.
name|contains
argument_list|(
literal|"test_group_A"
argument_list|)
operator|&&
name|groupBefore
operator|.
name|contains
argument_list|(
literal|"test_group_B"
argument_list|)
operator|&&
name|groupBefore
operator|.
name|contains
argument_list|(
literal|"test_group_C"
argument_list|)
operator|&&
name|groupBefore
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|groupWithInit
operator|.
name|size
argument_list|()
operator|!=
name|groupBefore
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|groupWithInit
operator|.
name|contains
argument_list|(
literal|"test_group_A"
argument_list|)
operator|||
name|groupWithInit
operator|.
name|contains
argument_list|(
literal|"test_group_B"
argument_list|)
operator|||
name|groupWithInit
operator|.
name|contains
argument_list|(
literal|"test_group_C"
argument_list|)
argument_list|)
expr_stmt|;
comment|// update the groups
name|MockUnixGroupsMapping
operator|.
name|updateGroups
argument_list|()
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshUserToGroupsMappings
argument_list|(
name|RefreshUserToGroupsMappingsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groupAfter
init|=
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|configuration
argument_list|)
operator|.
name|getGroups
argument_list|(
name|user
argument_list|)
decl_stmt|;
comment|// should get the updated groups
name|Assert
operator|.
name|assertTrue
argument_list|(
name|groupAfter
operator|.
name|contains
argument_list|(
literal|"test_group_D"
argument_list|)
operator|&&
name|groupAfter
operator|.
name|contains
argument_list|(
literal|"test_group_E"
argument_list|)
operator|&&
name|groupAfter
operator|.
name|contains
argument_list|(
literal|"test_group_F"
argument_list|)
operator|&&
name|groupAfter
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesWithLocalConfigurationProvider ()
specifier|public
name|void
name|testRefreshNodesWithLocalConfigurationProvider
parameter_list|()
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshNodesWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testRefreshNodesWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|// upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|File
name|excludeHostsFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"excludeHosts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeHostsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|excludeHostsFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeHostsFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Can not create "
operator|+
literal|"excludeHosts"
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|excludeHostsFile
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"0.0.0.0:123"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|uploadToRemoteFileSystem
argument_list|(
operator|new
name|Path
argument_list|(
name|excludeHostsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|this
operator|.
name|workingPath
operator|+
literal|"/excludeHosts"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
name|YarnConfiguration
operator|.
name|YARN_SITE_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshNodes
argument_list|(
name|RefreshNodesRequest
operator|.
name|newInstance
argument_list|(
name|DecommissionType
operator|.
name|NORMAL
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludeHosts
init|=
name|rm
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|getHostsReader
argument_list|()
operator|.
name|getExcludedHosts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|excludeHosts
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|excludeHosts
operator|.
name|contains
argument_list|(
literal|"0.0.0.0:123"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMHAWithFileSystemBasedConfiguration ()
specifier|public
name|void
name|testRMHAWithFileSystemBasedConfiguration
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|updateConfigurationForRMHA
argument_list|()
expr_stmt|;
name|Configuration
name|conf1
init|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|Configuration
name|conf2
init|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|conf2
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm2"
argument_list|)
expr_stmt|;
comment|// upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|;
name|MockRM
name|rm2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|conf2
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|init
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_SYSTEM_APPLICATIONS
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|csConf
argument_list|,
literal|"capacity-scheduler.xml"
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|adminService
operator|.
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxApps
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxApps
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// Before failover happens, the maxApps is
comment|// still the default value on the standby rm : rm2
name|int
name|maxAppsBeforeFailOver
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAppsBeforeFailOver
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// Do the failover
name|rm1
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|int
name|maxAppsAfter
init|=
operator|(
operator|(
name|CapacityScheduler
operator|)
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|)
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAppsAfter
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rm2
operator|!=
literal|null
condition|)
block|{
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test that a configuration with no leader election configured fails.    */
annotation|@
name|Test
DECL|method|testHAConfWithoutLeaderElection ()
specifier|public
name|void
name|testHAConfWithoutLeaderElection
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_EMBEDDED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|CURATOR_LEADER_ELECTOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|int
name|base
init|=
literal|100
decl_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|configuration
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0:"
operator|+
operator|(
name|base
operator|+
literal|20
operator|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.0:"
operator|+
operator|(
name|base
operator|+
literal|40
operator|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|base
operator|*
literal|2
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|checkBadConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a configuration with a single RM fails.    */
annotation|@
name|Test
DECL|method|testHAConfWithSingleRMID ()
specifier|public
name|void
name|testHAConfWithSingleRMID
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_EMBEDDED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|int
name|base
init|=
literal|100
decl_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|configuration
argument_list|)
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0:"
operator|+
operator|(
name|base
operator|+
literal|20
operator|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|base
operator|*
literal|2
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|checkBadConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a configuration with no service information fails.    */
annotation|@
name|Test
DECL|method|testHAConfWithoutServiceInfo ()
specifier|public
name|void
name|testHAConfWithoutServiceInfo
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_EMBEDDED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|checkBadConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRMStartsWithoutConfigurationFilesProvided ()
specifier|public
name|void
name|testRMStartsWithoutConfigurationFilesProvided
parameter_list|()
block|{
comment|// enable FileSystemBasedConfigurationProvider without uploading
comment|// any configuration files into Remote File System.
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|// The configurationProvider will return NULL instead of
comment|// throwing out Exceptions, if there are no configuration files provided.
comment|// RM will not load the remote Configuration files,
comment|// and should start successfully.
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRMInitialsWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testRMInitialsWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
comment|// upload configurations
specifier|final
name|File
name|excludeHostsFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
literal|"excludeHosts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeHostsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|excludeHostsFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|excludeHostsFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Can not create "
operator|+
literal|"excludeHosts"
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|fileWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|excludeHostsFile
argument_list|)
decl_stmt|;
name|fileWriter
operator|.
name|write
argument_list|(
literal|"0.0.0.0:123"
argument_list|)
expr_stmt|;
name|fileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|uploadToRemoteFileSystem
argument_list|(
operator|new
name|Path
argument_list|(
name|excludeHostsFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"world:anyone:rwcda"
argument_list|)
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_NODES_EXCLUDE_FILE_PATH
argument_list|,
name|this
operator|.
name|workingPath
operator|+
literal|"/excludeHosts"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|set
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_SYSTEM_APPLICATIONS
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|csConf
argument_list|,
literal|"capacity-scheduler.xml"
argument_list|)
expr_stmt|;
name|String
name|aclsString
init|=
literal|"alice,bob users,wheel"
decl_stmt|;
name|Configuration
name|newConf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|newConf
operator|.
name|set
argument_list|(
literal|"security.applicationclient.protocol.acl"
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|newConf
argument_list|,
literal|"hadoop-policy.xml"
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|,
literal|"test_groups"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|,
literal|"test_hosts"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|MockUnixGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|conf
argument_list|,
literal|"core-site.xml"
argument_list|)
expr_stmt|;
comment|// update the groups
name|MockUnixGroupsMapping
operator|.
name|updateGroups
argument_list|()
expr_stmt|;
name|ResourceManager
name|resourceManager
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
comment|// validate values for excludeHosts
name|Set
argument_list|<
name|String
argument_list|>
name|excludeHosts
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodesListManager
argument_list|()
operator|.
name|getHostsReader
argument_list|()
operator|.
name|getExcludedHosts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|excludeHosts
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|excludeHosts
operator|.
name|contains
argument_list|(
literal|"0.0.0.0:123"
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate values for admin-acls
name|String
name|aclStringAfter
init|=
name|resourceManager
operator|.
name|adminService
operator|.
name|getAccessControlList
argument_list|()
operator|.
name|getAclString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclStringAfter
argument_list|,
literal|"world:anyone:rwcda,"
operator|+
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate values for queue configuration
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|int
name|maxAppsAfter
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAppsAfter
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// verify service Acls for AdminService
name|ServiceAuthorizationManager
name|adminServiceServiceManager
init|=
name|resourceManager
operator|.
name|adminService
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|adminServiceServiceManager
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
comment|// verify service ACLs for ClientRMService
name|ServiceAuthorizationManager
name|clientRMServiceServiceManager
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|clientRMServiceServiceManager
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
comment|// verify service ACLs for ApplicationMasterService
name|ServiceAuthorizationManager
name|appMasterService
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|appMasterService
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
comment|// verify service ACLs for ResourceTrackerService
name|ServiceAuthorizationManager
name|RTService
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getResourceTrackerService
argument_list|()
operator|.
name|getServer
argument_list|()
operator|.
name|getServiceAuthorizationManager
argument_list|()
decl_stmt|;
name|verifyServiceACLsRefresh
argument_list|(
name|RTService
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationClientProtocolPB
operator|.
name|class
argument_list|,
name|aclsString
argument_list|)
expr_stmt|;
comment|// verify ProxyUsers and ProxyHosts
name|ProxyUsers
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_groups"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getDefaultImpersonationProvider
argument_list|()
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_hosts"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify UserToGroupsMappings
name|Groups
operator|.
name|getUserToGroupsMappingServiceWithLoadedConfiguration
argument_list|(
name|conf
argument_list|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|groupAfter
init|=
name|Groups
operator|.
name|getUserToGroupsMappingService
argument_list|(
name|configuration
argument_list|)
operator|.
name|getGroups
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|groupAfter
operator|.
name|contains
argument_list|(
literal|"test_group_D"
argument_list|)
operator|&&
name|groupAfter
operator|.
name|contains
argument_list|(
literal|"test_group_E"
argument_list|)
operator|&&
name|groupAfter
operator|.
name|contains
argument_list|(
literal|"test_group_F"
argument_list|)
operator|&&
name|groupAfter
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/* For verifying fix for YARN-3804 */
annotation|@
name|Test
DECL|method|testRefreshAclWithDaemonUser ()
specifier|public
name|void
name|testRefreshAclWithDaemonUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|daemonUser
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|daemonUser
operator|+
literal|"xyz"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not get any exceptions"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|daemonUser
operator|+
literal|"xyz,"
operator|+
name|daemonUser
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getAccessControlList
argument_list|()
operator|.
name|getAclString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|yarnConf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
name|daemonUser
operator|+
literal|"abc"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshAdminAcls
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessControlException
condition|)
block|{
name|fail
argument_list|(
literal|"Refresh should not have failed due to incorrect ACL"
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
name|assertEquals
argument_list|(
name|daemonUser
operator|+
literal|"abc,"
operator|+
name|daemonUser
argument_list|,
name|rm
operator|.
name|adminService
operator|.
name|getAccessControlList
argument_list|()
operator|.
name|getAclString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyLabelsOnNodesWithDistributedConfigurationDisabled ()
specifier|public
name|void
name|testModifyLabelsOnNodesWithDistributedConfigurationDisabled
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// create RM and set it's ACTIVE
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
operator|(
operator|(
name|RMContextImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|)
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|labelMgr
init|=
name|rm
operator|.
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
comment|// by default, distributed configuration for node label is disabled, this
comment|// should pass
name|labelMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testModifyLabelsOnNodesWithCentralizedConfigurationDisabled ()
specifier|public
name|void
name|testModifyLabelsOnNodesWithCentralizedConfigurationDisabled
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// create RM and set it's ACTIVE, and set distributed node label
comment|// configuration to true
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|isCentralizedNodeLabelConfiguration
operator|=
literal|false
expr_stmt|;
operator|(
operator|(
name|RMContextImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|)
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|labelMgr
init|=
name|rm
operator|.
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
comment|// by default, distributed configuration for node label is disabled, this
comment|// should pass
name|labelMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyLabelsOnUnknownNodes ()
specifier|public
name|void
name|testModifyLabelsOnUnknownNodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// create RM and set it's ACTIVE, and set distributed node label
comment|// configuration to true
name|rm
operator|=
operator|new
name|MockRM
argument_list|()
expr_stmt|;
operator|(
operator|(
name|RMContextImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|)
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|setActiveAndInactiveNodes
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|labelMgr
init|=
name|rm
operator|.
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
comment|// by default, distributed configuration for node label is disabled, this
comment|// should pass
name|labelMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
comment|// replace known node
name|ReplaceLabelsOnNodeRequest
name|request1
init|=
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1111
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request1
operator|.
name|setFailOnUnknownNodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should not fail on known node"
argument_list|)
expr_stmt|;
block|}
comment|// replace known node with wildcard port
name|ReplaceLabelsOnNodeRequest
name|request2
init|=
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request2
operator|.
name|setFailOnUnknownNodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should not fail on known node"
argument_list|)
expr_stmt|;
block|}
comment|// replace unknown node
name|ReplaceLabelsOnNodeRequest
name|request3
init|=
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host5"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request3
operator|.
name|setFailOnUnknownNodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail on unknown node"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
comment|// replace known node but wrong port
name|ReplaceLabelsOnNodeRequest
name|request4
init|=
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|1111
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request4
operator|.
name|setFailOnUnknownNodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request4
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail on node with wrong port"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{     }
comment|// replace non-exist node but not check
name|ReplaceLabelsOnNodeRequest
name|request5
init|=
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host5"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request5
operator|.
name|setFailOnUnknownNodes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not fail on unknown node when "
operator|+
literal|"fail-on-unkown-nodes is set false"
argument_list|)
expr_stmt|;
block|}
comment|// replace on inactive node
name|ReplaceLabelsOnNodeRequest
name|request6
init|=
name|ReplaceLabelsOnNodeRequest
operator|.
name|newInstance
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host4"
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|request6
operator|.
name|setFailOnUnknownNodes
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|replaceLabelsOnNode
argument_list|(
name|request6
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should not fail on inactive node"
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveClusterNodeLabelsWithCentralizedConfigurationDisabled ()
specifier|public
name|void
name|testRemoveClusterNodeLabelsWithCentralizedConfigurationDisabled
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
comment|// create RM and set it's ACTIVE
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
operator|(
operator|(
name|RMContextImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|)
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|RMNodeLabelsManager
name|labelMgr
init|=
name|rm
operator|.
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
decl_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|isCentralizedNodeLabelConfiguration
operator|=
literal|false
expr_stmt|;
comment|// by default, distributed configuration for node label is disabled, this
comment|// should pass
name|labelMgr
operator|.
name|addToCluserNodeLabelsWithDefaultExclusivity
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|removeFromClusterNodeLabels
argument_list|(
name|RemoveFromClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|(
operator|(
name|Set
argument_list|<
name|String
argument_list|>
operator|)
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"x"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|clusterNodeLabels
init|=
name|labelMgr
operator|.
name|getClusterNodeLabelNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clusterNodeLabels
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAdminRefreshClusterMaxPriority ()
specifier|public
name|void
name|testAdminRefreshClusterMaxPriority
parameter_list|()
throws|throws
name|Exception
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cs
operator|.
name|getMaxClusterLevelAppPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|yarnConf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshClusterMaxPriority
argument_list|(
name|RefreshClusterMaxPriorityRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cs
operator|.
name|getMaxClusterLevelAppPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not refresh cluster max priority."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeConfigurationXML (Configuration conf, String confXMLName)
specifier|private
name|String
name|writeConfigurationXML
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confXMLName
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|File
name|confFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
name|confXMLName
argument_list|)
decl_stmt|;
if|if
condition|(
name|confFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|confFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|confFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Can not create "
operator|+
name|confXMLName
argument_list|)
expr_stmt|;
block|}
name|output
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|confFile
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|confFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|uploadToRemoteFileSystem (Path filePath)
specifier|private
name|void
name|uploadToRemoteFileSystem
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|filePath
argument_list|,
name|workingPath
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadConfiguration (Configuration conf, String confFileName)
specifier|private
name|void
name|uploadConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confFileName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|csConfFile
init|=
name|writeConfigurationXML
argument_list|(
name|conf
argument_list|,
name|confFileName
argument_list|)
decl_stmt|;
comment|// upload the file into Remote File System
name|uploadToRemoteFileSystem
argument_list|(
operator|new
name|Path
argument_list|(
name|csConfFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteOnRemoteFileSystem (String fileName)
specifier|private
name|void
name|deleteOnRemoteFileSystem
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|workingPath
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|uploadDefaultConfiguration ()
specifier|private
name|void
name|uploadDefaultConfiguration
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|uploadConfiguration
argument_list|(
name|conf
argument_list|,
literal|"core-site.xml"
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|uploadConfiguration
argument_list|(
name|csConf
argument_list|,
literal|"capacity-scheduler.xml"
argument_list|)
expr_stmt|;
name|Configuration
name|hadoopPolicyConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|hadoopPolicyConf
operator|.
name|addResource
argument_list|(
name|YarnConfiguration
operator|.
name|HADOOP_POLICY_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
name|uploadConfiguration
argument_list|(
name|hadoopPolicyConf
argument_list|,
literal|"hadoop-policy.xml"
argument_list|)
expr_stmt|;
block|}
DECL|class|MockUnixGroupsMapping
specifier|private
specifier|static
class|class
name|MockUnixGroupsMapping
implements|implements
name|GroupMappingServiceProvider
block|{
DECL|field|group
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|group
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|getGroups (String user)
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGroups
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|group
return|;
block|}
annotation|@
name|Override
DECL|method|cacheGroupsRefresh ()
specifier|public
name|void
name|cacheGroupsRefresh
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do nothing
block|}
annotation|@
name|Override
DECL|method|cacheGroupsAdd (List<String> groups)
specifier|public
name|void
name|cacheGroupsAdd
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|groups
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Do nothing
block|}
DECL|method|updateGroups ()
specifier|public
specifier|static
name|void
name|updateGroups
parameter_list|()
block|{
name|group
operator|.
name|clear
argument_list|()
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
literal|"test_group_D"
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
literal|"test_group_E"
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
literal|"test_group_F"
argument_list|)
expr_stmt|;
block|}
DECL|method|resetGroups ()
specifier|public
specifier|static
name|void
name|resetGroups
parameter_list|()
block|{
name|group
operator|.
name|clear
argument_list|()
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
literal|"test_group_A"
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
literal|"test_group_B"
argument_list|)
expr_stmt|;
name|group
operator|.
name|add
argument_list|(
literal|"test_group_C"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSecureRMBecomeActive ()
specifier|public
name|void
name|testSecureRMBecomeActive
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
name|updateConfigurationForRMHA
argument_list|()
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
comment|// upload default configurations
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|ResourceManager
name|resourceManager
init|=
operator|new
name|ResourceManager
argument_list|()
decl_stmt|;
try|try
block|{
name|resourceManager
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resourceManager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|updateConfigurationForRMHA ()
specifier|private
name|void
name|updateConfigurationForRMHA
parameter_list|()
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|int
name|base
init|=
literal|1500
decl_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|configuration
argument_list|)
control|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0:"
operator|+
operator|(
name|base
operator|+
literal|20
operator|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.1:"
operator|+
operator|(
name|base
operator|+
literal|40
operator|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|base
operator|*
literal|2
expr_stmt|;
block|}
block|}
comment|/**    * This method initializes an RM with the given configuration and expects it    * to fail with a configuration error.    *    * @param conf the {@link Configuration} to use    */
DECL|method|checkBadConfiguration (Configuration conf)
specifier|private
name|void
name|checkBadConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
try|try
block|{
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The RM allowed an invalid configuration"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The RM initialization threw an unexpected exception"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
name|HAUtil
operator|.
name|BAD_CONFIG_MESSAGE_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAdminAddToClusterNodeLabelsWithDeprecatedAPIs ()
specifier|public
name|void
name|testAdminAddToClusterNodeLabelsWithDeprecatedAPIs
parameter_list|()
throws|throws
name|Exception
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|uploadDefaultConfiguration
argument_list|()
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
block|{
specifier|protected
name|ClientRMService
name|createClientRMService
parameter_list|()
block|{
return|return
operator|new
name|ClientRMService
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|scheduler
argument_list|,
name|this
operator|.
name|rmAppManager
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|this
operator|.
name|queueACLsManager
argument_list|,
name|this
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMDelegationTokenSecretManager
argument_list|()
argument_list|)
return|;
block|}
empty_stmt|;
block|}
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|AddToClusterNodeLabelsRequestProto
name|proto
init|=
name|AddToClusterNodeLabelsRequestProto
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllDeprecatedNodeLabels
argument_list|(
name|list
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|AddToClusterNodeLabelsRequestPBImpl
name|protoImpl
init|=
operator|new
name|AddToClusterNodeLabelsRequestPBImpl
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|addToClusterNodeLabels
argument_list|(
operator|(
name|AddToClusterNodeLabelsRequest
operator|)
name|protoImpl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Could not update node labels."
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// Create a client.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|InetSocketAddress
name|rmAddress
init|=
name|rm
operator|.
name|getClientRMService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|ApplicationClientProtocol
name|client
init|=
operator|(
name|ApplicationClientProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationClientProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Get node labels collection
name|GetClusterNodeLabelsResponse
name|response
init|=
name|client
operator|.
name|getClusterNodeLabels
argument_list|(
name|GetClusterNodeLabelsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|NodeLabel
name|labelX
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|NodeLabel
name|labelY
init|=
name|NodeLabel
operator|.
name|newInstance
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|response
operator|.
name|getNodeLabelList
argument_list|()
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|labelX
argument_list|,
name|labelY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testMapAttributesToNodes ()
specifier|public
name|void
name|testMapAttributesToNodes
parameter_list|()
throws|throws
name|Exception
throws|,
name|YarnException
block|{
comment|// 1. Need to test for the Invalid Node
comment|// 1.1. Need to test for active nodes
comment|// 1.2. Need to test for Inactive nodes
comment|// 1.3. Test with Single Node invalid
comment|// 1.4. Need to test with port (should fail)
comment|// 1.5. Test with unknown node when failOnUnknownNodes is false
comment|// also test : 3. Ensure Appropriate manager Method call is done
name|rm
operator|=
operator|new
name|MockRM
argument_list|()
expr_stmt|;
name|NodeAttributesManager
name|spiedAttributesManager
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNodeAttributesManager
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeAttributesManager
argument_list|(
name|spiedAttributesManager
argument_list|)
expr_stmt|;
operator|(
operator|(
name|RMContextImpl
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|)
operator|.
name|setHAServiceState
argument_list|(
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|setActiveAndInactiveNodes
argument_list|(
name|rm
argument_list|)
expr_stmt|;
comment|// by default, distributed configuration for node label is disabled, this
comment|// should pass
name|NodesToAttributesMappingRequest
name|request
init|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|AttributeMappingOperationType
operator|.
name|ADD
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
literal|"x"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"dfasdf"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should not fail on known node in active state"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|spiedAttributesManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|addNodeAttributes
argument_list|(
name|Mockito
operator|.
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|AttributeMappingOperationType
operator|.
name|REMOVE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
literal|"host4"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
literal|"x"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"dfasdf"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should not fail on known node in inactive state"
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|spiedAttributesManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|removeNodeAttributes
argument_list|(
name|Mockito
operator|.
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|AttributeMappingOperationType
operator|.
name|ADD
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
literal|"host5"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
literal|"x"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"dfasdf"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"host5 is not a valid node, It should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exception Message is not as desired"
argument_list|,
literal|" Following nodes does not exist : [host5]"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|AttributeMappingOperationType
operator|.
name|ADD
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
literal|"host4:8889"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
literal|"x"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"dfasdf"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
literal|"host2:8889"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
literal|"x"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"dfasdf"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
comment|// port if added in CLI it fails in the client itself. Here we just check
comment|// against hostname hence the message as : nodes does not exist.
name|rm
operator|.
name|adminService
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"host with the port should fail as only hostnames are validated"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exception Message is not as desired"
argument_list|,
literal|" Following nodes does not exist : [host4:8889, host2:8889]"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|AttributeMappingOperationType
operator|.
name|REPLACE
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
literal|"host5"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|,
literal|"x"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"dfasdf"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"This operation should not fail as failOnUnknownNodes is false : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Mockito
operator|.
name|verify
argument_list|(
name|spiedAttributesManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|replaceNodeAttributes
argument_list|(
name|Mockito
operator|.
name|eq
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_CENTRALIZED
argument_list|)
argument_list|,
name|Mockito
operator|.
name|anyMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2. fail on invalid prefix
name|request
operator|=
name|NodesToAttributesMappingRequest
operator|.
name|newInstance
argument_list|(
name|AttributeMappingOperationType
operator|.
name|ADD
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeToAttributes
operator|.
name|newInstance
argument_list|(
literal|"host5"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|NodeAttribute
operator|.
name|newInstance
argument_list|(
name|NodeAttribute
operator|.
name|PREFIX_DISTRIBUTED
argument_list|,
literal|"x"
argument_list|,
name|NodeAttributeType
operator|.
name|STRING
argument_list|,
literal|"dfasdf"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|mapAttributesToNodes
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"This operation should fail as prefix should be \"nm.yarn.io\"."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Exception Message is not as desired"
argument_list|,
literal|"Invalid Attribute Mapping for the node host5. Prefix should be "
operator|+
literal|"rm.yarn.io"
argument_list|,
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|rm
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|setActiveAndInactiveNodes (ResourceManager resourceManager)
specifier|private
name|void
name|setActiveAndInactiveNodes
parameter_list|(
name|ResourceManager
name|resourceManager
parameter_list|)
block|{
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|rmNodes
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
decl_stmt|;
name|rmNodes
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host1"
argument_list|,
literal|1111
argument_list|)
argument_list|,
operator|new
name|RMNodeImpl
argument_list|(
literal|null
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
literal|"host1"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rmNodes
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host2"
argument_list|,
literal|2222
argument_list|)
argument_list|,
operator|new
name|RMNodeImpl
argument_list|(
literal|null
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
literal|"host2"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rmNodes
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host3"
argument_list|,
literal|3333
argument_list|)
argument_list|,
operator|new
name|RMNodeImpl
argument_list|(
literal|null
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
literal|"host3"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|NodeId
argument_list|,
name|RMNode
argument_list|>
name|rmInactiveNodes
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getInactiveRMNodes
argument_list|()
decl_stmt|;
name|rmInactiveNodes
operator|.
name|put
argument_list|(
name|NodeId
operator|.
name|newInstance
argument_list|(
literal|"host4"
argument_list|,
literal|4444
argument_list|)
argument_list|,
operator|new
name|RMNodeImpl
argument_list|(
literal|null
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
literal|"host4"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

