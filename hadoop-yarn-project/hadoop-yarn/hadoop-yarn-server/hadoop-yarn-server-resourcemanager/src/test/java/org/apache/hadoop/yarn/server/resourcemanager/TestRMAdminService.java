begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|ProxyUsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshAdminAclsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshQueuesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RefreshSuperUserGroupsConfigurationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestRMAdminService
specifier|public
class|class
name|TestRMAdminService
block|{
DECL|field|configuration
specifier|private
specifier|final
name|Configuration
name|configuration
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|rm
specifier|private
name|MockRM
name|rm
init|=
literal|null
decl_stmt|;
DECL|field|fs
specifier|private
name|FileSystem
name|fs
decl_stmt|;
DECL|field|workingPath
specifier|private
name|Path
name|workingPath
decl_stmt|;
DECL|field|tmpDir
specifier|private
name|Path
name|tmpDir
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
operator|.
name|addDefaultResource
argument_list|(
name|YarnConfiguration
operator|.
name|CS_CONFIGURATION_FILE
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|workingPath
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-remoteDir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|FS_BASED_RM_CONF_STORE
argument_list|,
name|workingPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tmpDir
operator|=
operator|new
name|Path
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"-tmpDir"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|workingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|workingPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|rm
operator|!=
literal|null
condition|)
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|fs
operator|.
name|delete
argument_list|(
name|workingPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|tmpDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAdminRefreshQueuesWithLocalConfigurationProvider ()
specifier|public
name|void
name|testAdminRefreshQueuesWithLocalConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|int
name|maxAppsBefore
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAppsBefore
argument_list|,
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAdminRefreshQueuesWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testAdminRefreshQueuesWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// clean the remoteDirectory
name|cleanRemoteDirectory
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|int
name|maxAppsBefore
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileSystemBasedConfigurationProvider is used."
operator|+
literal|" Should get an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find Configuration: capacity-scheduler.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csConf
operator|.
name|set
argument_list|(
literal|"yarn.scheduler.capacity.maximum-applications"
argument_list|,
literal|"5000"
argument_list|)
expr_stmt|;
name|String
name|csConfFile
init|=
name|writeConfigurationXML
argument_list|(
name|csConf
argument_list|,
literal|"capacity-scheduler.xml"
argument_list|)
decl_stmt|;
comment|// upload the file into Remote File System
name|uploadToRemoteFileSystem
argument_list|(
operator|new
name|Path
argument_list|(
name|csConfFile
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshQueues
argument_list|(
name|RefreshQueuesRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|maxAppsAfter
init|=
name|cs
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getMaximumSystemApplications
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|maxAppsAfter
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|maxAppsAfter
operator|!=
name|maxAppsBefore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAdminAclsWithLocalConfigurationProvider ()
specifier|public
name|void
name|testAdminAclsWithLocalConfigurationProvider
parameter_list|()
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshAdminAcls
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAdminAclsWithFileSystemBasedConfigurationProvider ()
specifier|public
name|void
name|testAdminAclsWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// clean the remoteDirectory
name|cleanRemoteDirectory
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshAdminAcls
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileSystemBasedConfigurationProvider is used."
operator|+
literal|" Should get an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find Configuration: yarn-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|aclStringBefore
init|=
name|rm
operator|.
name|adminService
operator|.
name|getAccessControlList
argument_list|()
operator|.
name|getAclString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|yarnConf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|yarnConf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|YARN_ADMIN_ACL
argument_list|,
literal|"world:anyone:rwcda"
argument_list|)
expr_stmt|;
name|String
name|yarnConfFile
init|=
name|writeConfigurationXML
argument_list|(
name|yarnConf
argument_list|,
literal|"yarn-site.xml"
argument_list|)
decl_stmt|;
comment|// upload the file into Remote File System
name|uploadToRemoteFileSystem
argument_list|(
operator|new
name|Path
argument_list|(
name|yarnConfFile
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshAdminAcls
argument_list|(
name|RefreshAdminAclsRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|aclStringAfter
init|=
name|rm
operator|.
name|adminService
operator|.
name|getAccessControlList
argument_list|()
operator|.
name|getAclString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|aclStringAfter
operator|.
name|equals
argument_list|(
name|aclStringBefore
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aclStringAfter
argument_list|,
literal|"world:anyone:rwcda"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testRefreshSuperUserGroupsWithLocalConfigurationProvider ()
name|testRefreshSuperUserGroupsWithLocalConfigurationProvider
parameter_list|()
block|{
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Using localConfigurationProvider. Should not get any exception."
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
DECL|method|testRefreshSuperUserGroupsWithFileSystemBasedConfigurationProvider ()
name|testRefreshSuperUserGroupsWithFileSystemBasedConfigurationProvider
parameter_list|()
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CONFIGURATION_PROVIDER_CLASS
argument_list|,
literal|"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider"
argument_list|)
expr_stmt|;
name|rm
operator|=
operator|new
name|MockRM
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|init
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// clean the remoteDirectory
name|cleanRemoteDirectory
argument_list|()
expr_stmt|;
try|try
block|{
name|rm
operator|.
name|adminService
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"FileSystemBasedConfigurationProvider is used."
operator|+
literal|" Should get an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find Configuration: core-site.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|coreConf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|coreConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|,
literal|"test_groups"
argument_list|)
expr_stmt|;
name|coreConf
operator|.
name|set
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|,
literal|"test_hosts"
argument_list|)
expr_stmt|;
name|String
name|coreConfFile
init|=
name|writeConfigurationXML
argument_list|(
name|coreConf
argument_list|,
literal|"core-site.xml"
argument_list|)
decl_stmt|;
comment|// upload the file into Remote File System
name|uploadToRemoteFileSystem
argument_list|(
operator|new
name|Path
argument_list|(
name|coreConfFile
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|adminService
operator|.
name|refreshSuperUserGroupsConfiguration
argument_list|(
name|RefreshSuperUserGroupsConfigurationRequest
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getProxyGroups
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.groups"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_groups"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ProxyUsers
operator|.
name|getProxyHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|"hadoop.proxyuser.test.hosts"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"test_hosts"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|writeConfigurationXML (Configuration conf, String confXMLName)
specifier|private
name|String
name|writeConfigurationXML
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|confXMLName
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputStream
name|output
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|File
name|confFile
init|=
operator|new
name|File
argument_list|(
name|tmpDir
operator|.
name|toString
argument_list|()
argument_list|,
name|confXMLName
argument_list|)
decl_stmt|;
if|if
condition|(
name|confFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|confFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|confFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Can not create "
operator|+
name|confXMLName
argument_list|)
expr_stmt|;
block|}
name|output
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|confFile
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|writeXml
argument_list|(
name|output
argument_list|)
expr_stmt|;
return|return
name|confFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|uploadToRemoteFileSystem (Path filePath)
specifier|private
name|void
name|uploadToRemoteFileSystem
parameter_list|(
name|Path
name|filePath
parameter_list|)
throws|throws
name|IOException
block|{
name|fs
operator|.
name|copyFromLocalFile
argument_list|(
name|filePath
argument_list|,
name|workingPath
argument_list|)
expr_stmt|;
block|}
DECL|method|cleanRemoteDirectory ()
specifier|private
name|void
name|cleanRemoteDirectory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|workingPath
argument_list|)
condition|)
block|{
for|for
control|(
name|FileStatus
name|file
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|workingPath
argument_list|)
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

