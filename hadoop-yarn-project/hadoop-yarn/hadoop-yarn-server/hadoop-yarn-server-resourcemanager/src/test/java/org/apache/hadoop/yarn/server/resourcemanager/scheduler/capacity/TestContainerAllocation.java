begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtilTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|LogAggregationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|ContainerType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMSecretManagerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestContainerAllocation
specifier|public
class|class
name|TestContainerAllocation
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestContainerAllocation
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
decl_stmt|;
DECL|field|mgr
name|RMNodeLabelsManager
name|mgr
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|mgr
operator|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testExcessReservationThanNodeManagerCapacity ()
specifier|public
name|void
name|testExcessReservationThanNodeManagerCapacity
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node1
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:2234"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait..
name|int
name|waitCount
init|=
literal|20
decl_stmt|;
name|int
name|size
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|size
operator|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|!=
literal|2
operator|&&
name|waitCount
operator|--
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for node managers to register : "
operator|+
name|size
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit an application
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|128
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sending container requests "
argument_list|)
expr_stmt|;
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"*"
block|}
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|alloc1Response
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
comment|// kick the scheduler
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|waitCounter
init|=
literal|20
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"heartbeating nm1"
argument_list|)
expr_stmt|;
while|while
condition|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|&&
name|waitCounter
operator|--
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|alloc1Response
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"received container : "
operator|+
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// No container should be allocated.
comment|// Internally it should not been reserved.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"heartbeating nm2"
argument_list|)
expr_stmt|;
name|waitCounter
operator|=
literal|20
expr_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|&&
name|waitCounter
operator|--
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|alloc1Response
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"received container : "
operator|+
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// This is to test container tokens are generated when the containers are
comment|// acquired by the AM, not when the containers are allocated
annotation|@
name|Test
DECL|method|testContainerTokenGeneratedOnPullRequest ()
specifier|public
name|void
name|testContainerTokenGeneratedOnPullRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|RMContainer
name|container
init|=
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|containerId2
argument_list|)
decl_stmt|;
comment|// no container token is generated.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId2
argument_list|,
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getContainerToken
argument_list|()
argument_list|)
expr_stmt|;
comment|// acquire the container.
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId2
argument_list|,
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// container token is generated.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerToken
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNormalContainerAllocationWhenDNSUnavailable ()
specifier|public
name|void
name|testNormalContainerAllocationWhenDNSUnavailable
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"unknownhost:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|// acquire the container.
name|SecurityUtilTestHelper
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
decl_stmt|;
try|try
block|{
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
comment|// not able to fetch the container;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SecurityUtilTestHelper
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|containers
operator|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
expr_stmt|;
comment|// should be able to fetch the container;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// This is to test whether LogAggregationContext is passed into
comment|// container tokens correctly
annotation|@
name|Test
DECL|method|testLogAggregationContextPassedIntoContainerToken ()
specifier|public
name|void
name|testLogAggregationContextPassedIntoContainerToken
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:2345"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
comment|// LogAggregationContext is set as null
name|Assert
operator|.
name|assertNull
argument_list|(
name|getLogAggregationContextFromContainerToken
argument_list|(
name|rm1
argument_list|,
name|nm1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a not-null LogAggregationContext
name|LogAggregationContext
name|logAggregationContext
init|=
name|LogAggregationContext
operator|.
name|newInstance
argument_list|(
literal|"includePattern"
argument_list|,
literal|"excludePattern"
argument_list|,
literal|"rolledLogsIncludePattern"
argument_list|,
literal|"rolledLogsExcludePattern"
argument_list|,
literal|"policyClass"
argument_list|,
literal|"policyParameters"
argument_list|)
decl_stmt|;
name|LogAggregationContext
name|returned
init|=
name|getLogAggregationContextFromContainerToken
argument_list|(
name|rm1
argument_list|,
name|nm2
argument_list|,
name|logAggregationContext
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"includePattern"
argument_list|,
name|returned
operator|.
name|getIncludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"excludePattern"
argument_list|,
name|returned
operator|.
name|getExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rolledLogsIncludePattern"
argument_list|,
name|returned
operator|.
name|getRolledLogsIncludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"rolledLogsExcludePattern"
argument_list|,
name|returned
operator|.
name|getRolledLogsExcludePattern
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"policyClass"
argument_list|,
name|returned
operator|.
name|getLogAggregationPolicyClassName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"policyParameters"
argument_list|,
name|returned
operator|.
name|getLogAggregationPolicyParameters
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|getLogAggregationContextFromContainerToken ( MockRM rm1, MockNM nm1, LogAggregationContext logAggregationContext)
specifier|private
name|LogAggregationContext
name|getLogAggregationContextFromContainerToken
parameter_list|(
name|MockRM
name|rm1
parameter_list|,
name|MockNM
name|nm1
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|)
throws|throws
name|Exception
block|{
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
name|logAggregationContext
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// request a container.
name|am2
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|512
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|// acquire the container.
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am2
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId
argument_list|,
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// container token is generated.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerToken
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerTokenIdentifier
name|token
init|=
name|BuilderUtils
operator|.
name|newContainerTokenIdentifier
argument_list|(
name|containers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerToken
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|token
operator|.
name|getLogAggregationContext
argument_list|()
return|;
block|}
DECL|field|numRetries
specifier|private
specifier|volatile
name|int
name|numRetries
init|=
literal|0
decl_stmt|;
DECL|class|TestRMSecretManagerService
specifier|private
class|class
name|TestRMSecretManagerService
extends|extends
name|RMSecretManagerService
block|{
DECL|method|TestRMSecretManagerService (Configuration conf, RMContextImpl rmContext)
specifier|public
name|TestRMSecretManagerService
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContextImpl
name|rmContext
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContainerTokenSecretManager ( Configuration conf)
specifier|protected
name|RMContainerTokenSecretManager
name|createContainerTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Token
name|createContainerToken
parameter_list|(
name|ContainerId
name|containerId
parameter_list|,
name|int
name|containerVersion
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|String
name|appSubmitter
parameter_list|,
name|Resource
name|capability
parameter_list|,
name|Priority
name|priority
parameter_list|,
name|long
name|createTime
parameter_list|,
name|LogAggregationContext
name|logAggregationContext
parameter_list|,
name|String
name|nodeLabelExp
parameter_list|,
name|ContainerType
name|containerType
parameter_list|,
name|ExecutionType
name|executionType
parameter_list|,
name|long
name|allocationRequestId
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allocationTags
parameter_list|)
block|{
name|numRetries
operator|++
expr_stmt|;
return|return
name|super
operator|.
name|createContainerToken
argument_list|(
name|containerId
argument_list|,
name|containerVersion
argument_list|,
name|nodeId
argument_list|,
name|appSubmitter
argument_list|,
name|capability
argument_list|,
name|priority
argument_list|,
name|createTime
argument_list|,
name|logAggregationContext
argument_list|,
name|nodeLabelExp
argument_list|,
name|containerType
argument_list|,
name|executionType
argument_list|,
name|allocationRequestId
argument_list|,
name|allocationTags
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
comment|// This is to test fetching AM container will be retried, if AM container is
comment|// not fetchable since DNS is unavailable causing container token/NMtoken
comment|// creation failure.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAMContainerAllocationWhenDNSUnavailable ()
specifier|public
name|void
name|testAMContainerAllocationWhenDNSUnavailable
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMSecretManagerService
name|createRMSecretManagerService
parameter_list|()
block|{
return|return
operator|new
name|TestRMSecretManagerService
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"unknownhost:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|RMApp
name|app1
decl_stmt|;
try|try
block|{
name|SecurityUtilTestHelper
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|app1
operator|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// fetching am container will fail, keep retrying 5 times.
while|while
condition|(
name|numRetries
operator|<=
literal|5
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for am container to be allocated."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SecurityUtilTestHelper
operator|.
name|setTokenServiceUseIp
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testExcessReservationWillBeUnreserved ()
specifier|public
name|void
name|testExcessReservationWillBeUnreserved
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to a queue. And there's one      * node with 8G resource in the cluster. App1 allocates a 6G container, Then      * app2 asks for a 4G container. App2's request will be reserved on the      * node.      *       * Before next node heartbeat, app2 cancels the reservation, we should found      * the reserved resource is cancelled as well.      */
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch another app to queue, AM container should be launched in nm1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// Do node heartbeats 2 times
comment|// First time will allocate container for app1, second time will reserve
comment|// container for app2
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// App2 will get preference to be allocated on node1, and node1 will be all
comment|// used by App2.
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if a 4G contaienr allocated for app1, and nothing allocated for app2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schedulerApp2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// NM1 has available resource = 2G (8G - 2 * 1G - 4G)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Usage of queue = 4G + 2 * 1G + 4G (reserved)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cancel asks of app2 and re-kick RM
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// App2's reservation will be cancelled
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schedulerApp2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAllocationForReservedContainer ()
specifier|public
name|void
name|testAllocationForReservedContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to a queue. And there's one      * node with 8G resource in the cluster. App1 allocates a 6G container, Then      * app2 asks for a 4G container. App2's request will be reserved on the      * node.      *      * Before next node heartbeat, app1 container is completed/killed. So app1      * container which was reserved will be allocated.      */
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch another app to queue, AM container should be launched in nm1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// Do node heartbeats 2 times
comment|// First time will allocate container for app1, second time will reserve
comment|// container for app2
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// App2 will get preference to be allocated on node1, and node1 will be all
comment|// used by App2.
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if a 4G container allocated for app1, and nothing allocated for app2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schedulerApp2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// NM1 has available resource = 2G (8G - 2 * 1G - 4G)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Usage of queue = 4G + 2 * 1G + 4G (reserved)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mark one app1 container as killed/completed and re-kick RM
for|for
control|(
name|RMContainer
name|container
range|:
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|isAMContainer
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|cs
operator|.
name|markContainerForKillable
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
comment|// Cancel asks of app1 and re-kick RM
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|0
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check 4G container cancelled for app1, and one container allocated for
comment|// app2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|schedulerApp2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// NM1 has available resource = 2G (8G - 2 * 1G - 4G)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Usage of queue = 4G + 2 * 1G
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testReservedContainerMetricsOnDecommisionedNode ()
specifier|public
name|void
name|testReservedContainerMetricsOnDecommisionedNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test case: Submit two application (app1/app2) to a queue. And there's one      * node with 8G resource in the cluster. App1 allocates a 6G container, Then      * app2 asks for a 4G container. App2's request will be reserved on the      * node.      *      * Before next node heartbeat, app1 container is completed/killed. So app1      * container which was reserved will be allocated.      */
comment|// inject node label manager
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch another app to queue, AM container should be launched in nm1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|LeafQueue
name|leafQueue
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// Do node heartbeats 2 times
comment|// First time will allocate container for app1, second time will reserve
comment|// container for app2
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// App2 will get preference to be allocated on node1, and node1 will be all
comment|// used by App2.
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if a 4G container allocated for app1, and nothing allocated for app2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|schedulerApp2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// NM1 has available resource = 2G (8G - 2 * 1G - 4G)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cs
operator|.
name|getNode
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
argument_list|)
expr_stmt|;
comment|// Usage of queue = 4G + 2 * 1G + 4G (reserved)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the node
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check all container cancelled for app1 and app2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|schedulerApp2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Usage and Reserved capacity of queue is 0
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|leafQueue
operator|.
name|getQueueResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testAssignMultipleOffswitchContainers ()
specifier|public
name|void
name|testAssignMultipleOffswitchContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|80
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch an app to queue, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|5
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Do node heartbeats once
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// App1 will get one container allocated (plus AM container
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set assign multiple off-switch containers to 3
name|CapacitySchedulerConfiguration
name|newCSConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|newCSConf
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|OFFSWITCH_PER_HEARTBEAT_LIMIT
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|newCSConf
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do node heartbeats once
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
comment|// App1 will get 3 new container allocated (plus 2 previously allocated
comment|// container)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testContinuousReservationLookingWhenUsedEqualsMax ()
specifier|public
name|void
name|testContinuousReservationLookingWhenUsedEqualsMax
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|(
name|CapacitySchedulerConfiguration
operator|)
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Set maximum capacity of A to 10
name|newConf
operator|.
name|setMaximumCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|90
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch an app to queue A, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch 2nd app to queue B, AM container should be launched in nm1
comment|// Now usage of nm1 is 3G (2G + 1G)
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Do node heartbeats twice, we expect one container allocated on nm1 and
comment|// one container reserved on nm1.
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// App1 will get 2 container allocated (plus AM container)
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp1
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do node heartbeats on nm2, we expect one container allocated on nm2 and
comment|// one unreserved on nm1
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|schedulerApp1
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPendingResourcesConsideringUserLimit ()
specifier|public
name|void
name|testPendingResourcesConsideringUserLimit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set maximum capacity of A to 10
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|setUserLimitFactor
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".default"
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setMaximumAMResourcePercentPerPartition
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".default"
argument_list|,
literal|""
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|MockNM
name|nm2
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h2:1234"
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch an app to queue default, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"u1"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch 2nd app to queue default, AM container should be launched in nm1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"u2"
argument_list|,
literal|null
argument_list|,
literal|"default"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// am1 asks 1 * 3G container
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// am2 asks 4 * 5G container
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|RMNode
name|rmNode2
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm2
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Do node heartbeats one, we expect one container allocated reserved on nm1
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// App1 will get 1 container reserved
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp1
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|/*      * Note that the behavior of appAttemptResourceUsage is different from queue's      * For queue, used = actual-used + reserved      * For app, used = actual-used.      *      * TODO (wangda): Need to make behaviors of queue/app's resource usage      * consistent      */
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|schedulerApp1
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|schedulerApp1
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|schedulerApp1
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|schedulerApp2
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|schedulerApp2
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getReserved
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
operator|*
literal|4
operator|*
name|GB
argument_list|,
name|schedulerApp2
operator|.
name|getAppAttemptResourceUsage
argument_list|()
operator|.
name|getPending
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|LeafQueue
name|lq
init|=
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
comment|// UL = 8GB, so head room of u1 = 8GB - 2GB (AM) - 3GB (Reserved) = 3GB
comment|//                           u2 = 8GB - 4GB = 4GB
comment|// When not deduct reserved, total-pending = 3G (u1) + 4G (u2) = 7G
comment|//          deduct reserved, total-pending = 0G (u1) + 4G = 4G
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
name|lq
operator|.
name|getTotalPendingResourcesConsideringUserLimit
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|20
operator|*
name|GB
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|lq
operator|.
name|getTotalPendingResourcesConsideringUserLimit
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|20
operator|*
name|GB
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|true
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testQueuePriorityOrdering ()
specifier|public
name|void
name|testQueuePriorityOrdering
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|(
name|CapacitySchedulerConfiguration
operator|)
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Set ordering policy
name|newConf
operator|.
name|setQueueOrderingPolicy
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|QUEUE_PRIORITY_UTILIZATION_ORDERING_POLICY
argument_list|)
expr_stmt|;
comment|// Set maximum capacity of A to 20
name|newConf
operator|.
name|setMaximumCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".c"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|newConf
operator|.
name|setQueuePriority
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|100
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch an app to queue A, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch an app to queue B, AM container should be launched in nm1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch an app to queue C, AM container should be launched in nm1
name|RMApp
name|app3
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app3
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Each application asks 10 * 5GB containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am3
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp3
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// container will be allocated to am1
comment|// App1 will get 2 container allocated (plus AM container)
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// container will be allocated to am1 again,
comment|// App1 will get 3 container allocated (plus AM container)
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// (Now usages of queues: a=12G (satisfied), b=2G, c=2G)
comment|// container will be allocated to am2 (since app1 reaches its guaranteed
comment|// capacity)
comment|// App2 will get 2 container allocated (plus AM container)
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do this 3 times
comment|// container will be allocated to am2 (since app1 reaches its guaranteed
comment|// capacity)
comment|// App2 will get 2 container allocated (plus AM container)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|schedulerApp3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// (Now usages of queues: a=12G (satisfied), b=22G (satisfied), c=2G))
comment|// Do this 10 times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|schedulerApp3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// (Now usages of queues: a=12G (satisfied), b=22G (satisfied),
comment|// c=52G (satisfied and no pending))
comment|// Do this 20 times, we can only allocate 3 containers, 1 to A and 3 to B
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|schedulerApp3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// (Now usages of queues: a=17G (satisfied), b=27G (satisfied), c=52G))
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testUserLimitAllocationMultipleContainers ()
specifier|public
name|void
name|testUserLimitAllocationMultipleContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|newConf
init|=
operator|(
name|CapacitySchedulerConfiguration
operator|)
name|TestUtils
operator|.
name|getConfigurationWithMultipleQueues
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newConf
operator|.
name|setUserLimit
argument_list|(
literal|"root.c"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|setNodeLabelManager
argument_list|(
name|mgr
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"h1:1234"
argument_list|,
literal|1000
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// launch app from 1st user to queue C, AM container should be launched in nm1
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// launch app from 2nd user to queue C, AM container should be launched in nm1
name|RMApp
name|app2
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|"app"
argument_list|,
literal|"user2"
argument_list|,
literal|null
argument_list|,
literal|"c"
argument_list|)
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app2
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Each application asks 1000 * 5GB containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
literal|"h1"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am1
operator|.
name|allocate
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Each application asks 1000 * 5GB containers
name|am2
operator|.
name|allocate
argument_list|(
literal|"*"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
literal|"h1"
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|am2
operator|.
name|allocate
argument_list|(
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
literal|5
operator|*
name|GB
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|RMNode
name|rmNode1
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp1
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|schedulerApp2
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// container will be allocated to am1
comment|// App1 will get 2 container allocated (plus AM container)
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|rmNode1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|schedulerApp1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|schedulerApp2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

