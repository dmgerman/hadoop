begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.applicationsmanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|applicationsmanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NMToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|NMContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|records
operator|.
name|ApplicationStateData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|TestSchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAMRestart
specifier|public
class|class
name|TestAMRestart
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAMRestartWithExistingContainers ()
specifier|public
name|void
name|testAMRestartWithExistingContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:2351"
argument_list|,
literal|4089
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|int
name|NUM_CONTAINERS
init|=
literal|3
decl_stmt|;
name|allocateContainers
argument_list|(
name|nm1
argument_list|,
name|am1
argument_list|,
name|NUM_CONTAINERS
argument_list|)
expr_stmt|;
comment|// launch the 2nd container, for testing running container transferred.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// launch the 3rd container, for testing container allocated by previous
comment|// attempt is completed by the next new attempt/
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId3
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId3
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// 4th container still in AQUIRED state. for testing Acquired container is
comment|// always killed.
name|ContainerId
name|containerId4
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId4
argument_list|,
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
comment|// 5th container is in Allocated state. for testing allocated container is
comment|// always killed.
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId5
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId5
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|// 6th container is in Reserved state.
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|6000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId6
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SchedulerApplicationAttempt
name|schedulerAttempt
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getCurrentAttemptForContainer
argument_list|(
name|containerId6
argument_list|)
decl_stmt|;
while|while
condition|(
name|schedulerAttempt
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for container "
operator|+
name|containerId6
operator|+
literal|" to be reserved."
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// assert containerId6 is reserved.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|containerId6
argument_list|,
name|schedulerAttempt
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
expr_stmt|;
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// wait for some time. previous AM's running containers should still remain
comment|// in scheduler even though am failed
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// acquired/allocated containers are cleaned up.
name|Assert
operator|.
name|assertNull
argument_list|(
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|containerId4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getRMContainer
argument_list|(
name|containerId5
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for app to start a new attempt.
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// assert this is a new AM.
name|ApplicationAttemptId
name|newAttemptId
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|newAttemptId
operator|.
name|equals
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// launch the new AM
name|MockAM
name|am2
init|=
name|rm1
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|am2
operator|.
name|registerAppAttempt
argument_list|()
decl_stmt|;
comment|// Assert two containers are running: container2 and container3;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|registerResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|containerId2Exists
init|=
literal|false
decl_stmt|,
name|containerId3Exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Container
name|container
range|:
name|registerResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId2
argument_list|)
condition|)
block|{
name|containerId2Exists
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId3
argument_list|)
condition|)
block|{
name|containerId3Exists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerId2Exists
operator|&&
name|containerId3Exists
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// complete container by sending the container complete event which has earlier
comment|// attempt's attemptId
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
comment|// Even though the completed container containerId3 event was sent to the
comment|// earlier failed attempt, new RMAppAttempt can also capture this container
comment|// info.
comment|// completed containerId4 is also transferred to the new attempt.
name|RMAppAttempt
name|newAttempt
init|=
name|app1
operator|.
name|getRMAppAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
comment|// 4 containers finished, acquired/allocated/reserved/completed.
name|waitForContainersToFinish
argument_list|(
literal|4
argument_list|,
name|newAttempt
argument_list|)
expr_stmt|;
name|boolean
name|container3Exists
init|=
literal|false
decl_stmt|,
name|container4Exists
init|=
literal|false
decl_stmt|,
name|container5Exists
init|=
literal|false
decl_stmt|,
name|container6Exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ContainerStatus
name|status
range|:
name|newAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId3
argument_list|)
condition|)
block|{
comment|// containerId3 is the container ran by previous attempt but finished by the
comment|// new attempt.
name|container3Exists
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId4
argument_list|)
condition|)
block|{
comment|// containerId4 is the Acquired Container killed by the previous attempt,
comment|// it's now inside new attempt's finished container list.
name|container4Exists
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId5
argument_list|)
condition|)
block|{
comment|// containerId5 is the Allocated container killed by previous failed attempt.
name|container5Exists
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId6
argument_list|)
condition|)
block|{
comment|// containerId6 is the reserved container killed by previous failed attempt.
name|container6Exists
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|container3Exists
operator|&&
name|container4Exists
operator|&&
name|container5Exists
operator|&&
name|container6Exists
argument_list|)
expr_stmt|;
comment|// New SchedulerApplicationAttempt also has the containers info.
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// record the scheduler attempt for testing.
name|SchedulerApplicationAttempt
name|schedulerNewAttempt
init|=
operator|(
operator|(
name|AbstractYarnScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getCurrentAttemptForContainer
argument_list|(
name|containerId2
argument_list|)
decl_stmt|;
comment|// finish this application
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|,
name|am2
argument_list|)
expr_stmt|;
comment|// the 2nd attempt released the 1st attempt's running container, when the
comment|// 2nd attempt finishes.
name|Assert
operator|.
name|assertFalse
argument_list|(
name|schedulerNewAttempt
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|contains
argument_list|(
name|containerId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// all 4 normal containers finished.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"New attempt's just finished containers: "
operator|+
name|newAttempt
operator|.
name|getJustFinishedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|waitForContainersToFinish
argument_list|(
literal|5
argument_list|,
name|newAttempt
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|allocateContainers (MockNM nm1, MockAM am1, int NUM_CONTAINERS)
specifier|public
specifier|static
name|List
argument_list|<
name|Container
argument_list|>
name|allocateContainers
parameter_list|(
name|MockNM
name|nm1
parameter_list|,
name|MockAM
name|am1
parameter_list|,
name|int
name|NUM_CONTAINERS
parameter_list|)
throws|throws
name|Exception
block|{
comment|// allocate NUM_CONTAINERS containers
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
name|NUM_CONTAINERS
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// wait for containers to be allocated.
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
while|while
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|!=
name|NUM_CONTAINERS
condition|)
block|{
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Did not get all containers allocated"
argument_list|,
name|NUM_CONTAINERS
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|containers
return|;
block|}
DECL|method|waitForContainersToFinish (int expectedNum, RMAppAttempt attempt)
specifier|private
name|void
name|waitForContainersToFinish
parameter_list|(
name|int
name|expectedNum
parameter_list|,
name|RMAppAttempt
name|attempt
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|attempt
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|expectedNum
operator|&&
name|count
operator|<
literal|500
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNMTokensRebindOnAMRestart ()
specifier|public
name|void
name|testNMTokensRebindOnAMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// To prevent test from blacklisting nm1 for AM, we sit threshold to half
comment|// of 2 nodes which is 1
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"myname"
argument_list|,
literal|"myuser"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.1.1.1:4321"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
decl_stmt|;
comment|// nmTokens keeps track of all the nmTokens issued in the allocate call.
name|List
argument_list|<
name|NMToken
argument_list|>
name|expectedNMTokens
init|=
operator|new
name|ArrayList
argument_list|<
name|NMToken
argument_list|>
argument_list|()
decl_stmt|;
comment|// am1 allocate 2 container on nm1.
comment|// first container
while|while
condition|(
literal|true
condition|)
block|{
name|AllocateResponse
name|response
init|=
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2000
argument_list|,
literal|2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|expectedNMTokens
operator|.
name|addAll
argument_list|(
name|response
operator|.
name|getNMTokens
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for container to be allocated."
argument_list|)
expr_stmt|;
block|}
comment|// launch the container-2
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// launch the container-3
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId3
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId3
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// fail am1
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// restart the am
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|am2
operator|.
name|registerAppAttempt
argument_list|()
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// check am2 get the nm token from am1.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedNMTokens
operator|.
name|size
argument_list|()
argument_list|,
name|registerResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedNMTokens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|expectedNMTokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|registerResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// am2 allocate 1 container on nm2
name|containers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Container
argument_list|>
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|AllocateResponse
name|allocateResponse
init|=
name|am2
operator|.
name|allocate
argument_list|(
literal|"127.1.1.1"
argument_list|,
literal|4000
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|containers
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|expectedNMTokens
operator|.
name|addAll
argument_list|(
name|allocateResponse
operator|.
name|getNMTokens
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|containers
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting for container to be allocated."
argument_list|)
expr_stmt|;
block|}
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|am2ContainerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|am2ContainerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// fail am2.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// restart am
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|registerResponse
operator|=
name|am3
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// check am3 get the NM token from both am1 and am2;
name|List
argument_list|<
name|NMToken
argument_list|>
name|transferredTokens
init|=
name|registerResponse
operator|.
name|getNMTokensFromPreviousAttempts
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|transferredTokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|transferredTokens
operator|.
name|containsAll
argument_list|(
name|expectedNMTokens
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// AM container preempted, nm disk failure
comment|// should not be counted towards AM max retry count.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testShouldNotCountFailureToMaxAttemptRetry ()
specifier|public
name|void
name|testShouldNotCountFailureToMaxAttemptRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// explicitly set max-am-retry count as 1.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|ContainerId
name|amContainer
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Preempt the first attempt;
name|scheduler
operator|.
name|markContainerForKillable
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|amContainer
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|scheduler
argument_list|,
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|attempt1
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|ApplicationStateData
name|appState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// AM should be restarted even though max-am-attempt is 1.
name|MockAM
name|am2
init|=
name|rm1
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt2
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// Preempt the second attempt.
name|ContainerId
name|amContainer2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|markContainerForKillable
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|amContainer2
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|scheduler
argument_list|,
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|attempt2
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|MockAM
name|am3
init|=
name|rm1
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|3
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt3
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// mimic NM disk_failure
name|ContainerStatus
name|containerStatus
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|containerStatus
operator|.
name|setContainerId
argument_list|(
name|attempt3
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|containerStatus
operator|.
name|setDiagnostics
argument_list|(
literal|"mimic NM disk_failure"
argument_list|)
expr_stmt|;
name|containerStatus
operator|.
name|setState
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|containerStatus
operator|.
name|setExitStatus
argument_list|(
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
name|conts
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationId
argument_list|,
name|List
argument_list|<
name|ContainerStatus
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|conts
operator|.
name|put
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|containerStatus
argument_list|)
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|conts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|scheduler
argument_list|,
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|attempt3
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|MockAM
name|am4
init|=
name|rm1
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|4
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt4
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// create second NM, and register to rm1
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:2234"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// nm1 heartbeats to report unhealthy
comment|// This will mimic ContainerExitStatus.ABORT
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|scheduler
argument_list|,
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|attempt4
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|ABORTED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// launch next AM in nm2
name|MockAM
name|am5
init|=
name|rm1
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|5
argument_list|,
name|nm2
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt5
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// fail the AM normally
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
name|am5
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am5
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|TestSchedulerUtils
operator|.
name|waitSchedulerApplicationAttemptStopped
argument_list|(
name|scheduler
argument_list|,
name|am5
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|attempt5
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
comment|// AM should not be restarted.
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|app1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test RM restarts after AM container is preempted, new RM should not count
comment|// AM preemption failure towards the max-retry-account and should be able to
comment|// re-launch the AM.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
DECL|method|testPreemptedAMRestartOnRMRestart ()
specifier|public
name|void
name|testPreemptedAMRestartOnRMRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// explicitly set max-am-retry count as 1.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|ContainerId
name|amContainer
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Forcibly preempt the am container;
name|scheduler
operator|.
name|markContainerForKillable
argument_list|(
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|amContainer
argument_list|)
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|attempt1
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// state store has 1 attempt stored.
name|ApplicationStateData
name|appState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appState
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt stored has the preempted container exit status.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|PREEMPTED
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restart rm.
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Restarted RM should re-launch the am.
name|MockAM
name|am2
init|=
name|rm2
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app1
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|,
name|am2
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt2
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|attempt2
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test regular RM restart/failover, new RM should not count
comment|// AM failure towards the max-retry-account and should be able to
comment|// re-launch the AM.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
DECL|method|testRMRestartOrFailoverNotCountedForAMFailures ()
specifier|public
name|void
name|testRMRestartOrFailoverNotCountedForAMFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// explicitly set max-am-retry count as 1.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
comment|// AM should be restarted even though max-am-attempt is 1.
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// Restart rm.
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationStateData
name|appState
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
comment|// re-register the NM
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|status
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NMContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|.
name|setContainerExitStatus
argument_list|(
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerId
argument_list|(
name|attempt1
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerState
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|status
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// Will automatically start a new AppAttempt in rm2
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|MockAM
name|am2
init|=
name|rm2
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|MockRM
operator|.
name|finishAMAndVerifyAppState
argument_list|(
name|app1
argument_list|,
name|rm2
argument_list|,
name|nm1
argument_list|,
name|am2
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt3
init|=
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|attempt3
operator|.
name|shouldCountTowardsMaxAttemptRetry
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|,
name|appState
operator|.
name|getAttempt
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAMContainerExitStatus
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRMAppAttemptFailuresValidityInterval ()
specifier|public
name|void
name|testRMAppAttemptFailuresValidityInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_WORK_PRESERVING_RECOVERY_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// explicitly set max-am-retry count as 2.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// set window size to a larger number : 60s
comment|// we will verify the app should be failed if
comment|// two continuous attempts failed in 60s.
name|RMApp
name|app
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|60000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAM
argument_list|(
name|app
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Fail current attempt normally
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// launch the second attempt
name|rm1
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockAM
name|am_2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am_2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am_2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am_2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// current app should be failed.
name|rm1
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
comment|// set window size to 10s
name|RMAppImpl
name|app1
init|=
operator|(
name|RMAppImpl
operator|)
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|10000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|app1
operator|.
name|setSystemClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// Fail attempt1 normally
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|//Wait to make sure attempt1 be removed in State Store
comment|//TODO explore a better way than sleeping for a while (YARN-4929)
name|Thread
operator|.
name|sleep
argument_list|(
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// launch the second attempt
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt2
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// wait for 10 seconds
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Fail attempt2 normally
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// can launch the third attempt successfully
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt3
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|clock
operator|.
name|reset
argument_list|()
expr_stmt|;
name|MockAM
name|am3
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am3
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Restart rm.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|ApplicationStateData
name|app1State
init|=
name|memStore
operator|.
name|getState
argument_list|()
operator|.
name|getApplicationState
argument_list|()
operator|.
name|get
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1State
operator|.
name|getFirstAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// re-register the NM
name|nm1
operator|.
name|setResourceTrackerService
argument_list|(
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
expr_stmt|;
name|NMContainerStatus
name|status
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|NMContainerStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|status
operator|.
name|setContainerExitStatus
argument_list|(
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerId
argument_list|(
name|attempt3
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setContainerState
argument_list|(
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|status
operator|.
name|setDiagnostics
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|status
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|attempt3
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|//Wait to make sure attempt3 be removed in State Store
comment|//TODO explore a better way than sleeping for a while (YARN-4929)
name|Thread
operator|.
name|sleep
argument_list|(
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1State
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// Lauch Attempt 4
name|MockAM
name|am4
init|=
name|rm2
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|4
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// wait for 10 seconds
name|clock
operator|.
name|setTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Fail attempt4 normally
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am4
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1State
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// can launch the 5th attempt successfully
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|MockAM
name|am5
init|=
name|rm2
operator|.
name|waitForNewAMToLaunchAndRegister
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|5
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|clock
operator|.
name|reset
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am5
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Fail attempt5 normally
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am5
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|am5
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1State
operator|.
name|getAttemptCount
argument_list|()
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|isContainerIdInContainerStatus ( List<ContainerStatus> containerStatuses, ContainerId containerId)
specifier|private
name|boolean
name|isContainerIdInContainerStatus
parameter_list|(
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
parameter_list|,
name|ContainerId
name|containerId
parameter_list|)
block|{
for|for
control|(
name|ContainerStatus
name|status
range|:
name|containerStatuses
control|)
block|{
if|if
condition|(
name|status
operator|.
name|getContainerId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAMRestartNotLostContainerCompleteMsg ()
specifier|public
name|void
name|testAMRestartNotLostContainerCompleteMsg
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"name"
argument_list|,
literal|"user"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"default"
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|"MAPREDUCE"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10240
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|allocateContainers
argument_list|(
name|nm1
argument_list|,
name|am1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// container complete
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|COMPLETED
argument_list|)
expr_stmt|;
comment|// make sure allocate() get complete container,
comment|// before this msg pass to AM, AM may crash
while|while
condition|(
literal|true
condition|)
block|{
name|AllocateResponse
name|response
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|response
operator|.
name|getCompletedContainersStatuses
argument_list|()
decl_stmt|;
if|if
condition|(
name|isContainerIdInContainerStatus
argument_list|(
name|containerStatuses
argument_list|,
name|containerId2
argument_list|)
operator|==
literal|false
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// is containerId still in justFinishedContainer?
name|containerStatuses
operator|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getJustFinishedContainers
argument_list|()
expr_stmt|;
if|if
condition|(
name|isContainerIdInContainerStatus
argument_list|(
name|containerStatuses
argument_list|,
name|containerId2
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
comment|// fail the AM by sending CONTAINER_FINISHED event without registering.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// wait for app to start a new attempt.
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
comment|// assert this is a new AM.
name|ApplicationAttemptId
name|newAttemptId
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|newAttemptId
operator|.
name|equals
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// launch the new AM
name|RMAppAttempt
name|attempt2
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am2
init|=
name|rm1
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// whether new AM could get container complete msg
name|AllocateResponse
name|allocateResponse
init|=
name|am2
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ContainerStatus
argument_list|>
name|containerStatuses
init|=
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
decl_stmt|;
if|if
condition|(
name|isContainerIdInContainerStatus
argument_list|(
name|containerStatuses
argument_list|,
name|containerId2
argument_list|)
operator|==
literal|false
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|containerStatuses
operator|=
name|attempt2
operator|.
name|getJustFinishedContainers
argument_list|()
expr_stmt|;
if|if
condition|(
name|isContainerIdInContainerStatus
argument_list|(
name|containerStatuses
argument_list|,
name|containerId2
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
comment|// the second allocate should not get container complete msg
name|allocateResponse
operator|=
name|am2
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|containerStatuses
operator|=
name|allocateResponse
operator|.
name|getCompletedContainersStatuses
argument_list|()
expr_stmt|;
if|if
condition|(
name|isContainerIdInContainerStatus
argument_list|(
name|containerStatuses
argument_list|,
name|containerId2
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test restarting AM launched with the KeepContainers and AM reset window.
comment|// after AM reset window, even if AM who was the last is failed,
comment|// all containers are launched by previous AM should be kept.
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAMRestartNotLostContainerAfterAttemptFailuresValidityInterval ()
specifier|public
name|void
name|testAMRestartNotLostContainerAfterAttemptFailuresValidityInterval
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
comment|// explicitly set max-am-retry count as 2.
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// set window size to 10s and enable keepContainers
name|RMAppImpl
name|app1
init|=
operator|(
name|RMAppImpl
operator|)
name|rm1
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|10000
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|int
name|NUM_CONTAINERS
init|=
literal|2
decl_stmt|;
name|allocateContainers
argument_list|(
name|nm1
argument_list|,
name|am1
argument_list|,
name|NUM_CONTAINERS
argument_list|)
expr_stmt|;
comment|// launch the 2nd container, for testing running container transferred.
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|,
name|ContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// Fail attempt1 normally
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// launch the second attempt
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// It will be the last attempt.
name|RMAppAttempt
name|attempt2
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am2
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
comment|// wait for 10 seconds to reset AM failure count
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Fail attempt2 normally
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
comment|// can launch the third attempt successfully
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app1
operator|.
name|getAppAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|MockAM
name|am3
init|=
name|rm1
operator|.
name|launchAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterResponse
name|registerResponse
init|=
name|am3
operator|.
name|registerAppAttempt
argument_list|()
decl_stmt|;
comment|// keepContainers is applied, even if attempt2 was the last attempt.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registerResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|containerId2Exists
init|=
literal|false
decl_stmt|;
name|Container
name|container
init|=
name|registerResponse
operator|.
name|getContainersFromPreviousAttempts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|containerId2
argument_list|)
condition|)
block|{
name|containerId2Exists
operator|=
literal|true
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containerId2Exists
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

