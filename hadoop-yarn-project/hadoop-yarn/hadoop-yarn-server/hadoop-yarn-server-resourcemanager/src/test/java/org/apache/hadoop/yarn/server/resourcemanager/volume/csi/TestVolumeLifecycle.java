begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.volume.csi
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|test
operator|.
name|GenericTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|CsiAdaptorProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ValidateVolumeCapabilitiesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|event
operator|.
name|ControllerPublishVolumeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|event
operator|.
name|ValidateVolumeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|VolumeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|volume
operator|.
name|csi
operator|.
name|lifecycle
operator|.
name|VolumeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|volume
operator|.
name|csi
operator|.
name|exception
operator|.
name|VolumeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Test cases for volume lifecycle management.  */
end_comment

begin_class
DECL|class|TestVolumeLifecycle
specifier|public
class|class
name|TestVolumeLifecycle
block|{
annotation|@
name|Test
DECL|method|testValidation ()
specifier|public
name|void
name|testValidation
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|ValidateVolumeCapabilitiesResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|VolumeImpl
name|volume
init|=
operator|(
name|VolumeImpl
operator|)
name|VolumeBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
literal|"test_vol_00000001"
argument_list|)
operator|.
name|maxCapability
argument_list|(
literal|5L
argument_list|)
operator|.
name|unit
argument_list|(
literal|"Gi"
argument_list|)
operator|.
name|mountPoint
argument_list|(
literal|"/path/to/mount"
argument_list|)
operator|.
name|driverName
argument_list|(
literal|"test-driver-name"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volume
operator|.
name|setClient
argument_list|(
name|mockedClient
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|NEW
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testVolumeCapacityNotSupported ()
specifier|public
name|void
name|testVolumeCapacityNotSupported
parameter_list|()
throws|throws
name|Exception
block|{
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|VolumeImpl
name|volume
init|=
operator|(
name|VolumeImpl
operator|)
name|VolumeBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
literal|"test_vol_00000001"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volume
operator|.
name|setClient
argument_list|(
name|mockedClient
argument_list|)
expr_stmt|;
comment|// NEW -> UNAVAILABLE
comment|// Simulate a failed API call to the adaptor
name|doReturn
argument_list|(
name|ValidateVolumeCapabilitiesResponse
operator|.
name|newInstance
argument_list|(
literal|false
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Verify the countdown did not happen
name|GenericTestUtils
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|volume
operator|.
name|getVolumeState
argument_list|()
operator|==
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Validate state not reached,"
operator|+
literal|" it should keep waiting until timeout"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|TimeoutException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testValidationFailure ()
specifier|public
name|void
name|testValidationFailure
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|doThrow
argument_list|(
operator|new
name|VolumeException
argument_list|(
literal|"fail"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|VolumeImpl
name|volume
init|=
operator|(
name|VolumeImpl
operator|)
name|VolumeBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
literal|"test_vol_00000001"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|volume
operator|.
name|setClient
argument_list|(
name|mockedClient
argument_list|)
expr_stmt|;
comment|// NEW -> UNAVAILABLE
comment|// Simulate a failed API call to the adaptor
name|doThrow
argument_list|(
operator|new
name|VolumeException
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testValidated ()
specifier|public
name|void
name|testValidated
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|VolumeImpl
name|volume
init|=
operator|(
name|VolumeImpl
operator|)
name|VolumeBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
literal|"test_vol_00000001"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The client has a count to memorize how many times being called
name|volume
operator|.
name|setClient
argument_list|(
name|mockedClient
argument_list|)
expr_stmt|;
comment|// NEW -> VALIDATED
name|doReturn
argument_list|(
name|ValidateVolumeCapabilitiesResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|NEW
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockedClient
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// VALIDATED -> VALIDATED
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockedClient
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUnavailableState ()
specifier|public
name|void
name|testUnavailableState
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|VolumeImpl
name|volume
init|=
operator|(
name|VolumeImpl
operator|)
name|VolumeBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
literal|"test_vol_00000001"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|volume
operator|.
name|setClient
argument_list|(
name|mockedClient
argument_list|)
expr_stmt|;
comment|// NEW -> UNAVAILABLE
name|doThrow
argument_list|(
operator|new
name|VolumeException
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|NEW
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNAVAILABLE -> UNAVAILABLE
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNAVAILABLE -> VALIDATED
name|doReturn
argument_list|(
name|ValidateVolumeCapabilitiesResponse
operator|.
name|newInstance
argument_list|(
literal|true
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|volume
operator|.
name|setClient
argument_list|(
name|mockedClient
argument_list|)
expr_stmt|;
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|VALIDATED
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPublishUnavailableVolume ()
specifier|public
name|void
name|testPublishUnavailableVolume
parameter_list|()
throws|throws
name|YarnException
throws|,
name|IOException
block|{
name|VolumeImpl
name|volume
init|=
operator|(
name|VolumeImpl
operator|)
name|VolumeBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|volumeId
argument_list|(
literal|"test_vol_00000001"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|CsiAdaptorProtocol
name|mockedClient
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|CsiAdaptorProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
name|volume
operator|.
name|setClient
argument_list|(
name|mockedClient
argument_list|)
expr_stmt|;
comment|// NEW -> UNAVAILABLE (on validateVolume)
name|doThrow
argument_list|(
operator|new
name|VolumeException
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockedClient
argument_list|)
operator|.
name|validateVolumeCapacity
argument_list|(
name|any
argument_list|(
name|ValidateVolumeCapabilitiesRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|NEW
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ValidateVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
comment|// UNAVAILABLE -> UNAVAILABLE (on publishVolume)
name|volume
operator|.
name|handle
argument_list|(
operator|new
name|ControllerPublishVolumeEvent
argument_list|(
name|volume
argument_list|)
argument_list|)
expr_stmt|;
comment|// controller publish is not called since the state is UNAVAILABLE
comment|// verify(mockedClient, times(0)).controllerPublishVolume();
comment|// state remains to UNAVAILABLE
name|Assert
operator|.
name|assertEquals
argument_list|(
name|VolumeState
operator|.
name|UNAVAILABLE
argument_list|,
name|volume
operator|.
name|getVolumeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

