begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.security
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|FinishApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|AMRMTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMSecretManagerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestAMAuthorization
operator|.
name|MockRMWithAMS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestAMAuthorization
operator|.
name|MyContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|event
operator|.
name|RMAppAttemptContainerFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|MasterKeyData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ConverterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
DECL|class|TestAMRMTokens
specifier|public
class|class
name|TestAMRMTokens
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAMRMTokens
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|conf
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
DECL|field|maxWaitAttempts
specifier|private
specifier|static
specifier|final
name|int
name|maxWaitAttempts
init|=
literal|50
decl_stmt|;
DECL|field|rolling_interval_sec
specifier|private
specifier|static
specifier|final
name|int
name|rolling_interval_sec
init|=
literal|13
decl_stmt|;
DECL|field|am_expire_ms
specifier|private
specifier|static
specifier|final
name|long
name|am_expire_ms
init|=
literal|4000
decl_stmt|;
annotation|@
name|Parameters
DECL|method|configs ()
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|configs
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Configuration
name|confWithSecurity
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|confWithSecurity
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|conf
block|}
block|,
block|{
name|confWithSecurity
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|TestAMRMTokens (Configuration conf)
specifier|public
name|TestAMRMTokens
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Validate that application tokens are unusable after the    * application-finishes.    *     * @throws Exception    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testTokenExpiry ()
specifier|public
name|void
name|testTokenExpiry
parameter_list|()
throws|throws
name|Exception
block|{
name|MyContainerManager
name|containerManager
init|=
operator|new
name|MyContainerManager
argument_list|()
decl_stmt|;
specifier|final
name|MockRMWithAMS
name|rm
init|=
operator|new
name|MockRMWithAMS
argument_list|(
name|conf
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|rm
operator|.
name|getConfig
argument_list|()
decl_stmt|;
specifier|final
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ApplicationMasterProtocol
name|rmClient
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containerManager
operator|.
name|containerTokens
operator|==
literal|null
operator|&&
name|waitCount
operator|++
operator|<
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for AM Launch to happen.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerManager
operator|.
name|containerTokens
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
comment|// Create a client to the RM.
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|applicationAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
name|containerManager
operator|.
name|getContainerCredentials
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|rmBindAddress
init|=
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|amRMToken
init|=
name|MockRMWithAMS
operator|.
name|setupAndReturnAMRMToken
argument_list|(
name|rmBindAddress
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
argument_list|)
decl_stmt|;
name|currentUser
operator|.
name|addToken
argument_list|(
name|amRMToken
argument_list|)
expr_stmt|;
name|rmClient
operator|=
name|createRMClient
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|rpc
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|rmClient
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|FinishApplicationMasterRequest
name|finishAMRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|FinishApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|finishAMRequest
operator|.
name|setFinalApplicationStatus
argument_list|(
name|FinalApplicationStatus
operator|.
name|SUCCEEDED
argument_list|)
expr_stmt|;
name|finishAMRequest
operator|.
name|setDiagnostics
argument_list|(
literal|"diagnostics"
argument_list|)
expr_stmt|;
name|finishAMRequest
operator|.
name|setTrackingUrl
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|rmClient
operator|.
name|finishApplicationMaster
argument_list|(
name|finishAMRequest
argument_list|)
expr_stmt|;
comment|// Send RMAppAttemptEventType.CONTAINER_FINISHED to transit RMAppAttempt
comment|// from Finishing state to Finished State. Both AMRMToken and
comment|// ClientToAMToken will be removed.
name|ContainerStatus
name|containerStatus
init|=
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|attempt
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|"AM Container Finished"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|.
name|getEventHandler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|RMAppAttemptContainerFinishedEvent
argument_list|(
name|applicationAttemptId
argument_list|,
name|containerStatus
argument_list|,
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the RMAppAttempt is at Finished State.
comment|// Both AMRMToken and ClientToAMToken have been removed.
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|attempt
operator|.
name|getState
argument_list|()
operator|!=
name|RMAppAttemptState
operator|.
name|FINISHED
operator|&&
name|count
operator|<
name|maxWaitAttempts
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|attempt
operator|.
name|getState
argument_list|()
operator|==
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
comment|// Now simulate trying to allocate. RPC call itself should throw auth
comment|// exception.
name|rpc
operator|.
name|stopProxy
argument_list|(
name|rmClient
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// To avoid using cached client
name|rmClient
operator|=
name|createRMClient
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|rpc
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"You got to be kidding me! "
operator|+
literal|"Using App tokens after app-finish should fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception found is "
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// The exception will still have the earlier appAttemptId as it picks it
comment|// up from the token.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|applicationAttemptId
operator|.
name|toString
argument_list|()
operator|+
literal|" not found in AMRMTokenSecretManager."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|rpc
operator|.
name|stopProxy
argument_list|(
name|rmClient
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// To avoid using cached client
block|}
block|}
block|}
comment|/**    * Validate master-key-roll-over and that tokens are usable even after    * master-key-roll-over.    *     * @throws Exception    */
annotation|@
name|Test
DECL|method|testMasterKeyRollOver ()
specifier|public
name|void
name|testMasterKeyRollOver
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS
argument_list|,
name|rolling_interval_sec
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_EXPIRY_INTERVAL_MS
argument_list|,
name|am_expire_ms
argument_list|)
expr_stmt|;
name|MyContainerManager
name|containerManager
init|=
operator|new
name|MyContainerManager
argument_list|()
decl_stmt|;
specifier|final
name|MockRMWithAMS
name|rm
init|=
operator|new
name|MockRMWithAMS
argument_list|(
name|conf
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|Long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|rm
operator|.
name|getConfig
argument_list|()
decl_stmt|;
specifier|final
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ApplicationMasterProtocol
name|rmClient
init|=
literal|null
decl_stmt|;
name|AMRMTokenSecretManager
name|appTokenSecretManager
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
decl_stmt|;
name|MasterKeyData
name|oldKey
init|=
name|appTokenSecretManager
operator|.
name|getMasterKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|oldKey
argument_list|)
expr_stmt|;
try|try
block|{
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|containerManager
operator|.
name|containerTokens
operator|==
literal|null
operator|&&
name|waitCount
operator|++
operator|<
name|maxWaitAttempts
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for AM Launch to happen.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|containerManager
operator|.
name|containerTokens
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
comment|// Create a client to the RM.
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|applicationAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
name|containerManager
operator|.
name|getContainerCredentials
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|rmBindAddress
init|=
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|amRMToken
init|=
name|MockRMWithAMS
operator|.
name|setupAndReturnAMRMToken
argument_list|(
name|rmBindAddress
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
argument_list|)
decl_stmt|;
name|currentUser
operator|.
name|addToken
argument_list|(
name|amRMToken
argument_list|)
expr_stmt|;
name|rmClient
operator|=
name|createRMClient
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|rpc
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|RegisterApplicationMasterRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RegisterApplicationMasterRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|rmClient
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// One allocate call.
name|AllocateRequest
name|allocateRequest
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
operator|.
name|getAMCommand
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Wait for enough time and make sure the roll_over happens
comment|// At mean time, the old AMRMToken should continue to work
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|<
name|rolling_interval_sec
operator|*
literal|1000
condition|)
block|{
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|MasterKeyData
name|newKey
init|=
name|appTokenSecretManager
operator|.
name|getMasterKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|newKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Master key should have changed!"
argument_list|,
name|oldKey
operator|.
name|equals
argument_list|(
name|newKey
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another allocate call with old AMRMToken. Should continue to work.
name|rpc
operator|.
name|stopProxy
argument_list|(
name|rmClient
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// To avoid using cached client
name|rmClient
operator|=
name|createRMClient
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|rpc
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
operator|.
name|getAMCommand
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|waitCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|waitCount
operator|++
operator|<=
name|maxWaitAttempts
condition|)
block|{
if|if
condition|(
name|appTokenSecretManager
operator|.
name|getCurrnetMasterKeyData
argument_list|()
operator|!=
name|oldKey
condition|)
block|{
break|break;
block|}
try|try
block|{
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// active the nextMasterKey, and replace the currentMasterKey
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appTokenSecretManager
operator|.
name|getCurrnetMasterKeyData
argument_list|()
operator|.
name|equals
argument_list|(
name|newKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appTokenSecretManager
operator|.
name|getMasterKey
argument_list|()
operator|.
name|equals
argument_list|(
name|newKey
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|appTokenSecretManager
operator|.
name|getNextMasterKeyData
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Create a new Token
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|newToken
init|=
name|appTokenSecretManager
operator|.
name|createAndGetAMRMToken
argument_list|(
name|applicationAttemptId
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|newToken
argument_list|,
name|rmBindAddress
argument_list|)
expr_stmt|;
name|currentUser
operator|.
name|addToken
argument_list|(
name|newToken
argument_list|)
expr_stmt|;
comment|// Another allocate call. Should continue to work.
name|rpc
operator|.
name|stopProxy
argument_list|(
name|rmClient
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// To avoid using cached client
name|rmClient
operator|=
name|createRMClient
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|rpc
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|allocateRequest
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
operator|.
name|getAMCommand
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Should not work by using the old AMRMToken.
name|rpc
operator|.
name|stopProxy
argument_list|(
name|rmClient
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// To avoid using cached client
try|try
block|{
name|currentUser
operator|.
name|addToken
argument_list|(
name|amRMToken
argument_list|)
expr_stmt|;
name|rmClient
operator|=
name|createRMClient
argument_list|(
name|rm
argument_list|,
name|conf
argument_list|,
name|rpc
argument_list|,
name|currentUser
argument_list|)
expr_stmt|;
name|allocateRequest
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rmClient
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
operator|.
name|getAMCommand
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The old Token should not work"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// expect exception
block|}
block|}
finally|finally
block|{
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|rmClient
operator|!=
literal|null
condition|)
block|{
name|rpc
operator|.
name|stopProxy
argument_list|(
name|rmClient
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// To avoid using cached client
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|20000
argument_list|)
DECL|method|testAMRMMasterKeysUpdate ()
specifier|public
name|void
name|testAMRMMasterKeysUpdate
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicReference
argument_list|<
name|AMRMTokenSecretManager
argument_list|>
name|spySecretMgrRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|AMRMTokenSecretManager
argument_list|>
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doSecureLogin
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Skip the login.
block|}
annotation|@
name|Override
specifier|protected
name|RMSecretManagerService
name|createRMSecretManagerService
parameter_list|()
block|{
return|return
operator|new
name|RMSecretManagerService
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|AMRMTokenSecretManager
name|createAMRMTokenSecretManager
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|RMContext
name|rmContext
parameter_list|)
block|{
name|AMRMTokenSecretManager
name|spySecretMgr
init|=
name|spy
argument_list|(
name|super
operator|.
name|createAMRMTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|spySecretMgrRef
operator|.
name|set
argument_list|(
name|spySecretMgr
argument_list|)
expr_stmt|;
return|return
name|spySecretMgr
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm
argument_list|)
decl_stmt|;
name|AMRMTokenSecretManager
name|spySecretMgr
init|=
name|spySecretMgrRef
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Do allocate. Should not update AMRMToken
name|AllocateResponse
name|response
init|=
name|am
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|oldToken
init|=
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getRMAppAttempt
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|getAMRMToken
argument_list|()
decl_stmt|;
comment|// roll over the master key
comment|// Do allocate again. the AM should get the latest AMRMToken
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
name|Token
argument_list|<
name|AMRMTokenIdentifier
argument_list|>
name|amrmToken
init|=
name|ConverterUtils
operator|.
name|convertFromYarn
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
operator|.
name|getService
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|amrmToken
operator|.
name|decodeIdentifier
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|,
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getMasterKey
argument_list|()
operator|.
name|getKeyId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do allocate again with the same old token and verify the RM sends
comment|// back the last generated token instead of generating it again.
name|reset
argument_list|(
name|spySecretMgr
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createUserForTesting
argument_list|(
name|am
operator|.
name|getApplicationAttemptId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addTokenIdentifier
argument_list|(
name|oldToken
operator|.
name|decodeIdentifier
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|am
operator|.
name|doAllocateAs
argument_list|(
name|ugi
argument_list|,
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spySecretMgr
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|createAndGetAMRMToken
argument_list|(
name|isA
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do allocate again with the updated token and verify we do not
comment|// receive a new token to use.
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
comment|// Activate the next master key. Since there is new master key generated
comment|// in AMRMTokenSecretManager. The AMRMToken will not get updated for AM
name|rm
operator|.
name|getRMContext
argument_list|()
operator|.
name|getAMRMTokenSecretManager
argument_list|()
operator|.
name|activateNextMasterKey
argument_list|()
expr_stmt|;
name|response
operator|=
name|am
operator|.
name|allocate
argument_list|(
name|Records
operator|.
name|newRecord
argument_list|(
name|AllocateRequest
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|response
operator|.
name|getAMRMToken
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|createRMClient (final MockRM rm, final Configuration conf, final YarnRPC rpc, UserGroupInformation currentUser)
specifier|private
name|ApplicationMasterProtocol
name|createRMClient
parameter_list|(
specifier|final
name|MockRM
name|rm
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|YarnRPC
name|rpc
parameter_list|,
name|UserGroupInformation
name|currentUser
parameter_list|)
block|{
return|return
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ApplicationMasterProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationMasterProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ApplicationMasterProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

