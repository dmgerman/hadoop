begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*******************************************************************************  *   Licensed to the Apache Software Foundation (ASF) under one  *   or more contributor license agreements.  See the NOTICE file  *   distributed with this work for additional information  *   regarding copyright ownership.  The ASF licenses this file  *   to you under the Apache License, Version 2.0 (the  *   "License"); you may not use this file except in compliance  *   with the License.  You may obtain a copy of the License at  *    *       http://www.apache.org/licenses/LICENSE-2.0  *    *   Unless required by applicable law or agreed to in writing, software  *   distributed under the License is distributed on an "AS IS" BASIS,  *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *   See the License for the specific language governing permissions and  *   limitations under the License.  *******************************************************************************/
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.reservation
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationDeleteRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationListRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationSubmissionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ReservationUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|ReservationDeleteRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|ReservationListRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|ReservationSubmissionRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|impl
operator|.
name|pb
operator|.
name|ReservationUpdateRequestPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequestInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ReservationRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ReservationDefinitionPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ReservationRequestsPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestReservationInputValidator
specifier|public
class|class
name|TestReservationInputValidator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReservationInputValidator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|PLAN_NAME
specifier|private
specifier|static
specifier|final
name|String
name|PLAN_NAME
init|=
literal|"test-reservation"
decl_stmt|;
DECL|field|clock
specifier|private
name|Clock
name|clock
decl_stmt|;
DECL|field|plans
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Plan
argument_list|>
name|plans
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Plan
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|rSystem
specifier|private
name|ReservationSystem
name|rSystem
decl_stmt|;
DECL|field|plan
specifier|private
name|Plan
name|plan
decl_stmt|;
DECL|field|rrValidator
specifier|private
name|ReservationInputValidator
name|rrValidator
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|clock
operator|=
name|mock
argument_list|(
name|Clock
operator|.
name|class
argument_list|)
expr_stmt|;
name|plan
operator|=
name|mock
argument_list|(
name|Plan
operator|.
name|class
argument_list|)
expr_stmt|;
name|rSystem
operator|=
name|mock
argument_list|(
name|ReservationSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|plans
operator|.
name|put
argument_list|(
name|PLAN_NAME
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|rrValidator
operator|=
operator|new
name|ReservationInputValidator
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|ResourceCalculator
name|rCalc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|10240
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|plan
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rCalc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|plan
operator|.
name|getTotalCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|plan
operator|.
name|getMaximumPeriodicity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getQueueForReservation
argument_list|(
name|any
argument_list|(
name|ReservationId
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PLAN_NAME
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|PLAN_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|rrValidator
operator|=
literal|null
expr_stmt|;
name|clock
operator|=
literal|null
expr_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationNormal ()
specifier|public
name|void
name|testSubmitReservationNormal
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationDoesNotExist ()
specifier|public
name|void
name|testSubmitReservationDoesNotExist
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
operator|new
name|ReservationSubmissionRequestPBImpl
argument_list|()
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The queue is not specified. Please try again with a "
operator|+
literal|"valid reservable queue."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationInvalidPlan ()
specifier|public
name|void
name|testSubmitReservationInvalidPlan
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|PLAN_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|endsWith
argument_list|(
literal|" is not managed by reservation system. Please try again with a valid reservable queue."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationNoDefinition ()
specifier|public
name|void
name|testSubmitReservationNoDefinition
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
operator|new
name|ReservationSubmissionRequestPBImpl
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQueue
argument_list|(
name|PLAN_NAME
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Missing reservation definition. Please try again by "
operator|+
literal|"specifying a reservation definition."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationInvalidDeadline ()
specifier|public
name|void
name|testSubmitReservationInvalidDeadline
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"The specified deadline: 0 is the past"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationInvalidRR ()
specifier|public
name|void
name|testSubmitReservationInvalidRR
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"No resources have been specified to reserve"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationEmptyRR ()
specifier|public
name|void
name|testSubmitReservationEmptyRR
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"No resources have been specified to reserve"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationInvalidDuration ()
specifier|public
name|void
name|testSubmitReservationInvalidDuration
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"The time difference"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
literal|"must  be greater or equal to the minimum resource duration"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationExceedsGangSize ()
specifier|public
name|void
name|testSubmitReservationExceedsGangSize
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|plan
operator|.
name|getTotalCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"The size of the largest gang in the reservation definition"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
literal|"exceed the capacity available "
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationValidRecurrenceExpression ()
specifier|public
name|void
name|testSubmitReservationValidRecurrenceExpression
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|"600000"
argument_list|)
decl_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationNegativeRecurrenceExpression ()
specifier|public
name|void
name|testSubmitReservationNegativeRecurrenceExpression
parameter_list|()
block|{
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|"-1234"
argument_list|)
decl_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Negative Period : "
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationMaxPeriodIndivisibleByRecurrenceExp ()
specifier|public
name|void
name|testSubmitReservationMaxPeriodIndivisibleByRecurrenceExp
parameter_list|()
block|{
name|long
name|indivisibleRecurrence
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_RESERVATION_SYSTEM_MAX_PERIODICITY
operator|/
literal|2
operator|+
literal|1
decl_stmt|;
name|String
name|recurrenceExp
init|=
name|Long
operator|.
name|toString
argument_list|(
name|indivisibleRecurrence
argument_list|)
decl_stmt|;
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
name|recurrenceExp
argument_list|)
decl_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"The maximum periodicity:"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSubmitReservationInvalidRecurrenceExpression ()
specifier|public
name|void
name|testSubmitReservationInvalidRecurrenceExpression
parameter_list|()
block|{
comment|// first check recurrence expression
name|ReservationSubmissionRequest
name|request
init|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|"123abc"
argument_list|)
decl_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Invalid period "
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// now check duration
name|request
operator|=
name|createSimpleReservationSubmissionRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|3
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationSubmissionRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|,
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Duration of the requested reservation:"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationNormal ()
specifier|public
name|void
name|testUpdateReservationNormal
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationNoID ()
specifier|public
name|void
name|testUpdateReservationNoID
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
operator|new
name|ReservationUpdateRequestPBImpl
argument_list|()
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Missing reservation id. Please try again by specifying a reservation id."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationDoesnotExist ()
specifier|public
name|void
name|testUpdateReservationDoesnotExist
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ReservationId
name|rId
init|=
name|request
operator|.
name|getReservationId
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getQueueForReservation
argument_list|(
name|rId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|equals
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"The specified reservation with ID: {0} is unknown. Please try again with a valid reservation."
argument_list|,
name|rId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationInvalidPlan ()
specifier|public
name|void
name|testUpdateReservationInvalidPlan
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|PLAN_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|endsWith
argument_list|(
literal|" is not associated with any valid plan. Please try again with a valid reservation."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationNoDefinition ()
specifier|public
name|void
name|testUpdateReservationNoDefinition
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
operator|new
name|ReservationUpdateRequestPBImpl
argument_list|()
decl_stmt|;
name|request
operator|.
name|setReservationId
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Missing reservation definition. Please try again by specifying a reservation definition."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationInvalidDeadline ()
specifier|public
name|void
name|testUpdateReservationInvalidDeadline
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"The specified deadline: 0 is the past"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationInvalidRR ()
specifier|public
name|void
name|testUpdateReservationInvalidRR
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"No resources have been specified to reserve"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationEmptyRR ()
specifier|public
name|void
name|testUpdateReservationEmptyRR
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"No resources have been specified to reserve"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationInvalidDuration ()
specifier|public
name|void
name|testUpdateReservationInvalidDuration
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
literal|"must  be greater or equal to the minimum resource duration"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationExceedsGangSize ()
specifier|public
name|void
name|testUpdateReservationExceedsGangSize
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|plan
operator|.
name|getTotalCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"The size of the largest gang in the reservation definition"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|contains
argument_list|(
literal|"exceed the capacity available "
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationValidRecurrenceExpression ()
specifier|public
name|void
name|testUpdateReservationValidRecurrenceExpression
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|"600000"
argument_list|)
decl_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationNegativeRecurrenceExpression ()
specifier|public
name|void
name|testUpdateReservationNegativeRecurrenceExpression
parameter_list|()
block|{
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|"-1234"
argument_list|)
decl_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Negative Period : "
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateReservationInvalidRecurrenceExpression ()
specifier|public
name|void
name|testUpdateReservationInvalidRecurrenceExpression
parameter_list|()
block|{
comment|// first check recurrence expression
name|ReservationUpdateRequest
name|request
init|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
literal|"123abc"
argument_list|)
decl_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Invalid period "
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// now check duration
name|request
operator|=
name|createSimpleReservationUpdateRequest
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|3
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|plan
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationUpdateRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Duration of the requested reservation:"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteReservationNormal ()
specifier|public
name|void
name|testDeleteReservationNormal
parameter_list|()
block|{
name|ReservationDeleteRequest
name|request
init|=
operator|new
name|ReservationDeleteRequestPBImpl
argument_list|()
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|request
operator|.
name|setReservationId
argument_list|(
name|reservationID
argument_list|)
expr_stmt|;
name|ReservationAllocation
name|reservation
init|=
name|mock
argument_list|(
name|ReservationAllocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|plan
operator|.
name|getReservationById
argument_list|(
name|reservationID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationDeleteRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteReservationNoID ()
specifier|public
name|void
name|testDeleteReservationNoID
parameter_list|()
block|{
name|ReservationDeleteRequest
name|request
init|=
operator|new
name|ReservationDeleteRequestPBImpl
argument_list|()
decl_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationDeleteRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|startsWith
argument_list|(
literal|"Missing reservation id. Please try again by specifying a reservation id."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteReservationDoesnotExist ()
specifier|public
name|void
name|testDeleteReservationDoesnotExist
parameter_list|()
block|{
name|ReservationDeleteRequest
name|request
init|=
operator|new
name|ReservationDeleteRequestPBImpl
argument_list|()
decl_stmt|;
name|ReservationId
name|rId
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|request
operator|.
name|setReservationId
argument_list|(
name|rId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getQueueForReservation
argument_list|(
name|rId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationDeleteRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|equals
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"The specified reservation with ID: {0} is unknown. Please try again with a valid reservation."
argument_list|,
name|rId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDeleteReservationInvalidPlan ()
specifier|public
name|void
name|testDeleteReservationInvalidPlan
parameter_list|()
block|{
name|ReservationDeleteRequest
name|request
init|=
operator|new
name|ReservationDeleteRequestPBImpl
argument_list|()
decl_stmt|;
name|ReservationId
name|reservationID
init|=
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
decl_stmt|;
name|request
operator|.
name|setReservationId
argument_list|(
name|reservationID
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|PLAN_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationDeleteRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|endsWith
argument_list|(
literal|" is not associated with any valid plan. Please try again with a valid reservation."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListReservationsNormal ()
specifier|public
name|void
name|testListReservationsNormal
parameter_list|()
block|{
name|ReservationListRequest
name|request
init|=
operator|new
name|ReservationListRequestPBImpl
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQueue
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEndTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStartTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|plan
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationListRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListReservationsInvalidTimeIntervalDefaults ()
specifier|public
name|void
name|testListReservationsInvalidTimeIntervalDefaults
parameter_list|()
block|{
name|ReservationListRequest
name|request
init|=
operator|new
name|ReservationListRequestPBImpl
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQueue
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
expr_stmt|;
comment|// Negative time gets converted to default values for Start Time and End
comment|// Time which are 0 and Long.MAX_VALUE respectively.
name|request
operator|.
name|setEndTime
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStartTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|plan
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationListRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListReservationsInvalidTimeInterval ()
specifier|public
name|void
name|testListReservationsInvalidTimeInterval
parameter_list|()
block|{
name|ReservationListRequest
name|request
init|=
operator|new
name|ReservationListRequestPBImpl
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQueue
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEndTime
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStartTime
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|this
operator|.
name|plan
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationListRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|equals
argument_list|(
literal|"The specified end time must be "
operator|+
literal|"greater than the specified start time."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListReservationsEmptyQueue ()
specifier|public
name|void
name|testListReservationsEmptyQueue
parameter_list|()
block|{
name|ReservationListRequest
name|request
init|=
operator|new
name|ReservationListRequestPBImpl
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQueue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationListRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|equals
argument_list|(
literal|"The queue is not specified. Please try again with a valid "
operator|+
literal|"reservable queue."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testListReservationsNullPlan ()
specifier|public
name|void
name|testListReservationsNullPlan
parameter_list|()
block|{
name|ReservationListRequest
name|request
init|=
operator|new
name|ReservationListRequestPBImpl
argument_list|()
decl_stmt|;
name|request
operator|.
name|setQueue
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rSystem
operator|.
name|getPlan
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|reservationQ
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Plan
name|plan
init|=
literal|null
decl_stmt|;
try|try
block|{
name|plan
operator|=
name|rrValidator
operator|.
name|validateReservationListRequest
argument_list|(
name|rSystem
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertNull
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|message
operator|.
name|equals
argument_list|(
literal|"The specified queue: "
operator|+
name|ReservationSystemTestUtil
operator|.
name|reservationQ
operator|+
literal|" is not managed by reservation system."
operator|+
literal|" Please try again with a valid reservable queue."
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSimpleReservationSubmissionRequest ( int numRequests, int numContainers, long arrival, long deadline, long duration)
specifier|private
name|ReservationSubmissionRequest
name|createSimpleReservationSubmissionRequest
parameter_list|(
name|int
name|numRequests
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
return|return
name|createSimpleReservationSubmissionRequest
argument_list|(
name|numRequests
argument_list|,
name|numContainers
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|,
literal|"0"
argument_list|)
return|;
block|}
DECL|method|createSimpleReservationSubmissionRequest ( int numRequests, int numContainers, long arrival, long deadline, long duration, String recurrence)
specifier|private
name|ReservationSubmissionRequest
name|createSimpleReservationSubmissionRequest
parameter_list|(
name|int
name|numRequests
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|duration
parameter_list|,
name|String
name|recurrence
parameter_list|)
block|{
comment|// create a request with a single atomic ask
name|ReservationSubmissionRequest
name|request
init|=
operator|new
name|ReservationSubmissionRequestPBImpl
argument_list|()
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
operator|new
name|ReservationDefinitionPBImpl
argument_list|()
decl_stmt|;
name|rDef
operator|.
name|setArrival
argument_list|(
name|arrival
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setDeadline
argument_list|(
name|deadline
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setRecurrenceExpression
argument_list|(
name|recurrence
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRequests
operator|>
literal|0
condition|)
block|{
name|ReservationRequests
name|reqs
init|=
operator|new
name|ReservationRequestsPBImpl
argument_list|()
decl_stmt|;
name|rDef
operator|.
name|setReservationRequests
argument_list|(
name|reqs
argument_list|)
expr_stmt|;
if|if
condition|(
name|numContainers
operator|>
literal|0
condition|)
block|{
name|ReservationRequest
name|r
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|numContainers
argument_list|,
literal|1
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|setReservationResources
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|setInterpreter
argument_list|(
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setQueue
argument_list|(
name|PLAN_NAME
argument_list|)
expr_stmt|;
name|request
operator|.
name|setReservationDefinition
argument_list|(
name|rDef
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
DECL|method|createSimpleReservationUpdateRequest ( int numRequests, int numContainers, long arrival, long deadline, long duration)
specifier|private
name|ReservationUpdateRequest
name|createSimpleReservationUpdateRequest
parameter_list|(
name|int
name|numRequests
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|duration
parameter_list|)
block|{
return|return
name|createSimpleReservationUpdateRequest
argument_list|(
name|numRequests
argument_list|,
name|numContainers
argument_list|,
name|arrival
argument_list|,
name|deadline
argument_list|,
name|duration
argument_list|,
literal|"0"
argument_list|)
return|;
block|}
DECL|method|createSimpleReservationUpdateRequest ( int numRequests, int numContainers, long arrival, long deadline, long duration, String recurrence)
specifier|private
name|ReservationUpdateRequest
name|createSimpleReservationUpdateRequest
parameter_list|(
name|int
name|numRequests
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|long
name|arrival
parameter_list|,
name|long
name|deadline
parameter_list|,
name|long
name|duration
parameter_list|,
name|String
name|recurrence
parameter_list|)
block|{
comment|// create a request with a single atomic ask
name|ReservationUpdateRequest
name|request
init|=
operator|new
name|ReservationUpdateRequestPBImpl
argument_list|()
decl_stmt|;
name|ReservationDefinition
name|rDef
init|=
operator|new
name|ReservationDefinitionPBImpl
argument_list|()
decl_stmt|;
name|rDef
operator|.
name|setArrival
argument_list|(
name|arrival
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setDeadline
argument_list|(
name|deadline
argument_list|)
expr_stmt|;
name|rDef
operator|.
name|setRecurrenceExpression
argument_list|(
name|recurrence
argument_list|)
expr_stmt|;
if|if
condition|(
name|numRequests
operator|>
literal|0
condition|)
block|{
name|ReservationRequests
name|reqs
init|=
operator|new
name|ReservationRequestsPBImpl
argument_list|()
decl_stmt|;
name|rDef
operator|.
name|setReservationRequests
argument_list|(
name|reqs
argument_list|)
expr_stmt|;
if|if
condition|(
name|numContainers
operator|>
literal|0
condition|)
block|{
name|ReservationRequest
name|r
init|=
name|ReservationRequest
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|numContainers
argument_list|,
literal|1
argument_list|,
name|duration
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|setReservationResources
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|setInterpreter
argument_list|(
name|ReservationRequestInterpreter
operator|.
name|R_ALL
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setReservationDefinition
argument_list|(
name|rDef
argument_list|)
expr_stmt|;
name|request
operator|.
name|setReservationId
argument_list|(
name|ReservationSystemTestUtil
operator|.
name|getNewReservationId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
block|}
end_class

end_unit

