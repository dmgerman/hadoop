begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerExitStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|DrainDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|applicationsmanager
operator|.
name|TestAMRestart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Validate system behavior when the am-scheduling logic 'blacklists' a node for  * an application because of AM failures.  */
end_comment

begin_class
DECL|class|TestNodeBlacklistingOnAMFailures
specifier|public
class|class
name|TestNodeBlacklistingOnAMFailures
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testNodeBlacklistingOnAMFailure ()
specifier|public
name|void
name|testNodeBlacklistingOnAMFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
name|startRM
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|scheduler
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Register 5 nodes, so that we can blacklist atleast one if AM container
comment|// is failed. As per calculation it will be like, 5nodes * 0.2 (default)=1.
comment|// First register 2 nodes, and after AM lauched register 3 more nodes.
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockNM
name|nm2
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.2:2345"
argument_list|,
literal|8000
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm2
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app
argument_list|,
name|rm
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|amContainerId
argument_list|)
decl_stmt|;
name|NodeId
name|nodeWhereAMRan
init|=
name|rmContainer
operator|.
name|getAllocatedNode
argument_list|()
decl_stmt|;
name|MockNM
name|currentNode
decl_stmt|,
name|otherNode
decl_stmt|;
if|if
condition|(
name|nodeWhereAMRan
operator|.
name|equals
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|currentNode
operator|=
name|nm1
expr_stmt|;
name|otherNode
operator|=
name|nm2
expr_stmt|;
block|}
else|else
block|{
name|currentNode
operator|=
name|nm2
expr_stmt|;
name|otherNode
operator|=
name|nm1
expr_stmt|;
block|}
comment|// register 3 nodes now
name|MockNM
name|nm3
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.3:2345"
argument_list|,
literal|8000
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm3
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockNM
name|nm4
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.4:2345"
argument_list|,
literal|8000
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm4
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|MockNM
name|nm5
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.5:2345"
argument_list|,
literal|8000
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm5
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// Set the exist status to INVALID so that we can verify that the system
comment|// automatically blacklisting the node
name|makeAMContainerExit
argument_list|(
name|rm
argument_list|,
name|amContainerId
argument_list|,
name|currentNode
argument_list|,
name|ContainerExitStatus
operator|.
name|INVALID
argument_list|)
expr_stmt|;
comment|// restart the am
name|RMAppAttempt
name|attempt
init|=
name|MockRM
operator|.
name|waitForAttemptScheduled
argument_list|(
name|app
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"New AppAttempt launched "
operator|+
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try the current node a few times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|currentNode
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AppAttemptState should still be SCHEDULED if currentNode is "
operator|+
literal|"blacklisted correctly"
argument_list|,
name|RMAppAttemptState
operator|.
name|SCHEDULED
argument_list|,
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now try the other node
name|otherNode
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Now the AM container should be allocated
name|MockRM
operator|.
name|waitForState
argument_list|(
name|attempt
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|MockAM
name|am2
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|amContainerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rmContainer
operator|=
name|scheduler
operator|.
name|getRMContainer
argument_list|(
name|amContainerId
argument_list|)
expr_stmt|;
name|nodeWhereAMRan
operator|=
name|rmContainer
operator|.
name|getAllocatedNode
argument_list|()
expr_stmt|;
comment|// The other node should now receive the assignment
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"After blacklisting, AM should have run on the other node"
argument_list|,
name|otherNode
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|nodeWhereAMRan
argument_list|)
expr_stmt|;
name|am2
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|TestAMRestart
operator|.
name|allocateContainers
argument_list|(
name|currentNode
argument_list|,
name|am2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Even though AM is blacklisted from the node, application can "
operator|+
literal|"still allocate non-AM containers there"
argument_list|,
name|currentNode
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|allocatedContainers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
DECL|method|testNoBlacklistingForNonSystemErrors ()
specifier|public
name|void
name|testNoBlacklistingForNonSystemErrors
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AM_SCHEDULING_NODE_BLACKLISTING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// disable the float so it is possible to blacklist the entire cluster
name|conf
operator|.
name|setFloat
argument_list|(
name|YarnConfiguration
operator|.
name|AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|DrainDispatcher
name|dispatcher
init|=
operator|new
name|DrainDispatcher
argument_list|()
decl_stmt|;
name|MockRM
name|rm
init|=
name|startRM
argument_list|(
name|conf
argument_list|,
name|dispatcher
argument_list|)
decl_stmt|;
name|MockNM
name|node
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|,
name|rm
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|node
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|app
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|int
name|numAppAttempts
init|=
literal|1
decl_stmt|;
comment|// Now the AM container should be allocated
name|RMAppAttempt
name|attempt
init|=
name|MockRM
operator|.
name|waitForAttemptScheduled
argument_list|(
name|app
argument_list|,
name|rm
argument_list|)
decl_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockRM
operator|.
name|waitForState
argument_list|(
name|attempt
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|numAppAttempts
argument_list|)
decl_stmt|;
name|ContainerId
name|amContainerId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|containerExitStatus
range|:
operator|new
name|int
index|[]
block|{
name|ContainerExitStatus
operator|.
name|PREEMPTED
block|,
name|ContainerExitStatus
operator|.
name|KILLED_BY_RESOURCEMANAGER
block|,
comment|// ContainerExitStatus.KILLED_BY_APPMASTER,
name|ContainerExitStatus
operator|.
name|KILLED_AFTER_APP_COMPLETION
block|,
name|ContainerExitStatus
operator|.
name|ABORTED
block|,
name|ContainerExitStatus
operator|.
name|DISKS_FAILED
block|,
name|ContainerExitStatus
operator|.
name|KILLED_EXCEEDED_VMEM
block|,
name|ContainerExitStatus
operator|.
name|KILLED_EXCEEDED_PMEM
block|}
control|)
block|{
comment|// Set the exist status to be containerExitStatus so that we can verify
comment|// that the system automatically blacklisting the node
name|makeAMContainerExit
argument_list|(
name|rm
argument_list|,
name|amContainerId
argument_list|,
name|node
argument_list|,
name|containerExitStatus
argument_list|)
expr_stmt|;
comment|// restart the am
name|attempt
operator|=
name|MockRM
operator|.
name|waitForAttemptScheduled
argument_list|(
name|app
argument_list|,
name|rm
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"New AppAttempt launched "
operator|+
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dispatcher
operator|.
name|await
argument_list|()
expr_stmt|;
name|MockRM
operator|.
name|waitForState
argument_list|(
name|attempt
argument_list|,
name|RMAppAttemptState
operator|.
name|ALLOCATED
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
name|numAppAttempts
operator|++
expr_stmt|;
name|appAttemptId
operator|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
name|numAppAttempts
argument_list|)
expr_stmt|;
name|amContainerId
operator|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|node
argument_list|,
name|amContainerId
argument_list|,
name|RMContainerState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|makeAMContainerExit (MockRM rm, ContainerId amContainer, MockNM node, int exitStatus)
specifier|private
name|void
name|makeAMContainerExit
parameter_list|(
name|MockRM
name|rm
parameter_list|,
name|ContainerId
name|amContainer
parameter_list|,
name|MockNM
name|node
parameter_list|,
name|int
name|exitStatus
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|ContainerStatus
name|containerStatus
init|=
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|amContainer
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
name|exitStatus
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|200
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|.
name|containerStatus
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|amAttemptID
init|=
name|amContainer
operator|.
name|getApplicationAttemptId
argument_list|()
decl_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|amAttemptID
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|amAttemptID
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|ACCEPTED
argument_list|)
expr_stmt|;
block|}
DECL|method|startRM (YarnConfiguration conf, final DrainDispatcher dispatcher)
specifier|private
name|MockRM
name|startRM
parameter_list|(
name|YarnConfiguration
name|conf
parameter_list|,
specifier|final
name|DrainDispatcher
name|dispatcher
parameter_list|)
block|{
name|MemoryRMStateStore
name|memStore
init|=
operator|new
name|MemoryRMStateStore
argument_list|()
decl_stmt|;
name|memStore
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
name|memStore
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|createSchedulerEventDispatcher
parameter_list|()
block|{
return|return
operator|new
name|EventDispatcher
argument_list|<
name|SchedulerEvent
argument_list|>
argument_list|(
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|scheduler
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|SchedulerEvent
name|event
parameter_list|)
block|{
name|super
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Dispatcher
name|createDispatcher
parameter_list|()
block|{
return|return
name|dispatcher
return|;
block|}
block|}
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|rm1
return|;
block|}
block|}
end_class

end_unit

