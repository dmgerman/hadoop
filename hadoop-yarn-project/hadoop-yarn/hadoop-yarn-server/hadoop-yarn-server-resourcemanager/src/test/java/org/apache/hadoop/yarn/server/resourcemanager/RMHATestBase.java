begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|ClientBaseWithFixes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|HAServiceState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|HAUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|ZKRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|YarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|RMHATestBase
specifier|public
class|class
name|RMHATestBase
extends|extends
name|ClientBaseWithFixes
block|{
DECL|field|ZK_TIMEOUT_MS
specifier|private
specifier|static
specifier|final
name|int
name|ZK_TIMEOUT_MS
init|=
literal|5000
decl_stmt|;
DECL|field|requestInfo
specifier|private
specifier|static
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
DECL|field|configuration
specifier|protected
name|Configuration
name|configuration
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
DECL|field|rm1
specifier|static
name|MockRM
name|rm1
init|=
literal|null
decl_stmt|;
DECL|field|rm2
specifier|static
name|MockRM
name|rm2
init|=
literal|null
decl_stmt|;
DECL|field|confForRM1
name|Configuration
name|confForRM1
decl_stmt|;
DECL|field|confForRM2
name|Configuration
name|confForRM2
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_IDS
argument_list|,
literal|"rm1,rm2"
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|ZKRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_ADDRESS
argument_list|,
name|hostPort
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ZK_TIMEOUT_MS
argument_list|,
name|ZK_TIMEOUT_MS
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_CLUSTER_ID
argument_list|,
literal|"test-yarn-cluster"
argument_list|)
expr_stmt|;
name|int
name|base
init|=
literal|100
decl_stmt|;
for|for
control|(
name|String
name|confKey
range|:
name|YarnConfiguration
operator|.
name|getServiceAddressConfKeys
argument_list|(
name|configuration
argument_list|)
control|)
block|{
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
literal|"rm1"
argument_list|)
argument_list|,
literal|"0.0.0.0:"
operator|+
operator|(
name|base
operator|+
literal|20
operator|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HAUtil
operator|.
name|addSuffix
argument_list|(
name|confKey
argument_list|,
literal|"rm2"
argument_list|)
argument_list|,
literal|"0.0.0.0:"
operator|+
operator|(
name|base
operator|+
literal|40
operator|)
argument_list|)
expr_stmt|;
name|base
operator|=
name|base
operator|*
literal|2
expr_stmt|;
block|}
name|confForRM1
operator|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|confForRM1
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|confForRM2
operator|=
operator|new
name|Configuration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|confForRM2
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_HA_ID
argument_list|,
literal|"rm2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|teardown ()
specifier|public
name|void
name|teardown
parameter_list|()
block|{
if|if
condition|(
name|rm1
operator|!=
literal|null
condition|)
block|{
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rm2
operator|!=
literal|null
condition|)
block|{
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|launchAM (RMApp app, MockRM rm, MockNM nm)
specifier|protected
name|MockAM
name|launchAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getAppAttemptId
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|startRMs ()
specifier|protected
name|void
name|startRMs
parameter_list|()
throws|throws
name|IOException
block|{
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|confForRM1
argument_list|)
expr_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|confForRM2
argument_list|)
expr_stmt|;
name|startRMs
argument_list|(
name|rm1
argument_list|,
name|confForRM1
argument_list|,
name|rm2
argument_list|,
name|confForRM2
argument_list|)
expr_stmt|;
block|}
DECL|method|startRMsWithCustomizedRMAppManager ()
specifier|protected
name|void
name|startRMsWithCustomizedRMAppManager
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf1
init|=
operator|new
name|Configuration
argument_list|(
name|confForRM1
argument_list|)
decl_stmt|;
name|rm1
operator|=
operator|new
name|MockRM
argument_list|(
name|conf1
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|RMAppManager
name|createRMAppManager
parameter_list|()
block|{
return|return
operator|new
name|MyRMAppManager
argument_list|(
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|scheduler
argument_list|,
name|this
operator|.
name|masterService
argument_list|,
name|this
operator|.
name|applicationACLsManager
argument_list|,
name|conf1
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|rm2
operator|=
operator|new
name|MockRM
argument_list|(
name|confForRM2
argument_list|)
expr_stmt|;
name|startRMs
argument_list|(
name|rm1
argument_list|,
name|conf1
argument_list|,
name|rm2
argument_list|,
name|confForRM2
argument_list|)
expr_stmt|;
block|}
DECL|class|MyRMAppManager
specifier|private
specifier|static
class|class
name|MyRMAppManager
extends|extends
name|RMAppManager
block|{
DECL|field|conf
specifier|private
name|Configuration
name|conf
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
decl_stmt|;
DECL|method|MyRMAppManager (RMContext context, YarnScheduler scheduler, ApplicationMasterService masterService, ApplicationACLsManager applicationACLsManager, Configuration conf)
specifier|public
name|MyRMAppManager
parameter_list|(
name|RMContext
name|context
parameter_list|,
name|YarnScheduler
name|scheduler
parameter_list|,
name|ApplicationMasterService
name|masterService
parameter_list|,
name|ApplicationACLsManager
name|applicationACLsManager
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|applicationACLsManager
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rmContext
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|submitApplication ( ApplicationSubmissionContext submissionContext, long submitTime, String user)
specifier|protected
name|void
name|submitApplication
parameter_list|(
name|ApplicationSubmissionContext
name|submissionContext
parameter_list|,
name|long
name|submitTime
parameter_list|,
name|String
name|user
parameter_list|)
throws|throws
name|YarnException
block|{
comment|//Do nothing, just add the application to RMContext
name|RMAppImpl
name|application
init|=
operator|new
name|RMAppImpl
argument_list|(
name|submissionContext
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|submissionContext
operator|.
name|getApplicationName
argument_list|()
argument_list|,
name|user
argument_list|,
name|submissionContext
operator|.
name|getQueue
argument_list|()
argument_list|,
name|submissionContext
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getScheduler
argument_list|()
argument_list|,
name|this
operator|.
name|rmContext
operator|.
name|getApplicationMasterService
argument_list|()
argument_list|,
name|submitTime
argument_list|,
name|submissionContext
operator|.
name|getApplicationType
argument_list|()
argument_list|,
name|submissionContext
operator|.
name|getApplicationTags
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|rmContext
operator|.
name|getRMApps
argument_list|()
operator|.
name|put
argument_list|(
name|submissionContext
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|application
argument_list|)
expr_stmt|;
comment|//Do not send RMAppEventType.START event
comment|//so the state of Application will not reach to NEW_SAVING state.
block|}
block|}
DECL|method|isFinalState (RMAppState state)
specifier|protected
name|boolean
name|isFinalState
parameter_list|(
name|RMAppState
name|state
parameter_list|)
block|{
return|return
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FINISHING
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FINISHED
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|FAILED
argument_list|)
operator|||
name|state
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|KILLED
argument_list|)
return|;
block|}
DECL|method|explicitFailover ()
specifier|protected
name|void
name|explicitFailover
parameter_list|()
throws|throws
name|IOException
block|{
name|rm1
operator|.
name|adminService
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
DECL|method|startRMs (MockRM rm1, Configuration confForRM1, MockRM rm2, Configuration confForRM2)
specifier|protected
name|void
name|startRMs
parameter_list|(
name|MockRM
name|rm1
parameter_list|,
name|Configuration
name|confForRM1
parameter_list|,
name|MockRM
name|rm2
parameter_list|,
name|Configuration
name|confForRM2
parameter_list|)
throws|throws
name|IOException
block|{
name|rm1
operator|.
name|init
argument_list|(
name|confForRM1
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|init
argument_list|(
name|confForRM2
argument_list|)
expr_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm2
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|adminService
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getHAServiceState
argument_list|()
operator|==
name|HAServiceState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

