begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|LocalConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ApplicationMasterProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|AllocateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RegisterApplicationMasterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAccessType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationResourceUsageReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|UpdateNodeResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|AdminService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|Application
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestAMAuthorization
operator|.
name|MockRMWithAMS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|TestAMAuthorization
operator|.
name|MyContainerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|NullRMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNodeReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|TestSchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|ClientToAMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|NMTokenSecretManagerInRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerLeafQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|webapp
operator|.
name|dao
operator|.
name|CapacitySchedulerQueueInfoList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DominantResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
DECL|class|TestCapacityScheduler
specifier|public
class|class
name|TestCapacityScheduler
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCapacityScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".b"
decl_stmt|;
DECL|field|A1
specifier|private
specifier|static
specifier|final
name|String
name|A1
init|=
name|A
operator|+
literal|".a1"
decl_stmt|;
DECL|field|A2
specifier|private
specifier|static
specifier|final
name|String
name|A2
init|=
name|A
operator|+
literal|".a2"
decl_stmt|;
DECL|field|B1
specifier|private
specifier|static
specifier|final
name|String
name|B1
init|=
name|B
operator|+
literal|".b1"
decl_stmt|;
DECL|field|B2
specifier|private
specifier|static
specifier|final
name|String
name|B2
init|=
name|B
operator|+
literal|".b2"
decl_stmt|;
DECL|field|B3
specifier|private
specifier|static
specifier|final
name|String
name|B3
init|=
name|B
operator|+
literal|".b3"
decl_stmt|;
DECL|field|A_CAPACITY
specifier|private
specifier|static
name|float
name|A_CAPACITY
init|=
literal|10.5f
decl_stmt|;
DECL|field|B_CAPACITY
specifier|private
specifier|static
name|float
name|B_CAPACITY
init|=
literal|89.5f
decl_stmt|;
DECL|field|A1_CAPACITY
specifier|private
specifier|static
name|float
name|A1_CAPACITY
init|=
literal|30
decl_stmt|;
DECL|field|A2_CAPACITY
specifier|private
specifier|static
name|float
name|A2_CAPACITY
init|=
literal|70
decl_stmt|;
DECL|field|B1_CAPACITY
specifier|private
specifier|static
name|float
name|B1_CAPACITY
init|=
literal|79.2f
decl_stmt|;
DECL|field|B2_CAPACITY
specifier|private
specifier|static
name|float
name|B2_CAPACITY
init|=
literal|0.8f
decl_stmt|;
DECL|field|B3_CAPACITY
specifier|private
specifier|static
name|float
name|B3_CAPACITY
init|=
literal|20
decl_stmt|;
DECL|field|resourceManager
specifier|private
name|ResourceManager
name|resourceManager
init|=
literal|null
decl_stmt|;
DECL|field|mockContext
specifier|private
name|RMContext
name|mockContext
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|mockContext
operator|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getConfigurationProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LocalConfigurationProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testConfValidation ()
specifier|public
name|void
name|testConfValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceScheduler
name|scheduler
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected because the min memory allocation is"
operator|+
literal|" larger than the max memory allocation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// Exception is expected.
name|assertTrue
argument_list|(
literal|"The thrown exception is not the expected one."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid resource scheduler memory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected because the min vcores allocation is"
operator|+
literal|" larger than the max vcores allocation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// Exception is expected.
name|assertTrue
argument_list|(
literal|"The thrown exception is not the expected one."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid resource scheduler vcores"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
DECL|method|registerNode (String hostName, int containerManagerPort, int httpPort, String rackName, Resource capability)
name|registerNode
parameter_list|(
name|String
name|hostName
parameter_list|,
name|int
name|containerManagerPort
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|String
name|rackName
parameter_list|,
name|Resource
name|capability
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
name|nm
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
argument_list|(
name|hostName
argument_list|,
name|containerManagerPort
argument_list|,
name|httpPort
argument_list|,
name|rackName
argument_list|,
name|capability
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeAddEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|handle
argument_list|(
name|nodeAddEvent1
argument_list|)
expr_stmt|;
return|return
name|nm
return|;
block|}
annotation|@
name|Test
DECL|method|testCapacityScheduler ()
specifier|public
name|void
name|testCapacityScheduler
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"--- START: testCapacityScheduler ---"
argument_list|)
expr_stmt|;
comment|// Register node1
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
name|nm_0
init|=
name|registerNode
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Register node2
name|String
name|host_1
init|=
literal|"host_1"
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
name|nm_1
init|=
name|registerNode
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// ResourceRequest priorities
name|Priority
name|priority_0
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|priority_1
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Submit an application
name|Application
name|application_0
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"a1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|submit
argument_list|()
expr_stmt|;
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_0_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_0_1
argument_list|)
expr_stmt|;
name|Task
name|task_0_0
init|=
operator|new
name|Task
argument_list|(
name|application_0
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addTask
argument_list|(
name|task_0_0
argument_list|)
expr_stmt|;
comment|// Submit another application
name|Application
name|application_1
init|=
operator|new
name|Application
argument_list|(
literal|"user_1"
argument_list|,
literal|"b2"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|submit
argument_list|()
expr_stmt|;
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_1_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_1_1
argument_list|)
expr_stmt|;
name|Task
name|task_1_0
init|=
operator|new
name|Task
argument_list|(
name|application_1
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addTask
argument_list|(
name|task_1_0
argument_list|)
expr_stmt|;
comment|// Send resource requests to the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// Send a heartbeat to kick the tires on the Scheduler
name|LOG
operator|.
name|info
argument_list|(
literal|"Kick!"
argument_list|)
expr_stmt|;
comment|// task_0_0 and task_1_0 allocated, used=4G
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
comment|// nothing allocated
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_0_0
name|checkApplicationResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_1_0
name|checkApplicationResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|application_1
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
comment|// task_0_0 (1G) and task_1_0 (3G)
name|checkNodeResourceUsage
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
comment|// no tasks, 2G available
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding new tasks..."
argument_list|)
expr_stmt|;
name|Task
name|task_1_1
init|=
operator|new
name|Task
argument_list|(
name|application_1
argument_list|,
name|priority_0
argument_list|,
operator|new
name|String
index|[]
block|{
name|ResourceRequest
operator|.
name|ANY
block|}
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addTask
argument_list|(
name|task_1_1
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Task
name|task_0_1
init|=
operator|new
name|Task
argument_list|(
name|application_0
argument_list|,
name|priority_0
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addTask
argument_list|(
name|task_0_1
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// Send a heartbeat to kick the tires on the Scheduler
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending hb from "
operator|+
name|nm_0
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing new, used=4G
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending hb from "
operator|+
name|nm_1
operator|.
name|getHostName
argument_list|()
argument_list|)
expr_stmt|;
comment|// task_0_1 is prefer as locality, used=2G
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to allocate..."
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|checkApplicationResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|checkApplicationResourceUsage
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|application_1
argument_list|)
expr_stmt|;
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"--- END: testCapacityScheduler ---"
argument_list|)
expr_stmt|;
block|}
DECL|method|nodeUpdate ( org.apache.hadoop.yarn.server.resourcemanager.NodeManager nm)
specifier|private
name|void
name|nodeUpdate
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
name|nm
parameter_list|)
block|{
name|RMNode
name|node
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Send a heartbeat to kick the tires on the Scheduler
name|NodeUpdateSchedulerEvent
name|nodeUpdate
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|handle
argument_list|(
name|nodeUpdate
argument_list|)
expr_stmt|;
block|}
DECL|method|setupQueueConfiguration (CapacitySchedulerConfiguration conf)
specifier|private
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
name|A_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
comment|// Define 2nd-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|A
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a1"
block|,
literal|"a2"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A1
argument_list|,
name|A1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|A1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A2
argument_list|,
name|A2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|A2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
name|B1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B1
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
name|B2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B2
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
name|B3_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|B3
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup top-level queues a and b"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaximumCapacitySetup ()
specifier|public
name|void
name|testMaximumCapacitySetup
parameter_list|()
block|{
name|float
name|delta
init|=
literal|0.0000001f
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_CAPACITY_VALUE
argument_list|,
name|conf
operator|.
name|getNonLabeledQueueMaximumCapacity
argument_list|(
name|A
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
literal|50.0f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50.0f
argument_list|,
name|conf
operator|.
name|getNonLabeledQueueMaximumCapacity
argument_list|(
name|A
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|A
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_CAPACITY_VALUE
argument_list|,
name|conf
operator|.
name|getNonLabeledQueueMaximumCapacity
argument_list|(
name|A
argument_list|)
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshQueues ()
specifier|public
name|void
name|testRefreshQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|80f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
literal|80f
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|cs
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|method|checkQueueCapacities (CapacityScheduler cs, float capacityA, float capacityB)
name|void
name|checkQueueCapacities
parameter_list|(
name|CapacityScheduler
name|cs
parameter_list|,
name|float
name|capacityA
parameter_list|,
name|float
name|capacityB
parameter_list|)
block|{
name|CSQueue
name|rootQueue
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CSQueue
name|queueA
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|B
argument_list|)
decl_stmt|;
name|CSQueue
name|queueA1
init|=
name|findQueue
argument_list|(
name|queueA
argument_list|,
name|A1
argument_list|)
decl_stmt|;
name|CSQueue
name|queueA2
init|=
name|findQueue
argument_list|(
name|queueA
argument_list|,
name|A2
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB1
init|=
name|findQueue
argument_list|(
name|queueB
argument_list|,
name|B1
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB2
init|=
name|findQueue
argument_list|(
name|queueB
argument_list|,
name|B2
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB3
init|=
name|findQueue
argument_list|(
name|queueB
argument_list|,
name|B3
argument_list|)
decl_stmt|;
name|float
name|capA
init|=
name|capacityA
operator|/
literal|100.0f
decl_stmt|;
name|float
name|capB
init|=
name|capacityB
operator|/
literal|100.0f
decl_stmt|;
name|checkQueueCapacity
argument_list|(
name|queueA
argument_list|,
name|capA
argument_list|,
name|capA
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|checkQueueCapacity
argument_list|(
name|queueB
argument_list|,
name|capB
argument_list|,
name|capB
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|checkQueueCapacity
argument_list|(
name|queueA1
argument_list|,
name|A1_CAPACITY
operator|/
literal|100.0f
argument_list|,
operator|(
name|A1_CAPACITY
operator|/
literal|100.0f
operator|)
operator|*
name|capA
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|checkQueueCapacity
argument_list|(
name|queueA2
argument_list|,
name|A2_CAPACITY
operator|/
literal|100.0f
argument_list|,
operator|(
name|A2_CAPACITY
operator|/
literal|100.0f
operator|)
operator|*
name|capA
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|checkQueueCapacity
argument_list|(
name|queueB1
argument_list|,
name|B1_CAPACITY
operator|/
literal|100.0f
argument_list|,
operator|(
name|B1_CAPACITY
operator|/
literal|100.0f
operator|)
operator|*
name|capB
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|checkQueueCapacity
argument_list|(
name|queueB2
argument_list|,
name|B2_CAPACITY
operator|/
literal|100.0f
argument_list|,
operator|(
name|B2_CAPACITY
operator|/
literal|100.0f
operator|)
operator|*
name|capB
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|checkQueueCapacity
argument_list|(
name|queueB3
argument_list|,
name|B3_CAPACITY
operator|/
literal|100.0f
argument_list|,
operator|(
name|B3_CAPACITY
operator|/
literal|100.0f
operator|)
operator|*
name|capB
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
DECL|method|checkQueueCapacity (CSQueue q, float expectedCapacity, float expectedAbsCapacity, float expectedMaxCapacity, float expectedAbsMaxCapacity)
specifier|private
name|void
name|checkQueueCapacity
parameter_list|(
name|CSQueue
name|q
parameter_list|,
name|float
name|expectedCapacity
parameter_list|,
name|float
name|expectedAbsCapacity
parameter_list|,
name|float
name|expectedMaxCapacity
parameter_list|,
name|float
name|expectedAbsMaxCapacity
parameter_list|)
block|{
specifier|final
name|float
name|epsilon
init|=
literal|1e-5f
decl_stmt|;
name|assertEquals
argument_list|(
literal|"capacity"
argument_list|,
name|expectedCapacity
argument_list|,
name|q
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"absolute capacity"
argument_list|,
name|expectedAbsCapacity
argument_list|,
name|q
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maximum capacity"
argument_list|,
name|expectedMaxCapacity
argument_list|,
name|q
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"absolute maximum capacity"
argument_list|,
name|expectedAbsMaxCapacity
argument_list|,
name|q
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
block|}
DECL|method|findQueue (CSQueue root, String queuePath)
specifier|private
name|CSQueue
name|findQueue
parameter_list|(
name|CSQueue
name|root
parameter_list|,
name|String
name|queuePath
parameter_list|)
block|{
if|if
condition|(
name|root
operator|.
name|getQueuePath
argument_list|()
operator|.
name|equals
argument_list|(
name|queuePath
argument_list|)
condition|)
block|{
return|return
name|root
return|;
block|}
name|List
argument_list|<
name|CSQueue
argument_list|>
name|childQueues
init|=
name|root
operator|.
name|getChildQueues
argument_list|()
decl_stmt|;
if|if
condition|(
name|childQueues
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CSQueue
name|q
range|:
name|childQueues
control|)
block|{
if|if
condition|(
name|queuePath
operator|.
name|startsWith
argument_list|(
name|q
operator|.
name|getQueuePath
argument_list|()
argument_list|)
condition|)
block|{
name|CSQueue
name|result
init|=
name|findQueue
argument_list|(
name|q
argument_list|,
name|queuePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkApplicationResourceUsage (int expected, Application application)
specifier|private
name|void
name|checkApplicationResourceUsage
parameter_list|(
name|int
name|expected
parameter_list|,
name|Application
name|application
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|application
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNodeResourceUsage (int expected, org.apache.hadoop.yarn.server.resourcemanager.NodeManager node)
specifier|private
name|void
name|checkNodeResourceUsage
parameter_list|(
name|int
name|expected
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
name|node
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|node
operator|.
name|getUsed
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|checkResourceUsage
argument_list|()
expr_stmt|;
block|}
comment|/** Test that parseQueue throws an exception when two leaf queues have the    *  same name  * @throws IOException    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
DECL|method|testParseQueue ()
specifier|public
name|void
name|testParseQueue
parameter_list|()
throws|throws
name|IOException
block|{
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a.a1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a.a1.b1"
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setUserLimitFactor
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|".a.a1.b1"
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReconnectedNode ()
specifier|public
name|void
name|testReconnectedNode
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|csConf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|csConf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|RMNode
name|n1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|n2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// reconnect n1 with downgraded memory
name|n1
operator|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesWithNewQueue ()
specifier|public
name|void
name|testRefreshQueuesWithNewQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
comment|// Add a new queue b4
name|String
name|B4
init|=
name|B
operator|+
literal|".b4"
decl_stmt|;
name|float
name|B4_CAPACITY
init|=
literal|10
decl_stmt|;
name|B3_CAPACITY
operator|-=
name|B4_CAPACITY
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setCapacity
argument_list|(
name|A
argument_list|,
literal|80f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|B
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"b1"
block|,
literal|"b2"
block|,
literal|"b3"
block|,
literal|"b4"
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B1
argument_list|,
name|B1_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B2
argument_list|,
name|B2_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B3
argument_list|,
name|B3_CAPACITY
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|B4
argument_list|,
name|B4_CAPACITY
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
literal|80f
argument_list|,
literal|20f
argument_list|)
expr_stmt|;
comment|// Verify parent for B4
name|CSQueue
name|rootQueue
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CSQueue
name|queueB
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|B
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB4
init|=
name|findQueue
argument_list|(
name|queueB
argument_list|,
name|B4
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|queueB
argument_list|,
name|queueB4
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|B3_CAPACITY
operator|+=
name|B4_CAPACITY
expr_stmt|;
name|cs
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCapacitySchedulerInfo ()
specifier|public
name|void
name|testCapacitySchedulerInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|QueueInfo
name|queueInfo
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getQueueInfo
argument_list|(
literal|"a"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queueInfo
operator|.
name|getChildQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|userACLInfo
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getQueueUserAclInfo
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|userACLInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|QueueUserACLInfo
name|queueUserACLInfo
range|:
name|userACLInfo
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|getQueueCount
argument_list|(
name|userACLInfo
argument_list|,
name|queueUserACLInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getQueueCount (List<QueueUserACLInfo> queueInformation, String queueName)
specifier|private
name|int
name|getQueueCount
parameter_list|(
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|queueInformation
parameter_list|,
name|String
name|queueName
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QueueUserACLInfo
name|queueUserACLInfo
range|:
name|queueInformation
control|)
block|{
if|if
condition|(
name|queueName
operator|.
name|equals
argument_list|(
name|queueUserACLInfo
operator|.
name|getQueueName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Test
DECL|method|testBlackListNodes ()
specifier|public
name|void
name|testBlackListNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|BuilderUtils
operator|.
name|newApplicationId
argument_list|(
literal|100
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|BuilderUtils
operator|.
name|newApplicationAttemptId
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|SchedulerEvent
name|addAppEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appId
argument_list|,
literal|"default"
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAppEvent
argument_list|)
expr_stmt|;
name|SchedulerEvent
name|addAttemptEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAttemptEvent
argument_list|)
expr_stmt|;
comment|// Verify the blacklist can be updated independent of requesting containers
name|cs
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|isBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|isBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceOverCommit ()
specifier|public
name|void
name|testResourceOverCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|2048
argument_list|)
decl_stmt|;
comment|// kick the scheduling, 2 GB given to AM1, remaining 2GB on nm1
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|SchedulerNodeReport
name|report_nm1
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// check node report, 2 GB used and 2 GB available
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// add request for containers
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|,
literal|"127.0.0.2"
block|}
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AllocateResponse
name|alloc1Response
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
comment|// send the request
comment|// kick the scheduler, 2 GB given to AM1, resource remaining 0
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be created for app 1..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|alloc1Response
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Container
argument_list|>
name|allocated1
init|=
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocated1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|allocated1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|allocated1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// check node report, 4 GB used and 0 GB available
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// check container is assigned with 2 GB.
name|Container
name|c1
init|=
name|allocated1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|c1
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// update node resource to 2 GB, so resource is over-consumed.
name|Map
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
name|nodeResourceMap
init|=
operator|new
name|HashMap
argument_list|<
name|NodeId
argument_list|,
name|ResourceOption
argument_list|>
argument_list|()
decl_stmt|;
name|nodeResourceMap
operator|.
name|put
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|ResourceOption
operator|.
name|newInstance
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|UpdateNodeResourceRequest
name|request
init|=
name|UpdateNodeResourceRequest
operator|.
name|newInstance
argument_list|(
name|nodeResourceMap
argument_list|)
decl_stmt|;
name|AdminService
name|as
init|=
operator|(
operator|(
name|MockRM
operator|)
name|rm
operator|)
operator|.
name|getAdminService
argument_list|()
decl_stmt|;
name|as
operator|.
name|updateNodeResource
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// Now, the used resource is still 4 GB, and available resource is minus value.
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|2
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check container can complete successfully in case of resource over-commitment.
name|ContainerStatus
name|containerStatus
init|=
name|BuilderUtils
operator|.
name|newContainerStatus
argument_list|(
name|c1
operator|.
name|getId
argument_list|()
argument_list|,
name|ContainerState
operator|.
name|COMPLETE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|containerStatus
argument_list|(
name|containerStatus
argument_list|)
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|attempt1
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|&&
name|waitCount
operator|++
operator|!=
literal|20
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be finished for app 1... Tried "
operator|+
name|waitCount
operator|+
literal|" times already.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|attempt1
operator|.
name|getJustFinishedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|am1
operator|.
name|schedule
argument_list|()
operator|.
name|getCompletedContainersStatuses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|report_nm1
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// As container return 2 GB back, the available resource becomes 0 again.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify no NPE is trigger in schedule after resource is updated.
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|,
literal|"127.0.0.2"
block|}
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|alloc1Response
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shouldn't have enough resource to allocate containers"
argument_list|,
literal|0
argument_list|,
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|times
init|=
literal|0
decl_stmt|;
comment|// try 10 times as scheduling is async process.
while|while
condition|(
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
operator|&&
name|times
operator|++
operator|<
literal|10
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for containers to be allocated for app 1... Tried "
operator|+
name|times
operator|+
literal|" times already.."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Shouldn't have enough resource to allocate containers"
argument_list|,
literal|0
argument_list|,
name|alloc1Response
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testApplicationComparator ()
specifier|public
name|void
name|testApplicationComparator
parameter_list|()
block|{
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|Comparator
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|appComparator
init|=
name|cs
operator|.
name|getApplicationComparator
argument_list|()
decl_stmt|;
name|ApplicationId
name|id1
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationId
name|id2
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationId
name|id3
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//same clusterId
name|FiCaSchedulerApp
name|app1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|app2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|app3
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app3
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|id3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appComparator
operator|.
name|compare
argument_list|(
name|app1
argument_list|,
name|app2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|//different clusterId
name|assertTrue
argument_list|(
name|appComparator
operator|.
name|compare
argument_list|(
name|app1
argument_list|,
name|app3
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appComparator
operator|.
name|compare
argument_list|(
name|app2
argument_list|,
name|app3
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAppsInQueue ()
specifier|public
name|void
name|testGetAppsInQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|Application
name|application_0
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"a1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|submit
argument_list|()
expr_stmt|;
name|Application
name|application_1
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"a2"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|submit
argument_list|()
expr_stmt|;
name|Application
name|application_2
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"b2"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_2
operator|.
name|submit
argument_list|()
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|application_0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|application_1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|application_0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|application_1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|application_2
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"nonexistentqueue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddAndRemoveAppFromCapacityScheduler ()
specifier|public
name|void
name|testAddAndRemoveAppFromCapacityScheduler
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
name|cs
init|=
operator|(
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|SchedulerApplication
argument_list|<
name|SchedulerApplicationAttempt
argument_list|>
name|app
init|=
name|TestSchedulerUtils
operator|.
name|verifyAppAddedAndRemovedFromScheduler
argument_list|(
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
argument_list|,
name|cs
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a1"
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncScheduling ()
specifier|public
name|void
name|testAsyncScheduling
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NODES
init|=
literal|100
decl_stmt|;
comment|// Register nodes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODES
condition|;
operator|++
name|i
control|)
block|{
name|String
name|host
init|=
literal|"192.168.1."
operator|+
name|i
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now directly exercise the scheduling loop
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NODES
condition|;
operator|++
name|i
control|)
block|{
name|CapacityScheduler
operator|.
name|schedule
argument_list|(
name|cs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|launchAM (RMApp app, MockRM rm, MockNM nm)
specifier|private
name|MockAM
name|launchAM
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|MockRM
name|rm
parameter_list|,
name|MockNM
name|nm
parameter_list|)
throws|throws
name|Exception
block|{
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
return|return
name|am
return|;
block|}
DECL|method|waitForAppPreemptionInfo (RMApp app, Resource preempted, int numAMPreempted, int numTaskPreempted, Resource currentAttemptPreempted, boolean currentAttemptAMPreempted, int numLatestAttemptTaskPreempted)
specifier|private
name|void
name|waitForAppPreemptionInfo
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|Resource
name|preempted
parameter_list|,
name|int
name|numAMPreempted
parameter_list|,
name|int
name|numTaskPreempted
parameter_list|,
name|Resource
name|currentAttemptPreempted
parameter_list|,
name|boolean
name|currentAttemptAMPreempted
parameter_list|,
name|int
name|numLatestAttemptTaskPreempted
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|RMAppMetrics
name|appPM
init|=
name|app
operator|.
name|getRMAppMetrics
argument_list|()
decl_stmt|;
name|RMAppAttemptMetrics
name|attemptPM
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getRMAppAttemptMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|appPM
operator|.
name|getResourcePreempted
argument_list|()
operator|.
name|equals
argument_list|(
name|preempted
argument_list|)
operator|&&
name|appPM
operator|.
name|getNumAMContainersPreempted
argument_list|()
operator|==
name|numAMPreempted
operator|&&
name|appPM
operator|.
name|getNumNonAMContainersPreempted
argument_list|()
operator|==
name|numTaskPreempted
operator|&&
name|attemptPM
operator|.
name|getResourcePreempted
argument_list|()
operator|.
name|equals
argument_list|(
name|currentAttemptPreempted
argument_list|)
operator|&&
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getRMAppAttemptMetrics
argument_list|()
operator|.
name|getIsPreempted
argument_list|()
operator|==
name|currentAttemptAMPreempted
operator|&&
name|attemptPM
operator|.
name|getNumNonAMContainersPreempted
argument_list|()
operator|==
name|numLatestAttemptTaskPreempted
condition|)
block|{
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForNewAttemptCreated (RMApp app, ApplicationAttemptId previousAttemptId)
specifier|private
name|void
name|waitForNewAttemptCreated
parameter_list|(
name|RMApp
name|app
parameter_list|,
name|ApplicationAttemptId
name|previousAttemptId
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|equals
argument_list|(
name|previousAttemptId
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAllocateDoesNotBlockOnSchedulerLock ()
specifier|public
name|void
name|testAllocateDoesNotBlockOnSchedulerLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MyContainerManager
name|containerManager
init|=
operator|new
name|MyContainerManager
argument_list|()
decl_stmt|;
specifier|final
name|MockRMWithAMS
name|rm
init|=
operator|new
name|MockRMWithAMS
argument_list|(
name|conf
argument_list|,
name|containerManager
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"localhost:1234"
argument_list|,
literal|5120
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
name|acls
init|=
operator|new
name|HashMap
argument_list|<
name|ApplicationAccessType
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|acls
operator|.
name|put
argument_list|(
name|ApplicationAccessType
operator|.
name|VIEW_APP
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|,
literal|"appname"
argument_list|,
literal|"appuser"
argument_list|,
name|acls
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|applicationAttemptId
init|=
name|attempt
operator|.
name|getAppAttemptId
argument_list|()
decl_stmt|;
name|int
name|msecToWait
init|=
literal|10000
decl_stmt|;
name|int
name|msecToSleep
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
operator|!=
name|RMAppAttemptState
operator|.
name|LAUNCHED
operator|&&
name|msecToWait
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for AppAttempt to reach LAUNCHED state. "
operator|+
literal|"Current state is "
operator|+
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|msecToSleep
argument_list|)
expr_stmt|;
name|msecToWait
operator|-=
name|msecToSleep
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|attempt
operator|.
name|getAppAttemptState
argument_list|()
argument_list|,
name|RMAppAttemptState
operator|.
name|LAUNCHED
argument_list|)
expr_stmt|;
comment|// Create a client to the RM.
specifier|final
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|UserGroupInformation
name|currentUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|applicationAttemptId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Credentials
name|credentials
init|=
name|containerManager
operator|.
name|getContainerCredentials
argument_list|()
decl_stmt|;
specifier|final
name|InetSocketAddress
name|rmBindAddress
init|=
name|rm
operator|.
name|getApplicationMasterService
argument_list|()
operator|.
name|getBindAddress
argument_list|()
decl_stmt|;
name|Token
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|amRMToken
init|=
name|MockRMWithAMS
operator|.
name|setupAndReturnAMRMToken
argument_list|(
name|rmBindAddress
argument_list|,
name|credentials
operator|.
name|getAllTokens
argument_list|()
argument_list|)
decl_stmt|;
name|currentUser
operator|.
name|addToken
argument_list|(
name|amRMToken
argument_list|)
expr_stmt|;
name|ApplicationMasterProtocol
name|client
init|=
name|currentUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ApplicationMasterProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ApplicationMasterProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ApplicationMasterProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ApplicationMasterProtocol
operator|.
name|class
argument_list|,
name|rmBindAddress
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|RegisterApplicationMasterRequest
name|request
init|=
name|RegisterApplicationMasterRequest
operator|.
name|newInstance
argument_list|(
literal|"localhost"
argument_list|,
literal|12345
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|client
operator|.
name|registerApplicationMaster
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// grab the scheduler lock from another thread
comment|// and verify an allocate call in this thread doesn't block on it
specifier|final
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
specifier|final
name|CyclicBarrier
name|barrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Thread
name|otherThread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|cs
init|)
block|{
try|try
block|{
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BrokenBarrierException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|otherThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|AllocateRequest
name|allocateRequest
init|=
name|AllocateRequest
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0.0f
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|client
operator|.
name|allocate
argument_list|(
name|allocateRequest
argument_list|)
expr_stmt|;
name|barrier
operator|.
name|await
argument_list|()
expr_stmt|;
name|otherThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumClusterNodes ()
specifier|public
name|void
name|testNumClusterNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RMContext
name|rmContext
init|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cs
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|n1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMNode
name|n2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|0
argument_list|,
name|MockNodes
operator|.
name|newResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|n2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cs
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cs
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cs
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|n2
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cs
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testPreemptionInfo ()
specifier|public
name|void
name|testPreemptionInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_AM_MAX_ATTEMPTS
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|int
name|CONTAINER_MEMORY
init|=
literal|1024
decl_stmt|;
comment|// start RM
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// get scheduler
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// start NM
name|MockNM
name|nm1
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm1
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm1
operator|.
name|registerNode
argument_list|()
expr_stmt|;
comment|// create app and launch the AM
name|RMApp
name|app0
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
name|CONTAINER_MEMORY
argument_list|)
decl_stmt|;
name|MockAM
name|am0
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// get scheduler app
name|FiCaSchedulerApp
name|schedulerAppAttempt
init|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
comment|// allocate some containers and launch them
name|List
argument_list|<
name|Container
argument_list|>
name|allocatedContainers
init|=
name|am0
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|3
argument_list|,
name|CONTAINER_MEMORY
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
comment|// kill the 3 containers
for|for
control|(
name|Container
name|c
range|:
name|allocatedContainers
control|)
block|{
name|cs
operator|.
name|killContainer
argument_list|(
name|schedulerAppAttempt
operator|.
name|getRMContainer
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check values
name|waitForAppPreemptionInfo
argument_list|(
name|app0
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|CONTAINER_MEMORY
operator|*
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|CONTAINER_MEMORY
operator|*
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// kill app0-attempt0 AM container
name|cs
operator|.
name|killContainer
argument_list|(
name|schedulerAppAttempt
operator|.
name|getRMContainer
argument_list|(
name|app0
operator|.
name|getCurrentAppAttempt
argument_list|()
operator|.
name|getMasterContainer
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for app0 failed
name|waitForNewAttemptCreated
argument_list|(
name|app0
argument_list|,
name|am0
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
expr_stmt|;
comment|// check values
name|waitForAppPreemptionInfo
argument_list|(
name|app0
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|CONTAINER_MEMORY
operator|*
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// launch app0-attempt1
name|MockAM
name|am1
init|=
name|launchAM
argument_list|(
name|app0
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|schedulerAppAttempt
operator|=
name|cs
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|app0
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentAppAttempt
argument_list|()
expr_stmt|;
comment|// allocate some containers and launch them
name|allocatedContainers
operator|=
name|am1
operator|.
name|allocateAndWaitForContainers
argument_list|(
literal|3
argument_list|,
name|CONTAINER_MEMORY
argument_list|,
name|nm1
argument_list|)
expr_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|allocatedContainers
control|)
block|{
name|cs
operator|.
name|killContainer
argument_list|(
name|schedulerAppAttempt
operator|.
name|getRMContainer
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check values
name|waitForAppPreemptionInfo
argument_list|(
name|app0
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|CONTAINER_MEMORY
operator|*
literal|7
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|6
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|CONTAINER_MEMORY
operator|*
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testRecoverRequestAfterPreemption ()
specifier|public
name|void
name|testRecoverRequestAfterPreemption
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm1
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|8000
argument_list|)
decl_stmt|;
name|RMApp
name|app1
init|=
name|rm1
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|MockAM
name|am1
init|=
name|MockRM
operator|.
name|launchAndRegisterAM
argument_list|(
name|app1
argument_list|,
name|rm1
argument_list|,
name|nm1
argument_list|)
decl_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|rm1
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// request a container.
name|am1
operator|.
name|allocate
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId1
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
name|RMContainer
name|rmContainer
init|=
name|cs
operator|.
name|getRMContainer
argument_list|(
name|containerId1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
init|=
name|rmContainer
operator|.
name|getResourceRequests
argument_list|()
decl_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|cs
operator|.
name|getApplicationAttempt
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|FiCaSchedulerNode
name|node
init|=
name|cs
operator|.
name|getNode
argument_list|(
name|rmContainer
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
control|)
block|{
comment|// Skip the OffRack and RackLocal resource requests.
if|if
condition|(
name|request
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getRackName
argument_list|()
argument_list|)
operator|||
name|request
operator|.
name|getResourceName
argument_list|()
operator|.
name|equals
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Already the node local resource request is cleared from RM after
comment|// allocation.
name|Assert
operator|.
name|assertNull
argument_list|(
name|app
operator|.
name|getResourceRequest
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Call killContainer to preempt the container
name|cs
operator|.
name|killContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
control|)
block|{
comment|// Resource request must have added back in RM after preempt event
comment|// handling.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getResourceRequest
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// New container will be allocated and will move to ALLOCATED state
name|ContainerId
name|containerId2
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|am1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|waitForState
argument_list|(
name|nm1
argument_list|,
name|containerId2
argument_list|,
name|RMContainerState
operator|.
name|ALLOCATED
argument_list|)
expr_stmt|;
comment|// allocate container
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|am1
operator|.
name|allocate
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getAllocatedContainers
argument_list|()
decl_stmt|;
comment|// Now with updated ResourceRequest, a container is allocated for AM.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|setUpMove ()
specifier|private
name|MockRM
name|setUpMove
parameter_list|()
block|{
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|rm
return|;
block|}
annotation|@
name|Test
DECL|method|testMoveAppBasic ()
specifier|public
name|void
name|testMoveAppBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
name|setUpMove
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInA1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now move the app
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
comment|// check postconditions
name|appsInB1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInB1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInB1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|appsInB
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveAppSameParent ()
specifier|public
name|void
name|testMoveAppSameParent
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
name|setUpMove
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInA1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA2
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now move the app
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
comment|// check postconditions
name|appsInA2
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInA2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"a2"
argument_list|)
argument_list|)
expr_stmt|;
name|appsInA1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveAppForMoveToQueueWithFreeCap ()
specifier|public
name|void
name|testMoveAppForMoveToQueueWithFreeCap
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceScheduler
name|scheduler
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Register node1
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|NodeManager
name|nm_0
init|=
name|registerNode
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Register node2
name|String
name|host_1
init|=
literal|"host_1"
decl_stmt|;
name|NodeManager
name|nm_1
init|=
name|registerNode
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// ResourceRequest priorities
name|Priority
name|priority_0
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|priority_1
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Submit application_0
name|Application
name|application_0
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"a1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// app + app attempt event sent to scheduler
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_0_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_0_1
argument_list|)
expr_stmt|;
name|Task
name|task_0_0
init|=
operator|new
name|Task
argument_list|(
name|application_0
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addTask
argument_list|(
name|task_0_0
argument_list|)
expr_stmt|;
comment|// Submit application_1
name|Application
name|application_1
init|=
operator|new
name|Application
argument_list|(
literal|"user_1"
argument_list|,
literal|"b2"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// app + app attempt event sent to scheduler
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_1_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_1_1
argument_list|)
expr_stmt|;
name|Task
name|task_1_0
init|=
operator|new
name|Task
argument_list|(
name|application_1
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addTask
argument_list|(
name|task_1_0
argument_list|)
expr_stmt|;
comment|// Send resource requests to the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// allocate
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// allocate
comment|// task_0_0 task_1_0 allocated, used=2G
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
comment|// nothing allocated
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_0_0
name|checkApplicationResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_1_0
name|checkApplicationResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application_1
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
comment|// task_0_0 (1G) and task_1_0 (1G) 2G
comment|// available
name|checkNodeResourceUsage
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
comment|// no tasks, 2G available
comment|// move app from a1(30% cap of total 10.5% cap) to b1(79,2% cap of 89,5%
comment|// total cap)
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|application_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
comment|// 2GB 1C
name|Task
name|task_1_1
init|=
operator|new
name|Task
argument_list|(
name|application_1
argument_list|,
name|priority_0
argument_list|,
operator|new
name|String
index|[]
block|{
name|ResourceRequest
operator|.
name|ANY
block|}
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addTask
argument_list|(
name|task_1_1
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// 2GB 1C
name|Task
name|task_0_1
init|=
operator|new
name|Task
argument_list|(
name|application_0
argument_list|,
name|priority_0
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addTask
argument_list|(
name|task_0_1
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// prev 2G used free 2G
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
comment|// prev 0G used free 2G
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|checkApplicationResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|application_1
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|checkApplicationResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveAppSuccess ()
specifier|public
name|void
name|testMoveAppSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceScheduler
name|scheduler
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Register node1
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|NodeManager
name|nm_0
init|=
name|registerNode
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Register node2
name|String
name|host_1
init|=
literal|"host_1"
decl_stmt|;
name|NodeManager
name|nm_1
init|=
name|registerNode
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// ResourceRequest priorities
name|Priority
name|priority_0
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|priority_1
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Submit application_0
name|Application
name|application_0
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"a1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// app + app attempt event sent to scheduler
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_0_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_0_1
argument_list|)
expr_stmt|;
name|Task
name|task_0_0
init|=
operator|new
name|Task
argument_list|(
name|application_0
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addTask
argument_list|(
name|task_0_0
argument_list|)
expr_stmt|;
comment|// Submit application_1
name|Application
name|application_1
init|=
operator|new
name|Application
argument_list|(
literal|"user_1"
argument_list|,
literal|"b2"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// app + app attempt event sent to scheduler
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_1_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_1_1
argument_list|)
expr_stmt|;
name|Task
name|task_1_0
init|=
operator|new
name|Task
argument_list|(
name|application_1
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addTask
argument_list|(
name|task_1_0
argument_list|)
expr_stmt|;
comment|// Send resource requests to the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// allocate
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// allocate
comment|// b2 can only run 1 app at a time
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|application_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"b2"
argument_list|)
expr_stmt|;
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_0_0
name|checkApplicationResourceUsage
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_1_0
name|checkApplicationResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application_1
argument_list|)
expr_stmt|;
comment|// task_1_0 (1G) application_0 moved to b2 with max running app 1 so it is
comment|// not scheduled
name|checkNodeResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
comment|// lets move application_0 to a queue where it can run
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|application_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_0_0
name|checkApplicationResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveAppViolateQueueState ()
specifier|public
name|void
name|testMoveAppViolateQueueState
parameter_list|()
throws|throws
name|Exception
block|{
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|RMNodeLabelsManager
name|createNodeLabelManager
parameter_list|()
block|{
name|RMNodeLabelsManager
name|mgr
init|=
operator|new
name|NullRMNodeLabelsManager
argument_list|()
decl_stmt|;
name|mgr
operator|.
name|init
argument_list|(
name|getConfig
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mgr
return|;
block|}
block|}
expr_stmt|;
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|StringBuilder
name|qState
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|qState
operator|.
name|append
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|PREFIX
argument_list|)
operator|.
name|append
argument_list|(
name|B
argument_list|)
operator|.
name|append
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|DOT
argument_list|)
operator|.
name|append
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|STATE
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|set
argument_list|(
name|qState
operator|.
name|toString
argument_list|()
argument_list|,
name|QueueState
operator|.
name|STOPPED
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csConf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getNMTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|mockContext
operator|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockContext
operator|.
name|getConfigurationProvider
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|LocalConfigurationProvider
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Register node1
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|NodeManager
name|nm_0
init|=
name|registerNode
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// ResourceRequest priorities
name|Priority
name|priority_0
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|priority_1
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Submit application_0
name|Application
name|application_0
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"a1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// app + app attempt event sent to scheduler
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_0_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_0_1
argument_list|)
expr_stmt|;
name|Task
name|task_0_0
init|=
operator|new
name|Task
argument_list|(
name|application_0
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|}
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addTask
argument_list|(
name|task_0_0
argument_list|)
expr_stmt|;
comment|// Send resource requests to the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// allocate
comment|// task_0_0 allocated
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_0_0
name|checkApplicationResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
comment|// b2 queue contains 3GB consumption app,
comment|// add another 3GB will hit max capacity limit on queue b
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|application_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveAppQueueMetricsCheck ()
specifier|public
name|void
name|testMoveAppQueueMetricsCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceScheduler
name|scheduler
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// Register node1
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|NodeManager
name|nm_0
init|=
name|registerNode
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// Register node2
name|String
name|host_1
init|=
literal|"host_1"
decl_stmt|;
name|NodeManager
name|nm_1
init|=
name|registerNode
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// ResourceRequest priorities
name|Priority
name|priority_0
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Priority
name|priority_1
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Priority
operator|.
name|create
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Submit application_0
name|Application
name|application_0
init|=
operator|new
name|Application
argument_list|(
literal|"user_0"
argument_list|,
literal|"a1"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// app + app attempt event sent to scheduler
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_0
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_0_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_0_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_0_1
argument_list|)
expr_stmt|;
name|Task
name|task_0_0
init|=
operator|new
name|Task
argument_list|(
name|application_0
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_0
operator|.
name|addTask
argument_list|(
name|task_0_0
argument_list|)
expr_stmt|;
comment|// Submit application_1
name|Application
name|application_1
init|=
operator|new
name|Application
argument_list|(
literal|"user_1"
argument_list|,
literal|"b2"
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|submit
argument_list|()
expr_stmt|;
comment|// app + app attempt event sent to scheduler
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|addNodeManager
argument_list|(
name|host_1
argument_list|,
literal|1234
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_0
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_1
argument_list|,
name|capability_1_0
argument_list|)
expr_stmt|;
name|Resource
name|capability_1_1
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addResourceRequestSpec
argument_list|(
name|priority_0
argument_list|,
name|capability_1_1
argument_list|)
expr_stmt|;
name|Task
name|task_1_0
init|=
operator|new
name|Task
argument_list|(
name|application_1
argument_list|,
name|priority_1
argument_list|,
operator|new
name|String
index|[]
block|{
name|host_0
block|,
name|host_1
block|}
argument_list|)
decl_stmt|;
name|application_1
operator|.
name|addTask
argument_list|(
name|task_1_0
argument_list|)
expr_stmt|;
comment|// Send resource requests to the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// allocate
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// allocate
name|nodeUpdate
argument_list|(
name|nm_0
argument_list|)
expr_stmt|;
name|nodeUpdate
argument_list|(
name|nm_1
argument_list|)
expr_stmt|;
name|CapacityScheduler
name|cs
init|=
operator|(
name|CapacityScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|CSQueue
name|origRootQ
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CapacitySchedulerInfo
name|oldInfo
init|=
operator|new
name|CapacitySchedulerInfo
argument_list|(
name|origRootQ
argument_list|)
decl_stmt|;
name|int
name|origNumAppsA
init|=
name|getNumAppsInQueue
argument_list|(
literal|"a"
argument_list|,
name|origRootQ
operator|.
name|getChildQueues
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|origNumAppsRoot
init|=
name|origRootQ
operator|.
name|getNumApplications
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|application_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"a2"
argument_list|)
expr_stmt|;
name|CSQueue
name|newRootQ
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|int
name|newNumAppsA
init|=
name|getNumAppsInQueue
argument_list|(
literal|"a"
argument_list|,
name|newRootQ
operator|.
name|getChildQueues
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|newNumAppsRoot
init|=
name|newRootQ
operator|.
name|getNumApplications
argument_list|()
decl_stmt|;
name|CapacitySchedulerInfo
name|newInfo
init|=
operator|new
name|CapacitySchedulerInfo
argument_list|(
name|newRootQ
argument_list|)
decl_stmt|;
name|CapacitySchedulerLeafQueueInfo
name|origOldA1
init|=
operator|(
name|CapacitySchedulerLeafQueueInfo
operator|)
name|getQueueInfo
argument_list|(
literal|"a1"
argument_list|,
name|oldInfo
operator|.
name|getQueues
argument_list|()
argument_list|)
decl_stmt|;
name|CapacitySchedulerLeafQueueInfo
name|origNewA1
init|=
operator|(
name|CapacitySchedulerLeafQueueInfo
operator|)
name|getQueueInfo
argument_list|(
literal|"a1"
argument_list|,
name|newInfo
operator|.
name|getQueues
argument_list|()
argument_list|)
decl_stmt|;
name|CapacitySchedulerLeafQueueInfo
name|targetOldA2
init|=
operator|(
name|CapacitySchedulerLeafQueueInfo
operator|)
name|getQueueInfo
argument_list|(
literal|"a2"
argument_list|,
name|oldInfo
operator|.
name|getQueues
argument_list|()
argument_list|)
decl_stmt|;
name|CapacitySchedulerLeafQueueInfo
name|targetNewA2
init|=
operator|(
name|CapacitySchedulerLeafQueueInfo
operator|)
name|getQueueInfo
argument_list|(
literal|"a2"
argument_list|,
name|newInfo
operator|.
name|getQueues
argument_list|()
argument_list|)
decl_stmt|;
comment|// originally submitted here
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|origOldA1
operator|.
name|getNumApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|origNumAppsA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|origNumAppsRoot
argument_list|)
expr_stmt|;
comment|// after the move
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|origNewA1
operator|.
name|getNumApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|newNumAppsA
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newNumAppsRoot
argument_list|)
expr_stmt|;
comment|// original consumption on a1
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|origOldA1
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|origOldA1
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|origNewA1
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the move
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|origNewA1
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the move
comment|// app moved here with live containers
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|targetNewA2
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetNewA2
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// it was empty before the move
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|targetOldA2
operator|.
name|getNumApplications
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|targetOldA2
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|targetOldA2
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the app moved here
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetNewA2
operator|.
name|getNumApplications
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 container on original queue before move
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|origOldA1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// after the move the resource released
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|origNewA1
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// and moved to the new queue
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetNewA2
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// which originally didn't have any
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|targetOldA2
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 user with 3GB
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|origOldA1
operator|.
name|getUsers
argument_list|()
operator|.
name|getUsersList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 user with 1 core
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|origOldA1
operator|.
name|getUsers
argument_list|()
operator|.
name|getUsersList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// user ha no more running app in the orig queue
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|origNewA1
operator|.
name|getUsers
argument_list|()
operator|.
name|getUsersList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 user with 3GB
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|targetNewA2
operator|.
name|getUsers
argument_list|()
operator|.
name|getUsersList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 user with 1 core
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetNewA2
operator|.
name|getUsers
argument_list|()
operator|.
name|getUsersList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourcesUsed
argument_list|()
operator|.
name|getvCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get allocations from the scheduler
name|application_0
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_0_0
name|checkApplicationResourceUsage
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|application_0
argument_list|)
expr_stmt|;
name|application_1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// task_1_0
name|checkApplicationResourceUsage
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|application_1
argument_list|)
expr_stmt|;
comment|// task_1_0 (1G) application_0 moved to b2 with max running app 1 so it is
comment|// not scheduled
name|checkNodeResourceUsage
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|nm_0
argument_list|)
expr_stmt|;
name|checkNodeResourceUsage
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|nm_1
argument_list|)
expr_stmt|;
block|}
DECL|method|getNumAppsInQueue (String name, List<CSQueue> queues)
specifier|private
name|int
name|getNumAppsInQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|CSQueue
argument_list|>
name|queues
parameter_list|)
block|{
for|for
control|(
name|CSQueue
name|queue
range|:
name|queues
control|)
block|{
if|if
condition|(
name|queue
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|queue
operator|.
name|getNumApplications
argument_list|()
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
DECL|method|getQueueInfo (String name, CapacitySchedulerQueueInfoList info)
specifier|private
name|CapacitySchedulerQueueInfo
name|getQueueInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|CapacitySchedulerQueueInfoList
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CapacitySchedulerQueueInfo
name|queueInfo
range|:
name|info
operator|.
name|getQueueInfoList
argument_list|()
control|)
block|{
if|if
condition|(
name|queueInfo
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|queueInfo
return|;
block|}
else|else
block|{
name|CapacitySchedulerQueueInfo
name|result
init|=
name|getQueueInfo
argument_list|(
name|name
argument_list|,
name|queueInfo
operator|.
name|getQueues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
DECL|method|testMoveAllApps ()
specifier|public
name|void
name|testMoveAllApps
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
name|setUpMove
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInA1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now move the app
name|scheduler
operator|.
name|moveAllApps
argument_list|(
literal|"a1"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
comment|// check postconditions
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|appsInB1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInB1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|queue
operator|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInB1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"b1"
argument_list|)
argument_list|)
expr_stmt|;
name|appsInB
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveAllAppsInvalidDestination ()
specifier|public
name|void
name|testMoveAllAppsInvalidDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
name|setUpMove
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now move the app
try|try
block|{
name|scheduler
operator|.
name|moveAllApps
argument_list|(
literal|"a1"
argument_list|,
literal|"DOES_NOT_EXIST"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// check postconditions, app should still be in a1
name|appsInA1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInB1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInB
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveAllAppsInvalidSource ()
specifier|public
name|void
name|testMoveAllAppsInvalidSource
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
name|setUpMove
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInB
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// now move the app
try|try
block|{
name|scheduler
operator|.
name|moveAllApps
argument_list|(
literal|"DOES_NOT_EXIST"
argument_list|,
literal|"b1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// check postconditions, app should still be in a1
name|appsInA1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInB1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInB
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInB
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillAllAppsInQueue ()
specifier|public
name|void
name|testKillAllAppsInQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
name|setUpMove
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|queue
init|=
name|scheduler
operator|.
name|getApplicationAttempt
argument_list|(
name|appsInA1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getQueue
argument_list|()
operator|.
name|getQueueName
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|queue
operator|.
name|equals
argument_list|(
literal|"a1"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now kill the app
name|scheduler
operator|.
name|killAllAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
comment|// check postconditions
name|rm
operator|.
name|waitForState
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|KILLED
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testKillAllAppsInvalidSource ()
specifier|public
name|void
name|testKillAllAppsInvalidSource
parameter_list|()
throws|throws
name|Exception
block|{
name|MockRM
name|rm
init|=
name|setUpMove
argument_list|()
decl_stmt|;
name|AbstractYarnScheduler
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
operator|)
name|rm
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
comment|// submit an app
name|RMApp
name|app
init|=
name|rm
operator|.
name|submitApp
argument_list|(
name|GB
argument_list|,
literal|"test-move-1"
argument_list|,
literal|"user_0"
argument_list|,
literal|null
argument_list|,
literal|"a1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|rm
operator|.
name|getApplicationReport
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getCurrentApplicationAttemptId
argument_list|()
decl_stmt|;
comment|// check preconditions
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA1
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInA
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInRoot
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now kill the app
try|try
block|{
name|scheduler
operator|.
name|killAllAppsInQueue
argument_list|(
literal|"DOES_NOT_EXIST"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// check postconditions, app should still be in a1
name|appsInA1
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInA
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInA
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|appsInRoot
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appsInRoot
operator|.
name|contains
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appsInRoot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// Test to ensure that we don't carry out reservation on nodes
comment|// that have no CPU available when using the DominantResourceCalculator
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testAppReservationWithDominantResourceCalculator ()
specifier|public
name|void
name|testAppReservationWithDominantResourceCalculator
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csconf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|csconf
operator|.
name|setResourceComparator
argument_list|(
name|DominantResourceCalculator
operator|.
name|class
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|(
name|csconf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|CapacityScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|MockRM
name|rm
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|rm
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm1
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// register extra nodes to bump up cluster resource
name|MockNM
name|nm2
init|=
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1235"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|rm
operator|.
name|registerNode
argument_list|(
literal|"127.0.0.1:1236"
argument_list|,
literal|10
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|RMApp
name|app1
init|=
name|rm
operator|.
name|submitApp
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
comment|// kick the scheduling
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RMAppAttempt
name|attempt1
init|=
name|app1
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|MockAM
name|am1
init|=
name|rm
operator|.
name|sendAMLaunched
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am1
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|SchedulerNodeReport
name|report_nm1
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getNodeReport
argument_list|(
name|nm1
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// check node report
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
name|report_nm1
operator|.
name|getAvailableResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// add request for containers
name|am1
operator|.
name|addRequests
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|,
literal|"127.0.0.2"
block|}
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
comment|// send the request
comment|// kick the scheduler, container reservation should not happen
name|nm1
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|AllocateResponse
name|allocResponse
init|=
name|am1
operator|.
name|schedule
argument_list|()
decl_stmt|;
name|ApplicationResourceUsageReport
name|report
init|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getAppResourceUsageReport
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getNumReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
comment|// container should get allocated on this node
name|nm2
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|allocResponse
operator|=
name|am1
operator|.
name|schedule
argument_list|()
expr_stmt|;
block|}
name|report
operator|=
name|rm
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getAppResourceUsageReport
argument_list|(
name|attempt1
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocResponse
operator|.
name|getAllocatedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|report
operator|.
name|getNumReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|rm
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionDisabled ()
specifier|public
name|void
name|testPreemptionDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RMContextImpl
name|rmContext
init|=
operator|new
name|RMContextImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|NMTokenSecretManagerInRM
argument_list|(
name|conf
argument_list|)
argument_list|,
operator|new
name|ClientToAMTokenSecretManagerInRM
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|CSQueue
name|rootQueue
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CSQueue
name|queueB
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|B
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB2
init|=
name|findQueue
argument_list|(
name|queueB
argument_list|,
name|B2
argument_list|)
decl_stmt|;
comment|// When preemption turned on for the whole system
comment|// (yarn.resourcemanager.scheduler.monitor.enable=true), and with no other
comment|// preemption properties set, queue root.b.b2 should be preemptable.
name|assertFalse
argument_list|(
literal|"queue "
operator|+
name|B2
operator|+
literal|" should default to preemptable"
argument_list|,
name|queueB2
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable preemption at the root queue level.
comment|// The preemption property should be inherited from root all the
comment|// way down so that root.b.b2 should NOT be preemptable.
name|conf
operator|.
name|setPreemptionDisabled
argument_list|(
name|rootQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"queue "
operator|+
name|B2
operator|+
literal|" should have inherited non-preemptability from root"
argument_list|,
name|queueB2
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Enable preemption for root (grandparent) but disable for root.b (parent).
comment|// root.b.b2 should inherit property from parent and NOT be preemptable
name|conf
operator|.
name|setPreemptionDisabled
argument_list|(
name|rootQueue
operator|.
name|getQueuePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setPreemptionDisabled
argument_list|(
name|queueB
operator|.
name|getQueuePath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"queue "
operator|+
name|B2
operator|+
literal|" should have inherited non-preemptability from parent"
argument_list|,
name|queueB2
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// When preemption is turned on for root.b.b2, it should be preemptable
comment|// even though preemption is disabled on root.b (parent).
name|conf
operator|.
name|setPreemptionDisabled
argument_list|(
name|queueB2
operator|.
name|getQueuePath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"queue "
operator|+
name|B2
operator|+
literal|" should have been preemptable"
argument_list|,
name|queueB2
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesMaxAllocationRefresh ()
specifier|public
name|void
name|testRefreshQueuesMaxAllocationRefresh
parameter_list|()
throws|throws
name|Exception
block|{
comment|// queue refresh should not allow changing the maximum allocation setting
comment|// per queue to be smaller than previous setting
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation in CS"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation for A1"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|conf
operator|.
name|getMaximumAllocationPerQueue
argument_list|(
name|A1
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|conf
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|CSQueue
name|rootQueue
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CSQueue
name|queueA
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|CSQueue
name|queueA1
init|=
name|findQueue
argument_list|(
name|queueA
argument_list|,
name|A1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"queue max allocation"
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"max allocation exception"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not be decreased"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"max allocation exception"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not be decreased"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesMaxAllocationPerQueueLarge ()
specifier|public
name|void
name|testRefreshQueuesMaxAllocationPerQueueLarge
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify we can't set the allocation per queue larger then cluster setting
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// change max allocation for B3 queue to be larger then cluster max
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|B3
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
operator|+
literal|2048
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"maximum allocation exception"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maximum allocation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|B3
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
name|B3
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"maximum allocation exception"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maximum allocation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesMaxAllocationRefreshLarger ()
specifier|public
name|void
name|testRefreshQueuesMaxAllocationRefreshLarger
parameter_list|()
throws|throws
name|Exception
block|{
comment|// queue refresh should allow max allocation per queue to go larger
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max capability MB in CS"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max capability vcores in CS"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation MB A1"
argument_list|,
literal|4096
argument_list|,
name|conf
operator|.
name|getMaximumAllocationPerQueue
argument_list|(
name|A1
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation vcores A1"
argument_list|,
literal|2
argument_list|,
name|conf
operator|.
name|getMaximumAllocationPerQueue
argument_list|(
name|A1
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cluster max allocation MB"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|conf
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cluster max allocation vcores"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|conf
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|CSQueue
name|rootQueue
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CSQueue
name|queueA
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|CSQueue
name|queueA1
init|=
name|findQueue
argument_list|(
name|queueA
argument_list|,
name|A1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"queue max allocation"
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|6144
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// conf will have changed but we shouldn't be able to change max allocation
comment|// for the actual queue
name|assertEquals
argument_list|(
literal|"max allocation MB A1"
argument_list|,
literal|6144
argument_list|,
name|conf
operator|.
name|getMaximumAllocationPerQueue
argument_list|(
name|A1
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation vcores A1"
argument_list|,
literal|3
argument_list|,
name|conf
operator|.
name|getMaximumAllocationPerQueue
argument_list|(
name|A1
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation MB cluster"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|conf
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation vcores cluster"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|conf
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue max allocation MB"
argument_list|,
literal|6144
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue max allocation vcores"
argument_list|,
literal|3
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max capability MB cluster"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cluster max capability vcores"
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesMaxAllocationCSError ()
specifier|public
name|void
name|testRefreshQueuesMaxAllocationCSError
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try to refresh the cluster level max allocation size to be smaller
comment|// and it should error out
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation MB in CS"
argument_list|,
literal|10240
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation vcores in CS"
argument_list|,
literal|10
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
literal|6144
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"max allocation exception"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not be decreased"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
literal|8
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"max allocation exception"
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not be decreased"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRefreshQueuesMaxAllocationCSLarger ()
specifier|public
name|void
name|testRefreshQueuesMaxAllocationCSLarger
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try to refresh the cluster level max allocation size to be larger
comment|// and verify that if there is no setting per queue it uses the
comment|// cluster level setting.
name|CapacityScheduler
name|cs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|CapacitySchedulerConfiguration
name|conf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|4096
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
name|A1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|mockContext
argument_list|)
expr_stmt|;
name|checkQueueCapacities
argument_list|(
name|cs
argument_list|,
name|A_CAPACITY
argument_list|,
name|B_CAPACITY
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation MB in CS"
argument_list|,
literal|10240
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation vcores in CS"
argument_list|,
literal|10
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|CSQueue
name|rootQueue
init|=
name|cs
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|CSQueue
name|queueA
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|A
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB
init|=
name|findQueue
argument_list|(
name|rootQueue
argument_list|,
name|B
argument_list|)
decl_stmt|;
name|CSQueue
name|queueA1
init|=
name|findQueue
argument_list|(
name|queueA
argument_list|,
name|A1
argument_list|)
decl_stmt|;
name|CSQueue
name|queueA2
init|=
name|findQueue
argument_list|(
name|queueA
argument_list|,
name|A2
argument_list|)
decl_stmt|;
name|CSQueue
name|queueB2
init|=
name|findQueue
argument_list|(
name|queueB
argument_list|,
name|B2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"queue A1 max allocation MB"
argument_list|,
literal|4096
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue A1 max allocation vcores"
argument_list|,
literal|4
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue A2 max allocation MB"
argument_list|,
literal|10240
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue A2 max allocation vcores"
argument_list|,
literal|10
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue B2 max allocation MB"
argument_list|,
literal|10240
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueB2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue B2 max allocation vcores"
argument_list|,
literal|10
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueB2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|setMaxAllocMb
argument_list|(
name|conf
argument_list|,
literal|12288
argument_list|)
expr_stmt|;
name|setMaxAllocVcores
argument_list|(
name|conf
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|cs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// cluster level setting should change and any queues without
comment|// per queue setting
name|assertEquals
argument_list|(
literal|"max allocation MB in CS"
argument_list|,
literal|12288
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"max allocation vcores in CS"
argument_list|,
literal|12
argument_list|,
name|cs
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue A1 max MB allocation"
argument_list|,
literal|4096
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue A1 max vcores allocation"
argument_list|,
literal|4
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA1
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue A2 max MB allocation"
argument_list|,
literal|12288
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue A2 max vcores allocation"
argument_list|,
literal|12
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueA2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue B2 max MB allocation"
argument_list|,
literal|12288
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueB2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue B2 max vcores allocation"
argument_list|,
literal|12
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|queueB2
operator|)
operator|.
name|getMaximumAllocation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaxAllocMb (Configuration conf, int maxAllocMb)
specifier|private
name|void
name|setMaxAllocMb
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|maxAllocMb
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
name|maxAllocMb
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaxAllocMb (CapacitySchedulerConfiguration conf, String queueName, int maxAllocMb)
specifier|private
name|void
name|setMaxAllocMb
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|maxAllocMb
parameter_list|)
block|{
name|String
name|propName
init|=
name|CapacitySchedulerConfiguration
operator|.
name|getQueuePrefix
argument_list|(
name|queueName
argument_list|)
operator|+
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_ALLOCATION_MB
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|propName
argument_list|,
name|maxAllocMb
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaxAllocVcores (Configuration conf, int maxAllocVcores)
specifier|private
name|void
name|setMaxAllocVcores
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|int
name|maxAllocVcores
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|maxAllocVcores
argument_list|)
expr_stmt|;
block|}
DECL|method|setMaxAllocVcores (CapacitySchedulerConfiguration conf, String queueName, int maxAllocVcores)
specifier|private
name|void
name|setMaxAllocVcores
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|,
name|String
name|queueName
parameter_list|,
name|int
name|maxAllocVcores
parameter_list|)
block|{
name|String
name|propName
init|=
name|CapacitySchedulerConfiguration
operator|.
name|getQueuePrefix
argument_list|(
name|queueName
argument_list|)
operator|+
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_ALLOCATION_VCORES
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|propName
argument_list|,
name|maxAllocVcores
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

