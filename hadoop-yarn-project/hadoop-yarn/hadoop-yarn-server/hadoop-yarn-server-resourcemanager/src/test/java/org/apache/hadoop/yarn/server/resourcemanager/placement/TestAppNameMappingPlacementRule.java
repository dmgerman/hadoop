begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.placement
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|SimpleGroupsMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
DECL|class|TestAppNameMappingPlacementRule
specifier|public
class|class
name|TestAppNameMappingPlacementRule
block|{
DECL|field|CLUSTER_TIMESTAMP
specifier|private
specifier|static
specifier|final
name|long
name|CLUSTER_TIMESTAMP
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
DECL|field|APPIDSTRPREFIX
specifier|public
specifier|static
specifier|final
name|String
name|APPIDSTRPREFIX
init|=
literal|"application"
decl_stmt|;
DECL|field|APPLICATION_ID_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_ID_PREFIX
init|=
name|APPIDSTRPREFIX
operator|+
literal|'_'
decl_stmt|;
DECL|field|APPLICATION_ID_SUFFIX
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION_ID_SUFFIX
init|=
literal|'_'
operator|+
literal|"0001"
decl_stmt|;
DECL|field|CLUSTER_APP_ID
specifier|private
specifier|static
specifier|final
name|String
name|CLUSTER_APP_ID
init|=
name|APPLICATION_ID_PREFIX
operator|+
name|CLUSTER_TIMESTAMP
operator|+
name|APPLICATION_ID_SUFFIX
decl_stmt|;
DECL|field|conf
specifier|private
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueMapping (QueueMappingEntity queueMapping, String inputAppId, String expectedQueue)
specifier|private
name|void
name|verifyQueueMapping
parameter_list|(
name|QueueMappingEntity
name|queueMapping
parameter_list|,
name|String
name|inputAppId
parameter_list|,
name|String
name|expectedQueue
parameter_list|)
throws|throws
name|YarnException
block|{
name|verifyQueueMapping
argument_list|(
name|queueMapping
argument_list|,
name|inputAppId
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|,
name|expectedQueue
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueMapping (QueueMappingEntity queueMapping, String inputAppId, String inputQueue, String expectedQueue, boolean overwrite)
specifier|private
name|void
name|verifyQueueMapping
parameter_list|(
name|QueueMappingEntity
name|queueMapping
parameter_list|,
name|String
name|inputAppId
parameter_list|,
name|String
name|inputQueue
parameter_list|,
name|String
name|expectedQueue
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|YarnException
block|{
name|AppNameMappingPlacementRule
name|rule
init|=
operator|new
name|AppNameMappingPlacementRule
argument_list|(
name|overwrite
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|queueMapping
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|asc
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|ApplicationSubmissionContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|asc
operator|.
name|setQueue
argument_list|(
name|inputQueue
argument_list|)
expr_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
name|CLUSTER_TIMESTAMP
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|inputAppId
argument_list|)
argument_list|)
decl_stmt|;
name|asc
operator|.
name|setApplicationId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|ApplicationPlacementContext
name|ctx
init|=
name|rule
operator|.
name|getPlacementForApp
argument_list|(
name|asc
argument_list|,
name|queueMapping
operator|.
name|getSource
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedQueue
argument_list|,
name|ctx
operator|!=
literal|null
condition|?
name|ctx
operator|.
name|getQueue
argument_list|()
else|:
name|inputQueue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMapping ()
specifier|public
name|void
name|testMapping
parameter_list|()
throws|throws
name|YarnException
block|{
comment|// simple base case for mapping user to queue
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMappingEntity
argument_list|(
name|CLUSTER_APP_ID
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"q1"
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMappingEntity
argument_list|(
literal|"%application"
argument_list|,
literal|"q2"
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"q2"
argument_list|)
expr_stmt|;
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMappingEntity
argument_list|(
literal|"%application"
argument_list|,
literal|"%application"
argument_list|)
argument_list|,
literal|"1"
argument_list|,
name|CLUSTER_APP_ID
argument_list|)
expr_stmt|;
comment|// specify overwritten, and see if user specified a queue, and it will be
comment|// overridden
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMappingEntity
argument_list|(
name|CLUSTER_APP_ID
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"q2"
argument_list|,
literal|"q1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// if overwritten not specified, it should be which user specified
name|verifyQueueMapping
argument_list|(
operator|new
name|QueueMappingEntity
argument_list|(
name|CLUSTER_APP_ID
argument_list|,
literal|"q1"
argument_list|)
argument_list|,
literal|"1"
argument_list|,
literal|"q2"
argument_list|,
literal|"q2"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

