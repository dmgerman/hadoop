begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueUserACLInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ActiveUsersManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestLeafQueue
specifier|public
class|class
name|TestLeafQueue
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|final
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|rmContext
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|cs
name|CapacityScheduler
name|cs
decl_stmt|;
DECL|field|csConf
name|CapacitySchedulerConfiguration
name|csConf
decl_stmt|;
DECL|field|csContext
name|CapacitySchedulerContext
name|csContext
decl_stmt|;
DECL|field|root
name|CSQueue
name|root
decl_stmt|;
DECL|field|queues
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|queues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|GB
specifier|final
specifier|static
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|DEFAULT_RACK
specifier|final
specifier|static
name|String
name|DEFAULT_RACK
init|=
literal|"/default"
decl_stmt|;
DECL|field|resourceCalculator
specifier|private
specifier|final
name|ResourceCalculator
name|resourceCalculator
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacityScheduler
name|spyCs
init|=
operator|new
name|CapacityScheduler
argument_list|()
decl_stmt|;
name|cs
operator|=
name|spy
argument_list|(
name|spyCs
argument_list|)
expr_stmt|;
name|rmContext
operator|=
name|TestUtils
operator|.
name|getMockRMContext
argument_list|()
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|csConf
operator|.
name|setBoolean
argument_list|(
literal|"yarn.scheduler.capacity.user-metrics.enable"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|newRoot
init|=
literal|"root"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|setupQueueConfiguration
argument_list|(
name|csConf
argument_list|,
name|newRoot
argument_list|)
expr_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|cs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|csContext
operator|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getApplicationComparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacityScheduler
operator|.
name|applicationComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getQueueComparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CapacityScheduler
operator|.
name|queueComparator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|RMContainerTokenSecretManager
name|containerTokenSecretManager
init|=
operator|new
name|RMContainerTokenSecretManager
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|containerTokenSecretManager
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getContainerTokenSecretManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|containerTokenSecretManager
argument_list|)
expr_stmt|;
name|root
operator|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|queues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|cs
operator|.
name|init
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|cs
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
DECL|field|A
specifier|private
specifier|static
specifier|final
name|String
name|A
init|=
literal|"a"
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|String
name|B
init|=
literal|"b"
decl_stmt|;
DECL|field|C
specifier|private
specifier|static
specifier|final
name|String
name|C
init|=
literal|"c"
decl_stmt|;
DECL|field|C1
specifier|private
specifier|static
specifier|final
name|String
name|C1
init|=
literal|"c1"
decl_stmt|;
DECL|field|D
specifier|private
specifier|static
specifier|final
name|String
name|D
init|=
literal|"d"
decl_stmt|;
DECL|field|E
specifier|private
specifier|static
specifier|final
name|String
name|E
init|=
literal|"e"
decl_stmt|;
DECL|method|setupQueueConfiguration ( CapacitySchedulerConfiguration conf, final String newRoot)
specifier|private
name|void
name|setupQueueConfiguration
parameter_list|(
name|CapacitySchedulerConfiguration
name|conf
parameter_list|,
specifier|final
name|String
name|newRoot
parameter_list|)
block|{
comment|// Define top-level queues
name|conf
operator|.
name|setQueues
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
operator|new
name|String
index|[]
block|{
name|newRoot
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAcl
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_newRoot
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|newRoot
decl_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_newRoot
argument_list|,
operator|new
name|String
index|[]
block|{
name|A
block|,
name|B
block|,
name|C
block|,
name|D
block|,
name|E
block|}
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_newRoot
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|Q_newRoot
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAcl
argument_list|(
name|Q_newRoot
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_A
init|=
name|Q_newRoot
operator|+
literal|"."
operator|+
name|A
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_A
argument_list|,
literal|8.5f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|Q_A
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAcl
argument_list|(
name|Q_A
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_B
init|=
name|Q_newRoot
operator|+
literal|"."
operator|+
name|B
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_B
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|Q_B
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAcl
argument_list|(
name|Q_B
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C
init|=
name|Q_newRoot
operator|+
literal|"."
operator|+
name|C
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|Q_C
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAcl
argument_list|(
name|Q_C
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setQueues
argument_list|(
name|Q_C
argument_list|,
operator|new
name|String
index|[]
block|{
name|C1
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_C1
init|=
name|Q_C
operator|+
literal|"."
operator|+
name|C1
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_C1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_D
init|=
name|Q_newRoot
operator|+
literal|"."
operator|+
name|D
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_D
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|Q_D
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAcl
argument_list|(
name|Q_D
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"user_d"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|Q_E
init|=
name|Q_newRoot
operator|+
literal|"."
operator|+
name|E
decl_stmt|;
name|conf
operator|.
name|setCapacity
argument_list|(
name|Q_E
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMaximumCapacity
argument_list|(
name|Q_E
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAcl
argument_list|(
name|Q_E
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
literal|"user_e"
argument_list|)
expr_stmt|;
block|}
DECL|method|stubLeafQueue (LeafQueue queue)
specifier|static
name|LeafQueue
name|stubLeafQueue
parameter_list|(
name|LeafQueue
name|queue
parameter_list|)
block|{
comment|// Mock some methods for ease in these unit tests
comment|// 1. LeafQueue.createContainer to return dummy containers
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Container
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Container
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|FiCaSchedulerApp
name|application
init|=
call|(
name|FiCaSchedulerApp
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|ContainerId
name|containerId
init|=
name|TestUtils
operator|.
name|getMockContainerId
argument_list|(
name|application
argument_list|)
decl_stmt|;
name|Container
name|container
init|=
name|TestUtils
operator|.
name|getMockContainer
argument_list|(
name|containerId
argument_list|,
operator|(
call|(
name|FiCaSchedulerNode
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|1
index|]
argument_list|)
operator|)
operator|.
name|getNodeID
argument_list|()
argument_list|,
call|(
name|Resource
call|)
argument_list|(
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|2
index|]
argument_list|)
argument_list|,
operator|(
operator|(
name|Priority
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|3
index|]
operator|)
argument_list|)
decl_stmt|;
return|return
name|container
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|queue
argument_list|)
operator|.
name|createContainer
argument_list|(
name|any
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FiCaSchedulerNode
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. Stub out LeafQueue.parent.completedContainer
name|CSQueue
name|parent
init|=
name|queue
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|parent
argument_list|)
operator|.
name|completedContainer
argument_list|(
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FiCaSchedulerNode
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ContainerStatus
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|RMContainerEventType
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|CSQueue
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|queue
return|;
block|}
annotation|@
name|Test
DECL|method|testInitializeQueue ()
specifier|public
name|void
name|testInitializeQueue
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|float
name|epsilon
init|=
literal|1e-5f
decl_stmt|;
comment|//can add more sturdy test with 3-layer queues
comment|//once MAPREDUCE:3410 is resolved
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.085
argument_list|,
name|a
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.085
argument_list|,
name|a
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.2
argument_list|,
name|a
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.2
argument_list|,
name|a
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|LeafQueue
name|b
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.80
argument_list|,
name|b
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.80
argument_list|,
name|b
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.99
argument_list|,
name|b
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.99
argument_list|,
name|b
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|ParentQueue
name|c
init|=
operator|(
name|ParentQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|C
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.015
argument_list|,
name|c
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.015
argument_list|,
name|c
operator|.
name|getAbsoluteCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.1
argument_list|,
name|c
operator|.
name|getMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.1
argument_list|,
name|c
operator|.
name|getAbsoluteMaximumCapacity
argument_list|()
argument_list|,
name|epsilon
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleQueueOneUserMetrics ()
specifier|public
name|void
name|testSingleQueueOneUserMetrics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// same user
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|int
call|)
argument_list|(
name|node_0
operator|.
name|getTotalResource
argument_list|()
operator|.
name|getMemory
argument_list|()
operator|*
name|a
operator|.
name|getCapacity
argument_list|()
argument_list|)
operator|-
operator|(
literal|1
operator|*
name|GB
operator|)
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserQueueAcl ()
specifier|public
name|void
name|testUserQueueAcl
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|d
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|D
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_d
init|=
literal|"user_d"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_d
argument_list|,
name|d
argument_list|,
literal|null
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|d
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_d
argument_list|)
expr_stmt|;
comment|// Attempt the same application again
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_d
argument_list|,
name|d
argument_list|,
literal|null
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|d
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_d
argument_list|)
expr_stmt|;
comment|// same user
block|}
annotation|@
name|Test
DECL|method|testAppAttemptMetrics ()
specifier|public
name|void
name|testAppAttemptMetrics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|addAppEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|a
operator|.
name|getQueueName
argument_list|()
argument_list|,
name|user_0
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAppEvent
argument_list|)
expr_stmt|;
name|AppAttemptAddedSchedulerEvent
name|addAttemptEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId_0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|addAttemptEvent
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|event
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|appAttemptId_0
argument_list|,
name|RMAppAttemptState
operator|.
name|FAILED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|// Attempt the same application again
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
literal|null
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// same user
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|appAttemptId_0
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|AppRemovedSchedulerEvent
name|rEvent
init|=
operator|new
name|AppRemovedSchedulerEvent
argument_list|(
name|appAttemptId_0
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|RMAppState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
name|cs
operator|.
name|handle
argument_list|(
name|rEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsPending
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsFailed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAppsCompleted
argument_list|()
argument_list|)
expr_stmt|;
name|QueueMetrics
name|userMetrics
init|=
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getUserMetrics
argument_list|(
name|user_0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userMetrics
operator|.
name|getAppsSubmitted
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSingleQueueWithOneUser ()
specifier|public
name|void
name|testSingleQueueWithOneUser
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|//unset maxCapacity
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// same user
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also 2nd -> minCapacity = 1024 since (.1 * 8G)< minAlloc, also
comment|// you can get one container more than user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Can't allocate 3rd due to user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Bump up user-limit-factor, now allocate should work
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// One more should work, for app_1, due to user-limit-factor
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test max-capacity
comment|// Now - no more allocs since we are at max-cap
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release each container from app_0
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_0
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Release each container from app_1
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_1
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_1
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|int
call|)
argument_list|(
name|a
operator|.
name|getCapacity
argument_list|()
operator|*
name|node_0
operator|.
name|getTotalResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserLimits ()
specifier|public
name|void
name|testUserLimits
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock the queue
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|//unset maxCapacity
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// same user
specifier|final
name|ApplicationAttemptId
name|appAttemptId_2
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_2
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_2
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * Start testing...      */
comment|// Set user-limit
name|a
operator|.
name|setUserLimit
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Now, only user_0 should be active since he is the only one with
comment|// outstanding requests
name|assertEquals
argument_list|(
literal|"There should only be 1 active user!"
argument_list|,
literal|1
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// This commented code is key to test 'activeUsers'.
comment|// It should fail the test if uncommented since
comment|// it would increase 'activeUsers' to 2 and stop user_2
comment|// Pre MAPREDUCE-3732 this test should fail without this block too
comment|//    app_2.updateResourceRequests(Collections.singletonList(
comment|//        TestUtils.createResourceRequest(RMNodeImpl.ANY, 1*GB, 1, priority,
comment|//            recordFactory)));
comment|// 1 container to user_0
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Again one to user_0 since he hasn't exceeded user limit yet
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// One more to user_0 since he is the only active user
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHeadroomWithMaxCap ()
specifier|public
name|void
name|testHeadroomWithMaxCap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock the queue
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|//unset maxCapacity
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// same user
specifier|final
name|ApplicationAttemptId
name|appAttemptId_2
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_2
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_2
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * Start testing...      */
comment|// Set user-limit
name|a
operator|.
name|setUserLimit
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Now, only user_0 should be active since he is the only one with
comment|// outstanding requests
name|assertEquals
argument_list|(
literal|"There should only be 1 active user!"
argument_list|,
literal|1
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1 container to user_0
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getHeadroom
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// User limit = 2G
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getHeadroom
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// User limit = 2G
comment|// Again one to user_0 since he hasn't exceeded user limit yet
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getHeadroom
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3G - 2G
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getHeadroom
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3G - 2G
comment|// Submit requests for app_1 and set max-cap
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|.1f
argument_list|)
expr_stmt|;
name|app_2
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
comment|// No more to user_0 since he is already over user-limit
comment|// and no more containers to queue since it's already at max-cap
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getHeadroom
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getHeadroom
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check headroom for app_2
name|LOG
operator|.
name|info
argument_list|(
literal|"here"
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
comment|// unset
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
operator|.
name|getNumActiveUsers
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getHeadroom
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// hit queue max-cap
block|}
annotation|@
name|Test
DECL|method|testSingleQueueWithMultipleUsers ()
specifier|public
name|void
name|testSingleQueueWithMultipleUsers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock the queue
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|//unset maxCapacity
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
specifier|final
name|String
name|user_2
init|=
literal|"user_2"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// same user
specifier|final
name|ApplicationAttemptId
name|appAttemptId_2
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_2
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_2
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_3
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_3
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_3
argument_list|,
name|user_2
argument_list|,
name|a
argument_list|,
name|a
operator|.
name|getActiveUsersManager
argument_list|()
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_3
argument_list|,
name|user_2
argument_list|)
expr_stmt|;
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/**       * Start testing...       */
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also 2nd -> minCapacity = 1024 since (.1 * 8G)< minAlloc, also
comment|// you can get one container more than user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Can't allocate 3rd due to user-limit
name|a
operator|.
name|setUserLimit
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit resource requests for other apps now to 'activate' them
name|app_2
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|3
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_3
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now allocations should goto app_2 since
comment|// user_0 is at limit inspite of high user-limit-factor
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now allocations should goto app_0 since
comment|// user_0 is at user-limit not above it
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test max-capacity
comment|// Now - no more allocs since we are at max-cap
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|0.5f
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Revert max-capacity and user-limit-factor
comment|// Now, allocations should goto app_3 since it's under user-limit
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now we should assign to app_3 again since user_2 is under user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 8. Release each container from app_0
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_0
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 9. Release each container from app_2
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_2
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_2
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// 10. Release each container from app_3
for|for
control|(
name|RMContainer
name|rmContainer
range|:
name|app_3
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_3
argument_list|,
name|node_0
argument_list|,
name|rmContainer
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_2
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_3
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservation ()
specifier|public
name|void
name|testReservation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|//unset maxCapacity
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|2
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|4
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also 2nd -> minCapacity = 1024 since (.1 * 8G)< minAlloc, also
comment|// you can get one container more than user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now, reservation should kick in for app_1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now free 1 container from app_0 i.e. 1G
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|app_0
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now finish another container from app_0 and fulfill the reservation
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|app_0
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStolenReservedContainer ()
specifier|public
name|void
name|testStolenReservedContainer
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|//unset maxCapacity
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|4
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup app_1 to request a 4GB container on host_0 and
comment|// another 4GB container anywhere.
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
name|appRequests_1
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|appRequests_1
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|appRequests_1
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|DEFAULT_RACK
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|appRequests_1
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|appRequests_1
argument_list|)
expr_stmt|;
comment|// Start testing...
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now, reservation should kick in for app_1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// node_1 heartbeats in and gets the DEFAULT_RACK request for app_1
comment|// We do not need locality delay here
name|doReturn
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|a
argument_list|)
operator|.
name|getNodeLocalityDelay
argument_list|()
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|node_1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now free 1 container from app_0 and try to assign to node_0
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|app_0
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationExchange ()
specifier|public
name|void
name|testReservationExchange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|//unset maxCapacity
name|a
operator|.
name|setMaxCapacity
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|a
operator|.
name|setUserLimitFactor
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
specifier|final
name|String
name|user_1
init|=
literal|"user_1"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_1
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_1
argument_list|)
expr_stmt|;
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|4
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|4
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|a
operator|.
name|getMaximumAllocation
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|a
operator|.
name|getMinimumAllocationFactor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0.25f
argument_list|)
expr_stmt|;
comment|// 1G / 4G
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|app_1
operator|.
name|updateResourceRequests
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|4
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Only 1 container
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Also 2nd -> minCapacity = 1024 since (.1 * 8G)< minAlloc, also
comment|// you can get one container more than user-limit
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now, reservation should kick in for app_1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now free 1 container from app_0 i.e. 1G, and re-reserve it
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|app_0
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_1
operator|.
name|getReReservations
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-reserve
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_1
operator|.
name|getReReservations
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to schedule on node_1 now, should *move* the reservation
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|node_1
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Doesn't change yet... only when reservation is cancelled or a different
comment|// container is reserved
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_1
operator|.
name|getReReservations
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now finish another container from app_0 and see the reservation cancelled
name|a
operator|.
name|completedContainer
argument_list|(
name|clusterResource
argument_list|,
name|app_0
argument_list|,
name|node_0
argument_list|,
name|app_0
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
literal|null
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CSAssignment
name|assignment
init|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
name|a
operator|.
name|getUsedResources
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|app_0
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|app_1
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|GB
argument_list|,
name|node_0
operator|.
name|getUsedResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
name|assignment
operator|.
name|getExcessReservation
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalityScheduling ()
specifier|public
name|void
name|testLocalityScheduling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// User
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
name|spy
argument_list|(
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// Setup some nodes and racks
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|String
name|rack_0
init|=
literal|"rack_0"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|String
name|rack_1
init|=
literal|"rack_1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_2
init|=
literal|"127.0.0.3"
decl_stmt|;
name|String
name|rack_2
init|=
literal|"rack_2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_2
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_2
argument_list|,
name|rack_2
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests and submit
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_requests_0
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
comment|// one extra
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
comment|// Start testing...
name|CSAssignment
name|assignment
init|=
literal|null
decl_stmt|;
comment|// Start with off switch, shouldn't allocate due to delay scheduling
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// None->NODE_LOCAL
comment|// Another off switch, shouldn't allocate due to delay scheduling
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// None->NODE_LOCAL
comment|// Another off switch, shouldn't allocate due to delay scheduling
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// None->NODE_LOCAL
comment|// Another off switch, now we should allocate
comment|// since missedOpportunities=3 and reqdContainers=3
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should NOT reset
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// NODE_LOCAL - node_0
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// NODE_LOCAL - node_1
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add 1 more request to check for RACK_LOCAL
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
comment|// one extra
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|host_3
init|=
literal|"127.0.0.4"
decl_stmt|;
comment|// on rack_1
name|FiCaSchedulerNode
name|node_3
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_3
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
comment|// Rack-delay
name|doReturn
argument_list|(
literal|1
argument_list|)
operator|.
name|when
argument_list|(
name|a
argument_list|)
operator|.
name|getNodeLocalityDelay
argument_list|()
expr_stmt|;
comment|// Shouldn't assign RACK_LOCAL yet
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
comment|// None->NODE_LOCAL
comment|// Should assign RACK_LOCAL now
name|assignment
operator|=
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_3
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_3
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|,
name|assignment
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplicationPriorityScheduling ()
specifier|public
name|void
name|testApplicationPriorityScheduling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// User
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
name|spy
argument_list|(
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// Setup some nodes and racks
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|String
name|rack_0
init|=
literal|"rack_0"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|String
name|rack_1
init|=
literal|"rack_1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_2
init|=
literal|"127.0.0.3"
decl_stmt|;
name|String
name|rack_2
init|=
literal|"rack_2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_2
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_2
argument_list|,
name|rack_2
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests and submit
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_requests_0
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
comment|// P1
name|Priority
name|priority_1
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
name|priority_1
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
comment|// P2
name|Priority
name|priority_2
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_2
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority_2
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_2
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority_2
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority_2
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Start with off switch, shouldn't allocate P1 due to delay scheduling
comment|// thus, no P2 either!
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another off-switch, shouldn't allocate P1 due to delay scheduling
comment|// thus, no P2 either!
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Another off-switch, shouldn't allocate OFF_SWITCH P1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_2
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_2
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, DATA_LOCAL for P1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now, OFF_SWITCH for P2
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_1
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|OFF_SWITCH
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1
argument_list|)
argument_list|,
name|eq
argument_list|(
name|priority_2
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingConstraints ()
specifier|public
name|void
name|testSchedulingConstraints
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// User
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
name|spy
argument_list|(
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// Setup some nodes and racks
name|String
name|host_0_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|String
name|rack_0
init|=
literal|"rack_0"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0_0
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_0_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0_1
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1_0
init|=
literal|"127.0.0.3"
decl_stmt|;
name|String
name|rack_1
init|=
literal|"rack_1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1_0
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests and submit
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_requests_0
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
comment|// Start testing...
comment|// Add one request
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
comment|// only one
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
comment|// NODE_LOCAL - node_0_1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0_0
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// No allocation on node_1_0 even though it's node/rack local since
comment|// required(ANY) == 0
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1_0
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Still zero
comment|// since #req=0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add one request
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
comment|// only one
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
comment|// No allocation on node_0_1 even though it's node/rack local since
comment|// required(rack_1) == 0
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1_0
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// NODE_LOCAL - node_1
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1_0
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should reset
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testActivateApplicationAfterQueueRefresh ()
specifier|public
name|void
name|testActivateApplicationAfterQueueRefresh
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'e'
name|LeafQueue
name|e
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|E
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_e
init|=
literal|"user_e"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_e
argument_list|,
name|e
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|e
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_e
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_e
argument_list|,
name|e
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|e
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_e
argument_list|)
expr_stmt|;
comment|// same user
specifier|final
name|ApplicationAttemptId
name|appAttemptId_2
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_2
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_2
argument_list|,
name|user_e
argument_list|,
name|e
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|e
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_e
argument_list|)
expr_stmt|;
comment|// same user
comment|// before reinitialization
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|e
operator|.
name|activeApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|pendingApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setDouble
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|DEFAULT_MAXIMUM_APPLICATIONMASTERS_RESOURCE_PERCENT
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|newQueues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|newRoot
init|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|newQueues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
name|queues
operator|=
name|newQueues
expr_stmt|;
name|root
operator|.
name|reinitialize
argument_list|(
name|newRoot
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// after reinitialization
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|activeApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|pendingApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testNodeLocalityAfterQueueRefresh ()
specifier|public
name|void
name|testNodeLocalityAfterQueueRefresh
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'e'
name|LeafQueue
name|e
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|E
argument_list|)
argument_list|)
decl_stmt|;
comment|// before reinitialization
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|e
operator|.
name|getNodeLocalityDelay
argument_list|()
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setInt
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|NODE_LOCALITY_DELAY
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|newQueues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|CSQueue
name|newRoot
init|=
name|CapacityScheduler
operator|.
name|parseQueue
argument_list|(
name|csContext
argument_list|,
name|csConf
argument_list|,
literal|null
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
name|newQueues
argument_list|,
name|queues
argument_list|,
name|TestUtils
operator|.
name|spyHook
argument_list|)
decl_stmt|;
name|queues
operator|=
name|newQueues
expr_stmt|;
name|root
operator|.
name|reinitialize
argument_list|(
name|newRoot
argument_list|,
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// after reinitialization
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|e
operator|.
name|getNodeLocalityDelay
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testActivateApplicationByUpdatingClusterResource ()
specifier|public
name|void
name|testActivateApplicationByUpdatingClusterResource
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'e'
name|LeafQueue
name|e
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|E
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_e
init|=
literal|"user_e"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_e
argument_list|,
name|e
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|e
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_e
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_e
argument_list|,
name|e
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|e
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_e
argument_list|)
expr_stmt|;
comment|// same user
specifier|final
name|ApplicationAttemptId
name|appAttemptId_2
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_2
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_2
argument_list|,
name|user_e
argument_list|,
name|e
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|e
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_2
argument_list|,
name|user_e
argument_list|)
expr_stmt|;
comment|// same user
comment|// before updating cluster resource
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|e
operator|.
name|activeApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|pendingApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|updateClusterResource
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|200
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
argument_list|)
expr_stmt|;
comment|// after updating cluster resource
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|e
operator|.
name|activeApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|pendingApplications
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hasQueueACL (List<QueueUserACLInfo> aclInfos, QueueACL acl)
specifier|public
name|boolean
name|hasQueueACL
parameter_list|(
name|List
argument_list|<
name|QueueUserACLInfo
argument_list|>
name|aclInfos
parameter_list|,
name|QueueACL
name|acl
parameter_list|)
block|{
for|for
control|(
name|QueueUserACLInfo
name|aclInfo
range|:
name|aclInfos
control|)
block|{
if|if
condition|(
name|aclInfo
operator|.
name|getUserAcls
argument_list|()
operator|.
name|contains
argument_list|(
name|acl
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Test
DECL|method|testInheritedQueueAcls ()
specifier|public
name|void
name|testInheritedQueueAcls
parameter_list|()
throws|throws
name|IOException
block|{
name|UserGroupInformation
name|user
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
name|LeafQueue
name|b
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
argument_list|)
decl_stmt|;
name|ParentQueue
name|c
init|=
operator|(
name|ParentQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|C
argument_list|)
decl_stmt|;
name|LeafQueue
name|c1
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|C1
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|b
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c1
operator|.
name|hasAccess
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|a
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasQueueACL
argument_list|(
name|b
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasQueueACL
argument_list|(
name|c
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasQueueACL
argument_list|(
name|c1
operator|.
name|getQueueUserAclInfo
argument_list|(
name|user
argument_list|)
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalityConstraints ()
specifier|public
name|void
name|testLocalityConstraints
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|A
argument_list|)
argument_list|)
decl_stmt|;
comment|// User
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
name|spy
argument_list|(
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
name|spy
argument_list|(
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// Setup some nodes and racks
name|String
name|host_0_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|String
name|rack_0
init|=
literal|"rack_0"
decl_stmt|;
name|String
name|host_0_1
init|=
literal|"127.0.0.2"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0_1
argument_list|,
name|rack_0
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1_0
init|=
literal|"127.0.0.3"
decl_stmt|;
name|String
name|rack_1
init|=
literal|"rack_1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1_0
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
name|String
name|host_1_1
init|=
literal|"127.0.0.4"
decl_stmt|;
name|FiCaSchedulerNode
name|node_1_1
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_1_1
argument_list|,
name|rack_1
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|4
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|1
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
comment|// resourceName:<priority, memory, #containers, relaxLocality>
comment|// host_0_0:< 1, 1GB, 1, true>
comment|// host_0_1:< null>
comment|// rack_0:< null><----
comment|// host_1_0:< 1, 1GB, 1, true>
comment|// host_1_1:< null>
comment|// rack_1:< 1, 1GB, 1, false><----
comment|// ANY:< 1, 1GB, 1, false><----
comment|// Availability:
comment|// host_0_0: 8G
comment|// host_0_1: 8G
comment|// host_1_0: 8G
comment|// host_1_1: 8G
comment|// Blacklist:<host_0_0>
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|app_0_requests_0
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_0_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|host_1_0
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
comment|// only one
literal|false
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateBlacklist
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|host_0_0
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//
comment|// Start testing...
comment|//
comment|// node_0_1
comment|// Shouldn't allocate since RR(rack_0) = null&& RR(ANY) = relax: false
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be 0
comment|// resourceName:<priority, memory, #containers, relaxLocality>
comment|// host_0_0:< 1, 1GB, 1, true>
comment|// host_0_1:< null>
comment|// rack_0:< null><----
comment|// host_1_0:< 1, 1GB, 1, true>
comment|// host_1_1:< null>
comment|// rack_1:< 1, 1GB, 1, false><----
comment|// ANY:< 1, 1GB, 1, false><----
comment|// Availability:
comment|// host_0_0: 8G
comment|// host_0_1: 8G
comment|// host_1_0: 8G
comment|// host_1_1: 8G
comment|// Blacklist:<host_0_0>
comment|// node_1_1
comment|// Shouldn't allocate since RR(rack_1) = relax: false
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_0_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be 0
comment|// Allow rack-locality for rack_1, but blacklist node_1_1
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateBlacklist
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|host_1_1
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// resourceName:<priority, memory, #containers, relaxLocality>
comment|// host_0_0:< 1, 1GB, 1, true>
comment|// host_0_1:< null>
comment|// rack_0:< null>
comment|// host_1_0:< 1, 1GB, 1, true>
comment|// host_1_1:< null>
comment|// rack_1:< 1, 1GB, 1, true>
comment|// ANY:< 1, 1GB, 1, false>
comment|// Availability:
comment|// host_0_0: 8G
comment|// host_0_1: 8G
comment|// host_1_0: 8G
comment|// host_1_1: 8G
comment|// Blacklist:< host_0_0 , host_1_1><----
comment|// node_1_1
comment|// Shouldn't allocate since node_1_1 is blacklisted
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be 0
comment|// Now, remove node_1_1 from blacklist, but add rack_1 to blacklist
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateBlacklist
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|rack_1
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host_1_1
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// resourceName:<priority, memory, #containers, relaxLocality>
comment|// host_0_0:< 1, 1GB, 1, true>
comment|// host_0_1:< null>
comment|// rack_0:< null>
comment|// host_1_0:< 1, 1GB, 1, true>
comment|// host_1_1:< null>
comment|// rack_1:< 1, 1GB, 1, true>
comment|// ANY:< 1, 1GB, 1, false>
comment|// Availability:
comment|// host_0_0: 8G
comment|// host_0_1: 8G
comment|// host_1_0: 8G
comment|// host_1_1: 8G
comment|// Blacklist:< host_0_0 , rack_1><----
comment|// node_1_1
comment|// Shouldn't allocate since rack_1 is blacklisted
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|any
argument_list|(
name|NodeType
operator|.
name|class
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be 0
comment|// Now remove rack_1 from blacklist
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateBlacklist
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|rack_1
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// resourceName:<priority, memory, #containers, relaxLocality>
comment|// host_0_0:< 1, 1GB, 1, true>
comment|// host_0_1:< null>
comment|// rack_0:< null>
comment|// host_1_0:< 1, 1GB, 1, true>
comment|// host_1_1:< null>
comment|// rack_1:< 1, 1GB, 1, true>
comment|// ANY:< 1, 1GB, 1, false>
comment|// Availability:
comment|// host_0_0: 8G
comment|// host_0_1: 8G
comment|// host_1_0: 8G
comment|// host_1_1: 8G
comment|// Blacklist:< host_0_0><----
comment|// Now, should allocate since RR(rack_1) = relax: true
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1_1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|RACK_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1_1
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now sanity-check node_local
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|rack_1
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|add
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
comment|// only one
literal|false
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
expr_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|app_0_requests_0
argument_list|)
expr_stmt|;
name|app_0_requests_0
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// resourceName:<priority, memory, #containers, relaxLocality>
comment|// host_0_0:< 1, 1GB, 1, true>
comment|// host_0_1:< null>
comment|// rack_0:< null>
comment|// host_1_0:< 1, 1GB, 1, true>
comment|// host_1_1:< null>
comment|// rack_1:< 1, 1GB, 1, false><----
comment|// ANY:< 1, 1GB, 1, false><----
comment|// Availability:
comment|// host_0_0: 8G
comment|// host_0_1: 8G
comment|// host_1_0: 8G
comment|// host_1_1: 7G
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_1_0
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|app_0
argument_list|)
operator|.
name|allocate
argument_list|(
name|eq
argument_list|(
name|NodeType
operator|.
name|NODE_LOCAL
argument_list|)
argument_list|,
name|eq
argument_list|(
name|node_1_0
argument_list|)
argument_list|,
name|any
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Container
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getSchedulingOpportunities
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app_0
operator|.
name|getTotalRequiredResources
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxAMResourcePerQueuePercentAfterQueueRefresh ()
specifier|public
name|void
name|testMaxAMResourcePerQueuePercentAfterQueueRefresh
parameter_list|()
throws|throws
name|Exception
block|{
name|CapacitySchedulerConfiguration
name|csConf
init|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|16
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
decl_stmt|;
name|CapacitySchedulerContext
name|csContext
init|=
name|mockCSContext
argument_list|(
name|csConf
argument_list|,
name|clusterResource
argument_list|)
decl_stmt|;
name|csConf
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|ParentQueue
name|root
init|=
operator|new
name|ParentQueue
argument_list|(
name|csContext
argument_list|,
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|csConf
operator|.
name|setCapacity
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
operator|+
literal|"."
operator|+
name|A
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|LeafQueue
name|a
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|A
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.1f
argument_list|,
name|a
operator|.
name|getMaxAMResourcePerQueuePercent
argument_list|()
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|160
argument_list|,
name|a
operator|.
name|getMaximumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|csConf
operator|.
name|setFloat
argument_list|(
name|CapacitySchedulerConfiguration
operator|.
name|MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|LeafQueue
name|newA
init|=
operator|new
name|LeafQueue
argument_list|(
name|csContext
argument_list|,
name|A
argument_list|,
name|root
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|a
operator|.
name|reinitialize
argument_list|(
name|newA
argument_list|,
name|clusterResource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.2f
argument_list|,
name|a
operator|.
name|getMaxAMResourcePerQueuePercent
argument_list|()
argument_list|,
literal|1e-3f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|320
argument_list|,
name|a
operator|.
name|getMaximumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|newClusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|100
operator|*
literal|20
operator|*
name|GB
argument_list|,
literal|100
operator|*
literal|32
argument_list|)
decl_stmt|;
name|a
operator|.
name|updateClusterResource
argument_list|(
name|newClusterResource
argument_list|)
expr_stmt|;
comment|//  100 * 20 * 0.2 = 400
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|a
operator|.
name|getMaximumActiveApplications
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocateContainerOnNodeWithoutOffSwitchSpecified ()
specifier|public
name|void
name|testAllocateContainerOnNodeWithoutOffSwitchSpecified
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Manipulate queue 'a'
name|LeafQueue
name|a
init|=
name|stubLeafQueue
argument_list|(
operator|(
name|LeafQueue
operator|)
name|queues
operator|.
name|get
argument_list|(
name|B
argument_list|)
argument_list|)
decl_stmt|;
comment|// Users
specifier|final
name|String
name|user_0
init|=
literal|"user_0"
decl_stmt|;
comment|// Submit applications
specifier|final
name|ApplicationAttemptId
name|appAttemptId_0
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_0
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_0
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_0
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
specifier|final
name|ApplicationAttemptId
name|appAttemptId_1
init|=
name|TestUtils
operator|.
name|getMockApplicationAttemptId
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app_1
init|=
operator|new
name|FiCaSchedulerApp
argument_list|(
name|appAttemptId_1
argument_list|,
name|user_0
argument_list|,
name|a
argument_list|,
name|mock
argument_list|(
name|ActiveUsersManager
operator|.
name|class
argument_list|)
argument_list|,
name|rmContext
argument_list|)
decl_stmt|;
name|a
operator|.
name|submitApplicationAttempt
argument_list|(
name|app_1
argument_list|,
name|user_0
argument_list|)
expr_stmt|;
comment|// same user
comment|// Setup some nodes
name|String
name|host_0
init|=
literal|"127.0.0.1"
decl_stmt|;
name|FiCaSchedulerNode
name|node_0
init|=
name|TestUtils
operator|.
name|getMockNode
argument_list|(
name|host_0
argument_list|,
name|DEFAULT_RACK
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|GB
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numNodes
init|=
literal|1
decl_stmt|;
name|Resource
name|clusterResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|numNodes
operator|*
operator|(
literal|8
operator|*
name|GB
operator|)
argument_list|,
name|numNodes
operator|*
literal|16
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
comment|// Setup resource-requests
name|Priority
name|priority
init|=
name|TestUtils
operator|.
name|createMockPriority
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|app_0
operator|.
name|updateResourceRequests
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|,
name|TestUtils
operator|.
name|createResourceRequest
argument_list|(
name|DEFAULT_RACK
argument_list|,
literal|1
operator|*
name|GB
argument_list|,
literal|3
argument_list|,
literal|true
argument_list|,
name|priority
argument_list|,
name|recordFactory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|a
operator|.
name|assignContainers
argument_list|(
name|clusterResource
argument_list|,
name|node_0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"NPE when allocating container on node but "
operator|+
literal|"forget to set off-switch request should be handled"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mockCSContext ( CapacitySchedulerConfiguration csConf, Resource clusterResource)
specifier|private
name|CapacitySchedulerContext
name|mockCSContext
parameter_list|(
name|CapacitySchedulerConfiguration
name|csConf
parameter_list|,
name|Resource
name|clusterResource
parameter_list|)
block|{
name|CapacitySchedulerContext
name|csContext
init|=
name|mock
argument_list|(
name|CapacitySchedulerContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getConf
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|YarnConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resourceCalculator
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMinimumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|csContext
operator|.
name|getMaximumResourceCapability
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
name|GB
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|csContext
return|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

