begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|reservation
operator|.
name|ReservationSchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueuePlacementRule
operator|.
name|NestedUserQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FairSharePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestAllocationFileLoaderService
specifier|public
class|class
name|TestAllocationFileLoaderService
block|{
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|ALLOC_FILE
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-queues"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|testGetAllocationFileFromClasspath ()
specifier|public
name|void
name|testGetAllocationFileFromClasspath
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
literal|"test-fair-scheduler.xml"
argument_list|)
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|File
name|allocationFile
init|=
name|allocLoader
operator|.
name|getAllocationFile
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test-fair-scheduler.xml"
argument_list|,
name|allocationFile
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocationFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testReload ()
specifier|public
name|void
name|testReload
parameter_list|()
throws|throws
name|Exception
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|clock
operator|.
name|setTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|(
name|clock
argument_list|)
decl_stmt|;
name|allocLoader
operator|.
name|reloadIntervalMs
operator|=
literal|5
expr_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
name|confHolder
operator|.
name|allocConf
decl_stmt|;
comment|// Verify conf
name|QueuePlacementPolicy
name|policy
init|=
name|allocConf
operator|.
name|getPlacementPolicy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
name|policy
operator|.
name|getRules
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueuePlacementRule
operator|.
name|Default
operator|.
name|class
argument_list|,
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|allocConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|contains
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|contains
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|confHolder
operator|.
name|allocConf
operator|=
literal|null
expr_stmt|;
comment|// Modify file and advance the clock
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name='specified' />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name='nestedUserQueue'>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name='primaryGroup' />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name='default' />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tickMsec
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|AllocationFileLoaderService
operator|.
name|ALLOC_RELOAD_WAIT_MS
operator|+
literal|10000
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|confHolder
operator|.
name|allocConf
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
comment|// Verify conf
name|allocConf
operator|=
name|confHolder
operator|.
name|allocConf
expr_stmt|;
name|policy
operator|=
name|allocConf
operator|.
name|getPlacementPolicy
argument_list|()
expr_stmt|;
name|rules
operator|=
name|policy
operator|.
name|getRules
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueuePlacementRule
operator|.
name|Specified
operator|.
name|class
argument_list|,
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueuePlacementRule
operator|.
name|NestedUserQueue
operator|.
name|class
argument_list|,
name|rules
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueuePlacementRule
operator|.
name|PrimaryGroup
operator|.
name|class
argument_list|,
operator|(
call|(
name|NestedUserQueue
call|)
argument_list|(
name|rules
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|.
name|nestedRule
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueuePlacementRule
operator|.
name|Default
operator|.
name|class
argument_list|,
name|rules
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allocConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allocConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|contains
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationFileParsing ()
specifier|public
name|void
name|testAllocationFileParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give queue A a minimum of 1024 M
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>2048mb,10vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue B a minimum of 2048 M
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>5120mb,110vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>alice,bob admins</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingPolicy>fair</schedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue C no minimum
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>5120mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>alice,bob admins</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue D a limit of 3 running apps and 0.4f maxAMShare
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.4</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue E a preemption timeout of one minute
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueE\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Make queue F a parent queue without configured leaf queues using the
comment|// 'type' attribute
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueF\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxChildResources>2048mb,64vcores</maxChildResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Create hierarchical queues G,H, with different min/fair share preemption
comment|// timeouts and preemption thresholds. Also add a child default to make sure
comment|// it doesn't impact queue H.
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueG\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxChildResources>2048mb,64vcores</maxChildResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>120</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>50</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionThreshold>0.6</fairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueH\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>180</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>40</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionThreshold>0.7</fairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per queue to 15
name|out
operator|.
name|println
argument_list|(
literal|"<queueMaxAppsDefault>15</queueMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Set default limit of max resource per queue to 4G and 100 cores
name|out
operator|.
name|println
argument_list|(
literal|"<queueMaxResourcesDefault>4096mb,100vcores</queueMaxResourcesDefault>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per user to 5
name|out
operator|.
name|println
argument_list|(
literal|"<userMaxAppsDefault>5</userMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Set default limit of AMResourceShare to 0.5f
name|out
operator|.
name|println
argument_list|(
literal|"<queueMaxAMShareDefault>0.5f</queueMaxAMShareDefault>"
argument_list|)
expr_stmt|;
comment|// Give user1 a limit of 10 jobs
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>10</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
comment|// Set default min share preemption timeout to 2 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>120"
operator|+
literal|"</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
comment|// Set default fair share preemption timeout to 5 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>300</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
comment|// Set default fair share preemption threshold to 0.4
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>0.4</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
comment|// Set default scheduling policy to DRF
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>drf</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
name|AllocationConfiguration
name|queueConf
init|=
name|confHolder
operator|.
name|allocConf
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queueConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|10
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|5120
argument_list|,
literal|110
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|5120
argument_list|,
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|100
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|100
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|100
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|100
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueG"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|100
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxResources
argument_list|(
literal|"root.queueG.queueH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|5120
argument_list|,
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueG"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueG.queueH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max child resources unexpectedly set for queue root.queueA"
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max child resources unexpectedly set for queue root.queueB"
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max child resources unexpectedly set for queue root.queueC"
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max child resources unexpectedly set for queue root.queueD"
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max child resources unexpectedly set for queue root.queueE"
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|64
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|64
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueG"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Max child resources unexpectedly set for "
operator|+
literal|"queue root.queueG.queueH"
argument_list|,
name|queueConf
operator|.
name|getMaxChildResources
argument_list|(
literal|"root.queueG.queueH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|queueConf
operator|.
name|getUserMaxApps
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queueConf
operator|.
name|getUserMaxApps
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.5f
argument_list|,
name|queueConf
operator|.
name|getQueueMaxAMShare
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.5f
argument_list|,
name|queueConf
operator|.
name|getQueueMaxAMShare
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.5f
argument_list|,
name|queueConf
operator|.
name|getQueueMaxAMShare
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.5f
argument_list|,
name|queueConf
operator|.
name|getQueueMaxAMShare
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.4f
argument_list|,
name|queueConf
operator|.
name|getQueueMaxAMShare
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.5f
argument_list|,
name|queueConf
operator|.
name|getQueueMaxAMShare
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
comment|// Root should get * ACL
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Unspecified queues should get default ACL
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueA"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueA"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue B ACL
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueB"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue C ACL
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueC"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|50000
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueG"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40000
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueG.queueH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300000
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueG"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|180000
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueG.queueH"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.4f
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueF"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.6f
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueG"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.7f
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueG.queueH"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"root.queueF"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"root.queueG"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queueConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|contains
argument_list|(
literal|"root.queueG.queueH"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify existing queues have default scheduling policy
name|assertEquals
argument_list|(
name|DominantResourceFairnessPolicy
operator|.
name|NAME
argument_list|,
name|queueConf
operator|.
name|getSchedulingPolicy
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DominantResourceFairnessPolicy
operator|.
name|NAME
argument_list|,
name|queueConf
operator|.
name|getSchedulingPolicy
argument_list|(
literal|"root.queueA"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify default is overriden if specified explicitly
name|assertEquals
argument_list|(
name|FairSharePolicy
operator|.
name|NAME
argument_list|,
name|queueConf
operator|.
name|getSchedulingPolicy
argument_list|(
literal|"root.queueB"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify new queue gets default scheduling policy
name|assertEquals
argument_list|(
name|DominantResourceFairnessPolicy
operator|.
name|NAME
argument_list|,
name|queueConf
operator|.
name|getSchedulingPolicy
argument_list|(
literal|"root.newqueue"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackwardsCompatibleAllocationFileParsing ()
specifier|public
name|void
name|testBackwardsCompatibleAllocationFileParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give queue A a minimum of 1024 M
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue B a minimum of 2048 M
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>alice,bob admins</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue C no minimum
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>alice,bob admins</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue D a limit of 3 running apps
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue E a preemption timeout of one minute and 0.3f threshold
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueE\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionThreshold>0.3</fairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per queue to 15
name|out
operator|.
name|println
argument_list|(
literal|"<queueMaxAppsDefault>15</queueMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per user to 5
name|out
operator|.
name|println
argument_list|(
literal|"<userMaxAppsDefault>5</userMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Give user1 a limit of 10 jobs
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>10</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
comment|// Set default min share preemption timeout to 2 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>120"
operator|+
literal|"</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
comment|// Set fair share preemption timeout to 5 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>300</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
comment|// Set default fair share preemption threshold to 0.6f
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>0.6</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
name|AllocationConfiguration
name|queueConf
init|=
name|confHolder
operator|.
name|allocConf
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queueConf
operator|.
name|getConfiguredQueues
argument_list|()
operator|.
name|get
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueConf
operator|.
name|getMinResources
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueConf
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|queueConf
operator|.
name|getUserMaxApps
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queueConf
operator|.
name|getUserMaxApps
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unspecified queues should get default ACL
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueA"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueA"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue B ACL
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueB"
argument_list|,
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue C ACL
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|queueConf
operator|.
name|getQueueAcl
argument_list|(
literal|"root.queueC"
argument_list|,
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|queueConf
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300000
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionTimeout
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.6f
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.3f
argument_list|,
name|queueConf
operator|.
name|getFairSharePreemptionThreshold
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimplePlacementPolicyFromConf ()
specifier|public
name|void
name|testSimplePlacementPolicyFromConf
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
name|confHolder
operator|.
name|allocConf
decl_stmt|;
name|QueuePlacementPolicy
name|placementPolicy
init|=
name|allocConf
operator|.
name|getPlacementPolicy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
name|placementPolicy
operator|.
name|getRules
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rules
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueuePlacementRule
operator|.
name|Specified
operator|.
name|class
argument_list|,
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|rules
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|create
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueuePlacementRule
operator|.
name|Default
operator|.
name|class
argument_list|,
name|rules
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that you can't place queues at the same level as the root queue in    * the allocations file.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testQueueAlongsideRoot ()
specifier|public
name|void
name|testQueueAlongsideRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"other\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that you can't include periods as the queue name in the allocations    * file.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testQueueNameContainingPeriods ()
specifier|public
name|void
name|testQueueNameContainingPeriods
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"parent1.child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that you can't have the queue name with whitespace only in the    * allocations file.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testQueueNameContainingOnlyWhitespace ()
specifier|public
name|void
name|testQueueNameContainingOnlyWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"      \">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that you can't have the queue name with just a non breaking    * whitespace in the allocations file.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testQueueNameContainingNBWhitespace ()
specifier|public
name|void
name|testQueueNameContainingNBWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"\u00a0\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify that defaultQueueSchedulingMode can't accept FIFO as a value.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testDefaultQueueSchedulingModeIsFIFO ()
specifier|public
name|void
name|testDefaultQueueSchedulingModeIsFIFO
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fifo</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservableQueue ()
specifier|public
name|void
name|testReservableQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"reservable\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<reservation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</reservation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"other\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<reservation-agent>DummyAgentName</reservation-agent>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<reservation-policy>AnyAdmissionPolicy</reservation-policy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
name|AllocationConfiguration
name|allocConf
init|=
name|confHolder
operator|.
name|allocConf
decl_stmt|;
name|String
name|reservableQueueName
init|=
literal|"root.reservable"
decl_stmt|;
name|String
name|nonreservableQueueName
init|=
literal|"root.other"
decl_stmt|;
name|assertFalse
argument_list|(
name|allocConf
operator|.
name|isReservable
argument_list|(
name|nonreservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocConf
operator|.
name|isReservable
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocConf
operator|.
name|getMoveOnExpiry
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReservationSchedulerConfiguration
operator|.
name|DEFAULT_RESERVATION_WINDOW
argument_list|,
name|allocConf
operator|.
name|getReservationWindow
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|allocConf
operator|.
name|getInstantaneousMaxCapacity
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DummyAgentName"
argument_list|,
name|allocConf
operator|.
name|getReservationAgent
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|allocConf
operator|.
name|getAverageCapacity
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocConf
operator|.
name|getShowReservationAsQueues
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"AnyAdmissionPolicy"
argument_list|,
name|allocConf
operator|.
name|getReservationAdmissionPolicy
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReservationSchedulerConfiguration
operator|.
name|DEFAULT_RESERVATION_PLANNER_NAME
argument_list|,
name|allocConf
operator|.
name|getReplanner
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ReservationSchedulerConfiguration
operator|.
name|DEFAULT_RESERVATION_ENFORCEMENT_WINDOW
argument_list|,
name|allocConf
operator|.
name|getEnforcementWindow
argument_list|(
name|reservableQueueName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that you can't have dynamic user queue and reservable queue on    * the same queue    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AllocationConfigurationException
operator|.
name|class
argument_list|)
DECL|method|testReservableCannotBeCombinedWithDynamicUserQueue ()
specifier|public
name|void
name|testReservableCannotBeCombinedWithDynamicUserQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"notboth\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<reservation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</reservation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|AllocationFileLoaderService
name|allocLoader
init|=
operator|new
name|AllocationFileLoaderService
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ReloadListener
name|confHolder
init|=
operator|new
name|ReloadListener
argument_list|()
decl_stmt|;
name|allocLoader
operator|.
name|setReloadListener
argument_list|(
name|confHolder
argument_list|)
expr_stmt|;
name|allocLoader
operator|.
name|reloadAllocations
argument_list|()
expr_stmt|;
block|}
DECL|class|ReloadListener
specifier|private
class|class
name|ReloadListener
implements|implements
name|AllocationFileLoaderService
operator|.
name|Listener
block|{
DECL|field|allocConf
specifier|public
name|AllocationConfiguration
name|allocConf
decl_stmt|;
annotation|@
name|Override
DECL|method|onReload (AllocationConfiguration info)
specifier|public
name|void
name|onReload
parameter_list|(
name|AllocationConfiguration
name|info
parameter_list|)
block|{
name|allocConf
operator|=
name|info
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

