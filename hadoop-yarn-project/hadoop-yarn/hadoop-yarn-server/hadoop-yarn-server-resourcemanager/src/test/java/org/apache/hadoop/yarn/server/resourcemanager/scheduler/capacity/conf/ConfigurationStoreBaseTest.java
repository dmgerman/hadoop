begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with this  * work for additional information regarding copyright ownership.  The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.conf
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|conf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Base class for {@link YarnConfigurationStore} implementations.  */
end_comment

begin_class
DECL|class|ConfigurationStoreBaseTest
specifier|public
specifier|abstract
class|class
name|ConfigurationStoreBaseTest
block|{
DECL|field|confStore
specifier|protected
name|YarnConfigurationStore
name|confStore
init|=
name|createConfStore
argument_list|()
decl_stmt|;
DECL|method|createConfStore ()
specifier|protected
specifier|abstract
name|YarnConfigurationStore
name|createConfStore
parameter_list|()
function_decl|;
DECL|field|conf
specifier|protected
name|Configuration
name|conf
decl_stmt|;
DECL|field|schedConf
specifier|protected
name|Configuration
name|schedConf
decl_stmt|;
DECL|field|rmContext
specifier|protected
name|RMContext
name|rmContext
decl_stmt|;
DECL|field|TEST_USER
specifier|protected
specifier|static
specifier|final
name|String
name|TEST_USER
init|=
literal|"testUser"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|this
operator|.
name|schedConf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigurationUpdate ()
specifier|public
name|void
name|testConfigurationUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|schedConf
operator|.
name|set
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val1"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update1
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update1
operator|.
name|put
argument_list|(
literal|"keyUpdate1"
argument_list|,
literal|"valUpdate1"
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation1
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update1
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation1
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valUpdate1"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"keyUpdate1"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update2
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update2
operator|.
name|put
argument_list|(
literal|"keyUpdate2"
argument_list|,
literal|"valUpdate2"
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation2
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update2
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation2
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Configuration should not be updated"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"keyUpdate2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNullConfigurationUpdate ()
specifier|public
name|void
name|testNullConfigurationUpdate
parameter_list|()
throws|throws
name|Exception
block|{
name|schedConf
operator|.
name|set
argument_list|(
literal|"key"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schedConf
argument_list|,
name|rmContext
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"val"
argument_list|,
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|update
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|update
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|YarnConfigurationStore
operator|.
name|LogMutation
name|mutation
init|=
operator|new
name|YarnConfigurationStore
operator|.
name|LogMutation
argument_list|(
name|update
argument_list|,
name|TEST_USER
argument_list|)
decl_stmt|;
name|confStore
operator|.
name|logMutation
argument_list|(
name|mutation
argument_list|)
expr_stmt|;
name|confStore
operator|.
name|confirmMutation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|confStore
operator|.
name|retrieve
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

