begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.monitor.capacity
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|MONITORING_INTERVAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|NATURAL_TERMINATION_FACTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|TOTAL_PREEMPTION_PER_ROUND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|ProportionalCapacityPreemptionPolicy
operator|.
name|WAIT_TIME_BEFORE_KILL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|monitor
operator|.
name|capacity
operator|.
name|TestProportionalCapacityPreemptionPolicy
operator|.
name|IsPreemptionRequestFor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|nodelabels
operator|.
name|RMNodeLabelsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CSQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacityScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|CapacitySchedulerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|LeafQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|ParentQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|capacity
operator|.
name|QueueCapacities
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|common
operator|.
name|fica
operator|.
name|FiCaSchedulerApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|SchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|policy
operator|.
name|OrderingPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|DefaultResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
DECL|class|TestProportionalCapacityPreemptionPolicyForNodePartitions
specifier|public
class|class
name|TestProportionalCapacityPreemptionPolicyForNodePartitions
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestProportionalCapacityPreemptionPolicyForNodePartitions
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ROOT
specifier|static
specifier|final
name|String
name|ROOT
init|=
name|CapacitySchedulerConfiguration
operator|.
name|ROOT
decl_stmt|;
DECL|field|nameToCSQueues
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CSQueue
argument_list|>
name|nameToCSQueues
init|=
literal|null
decl_stmt|;
DECL|field|partitionToResource
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Resource
argument_list|>
name|partitionToResource
init|=
literal|null
decl_stmt|;
DECL|field|nodeIdToSchedulerNodes
specifier|private
name|Map
argument_list|<
name|NodeId
argument_list|,
name|SchedulerNode
argument_list|>
name|nodeIdToSchedulerNodes
init|=
literal|null
decl_stmt|;
DECL|field|nlm
specifier|private
name|RMNodeLabelsManager
name|nlm
init|=
literal|null
decl_stmt|;
DECL|field|rmContext
specifier|private
name|RMContext
name|rmContext
init|=
literal|null
decl_stmt|;
DECL|field|rc
specifier|private
name|ResourceCalculator
name|rc
init|=
operator|new
name|DefaultResourceCalculator
argument_list|()
decl_stmt|;
DECL|field|mClock
specifier|private
name|Clock
name|mClock
init|=
literal|null
decl_stmt|;
DECL|field|conf
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
DECL|field|csConf
specifier|private
name|CapacitySchedulerConfiguration
name|csConf
init|=
literal|null
decl_stmt|;
DECL|field|cs
specifier|private
name|CapacityScheduler
name|cs
init|=
literal|null
decl_stmt|;
DECL|field|mDisp
specifier|private
name|EventHandler
argument_list|<
name|SchedulerEvent
argument_list|>
name|mDisp
init|=
literal|null
decl_stmt|;
DECL|field|policy
specifier|private
name|ProportionalCapacityPreemptionPolicy
name|policy
init|=
literal|null
decl_stmt|;
DECL|field|clusterResource
specifier|private
name|Resource
name|clusterResource
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MONITORING_INTERVAL
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|// report "ideal" preempt
name|conf
operator|.
name|setFloat
argument_list|(
name|TOTAL_PREEMPTION_PER_ROUND
argument_list|,
operator|(
name|float
operator|)
literal|1.0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|NATURAL_TERMINATION_FACTOR
argument_list|,
operator|(
name|float
operator|)
literal|1.0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MONITOR_POLICIES
argument_list|,
name|ProportionalCapacityPreemptionPolicy
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_ENABLE_MONITORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// FairScheduler doesn't support this test,
comment|// Set CapacityScheduler as the scheduler for this test.
name|conf
operator|.
name|set
argument_list|(
literal|"yarn.resourcemanager.scheduler.class"
argument_list|,
name|CapacityScheduler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mClock
operator|=
name|mock
argument_list|(
name|Clock
operator|.
name|class
argument_list|)
expr_stmt|;
name|cs
operator|=
name|mock
argument_list|(
name|CapacityScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getResourceCalculator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|nlm
operator|=
name|mock
argument_list|(
name|RMNodeLabelsManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|mDisp
operator|=
name|mock
argument_list|(
name|EventHandler
operator|.
name|class
argument_list|)
expr_stmt|;
name|rmContext
operator|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getNodeLabelManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nlm
argument_list|)
expr_stmt|;
name|Dispatcher
name|disp
init|=
name|mock
argument_list|(
name|Dispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getDispatcher
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|disp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|disp
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mDisp
argument_list|)
expr_stmt|;
name|csConf
operator|=
operator|new
name|CapacitySchedulerConfiguration
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getRMContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|new
name|ProportionalCapacityPreemptionPolicy
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|,
name|cs
argument_list|,
name|mClock
argument_list|)
expr_stmt|;
name|partitionToResource
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|nodeIdToSchedulerNodes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|nameToCSQueues
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBuilder ()
specifier|public
name|void
name|testBuilder
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**      * Test of test, make sure we build expected mock schedulable objects      */
name|String
name|labelsConfig
init|=
literal|"=200,true;"
operator|+
comment|// default partition
literal|"red=100,false;"
operator|+
comment|// partition=red
literal|"blue=200,true"
decl_stmt|;
comment|// partition=blue
name|String
name|nodesConfig
init|=
literal|"n1=red;"
operator|+
comment|// n1 has partition=red
literal|"n2=blue;"
operator|+
comment|// n2 has partition=blue
literal|"n3="
decl_stmt|;
comment|// n3 doesn't have partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[200 200 100 100],red=[100 100 100 100],blue=[200 200 200 200]);"
operator|+
comment|//root
literal|"-a(=[100 200 100 100],red=[0 0 0 0],blue=[200 200 200 200]);"
operator|+
comment|// a
literal|"--a1(=[50 100 50 100],red=[0 0 0 0],blue=[100 200 200 0]);"
operator|+
comment|// a1
literal|"--a2(=[50 200 50 0],red=[0 0 0 0],blue=[100 200 0 200]);"
operator|+
comment|// a2
literal|"-b(=[100 200 0 0],red=[100 100 100 100],blue=[0 0 0 0])"
decl_stmt|;
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
comment|// app1 in a1, , 50 in n2 (reserved), 50 in n2 (allocated)
literal|"a1\t"
comment|// app1 in a1
operator|+
literal|"(1,1,n3,red,50,false);"
operator|+
comment|// 50 * default in n3
literal|"a1\t"
comment|// app2 in a1
operator|+
literal|"(2,1,n2,,50,true)(2,1,n2,,50,false)"
comment|// 50 * ignore-exclusivity (reserved),
comment|// 50 * ignore-exclusivity (allocated)
operator|+
literal|"(2,1,n2,blue,50,true)(2,1,n2,blue,50,true);"
operator|+
comment|// 50 in n2 (reserved),
comment|// 50 in n2 (allocated)
literal|"a2\t"
comment|// app3 in a2
operator|+
literal|"(1,1,n3,red,50,false);"
operator|+
comment|// 50 * default in n3
literal|"b\t"
comment|// app4 in b
operator|+
literal|"(1,1,n1,red,100,false);"
decl_stmt|;
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
comment|// Check queues:
comment|// root
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// a
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|0.5f
argument_list|,
literal|1f
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// a1
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|0.25f
argument_list|,
literal|0.5f
argument_list|,
literal|0.25f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|0.5f
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// a2
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|0.25f
argument_list|,
literal|1f
argument_list|,
literal|0.25f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|0.5f
argument_list|,
literal|1f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// b1
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|0.5f
argument_list|,
literal|1f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"red"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|checkAbsCapacities
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|checkPendingResource
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
argument_list|,
literal|"blue"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Check ignored partitioned containers in queue
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
operator|)
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
operator|.
name|get
argument_list|(
literal|"blue"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check applications
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a1"
argument_list|)
operator|)
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"a2"
argument_list|)
operator|)
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
literal|"b"
argument_list|)
operator|)
operator|.
name|getApplications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check #containers
name|FiCaSchedulerApp
name|app1
init|=
name|getApp
argument_list|(
literal|"a1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app2
init|=
name|getApp
argument_list|(
literal|"a1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app3
init|=
name|getApp
argument_list|(
literal|"a2"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|FiCaSchedulerApp
name|app4
init|=
name|getApp
argument_list|(
literal|"b"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkContainerNodesInApp
argument_list|(
name|app1
argument_list|,
literal|50
argument_list|,
literal|"n3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|150
argument_list|,
name|app2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkContainerNodesInApp
argument_list|(
name|app2
argument_list|,
literal|200
argument_list|,
literal|"n2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|50
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkContainerNodesInApp
argument_list|(
name|app3
argument_list|,
literal|50
argument_list|,
literal|"n3"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkContainerNodesInApp
argument_list|(
name|app4
argument_list|,
literal|100
argument_list|,
literal|"n1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodePartitionPreemptionRespectGuaranteedCapacity ()
specifier|public
name|void
name|testNodePartitionPreemptionRespectGuaranteedCapacity
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * The simplest test of node label, Queue structure is:      *      *<pre>      *       root      *       /  \      *      a    b      *</pre>      *      * Both a/b can access x, and guaranteed capacity of them is 50:50. Two      * nodes, n1 has 100 x, n2 has 100 NO_LABEL 4 applications in the cluster,      * app1/app2 in a, and app3/app4 in b.      * app1 uses 80 x, app2 uses 20 NO_LABEL, app3 uses 20 x, app4 uses 80 NO_LABEL.      * Both a/b have 50 pending resource for x and NO_LABEL      *      * After preemption, it should preempt 30 from app1, and 30 from app4.      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,true"
decl_stmt|;
comment|// partition=x
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2="
decl_stmt|;
comment|// n2 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 100 100],x=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[50 100 20 50],x=[50 100 80 50]);"
operator|+
comment|// a
literal|"-b(=[50 100 80 50],x=[50 100 20 50])"
decl_stmt|;
comment|// b
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"a\t"
comment|// app1 in a
operator|+
literal|"(1,1,n1,x,80,false);"
operator|+
comment|// 80 * x in n1
literal|"a\t"
comment|// app2 in a
operator|+
literal|"(1,1,n2,,20,false);"
operator|+
comment|// 20 default in n2
literal|"b\t"
comment|// app3 in b
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// 80 * x in n1
literal|"b\t"
comment|// app4 in b
operator|+
literal|"(1,1,n2,,80,false)"
decl_stmt|;
comment|// 20 default in n2
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 30 preempted from app1, 30 preempted from app4, and nothing preempted
comment|// from app2/app3
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|30
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|30
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodePartitionPreemptionRespectMaximumCapacity ()
specifier|public
name|void
name|testNodePartitionPreemptionRespectMaximumCapacity
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * Queue structure is:      *      *<pre>      *         root      *       /  |  \      *      a   b   c      *</pre>      *      * Both a/b/c can access x, and guaranteed_capacity(x) of them is 80:10:10.      * a/b's max resource is 100, and c's max resource is 30.      *      * Two nodes, n1 has 100 x, n2 has 100 NO_LABEL.      *      * 2 apps in cluster.      * app1 in b and app2 in c.      *      * app1 uses 90x, and app2 use 10x. After preemption, app2 will preempt 10x      * from app1 because of max capacity.      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,true"
decl_stmt|;
comment|// partition=x
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2="
decl_stmt|;
comment|// n2 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 100 100],x=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[80 80 0 0],x=[80 80 0 0]);"
operator|+
comment|// a
literal|"-b(=[10 100 0 0],x=[10 100 90 50]);"
operator|+
comment|// b
literal|"-c(=[10 100 0 0],x=[10 30 10 50])"
decl_stmt|;
comment|//c
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"b\t"
comment|// app1 in b
operator|+
literal|"(1,1,n1,x,90,false);"
operator|+
comment|// 80 * x in n1
literal|"c\t"
comment|// app2 in c
operator|+
literal|"(1,1,n1,x,10,false)"
decl_stmt|;
comment|// 20 default in n2
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 30 preempted from app1, 30 preempted from app4, and nothing preempted
comment|// from app2/app3
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodePartitionPreemptionOfIgnoreExclusivityAndRespectCapacity ()
specifier|public
name|void
name|testNodePartitionPreemptionOfIgnoreExclusivityAndRespectCapacity
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      *<pre>      *       root      *       /  \      *      a    b      *</pre>      *      * Both a/b can access x, and guaranteed capacity of them is 50:50. Two      * nodes, n1 has 100 x, n2 has 100 NO_LABEL and 2 applications in the cluster,      * app1/app2 in a      * app1 uses 20x (ignoreExclusivity), app2 uses 80x (respectExclusivity).      *      * b has 100 pending resource of x      *      * After preemption, it should preempt 20 from app1, and 30 from app2.      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,false"
decl_stmt|;
comment|// partition=x
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2="
decl_stmt|;
comment|// n2 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 100 100],x=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[50 100 0 0],x=[50 100 100 50]);"
operator|+
comment|// a
literal|"-b(=[50 100 0 0],x=[50 100 0 100])"
decl_stmt|;
comment|// b
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"a\t"
comment|// app1 in a
operator|+
literal|"(1,1,n1,x,1,false)"
comment|// 1 * x in n1 (it's AM container)
operator|+
literal|"(1,1,n1,,20,false);"
operator|+
comment|// 20 * x in n1 (ignoreExclusivity)
literal|"a\t"
comment|// app2 in a
operator|+
literal|"(1,1,n1,x,79,false)"
decl_stmt|;
comment|// 79 * x
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 30 preempted from app1, 30 preempted from app4, and nothing preempted
comment|// from app2/app3
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|30
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodePartitionPreemptionOfSkippingAMContainer ()
specifier|public
name|void
name|testNodePartitionPreemptionOfSkippingAMContainer
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      *<pre>      *       root      *       /  \      *      a    b      *</pre>      *      * Both a/b can access x, and guaranteed capacity of them is 20:80. Two      * nodes, n1 has 100 x, n2 has 100 NO_LABEL and 2 applications in the cluster,      * app1/app2/app3/app4/app5 in a, both uses 20 resources.      *      * b has 100 pending resource of x      *      * After preemption, it should preempt 19 from app[5-2] an 4 from app1      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,true"
decl_stmt|;
comment|// partition=x
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2="
decl_stmt|;
comment|// n2 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 100 100],x=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[50 100 0 0],x=[20 100 100 50]);"
operator|+
comment|// a
literal|"-b(=[50 100 0 0],x=[80 100 0 100])"
decl_stmt|;
comment|// b
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"a\t"
comment|// app1 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app2 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app3 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app4 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app5 in a
operator|+
literal|"(1,1,n1,x,20,false);"
decl_stmt|;
comment|// uses 20 resource
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 4 from app1
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 19 from app2-app5
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodePartitionPreemptionOfAMContainer ()
specifier|public
name|void
name|testNodePartitionPreemptionOfAMContainer
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      *<pre>      *       root      *       /  \      *      a    b      *</pre>      *      * Both a/b can access x, and guaranteed capacity of them is 3:97. Two      * nodes, n1 has 100 x, n2 has 100 NO_LABEL.      *      * app1/app2/app3/app4/app5 in a, both uses 20 resources(x)      *      * b has 100 pending resource of x      *      * After preemption, it should preempt 20 from app4/app5 an 19 from      * app1-app3. App4/app5's AM container will be preempted      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,true"
decl_stmt|;
comment|// partition=x
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2="
decl_stmt|;
comment|// n2 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 100 100],x=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[50 100 0 0],x=[3 100 100 50]);"
operator|+
comment|// a
literal|"-b(=[50 100 0 0],x=[97 100 0 100])"
decl_stmt|;
comment|// b
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"a\t"
comment|// app1 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app2 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app3 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app4 in a
operator|+
literal|"(1,1,n1,x,20,false);"
operator|+
comment|// uses 20 resource
literal|"a\t"
comment|// app5 in a
operator|+
literal|"(1,1,n1,x,20,false);"
decl_stmt|;
comment|// uses 20 resource
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 4 from app1
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// 19 from app2-app5
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|19
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|20
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodePartitionDisablePreemptionForSingleLevelQueue ()
specifier|public
name|void
name|testNodePartitionDisablePreemptionForSingleLevelQueue
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * Queue structure is:      *      *<pre>      *         root      *       /  |  \      *      a   b   c      *</pre>      *      * Both a/b/c can access x, and guaranteed_capacity(x) of them is 40:20:40.      * a/b/c's max resource is 100. b is disable-preemption      *      * Two nodes, n1 has 100 x, n2 has 100 NO_LABEL.      *      * 2 apps in cluster. app1 in a (usage=50), app2 in b(usage=30), app3 in      * c(usage=20). All of them have 50 pending resource.      *      * After preemption, app1 will be preempt 10 containers and app2 will not be      * preempted      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,true"
decl_stmt|;
comment|// partition=x
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2="
decl_stmt|;
comment|// n2 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 100 100],x=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[80 80 0 0],x=[40 100 50 50]);"
operator|+
comment|// a
literal|"-b(=[10 100 0 0],x=[20 100 30 0]);"
operator|+
comment|// b
literal|"-c(=[10 100 0 0],x=[40 100 20 50])"
decl_stmt|;
comment|//c
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"a\t"
comment|// app1 in a
operator|+
literal|"(1,1,n1,x,50,false);"
operator|+
comment|// 50x in n1
literal|"b\t"
comment|// app2 in b
operator|+
literal|"(1,1,n1,x,30,false);"
operator|+
comment|// 30x in n1
literal|"c\t"
comment|// app3 in c
operator|+
literal|"(1,1,n1,x,20,false)"
decl_stmt|;
comment|// 20x in n1
name|csConf
operator|.
name|setPreemptionDisabled
argument_list|(
literal|"root.b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 10 preempted from app1, nothing preempted from app2-app3
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNodePartitionNonAccessibleQueuesSharePartitionedResource ()
specifier|public
name|void
name|testNodePartitionNonAccessibleQueuesSharePartitionedResource
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * Queue structure is:      *      *<pre>      *           root      *        _________      *       /  |   |  \      *      a   b   c   d      *</pre>      *      * a/b can access x, their capacity is 50:50 c/d cannot access x.      *      * a uses 0, wants 30      * b(app1) uses 30, wants 0      * c(app2)&d(app3) use 35, wants 50      *      * After preemption, c/d will be preempted 15 containers, because idle      * resource = 100 - 30 (which is used by b) - 30 (which is asked by a) = 40      * will be divided by c/d, so each of c/d get 20.      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,false"
decl_stmt|;
comment|// partition=x
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2="
decl_stmt|;
comment|// n2 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 100 100],x=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[25 100 0 0],x=[50 100 0 30]);"
operator|+
comment|// a
literal|"-b(=[25 100 0 0],x=[50 100 30 0]);"
operator|+
comment|// b
literal|"-c(=[25 100 1 0],x=[0 0 35 50]);"
operator|+
comment|//c
literal|"-d(=[25 100 1 0],x=[0 0 35 50])"
decl_stmt|;
comment|//d
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"b\t"
comment|// app1 in b
operator|+
literal|"(1,1,n1,x,30,false);"
operator|+
comment|// 50x in n1
literal|"c\t"
comment|// app2 in c
operator|+
literal|"(1,1,n2,,1,false)"
comment|// AM container (in n2)
operator|+
literal|"(1,1,n1,,30,false);"
operator|+
comment|// 30x in n1 (ignore exclusivity)
literal|"d\t"
comment|// app3 in d
operator|+
literal|"(1,1,n2,,1,false)"
comment|// AM container (in n2)
operator|+
literal|"(1,1,n1,,30,false)"
decl_stmt|;
comment|// 30x in n1 (ignore exclusivity)
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 15 will be preempted app2/app3
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|15
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|15
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchyPreemptionForMultiplePartitions ()
specifier|public
name|void
name|testHierarchyPreemptionForMultiplePartitions
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * Queue structure is:      *      *<pre>      *           root      *           /  \      *          a    b      *        /  \  /  \      *       a1  a2 b1  b2      *</pre>      *      * Both a/b can access x/y, and in all hierarchy capacity ratio is 50:50.      * So for a1/a2/b1/b2, all of them can access 25x, 25y      *      * a1 uses 35x, 25y      * a2 uses 25x, 15y      * b1 uses 15x, 25y      * b2 uses 25x 35y      *      * So as a result, a2 will preempt from b2, and b1 will preempt from a1.      *      * After preemption, a1 will be preempted 10x and b2 will be preempted 10y.      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,true;"
operator|+
comment|// partition=x
literal|"y=100,true"
decl_stmt|;
comment|// partition=y
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2=y;"
operator|+
comment|// n2 has partition=y
literal|"n3="
decl_stmt|;
comment|// n3 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 0 0],x=[100 100 100 100],y=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[50 100 0 0],x=[50 100 60 40],y=[50 100 40 40]);"
operator|+
comment|// a
literal|"--a1(=[25 100 0 0],x=[25 100 35 20],y=[25 100 25 20]);"
operator|+
comment|// a1
literal|"--a2(=[25 100 0 0],x=[25 100 25 20],y=[25 100 15 20]);"
operator|+
comment|// a2
literal|"-b(=[50 100 0 0],x=[50 100 40 40],y=[50 100 60 40]);"
operator|+
comment|// b
literal|"--b1(=[25 100 0 0],x=[25 100 15 20],y=[25 100 25 20]);"
operator|+
comment|// b1
literal|"--b2(=[25 100 0 0],x=[25 100 25 20],y=[25 100 35 20])"
decl_stmt|;
comment|// b2
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"a1\t"
comment|// app1 in a1
operator|+
literal|"(1,1,n1,x,35,false)"
comment|// 35 of x
operator|+
literal|"(1,1,n2,y,25,false);"
operator|+
comment|// 25 of y
literal|"a2\t"
comment|// app2 in a2
operator|+
literal|"(1,1,n1,x,25,false)"
comment|// 25 of x
operator|+
literal|"(1,1,n2,y,15,false);"
operator|+
comment|// 15 of y
literal|"b1\t"
comment|// app3 in b1
operator|+
literal|"(1,1,n1,x,15,false)"
comment|// 15 of x
operator|+
literal|"(1,1,n2,y,25,false);"
operator|+
comment|// 25 of y
literal|"b2\t"
comment|// app4 in b2
operator|+
literal|"(1,1,n1,x,25,false)"
comment|// 25 of x
operator|+
literal|"(1,1,n2,y,35,false)"
decl_stmt|;
comment|// 35 of y
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
comment|// 10 will be preempted from app1 (a1) /app4 (b2)
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchyPreemptionForDifferenceAcessibility ()
specifier|public
name|void
name|testHierarchyPreemptionForDifferenceAcessibility
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * Queue structure is:      *      *<pre>      *           root      *           /  \      *          a    b      *        /  \  /  \      *       a1  a2 b1  b2      *</pre>      *      * a can access x only and b can access y only      *      * Capacities of a1/a2, b1/b2 is 50:50      *      * a1 uses 100x and b1 uses 80y      *      * So as a result, a1 will be preempted 50 containers and b1 will be      * preempted 30 containers      */
name|String
name|labelsConfig
init|=
literal|"=100,true;"
operator|+
comment|// default partition
literal|"x=100,true;"
operator|+
comment|// partition=x
literal|"y=100,true"
decl_stmt|;
comment|// partition=y
name|String
name|nodesConfig
init|=
literal|"n1=x;"
operator|+
comment|// n1 has partition=x
literal|"n2=y;"
operator|+
comment|// n2 has partition=y
literal|"n3="
decl_stmt|;
comment|// n3 is default partition
name|String
name|queuesConfig
init|=
comment|// guaranteed,max,used,pending
literal|"root(=[100 100 0 0],x=[100 100 100 100],y=[100 100 100 100]);"
operator|+
comment|//root
literal|"-a(=[50 100 0 0],x=[100 100 100 100]);"
operator|+
comment|// a
literal|"--a1(=[25 100 0 0],x=[50 100 100 0]);"
operator|+
comment|// a1
literal|"--a2(=[25 100 0 0],x=[50 100 0 100]);"
operator|+
comment|// a2
literal|"-b(=[50 100 0 0],y=[100 100 80 100]);"
operator|+
comment|// b
literal|"--b1(=[25 100 0 0],y=[50 100 80 0]);"
operator|+
comment|// b1
literal|"--b2(=[25 100 0 0],y=[50 100 0 100])"
decl_stmt|;
comment|// b2
name|String
name|appsConfig
init|=
comment|//queueName\t(priority,resource,host,expression,#repeat,reserved)
literal|"a1\t"
comment|// app1 in a1
operator|+
literal|"(1,1,n1,x,100,false);"
operator|+
comment|// 100 of x
literal|"b1\t"
comment|// app2 in b1
operator|+
literal|"(1,1,n2,y,80,false)"
decl_stmt|;
comment|// 80 of y
name|buildEnv
argument_list|(
name|labelsConfig
argument_list|,
name|nodesConfig
argument_list|,
name|queuesConfig
argument_list|,
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|.
name|editSchedule
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|50
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mDisp
argument_list|,
name|times
argument_list|(
literal|30
argument_list|)
argument_list|)
operator|.
name|handle
argument_list|(
name|argThat
argument_list|(
operator|new
name|IsPreemptionRequestFor
argument_list|(
name|getAppAttemptId
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getAppAttemptId (int id)
specifier|private
name|ApplicationAttemptId
name|getAppAttemptId
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|appAttemptId
return|;
block|}
DECL|method|checkContainerNodesInApp (FiCaSchedulerApp app, int expectedContainersNumber, String host)
specifier|private
name|void
name|checkContainerNodesInApp
parameter_list|(
name|FiCaSchedulerApp
name|app
parameter_list|,
name|int
name|expectedContainersNumber
parameter_list|,
name|String
name|host
parameter_list|)
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|host
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMContainer
name|c
range|:
name|app
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|num
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|RMContainer
name|c
range|:
name|app
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAllocatedNode
argument_list|()
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|num
operator|++
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedContainersNumber
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
DECL|method|getApp (String queueName, int appId)
specifier|private
name|FiCaSchedulerApp
name|getApp
parameter_list|(
name|String
name|queueName
parameter_list|,
name|int
name|appId
parameter_list|)
block|{
for|for
control|(
name|FiCaSchedulerApp
name|app
range|:
operator|(
operator|(
name|LeafQueue
operator|)
name|cs
operator|.
name|getQueue
argument_list|(
name|queueName
argument_list|)
operator|)
operator|.
name|getApplications
argument_list|()
control|)
block|{
if|if
condition|(
name|app
operator|.
name|getApplicationId
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|appId
condition|)
block|{
return|return
name|app
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|checkAbsCapacities (CSQueue queue, String partition, float guaranteed, float max, float used)
specifier|private
name|void
name|checkAbsCapacities
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|String
name|partition
parameter_list|,
name|float
name|guaranteed
parameter_list|,
name|float
name|max
parameter_list|,
name|float
name|used
parameter_list|)
block|{
name|QueueCapacities
name|qc
init|=
name|queue
operator|.
name|getQueueCapacities
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|guaranteed
argument_list|,
name|qc
operator|.
name|getAbsoluteCapacity
argument_list|(
name|partition
argument_list|)
argument_list|,
literal|1e-3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|max
argument_list|,
name|qc
operator|.
name|getAbsoluteMaximumCapacity
argument_list|(
name|partition
argument_list|)
argument_list|,
literal|1e-3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|used
argument_list|,
name|qc
operator|.
name|getAbsoluteUsedCapacity
argument_list|(
name|partition
argument_list|)
argument_list|,
literal|1e-3
argument_list|)
expr_stmt|;
block|}
DECL|method|checkPendingResource (CSQueue queue, String partition, int pending)
specifier|private
name|void
name|checkPendingResource
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|pending
parameter_list|)
block|{
name|ResourceUsage
name|ru
init|=
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|pending
argument_list|,
name|ru
operator|.
name|getPending
argument_list|(
name|partition
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|buildEnv (String labelsConfig, String nodesConfig, String queuesConfig, String appsConfig)
specifier|private
name|void
name|buildEnv
parameter_list|(
name|String
name|labelsConfig
parameter_list|,
name|String
name|nodesConfig
parameter_list|,
name|String
name|queuesConfig
parameter_list|,
name|String
name|appsConfig
parameter_list|)
throws|throws
name|IOException
block|{
name|mockNodeLabelsManager
argument_list|(
name|labelsConfig
argument_list|)
expr_stmt|;
name|mockSchedulerNodes
argument_list|(
name|nodesConfig
argument_list|)
expr_stmt|;
for|for
control|(
name|NodeId
name|nodeId
range|:
name|nodeIdToSchedulerNodes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|when
argument_list|(
name|cs
operator|.
name|getSchedulerNode
argument_list|(
name|nodeId
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeIdToSchedulerNodes
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ParentQueue
name|root
init|=
name|mockQueueHierarchy
argument_list|(
name|queuesConfig
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getRootQueue
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getClusterResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterResource
argument_list|)
expr_stmt|;
name|mockApplications
argument_list|(
name|appsConfig
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|new
name|ProportionalCapacityPreemptionPolicy
argument_list|(
name|conf
argument_list|,
name|rmContext
argument_list|,
name|cs
argument_list|,
name|mClock
argument_list|)
expr_stmt|;
block|}
DECL|method|mockContainers (String containersConfig, ApplicationAttemptId attemptId, String queueName, List<RMContainer> reservedContainers, List<RMContainer> liveContainers)
specifier|private
name|void
name|mockContainers
parameter_list|(
name|String
name|containersConfig
parameter_list|,
name|ApplicationAttemptId
name|attemptId
parameter_list|,
name|String
name|queueName
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
parameter_list|,
name|List
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
parameter_list|)
block|{
name|int
name|containerId
init|=
literal|1
decl_stmt|;
name|int
name|start
init|=
name|containersConfig
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|end
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|start
operator|<
name|containersConfig
operator|.
name|length
argument_list|()
condition|)
block|{
while|while
condition|(
name|start
operator|<
name|containersConfig
operator|.
name|length
argument_list|()
operator|&&
name|containersConfig
operator|.
name|charAt
argument_list|(
name|start
argument_list|)
operator|!=
literal|'('
condition|)
block|{
name|start
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|>=
name|containersConfig
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error containers specification, line="
operator|+
name|containersConfig
argument_list|)
throw|;
block|}
name|end
operator|=
name|start
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|end
operator|<
name|containersConfig
operator|.
name|length
argument_list|()
operator|&&
name|containersConfig
operator|.
name|charAt
argument_list|(
name|end
argument_list|)
operator|!=
literal|')'
condition|)
block|{
name|end
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|>=
name|containersConfig
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error containers specification, line="
operator|+
name|containersConfig
argument_list|)
throw|;
block|}
comment|// now we found start/end, get container values
name|String
index|[]
name|values
init|=
name|containersConfig
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|length
operator|!=
literal|6
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Format to define container is:"
operator|+
literal|"(priority,resource,host,expression,repeat,reserved)"
argument_list|)
throw|;
block|}
name|Priority
name|pri
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|res
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|NodeId
name|host
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|values
index|[
literal|2
index|]
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|exp
init|=
name|values
index|[
literal|3
index|]
decl_stmt|;
name|int
name|repeat
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|boolean
name|reserved
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|5
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeat
condition|;
name|i
operator|++
control|)
block|{
name|Container
name|c
init|=
name|mock
argument_list|(
name|Container
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|c
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|pri
argument_list|)
expr_stmt|;
name|RMContainerImpl
name|rmc
init|=
name|mock
argument_list|(
name|RMContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getAllocatedNode
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getNodeLabelExpression
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getAllocatedResource
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
specifier|final
name|ContainerId
name|cId
init|=
name|ContainerId
operator|.
name|newContainerId
argument_list|(
name|attemptId
argument_list|,
name|containerId
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rmc
operator|.
name|getContainerId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cId
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|cId
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|RMContainer
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
operator|)
operator|.
name|getContainerId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|rmc
argument_list|)
operator|.
name|compareTo
argument_list|(
name|any
argument_list|(
name|RMContainer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|containerId
operator|==
literal|1
condition|)
block|{
name|when
argument_list|(
name|rmc
operator|.
name|isAMContainer
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reserved
condition|)
block|{
name|reservedContainers
operator|.
name|add
argument_list|(
name|rmc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|liveContainers
operator|.
name|add
argument_list|(
name|rmc
argument_list|)
expr_stmt|;
block|}
comment|// If this is a non-exclusive allocation
name|String
name|partition
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|exp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|partition
operator|=
name|nodeIdToSchedulerNodes
operator|.
name|get
argument_list|(
name|host
argument_list|)
operator|.
name|getPartition
argument_list|()
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LeafQueue
name|queue
init|=
operator|(
name|LeafQueue
operator|)
name|nameToCSQueues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|ignoreExclusivityContainers
init|=
name|queue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ignoreExclusivityContainers
operator|.
name|containsKey
argument_list|(
name|partition
argument_list|)
condition|)
block|{
name|ignoreExclusivityContainers
operator|.
name|put
argument_list|(
name|partition
argument_list|,
operator|new
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ignoreExclusivityContainers
operator|.
name|get
argument_list|(
name|partition
argument_list|)
operator|.
name|add
argument_list|(
name|rmc
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"add container to app="
operator|+
name|attemptId
operator|+
literal|" res="
operator|+
name|res
operator|+
literal|" node="
operator|+
name|host
operator|+
literal|" nodeLabelExpression="
operator|+
name|exp
operator|+
literal|" partition="
operator|+
name|partition
argument_list|)
expr_stmt|;
name|containerId
operator|++
expr_stmt|;
block|}
name|start
operator|=
name|end
operator|+
literal|1
expr_stmt|;
block|}
block|}
comment|/**    * Format is:    *<pre>    * queueName\t  // app1    * (priority,resource,host,expression,#repeat,reserved)    * (priority,resource,host,expression,#repeat,reserved);    * queueName\t  // app2    *</pre>    */
DECL|method|mockApplications (String appsConfig)
specifier|private
name|void
name|mockApplications
parameter_list|(
name|String
name|appsConfig
parameter_list|)
block|{
name|int
name|id
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|a
range|:
name|appsConfig
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
name|String
index|[]
name|strs
init|=
name|a
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
name|strs
index|[
literal|0
index|]
decl_stmt|;
comment|// get containers
name|List
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RMContainer
argument_list|>
name|reservedContainers
init|=
operator|new
name|ArrayList
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|appId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|mockContainers
argument_list|(
name|strs
index|[
literal|1
index|]
argument_list|,
name|appAttemptId
argument_list|,
name|queueName
argument_list|,
name|reservedContainers
argument_list|,
name|liveContainers
argument_list|)
expr_stmt|;
name|FiCaSchedulerApp
name|app
init|=
name|mock
argument_list|(
name|FiCaSchedulerApp
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getLiveContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|liveContainers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reservedContainers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|app
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|appId
argument_list|)
expr_stmt|;
comment|// add to LeafQueue
name|LeafQueue
name|queue
init|=
operator|(
name|LeafQueue
operator|)
name|nameToCSQueues
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|queue
operator|.
name|getApplications
argument_list|()
operator|.
name|add
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
block|}
comment|/**    * Format is:    * host1=partition;    * host2=partition;    */
DECL|method|mockSchedulerNodes (String schedulerNodesConfigStr)
specifier|private
name|void
name|mockSchedulerNodes
parameter_list|(
name|String
name|schedulerNodesConfigStr
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|nodesConfigStrArray
init|=
name|schedulerNodesConfigStr
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|nodesConfigStrArray
control|)
block|{
name|NodeId
name|nodeId
init|=
name|NodeId
operator|.
name|newInstance
argument_list|(
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|partition
init|=
name|p
operator|.
name|substring
argument_list|(
name|p
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|SchedulerNode
name|sn
init|=
name|mock
argument_list|(
name|SchedulerNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sn
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sn
operator|.
name|getPartition
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|partition
argument_list|)
expr_stmt|;
name|nodeIdToSchedulerNodes
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"add scheduler node, id="
operator|+
name|nodeId
operator|+
literal|", partition="
operator|+
name|partition
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Format is:    *<pre>    * partition0=total_resource,exclusivity;    * partition1=total_resource,exclusivity;    * ...    *</pre>    */
DECL|method|mockNodeLabelsManager (String nodeLabelsConfigStr)
specifier|private
name|void
name|mockNodeLabelsManager
parameter_list|(
name|String
name|nodeLabelsConfigStr
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|partitionConfigArr
init|=
name|nodeLabelsConfigStr
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|clusterResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|partitionConfigArr
control|)
block|{
name|String
name|partitionName
init|=
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|totalResource
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|substring
argument_list|(
name|p
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
operator|+
literal|1
argument_list|,
name|p
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|exclusivity
init|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|p
operator|.
name|substring
argument_list|(
name|p
operator|.
name|indexOf
argument_list|(
literal|","
argument_list|)
operator|+
literal|1
argument_list|,
name|p
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Resource
name|res
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|totalResource
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|nlm
operator|.
name|getResourceByLabel
argument_list|(
name|eq
argument_list|(
name|partitionName
argument_list|)
argument_list|,
name|any
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|nlm
operator|.
name|isExclusiveNodeLabel
argument_list|(
name|eq
argument_list|(
name|partitionName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|exclusivity
argument_list|)
expr_stmt|;
comment|// add to partition to resource
name|partitionToResource
operator|.
name|put
argument_list|(
name|partitionName
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"add partition="
operator|+
name|partitionName
operator|+
literal|" totalRes="
operator|+
name|res
operator|+
literal|" exclusivity="
operator|+
name|exclusivity
argument_list|)
expr_stmt|;
name|Resources
operator|.
name|addTo
argument_list|(
name|clusterResource
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|nlm
operator|.
name|getClusterNodeLabelNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|partitionToResource
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Format is:    *<pre>    * root (<partition-name-1>=[guaranteed max used pending],<partition-name-2>=..);    * -A(...);    * --A1(...);    * --A2(...);    * -B...    *</pre>    * ";" splits queues, and there should no empty lines, no extra spaces    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|mockQueueHierarchy (String queueExprs)
specifier|private
name|ParentQueue
name|mockQueueHierarchy
parameter_list|(
name|String
name|queueExprs
parameter_list|)
block|{
name|String
index|[]
name|queueExprArray
init|=
name|queueExprs
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|ParentQueue
name|rootQueue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|queueExprArray
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|String
name|q
init|=
name|queueExprArray
index|[
name|idx
index|]
decl_stmt|;
name|CSQueue
name|queue
decl_stmt|;
comment|// Initialize queue
if|if
condition|(
name|isParent
argument_list|(
name|queueExprArray
argument_list|,
name|idx
argument_list|)
condition|)
block|{
name|ParentQueue
name|parentQueue
init|=
name|mock
argument_list|(
name|ParentQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|queue
operator|=
name|parentQueue
expr_stmt|;
name|List
argument_list|<
name|CSQueue
argument_list|>
name|children
init|=
operator|new
name|ArrayList
argument_list|<
name|CSQueue
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|children
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LeafQueue
name|leafQueue
init|=
name|mock
argument_list|(
name|LeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|apps
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|CapacityScheduler
operator|.
name|applicationComparator
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|leafQueue
operator|.
name|getApplications
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|apps
argument_list|)
expr_stmt|;
name|OrderingPolicy
argument_list|<
name|FiCaSchedulerApp
argument_list|>
name|so
init|=
name|mock
argument_list|(
name|OrderingPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|so
operator|.
name|getPreemptionIterator
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
return|return
name|apps
operator|.
name|descendingIterator
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|leafQueue
operator|.
name|getOrderingPolicy
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|so
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|>
name|ignorePartitionContainers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|leafQueue
operator|.
name|getIgnoreExclusivityRMContainers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ignorePartitionContainers
argument_list|)
expr_stmt|;
name|queue
operator|=
name|leafQueue
expr_stmt|;
block|}
name|setupQueue
argument_list|(
name|queue
argument_list|,
name|q
argument_list|,
name|queueExprArray
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|getQueueName
argument_list|()
operator|.
name|equals
argument_list|(
name|ROOT
argument_list|)
condition|)
block|{
name|rootQueue
operator|=
operator|(
name|ParentQueue
operator|)
name|queue
expr_stmt|;
block|}
block|}
return|return
name|rootQueue
return|;
block|}
DECL|method|setupQueue (CSQueue queue, String q, String[] queueExprArray, int idx)
specifier|private
name|void
name|setupQueue
parameter_list|(
name|CSQueue
name|queue
parameter_list|,
name|String
name|q
parameter_list|,
name|String
index|[]
name|queueExprArray
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"*** Setup queue, source="
operator|+
name|q
argument_list|)
expr_stmt|;
name|String
name|queuePath
init|=
literal|null
decl_stmt|;
name|int
name|myLevel
init|=
name|getLevel
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|myLevel
condition|)
block|{
comment|// It's root
name|when
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ROOT
argument_list|)
expr_stmt|;
name|queuePath
operator|=
name|ROOT
expr_stmt|;
block|}
name|String
name|queueName
init|=
name|getQueueName
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
comment|// Setup parent queue, and add myself to parentQueue.children-list
name|ParentQueue
name|parentQueue
init|=
name|getParentQueue
argument_list|(
name|queueExprArray
argument_list|,
name|idx
argument_list|,
name|myLevel
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|parentQueue
condition|)
block|{
name|when
argument_list|(
name|queue
operator|.
name|getParent
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|parentQueue
argument_list|)
expr_stmt|;
name|parentQueue
operator|.
name|getChildQueues
argument_list|()
operator|.
name|add
argument_list|(
name|queue
argument_list|)
expr_stmt|;
comment|// Setup my path
name|queuePath
operator|=
name|parentQueue
operator|.
name|getQueuePath
argument_list|()
operator|+
literal|"."
operator|+
name|queueName
expr_stmt|;
block|}
name|when
argument_list|(
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queuePath
argument_list|)
expr_stmt|;
name|QueueCapacities
name|qc
init|=
operator|new
name|QueueCapacities
argument_list|(
literal|0
operator|==
name|myLevel
argument_list|)
decl_stmt|;
name|ResourceUsage
name|ru
init|=
operator|new
name|ResourceUsage
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueCapacities
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qc
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|queue
operator|.
name|getQueueResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ru
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setup queue, name="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|" path="
operator|+
name|queue
operator|.
name|getQueuePath
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parent="
operator|+
operator|(
name|parentQueue
operator|==
literal|null
condition|?
literal|"null"
else|:
name|parentQueue
operator|.
name|getQueueName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
comment|// Setup other fields like used resource, guaranteed resource, etc.
name|String
name|capacitySettingStr
init|=
name|q
operator|.
name|substring
argument_list|(
name|q
operator|.
name|indexOf
argument_list|(
literal|"("
argument_list|)
operator|+
literal|1
argument_list|,
name|q
operator|.
name|indexOf
argument_list|(
literal|")"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|capacitySettingStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|String
name|partitionName
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|s
operator|.
name|substring
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"["
argument_list|)
operator|+
literal|1
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|"]"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// Add a small epsilon to capacities to avoid truncate when doing
comment|// Resources.multiply
name|float
name|epsilon
init|=
literal|1e-6f
decl_stmt|;
name|float
name|absGuaranteed
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|/
call|(
name|float
call|)
argument_list|(
name|partitionToResource
operator|.
name|get
argument_list|(
name|partitionName
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|+
name|epsilon
decl_stmt|;
name|float
name|absMax
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|/
call|(
name|float
call|)
argument_list|(
name|partitionToResource
operator|.
name|get
argument_list|(
name|partitionName
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|+
name|epsilon
decl_stmt|;
name|float
name|absUsed
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|2
index|]
operator|.
name|trim
argument_list|()
argument_list|)
operator|/
call|(
name|float
call|)
argument_list|(
name|partitionToResource
operator|.
name|get
argument_list|(
name|partitionName
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
operator|+
name|epsilon
decl_stmt|;
name|Resource
name|pending
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|values
index|[
literal|3
index|]
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|qc
operator|.
name|setAbsoluteCapacity
argument_list|(
name|partitionName
argument_list|,
name|absGuaranteed
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setAbsoluteMaximumCapacity
argument_list|(
name|partitionName
argument_list|,
name|absMax
argument_list|)
expr_stmt|;
name|qc
operator|.
name|setAbsoluteUsedCapacity
argument_list|(
name|partitionName
argument_list|,
name|absUsed
argument_list|)
expr_stmt|;
name|ru
operator|.
name|setPending
argument_list|(
name|partitionName
argument_list|,
name|pending
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setup queue="
operator|+
name|queueName
operator|+
literal|" partition="
operator|+
name|partitionName
operator|+
literal|" [abs_guaranteed="
operator|+
name|absGuaranteed
operator|+
literal|",abs_max="
operator|+
name|absMax
operator|+
literal|",abs_used"
operator|+
name|absUsed
operator|+
literal|",pending_resource="
operator|+
name|pending
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
comment|// Setup preemption disabled
name|when
argument_list|(
name|queue
operator|.
name|getPreemptionDisabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|csConf
operator|.
name|getPreemptionDisabled
argument_list|(
name|queuePath
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|nameToCSQueues
operator|.
name|put
argument_list|(
name|queueName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|cs
operator|.
name|getQueue
argument_list|(
name|eq
argument_list|(
name|queueName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
comment|/**    * Level of a queue is how many "-" at beginning, root's level is 0    */
DECL|method|getLevel (String q)
specifier|private
name|int
name|getLevel
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|int
name|level
init|=
literal|0
decl_stmt|;
comment|// level = how many "-" at beginning
while|while
condition|(
name|level
operator|<
name|q
operator|.
name|length
argument_list|()
operator|&&
name|q
operator|.
name|charAt
argument_list|(
name|level
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|level
operator|++
expr_stmt|;
block|}
return|return
name|level
return|;
block|}
DECL|method|getQueueName (String q)
specifier|private
name|String
name|getQueueName
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
comment|// find first != '-' char
while|while
condition|(
name|idx
operator|<
name|q
operator|.
name|length
argument_list|()
operator|&&
name|q
operator|.
name|charAt
argument_list|(
name|idx
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|==
name|q
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal input:"
operator|+
name|q
argument_list|)
throw|;
block|}
comment|// name = after '-' and before '('
name|String
name|name
init|=
name|q
operator|.
name|substring
argument_list|(
name|idx
argument_list|,
name|q
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queue name shouldn't be empty:"
operator|+
name|q
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"queue name shouldn't contain '.':"
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|name
return|;
block|}
DECL|method|getParentQueue (String[] queueExprArray, int idx, int myLevel)
specifier|private
name|ParentQueue
name|getParentQueue
parameter_list|(
name|String
index|[]
name|queueExprArray
parameter_list|,
name|int
name|idx
parameter_list|,
name|int
name|myLevel
parameter_list|)
block|{
name|idx
operator|--
expr_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
name|int
name|level
init|=
name|getLevel
argument_list|(
name|queueExprArray
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|<
name|myLevel
condition|)
block|{
name|String
name|parentQueuName
init|=
name|getQueueName
argument_list|(
name|queueExprArray
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
return|return
operator|(
name|ParentQueue
operator|)
name|nameToCSQueues
operator|.
name|get
argument_list|(
name|parentQueuName
argument_list|)
return|;
block|}
name|idx
operator|--
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get if a queue is ParentQueue    */
DECL|method|isParent (String[] queues, int idx)
specifier|private
name|boolean
name|isParent
parameter_list|(
name|String
index|[]
name|queues
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|int
name|myLevel
init|=
name|getLevel
argument_list|(
name|queues
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
name|idx
operator|++
expr_stmt|;
while|while
condition|(
name|idx
operator|<
name|queues
operator|.
name|length
operator|&&
name|getLevel
argument_list|(
name|queues
index|[
name|idx
index|]
argument_list|)
operator|==
name|myLevel
condition|)
block|{
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|>=
name|queues
operator|.
name|length
operator|||
name|getLevel
argument_list|(
name|queues
index|[
name|idx
index|]
argument_list|)
operator|<
name|myLevel
condition|)
block|{
comment|// It's a LeafQueue
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

