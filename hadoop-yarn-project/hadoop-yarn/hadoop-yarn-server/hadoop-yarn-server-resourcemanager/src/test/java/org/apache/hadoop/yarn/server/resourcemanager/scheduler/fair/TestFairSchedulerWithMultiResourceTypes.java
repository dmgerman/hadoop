begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|ResourceTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|placement
operator|.
name|PlacementManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
operator|.
name|MAXIMUM_ALLOCATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
operator|.
name|UNITS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
DECL|class|TestFairSchedulerWithMultiResourceTypes
specifier|public
class|class
name|TestFairSchedulerWithMultiResourceTypes
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|CUSTOM_RESOURCE
specifier|private
specifier|static
specifier|final
name|String
name|CUSTOM_RESOURCE
init|=
literal|"custom-resource"
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|initResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// since this runs outside of the normal context we need to set one
name|RMContext
name|rmContext
init|=
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|PlacementManager
name|placementManager
init|=
operator|new
name|PlacementManager
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|rmContext
operator|.
name|getQueuePlacementManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|placementManager
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|rmContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|initResourceTypes (Configuration conf)
specifier|private
name|Configuration
name|initResourceTypes
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ResourceInformation
argument_list|>
name|riMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Initialize mandatory resources
name|ResourceInformation
name|memory
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
argument_list|,
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getUnits
argument_list|()
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|)
decl_stmt|;
name|ResourceInformation
name|vcores
init|=
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
argument_list|,
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getUnits
argument_list|()
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|)
decl_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|,
name|memory
argument_list|)
expr_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|,
name|vcores
argument_list|)
expr_stmt|;
name|riMap
operator|.
name|put
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
name|ResourceInformation
operator|.
name|newInstance
argument_list|(
name|CUSTOM_RESOURCE
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|ResourceTypes
operator|.
name|COUNTABLE
argument_list|,
literal|0
argument_list|,
literal|3333L
argument_list|)
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|initializeResourcesFromResourceInformationMap
argument_list|(
name|riMap
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Test
DECL|method|testMaximumAllocationRefresh ()
specifier|public
name|void
name|testMaximumAllocationRefresh
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|CUSTOM_RESOURCE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|CUSTOM_RESOURCE
operator|+
name|UNITS
argument_list|,
literal|"k"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|CUSTOM_RESOURCE
operator|+
name|MAXIMUM_ALLOCATION
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
operator|+
name|MAXIMUM_ALLOCATION
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
operator|+
name|MAXIMUM_ALLOCATION
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Resource
name|maxAllowedAllocation
init|=
name|scheduler
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|getMaxAllowedAllocation
argument_list|()
decl_stmt|;
name|ResourceInformation
name|customResource
init|=
name|maxAllowedAllocation
operator|.
name|getResourceInformation
argument_list|(
name|CUSTOM_RESOURCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|maxAllowedAllocation
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|maxAllowedAllocation
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|customResource
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
argument_list|,
name|CUSTOM_RESOURCE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|CUSTOM_RESOURCE
operator|+
name|UNITS
argument_list|,
literal|"k"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|CUSTOM_RESOURCE
operator|+
name|MAXIMUM_ALLOCATION
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|ResourceInformation
operator|.
name|VCORES
operator|.
name|getName
argument_list|()
operator|+
name|MAXIMUM_ALLOCATION
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RESOURCE_TYPES
operator|+
literal|"."
operator|+
name|ResourceInformation
operator|.
name|MEMORY_MB
operator|.
name|getName
argument_list|()
operator|+
name|MAXIMUM_ALLOCATION
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|maxAllowedAllocation
operator|=
name|scheduler
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|getMaxAllowedAllocation
argument_list|()
expr_stmt|;
name|customResource
operator|=
name|maxAllowedAllocation
operator|.
name|getResourceInformation
argument_list|(
name|CUSTOM_RESOURCE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|maxAllowedAllocation
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|maxAllowedAllocation
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|customResource
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

