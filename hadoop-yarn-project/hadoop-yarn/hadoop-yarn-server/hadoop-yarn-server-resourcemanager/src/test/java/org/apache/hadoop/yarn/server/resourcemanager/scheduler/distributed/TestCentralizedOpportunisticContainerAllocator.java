begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.distributed
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|distributed
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ExecutionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceBlacklistRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|ContainerTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|MasterKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|api
operator|.
name|records
operator|.
name|OpportunisticContainersStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|metrics
operator|.
name|OpportunisticSchedulerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|scheduler
operator|.
name|OpportunisticContainerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|BaseContainerTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test cases for Centralized Opportunistic Container Allocator.  */
end_comment

begin_class
DECL|class|TestCentralizedOpportunisticContainerAllocator
specifier|public
class|class
name|TestCentralizedOpportunisticContainerAllocator
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCentralizedOpportunisticContainerAllocator
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|GB
specifier|private
specifier|static
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|allocator
specifier|private
name|CentralizedOpportunisticContainerAllocator
name|allocator
init|=
literal|null
decl_stmt|;
DECL|field|oppCntxt
specifier|private
name|OpportunisticContainerContext
name|oppCntxt
init|=
literal|null
decl_stmt|;
DECL|field|PRIORITY_NORMAL
specifier|private
specifier|static
specifier|final
name|Priority
name|PRIORITY_NORMAL
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|CAPABILITY_1GB
specifier|private
specifier|static
specifier|final
name|Resource
name|CAPABILITY_1GB
init|=
name|Resources
operator|.
name|createResource
argument_list|(
name|GB
argument_list|)
decl_stmt|;
DECL|field|EMPTY_BLACKLIST_REQUEST
specifier|private
specifier|static
specifier|final
name|ResourceBlacklistRequest
name|EMPTY_BLACKLIST_REQUEST
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|setup ()
specifier|public
name|void
name|setup
parameter_list|()
block|{
comment|// creating a dummy master key to be used for creation of container.
specifier|final
name|MasterKey
name|mKey
init|=
operator|new
name|MasterKey
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getKeyId
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setKeyId
parameter_list|(
name|int
name|keyId
parameter_list|)
block|{}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getBytes
parameter_list|()
block|{
return|return
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBytes
parameter_list|(
name|ByteBuffer
name|bytes
parameter_list|)
block|{}
block|}
decl_stmt|;
comment|// creating a dummy tokenSecretManager to be used for creation of
comment|// container.
name|BaseContainerTokenSecretManager
name|secMan
init|=
operator|new
name|BaseContainerTokenSecretManager
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|MasterKey
name|getCurrentKey
parameter_list|()
block|{
return|return
name|mKey
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|createPassword
parameter_list|(
name|ContainerTokenIdentifier
name|identifier
parameter_list|)
block|{
return|return
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
return|;
block|}
block|}
decl_stmt|;
name|allocator
operator|=
operator|new
name|CentralizedOpportunisticContainerAllocator
argument_list|(
name|secMan
argument_list|)
expr_stmt|;
name|oppCntxt
operator|=
operator|new
name|OpportunisticContainerContext
argument_list|()
expr_stmt|;
name|oppCntxt
operator|.
name|getAppParams
argument_list|()
operator|.
name|setMinResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oppCntxt
operator|.
name|getAppParams
argument_list|()
operator|.
name|setIncrementResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|512
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|oppCntxt
operator|.
name|getAppParams
argument_list|()
operator|.
name|setMaxResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests allocation of an Opportunistic container from single application.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testSimpleAllocation ()
specifier|public
name|void
name|testSimpleAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
literal|"*"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oppCntxt
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests Opportunistic container should not be allocated on blacklisted    * nodes.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testBlacklistRejection ()
specifier|public
name|void
name|testBlacklistRejection
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBlacklistRequest
name|blacklistRequest
init|=
name|ResourceBlacklistRequest
operator|.
name|newInstance
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
literal|"*"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|blacklistRequest
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|oppCntxt
operator|.
name|getOutstandingOpReqs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that allocation of Opportunistic containers should be spread out.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRoundRobinSimpleAllocation ()
specifier|public
name|void
name|testRoundRobinSimpleAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|3
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedNodes
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|allocatedNodes
operator|.
name|contains
argument_list|(
literal|"h1:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedNodes
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedNodes
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests allocation of node local Opportunistic container requests.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testNodeLocalAllocation ()
specifier|public
name|void
name|testNodeLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|3
argument_list|,
literal|"/r1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|3
argument_list|,
literal|"h1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|3
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// all 3 containers should be allocated.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// container with allocation id 2 and 3 should be allocated on node h1
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|2
operator|||
name|c
operator|.
name|getAllocationRequestId
argument_list|()
operator|==
literal|3
condition|)
block|{
name|assertEquals
argument_list|(
literal|"h1:1234"
argument_list|,
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Tests node local allocation of Opportunistic container requests with    * same allocation request id.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testNodeLocalAllocationSameSchedulerKey ()
specifier|public
name|void
name|testNodeLocalAllocationSameSchedulerKey
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h1:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests rack local allocation of Opportunistic container requests.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testSimpleRackLocalAllocation ()
specifier|public
name|void
name|testSimpleRackLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h4"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeQueueLoadMonitor
name|selector
init|=
name|createNodeQueueLoadMonitor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|,
literal|"h3"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/r2"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r3"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h4:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that allocation of rack local Opportunistic container requests    * should be spread out.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRoundRobinRackLocalAllocation ()
specifier|public
name|void
name|testRoundRobinRackLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
literal|"/r1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
literal|"h5"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r1"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h5"
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeQueueLoadMonitor
name|selector
init|=
name|createNodeQueueLoadMonitor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|,
literal|"h3"
argument_list|,
literal|"h4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/r2"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r3"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h4:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h1:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that allocation of rack local Opportunistic container requests    * with same allocation request id should be spread out.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testRoundRobinRackLocalAllocationSameSchedulerKey ()
specifier|public
name|void
name|testRoundRobinRackLocalAllocationSameSchedulerKey
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r1"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h5"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeQueueLoadMonitor
name|selector
init|=
name|createNodeQueueLoadMonitor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|,
literal|"h3"
argument_list|,
literal|"h4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/r2"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r3"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allocatedHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|allocatedHosts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h2:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h4:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h1:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|allocatedHosts
operator|.
name|contains
argument_list|(
literal|"h3:1234"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests off switch allocation of Opportunistic containers.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testOffSwitchAllocationWhenNoNodeOrRack ()
specifier|public
name|void
name|testOffSwitchAllocationWhenNoNodeOrRack
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r3"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h6"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeQueueLoadMonitor
name|selector
init|=
name|createNodeQueueLoadMonitor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|,
literal|"h3"
argument_list|,
literal|"h4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/r2"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r2"
argument_list|,
literal|"/r1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests allocation of rack local Opportunistic containers with same    * scheduler key.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testLotsOfContainersRackLocalAllocationSameSchedulerKey ()
specifier|public
name|void
name|testLotsOfContainersRackLocalAllocationSameSchedulerKey
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r1"
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h1"
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeQueueLoadMonitor
name|selector
init|=
name|createNodeQueueLoadMonitor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|,
literal|"h3"
argument_list|,
literal|"h4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/r1"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|,
literal|500
argument_list|,
literal|300
argument_list|)
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|hostsToNumContainerMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Container
name|c
range|:
name|containers
control|)
block|{
name|String
name|host
init|=
name|c
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|numContainers
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|hostsToNumContainerMap
operator|.
name|containsKey
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|numContainers
operator|=
name|hostsToNumContainerMap
operator|.
name|get
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|hostsToNumContainerMap
operator|.
name|put
argument_list|(
name|host
argument_list|,
name|numContainers
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|hostsToNumContainerMap
operator|.
name|get
argument_list|(
literal|"h1:1234"
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hostsToNumContainerMap
operator|.
name|containsKey
argument_list|(
literal|"h4:1234"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests scheduling of many rack local Opportunistic container requests.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testLotsOfContainersRackLocalAllocation ()
specifier|public
name|void
name|testLotsOfContainersRackLocalAllocation
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// add 100 container requests.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|"h5"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|"/r1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeQueueLoadMonitor
name|selector
init|=
name|createNodeQueueLoadMonitor
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"h1"
argument_list|,
literal|"h2"
argument_list|,
literal|"h3"
argument_list|,
literal|"h4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"/r1"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r1"
argument_list|,
literal|"/r2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|,
literal|500
argument_list|,
literal|300
argument_list|)
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|containers
operator|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests maximum number of opportunistic containers that can be allocated in    * AM heartbeat.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testMaxAllocationsPerAMHeartbeat ()
specifier|public
name|void
name|testMaxAllocationsPerAMHeartbeat
parameter_list|()
throws|throws
name|Exception
block|{
name|allocator
operator|.
name|setMaxAllocationsPerAMHeartbeat
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r3"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h6"
argument_list|,
literal|3
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// Although capacity is present, but only 2 containers should be allocated
comment|// as max allocation per AM heartbeat is set to 2.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|containers
operator|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// Remaining 1 container should be allocated.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests maximum opportunistic container allocation per AM heartbeat for    * allocation requests with different scheduler key.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testMaxAllocationsPerAMHeartbeatDifferentSchedKey ()
specifier|public
name|void
name|testMaxAllocationsPerAMHeartbeatDifferentSchedKey
parameter_list|()
throws|throws
name|Exception
block|{
name|allocator
operator|.
name|setMaxAllocationsPerAMHeartbeat
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h6"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|3
argument_list|,
literal|"/r3"
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// Although capacity is present, but only 2 containers should be allocated
comment|// as max allocation per AM heartbeat is set to 2.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|containers
operator|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// 2 more containers should be allocated from pending allocation requests.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|containers
operator|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
comment|// Remaining 1 container should be allocated.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests maximum opportunistic container allocation per AM heartbeat when    * limit is set to -1.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testMaxAllocationsPerAMHeartbeatWithNoLimit ()
specifier|public
name|void
name|testMaxAllocationsPerAMHeartbeatWithNoLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|allocator
operator|.
name|setMaxAllocationsPerAMHeartbeat
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numContainers
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContainers
condition|;
name|i
operator|++
control|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
comment|// all containers should be allocated in single heartbeat.
name|assertEquals
argument_list|(
name|numContainers
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests maximum opportunistic container allocation per AM heartbeat when    * limit is set to higher value.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testMaxAllocationsPerAMHeartbeatWithHighLimit ()
specifier|public
name|void
name|testMaxAllocationsPerAMHeartbeatWithHighLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|allocator
operator|.
name|setMaxAllocationsPerAMHeartbeat
argument_list|(
literal|100
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numContainers
init|=
literal|20
decl_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numContainers
condition|;
name|i
operator|++
control|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|"h1"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
comment|// all containers should be allocated in single heartbeat.
name|assertEquals
argument_list|(
name|numContainers
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test opportunistic container allocation latency metrics.    * @throws Exception    */
annotation|@
name|Test
DECL|method|testAllocationLatencyMetrics ()
specifier|public
name|void
name|testAllocationLatencyMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|oppCntxt
operator|=
name|spy
argument_list|(
name|oppCntxt
argument_list|)
expr_stmt|;
name|OpportunisticSchedulerMetrics
name|metrics
init|=
name|mock
argument_list|(
name|OpportunisticSchedulerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|oppCntxt
operator|.
name|getOppSchedulerMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"/r3"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
literal|"h6"
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|ApplicationId
operator|.
name|newInstance
argument_list|(
literal|0L
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|allocator
operator|.
name|setNodeQueueLoadMonitor
argument_list|(
name|createNodeQueueLoadMonitor
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|allocator
operator|.
name|allocateContainers
argument_list|(
name|EMPTY_BLACKLIST_REQUEST
argument_list|,
name|reqs
argument_list|,
name|appAttId
argument_list|,
name|oppCntxt
argument_list|,
literal|1L
argument_list|,
literal|"user"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Containers: {}"
argument_list|,
name|containers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|containers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// for each allocated container, latency should be added.
name|verify
argument_list|(
name|metrics
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|addAllocateOLatencyEntry
argument_list|(
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createNodeQueueLoadMonitor (int numNodes, int queueLength, int queueCapacity)
specifier|private
name|NodeQueueLoadMonitor
name|createNodeQueueLoadMonitor
parameter_list|(
name|int
name|numNodes
parameter_list|,
name|int
name|queueLength
parameter_list|,
name|int
name|queueCapacity
parameter_list|)
block|{
name|NodeQueueLoadMonitor
name|selector
init|=
operator|new
name|NodeQueueLoadMonitor
argument_list|(
name|NodeQueueLoadMonitor
operator|.
name|LoadComparator
operator|.
name|QUEUE_LENGTH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numNodes
condition|;
operator|++
name|i
control|)
block|{
name|RMNode
name|node
init|=
name|createRMNode
argument_list|(
literal|"h"
operator|+
name|i
argument_list|,
literal|1234
argument_list|,
name|queueLength
argument_list|,
name|queueCapacity
argument_list|)
decl_stmt|;
name|selector
operator|.
name|addNode
argument_list|(
literal|null
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|selector
operator|.
name|updateNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|selector
operator|.
name|computeTask
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|selector
return|;
block|}
DECL|method|createNodeQueueLoadMonitor (List<String> hosts, List<String> racks, List<Integer> queueLengths, List<Integer> queueCapacities)
specifier|private
name|NodeQueueLoadMonitor
name|createNodeQueueLoadMonitor
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|hosts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|racks
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|queueLengths
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|queueCapacities
parameter_list|)
block|{
name|NodeQueueLoadMonitor
name|selector
init|=
operator|new
name|NodeQueueLoadMonitor
argument_list|(
name|NodeQueueLoadMonitor
operator|.
name|LoadComparator
operator|.
name|QUEUE_LENGTH
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hosts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|RMNode
name|node
init|=
name|createRMNode
argument_list|(
name|hosts
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
literal|1234
argument_list|,
name|racks
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|queueLengths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|queueCapacities
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|selector
operator|.
name|addNode
argument_list|(
literal|null
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|selector
operator|.
name|updateNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|selector
operator|.
name|computeTask
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|selector
return|;
block|}
DECL|method|createResourceRequest (int allocationId, String location, int numContainers)
specifier|private
name|ResourceRequest
name|createResourceRequest
parameter_list|(
name|int
name|allocationId
parameter_list|,
name|String
name|location
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
return|return
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|allocationRequestId
argument_list|(
name|allocationId
argument_list|)
operator|.
name|priority
argument_list|(
name|PRIORITY_NORMAL
argument_list|)
operator|.
name|resourceName
argument_list|(
name|location
argument_list|)
operator|.
name|capability
argument_list|(
name|CAPABILITY_1GB
argument_list|)
operator|.
name|relaxLocality
argument_list|(
literal|true
argument_list|)
operator|.
name|numContainers
argument_list|(
name|numContainers
argument_list|)
operator|.
name|executionType
argument_list|(
name|ExecutionType
operator|.
name|OPPORTUNISTIC
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|createRMNode (String host, int port, int queueLength, int queueCapacity)
specifier|private
name|RMNode
name|createRMNode
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|queueLength
parameter_list|,
name|int
name|queueCapacity
parameter_list|)
block|{
return|return
name|createRMNode
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
literal|"default"
argument_list|,
name|queueLength
argument_list|,
name|queueCapacity
argument_list|)
return|;
block|}
DECL|method|createRMNode (String host, int port, String rack, int queueLength, int queueCapacity)
specifier|private
name|RMNode
name|createRMNode
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|rack
parameter_list|,
name|int
name|queueLength
parameter_list|,
name|int
name|queueCapacity
parameter_list|)
block|{
name|RMNode
name|node1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RMNode
operator|.
name|class
argument_list|)
decl_stmt|;
name|NodeId
name|nID1
init|=
operator|new
name|TestNodeQueueLoadMonitor
operator|.
name|FakeNodeId
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rack
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|nID1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|node1
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeState
operator|.
name|RUNNING
argument_list|)
expr_stmt|;
name|OpportunisticContainersStatus
name|status1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|OpportunisticContainersStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|status1
operator|.
name|getEstimatedQueueWaitTime
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|status1
operator|.
name|getWaitQueueLength
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueLength
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|status1
operator|.
name|getOpportQueueCapacity
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueCapacity
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|node1
operator|.
name|getOpportunisticContainersStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status1
argument_list|)
expr_stmt|;
return|return
name|node1
return|;
block|}
block|}
end_class

end_unit

