begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsCollectorImpl
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Container
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|MockRMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|TestSchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueuePlacementRule
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FifoPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestFairScheduler
specifier|public
class|class
name|TestFairScheduler
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-queues"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// TODO: This test should really be using MockRM. For now starting stuff
comment|// that is needed at a bare minimum.
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// to initialize the master key
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|scheduler
operator|=
literal|null
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testConfValidation ()
specifier|public
name|void
name|testConfValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|FairScheduler
name|scheduler
init|=
operator|new
name|FairScheduler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected because the min memory allocation is"
operator|+
literal|" larger than the max memory allocation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// Exception is expected.
name|assertTrue
argument_list|(
literal|"The thrown exception is not the expected one."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid resource scheduler memory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected because the min vcores allocation is"
operator|+
literal|" larger than the max vcores allocation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// Exception is expected.
name|assertTrue
argument_list|(
literal|"The thrown exception is not the expected one."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid resource scheduler vcores"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TESTS
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testLoadConfigurationOnInitialize ()
specifier|public
name|void
name|testLoadConfigurationOnInitialize
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|MAX_ASSIGN
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|SIZE_BASED_WEIGHT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_NODE
argument_list|,
literal|.5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_RACK
argument_list|,
literal|.7
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_DELAY_RACK_MS
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_DELAY_NODE_MS
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|assignMultiple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|maxAssign
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|sizeBasedWeight
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.5
argument_list|,
name|scheduler
operator|.
name|nodeLocalityThreshold
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.7
argument_list|,
name|scheduler
operator|.
name|rackLocalityThreshold
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The continuous scheduling should be enabled"
argument_list|,
name|scheduler
operator|.
name|continuousSchedulingEnabled
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|scheduler
operator|.
name|continuousSchedulingSleepMs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|scheduler
operator|.
name|nodeLocalityDelayMs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|scheduler
operator|.
name|rackLocalityDelayMs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|scheduler
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonMinZeroResourcesSettings ()
specifier|public
name|void
name|testNonMinZeroResourcesSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|FairScheduler
name|fs
init|=
operator|new
name|FairScheduler
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|256
argument_list|,
name|fs
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|fs
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fs
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMinZeroResourcesSettings ()
specifier|public
name|void
name|testMinZeroResourcesSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|FairScheduler
name|fs
init|=
operator|new
name|FairScheduler
argument_list|()
decl_stmt|;
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fs
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fs
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|fs
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|fs
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregateCapacityTracking ()
specifier|public
name|void
name|testAggregateCapacityTracking
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add another node
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|512
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the first node
name|NodeRemovedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleFairShareCalculation ()
specifier|public
name|void
name|testSimpleFairShareCalculation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Have two queues which want entire cluster capacity
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Divided three ways - between the two queues and the default queue
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFairShareWithMaxResources ()
specifier|public
name|void
name|testFairShareWithMaxResources
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB maxResources,
comment|// the sum of queueA and queueB maxResources is more than
comment|// Integer.MAX_VALUE.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>1073741824 mb 1000 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>1073741824 mb 1000 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.75</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 1 * 1024.
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 6 * 1024
name|createSchedulingRequest
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.25, so its fair share should be 2 * 1024.
name|assertEquals
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.75, so its fair share should be 6 * 1024.
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithZeroWeight ()
specifier|public
name|void
name|testFairShareWithZeroWeight
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB weight zero.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 2 * 1024.
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 6 * 1024
name|createSchedulingRequest
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.0, so its fair share should be 0.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.0, so its fair share should be 0.
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithZeroWeightNoneZeroMinRes ()
specifier|public
name|void
name|testFairShareWithZeroWeightNoneZeroMinRes
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB weight zero.
comment|// set queueA and queueB minResources 1.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 2 * 1024.
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 6 * 1024
name|createSchedulingRequest
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.0 and minResources is 1,
comment|// so its fair share should be 1 (minShare).
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.0 and minResources is 1,
comment|// so its fair share should be 1 (minShare).
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithNoneZeroWeightNoneZeroMinRes ()
specifier|public
name|void
name|testFairShareWithNoneZeroWeightNoneZeroMinRes
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB weight 0.5.
comment|// set queueA and queueB minResources 1024.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.5</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.5</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 4 * 1024.
name|createSchedulingRequest
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 4 * 1024
name|createSchedulingRequest
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.5 and minResources is 1024,
comment|// so its fair share should be 4096.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.5 and minResources is 1024,
comment|// so its fair share should be 4096.
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleHierarchicalFairShareCalculation ()
specifier|public
name|void
name|testSimpleHierarchicalFairShareCalculation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|int
name|capacity
init|=
literal|10
operator|*
literal|24
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|capacity
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Have two queues which want entire cluster capacity
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"parent.queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"parent.queue3"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue3
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.queue3"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalQueuesSimilarParents ()
specifier|public
name|void
name|testHierarchicalQueuesSimilarParents
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|leafQueue
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|leafQueue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"root.parent.child"
argument_list|,
name|leafQueue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|leafQueue2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue3
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child.grandchild"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|leafQueue3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue4
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.sister"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|leafQueue4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"root.parent.sister"
argument_list|,
name|leafQueue4
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulerRootQueueMetrics ()
specifier|public
name|void
name|testSchedulerRootQueueMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests likewise
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure reserved memory gets updated correctly
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now another node checks in with capacity
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// The old reservation should still be there...
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but it should disappear when we update the first node.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSimpleContainerAllocation ()
specifier|public
name|void
name|testSimpleContainerAllocation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Add another node
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Asked for less than increment allocation.
name|assertEquals
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify metrics
name|QueueMetrics
name|queue1Metrics
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|queue1Metrics
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue1Metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSimpleContainerReservation ()
specifier|public
name|void
name|testSimpleContainerReservation
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 1 is allocated app capacity
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests likewise
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 2 is waiting with a reservation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now another node checks in with capacity
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// Make sure this goes to queue 2
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// The old reservation should still be there...
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but it should disappear when we update the first node.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserAsDefaultQueue ()
specifier|public
name|void
name|testUserAsDefaultQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNotUserAsDefaultQueue ()
specifier|public
name|void
name|testNotUserAsDefaultQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"default"
argument_list|,
literal|"user2"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user2"
argument_list|,
literal|true
argument_list|)
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyQueueName ()
specifier|public
name|void
name|testEmptyQueueName
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// only default queue
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit app with empty queue
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
comment|// submission rejected
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssignToQueue ()
specifier|public
name|void
name|testAssignToQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp2
init|=
operator|new
name|MockRMApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp1
argument_list|,
literal|"default"
argument_list|,
literal|"asterix"
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue2
init|=
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp2
argument_list|,
literal|"notdefault"
argument_list|,
literal|"obelix"
argument_list|)
decl_stmt|;
comment|// assert FSLeafQueue's name is the correct name is the one set in the RMApp
name|assertEquals
argument_list|(
name|rmApp1
operator|.
name|getQueue
argument_list|()
argument_list|,
name|queue1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.asterix"
argument_list|,
name|rmApp1
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmApp2
operator|.
name|getQueue
argument_list|()
argument_list|,
name|queue2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.notdefault"
argument_list|,
name|rmApp2
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssignToNonLeafQueueReturnsNull ()
specifier|public
name|void
name|testAssignToNonLeafQueueReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"root.child1.granchild"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"root.child2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp2
init|=
operator|new
name|MockRMApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
comment|// Trying to assign to non leaf queue would return null
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp1
argument_list|,
literal|"root.child1"
argument_list|,
literal|"tintin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp2
argument_list|,
literal|"root.child2"
argument_list|,
literal|"snowy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueuePlacementWithPolicy ()
specifier|public
name|void
name|testQueuePlacementWithPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appId
decl_stmt|;
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|QueuePlacementRule
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Specified
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|User
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|PrimaryGroup
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|SecondaryGroupExistingQueue
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Default
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.user1"
argument_list|,
literal|"root.user3group"
argument_list|,
literal|"root.user4subgroup1"
argument_list|,
literal|"root.user4subgroup2"
argument_list|,
literal|"root.user5subgroup2"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
init|=
operator|new
name|HashMap
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|configuredQueues
operator|.
name|put
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
name|queues
argument_list|)
expr_stmt|;
name|configuredQueues
operator|.
name|put
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|placementPolicy
operator|=
operator|new
name|QueuePlacementPolicy
argument_list|(
name|rules
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"somequeue"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.somequeue"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user3group"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user4subgroup1"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user5subgroup2"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test without specified as first rule
name|rules
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueuePlacementRule
argument_list|>
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|User
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Specified
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Default
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|placementPolicy
operator|=
operator|new
name|QueuePlacementPolicy
argument_list|(
name|rules
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"somequeue"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"somequeue"
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.somequeue"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithMinAlloc ()
specifier|public
name|void
name|testFairShareWithMinAlloc
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueA"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueB"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueue ()
specifier|public
name|void
name|testNestedUserQueue
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"user1group\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"specified\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"nestedUserQueue\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"primaryGroup\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"default\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|user1Leaf
init|=
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp1
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1group.user1"
argument_list|,
name|user1Leaf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareAndWeightsInNestedUserQueueRule ()
specifier|public
name|void
name|testFairShareAndWeightsInNestedUserQueueRule
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"parentq\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"nestedUserQueue\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"specified\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"default\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp2
init|=
operator|new
name|MockRMApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|capacity
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
comment|// create node with 16 G
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|capacity
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// user1,user2 submit their apps to parentq and create user queues
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.parentq"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.parentq"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
comment|// user3 submits app in default queue
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|leafQueues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
for|for
control|(
name|FSLeafQueue
name|leaf
range|:
name|leafQueues
control|)
block|{
if|if
condition|(
name|leaf
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.parentq.user1"
argument_list|)
operator|||
name|leaf
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.parentq.user2"
argument_list|)
condition|)
block|{
comment|// assert that the fair share is 1/4th node1's capacity
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|leaf
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert that the steady fair share is 1/4th node1's capacity
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|leaf
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert weights are equal for both the user queues
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|leaf
operator|.
name|getWeights
argument_list|()
operator|.
name|getWeight
argument_list|(
name|ResourceType
operator|.
name|MEMORY
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSteadyFairShareWithReloadAndNodeAddRemove ()
specifier|public
name|void
name|testSteadyFairShareWithReloadAndNodeAddRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingPolicy>drf</schedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// The steady fair share for all queues should be 0
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6144
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// The steady fair shares for all queues should be updated
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reload the allocation configuration file
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingPolicy>drf</schedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child3\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// The steady fair shares for all queues should be updated
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child3"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the node, steady fair shares should back to 0
name|NodeRemovedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSteadyFairShareWithQueueCreatedRuntime ()
specifier|public
name|void
name|testSteadyFairShareWithQueueCreatedRuntime
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6144
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit one application
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make allocation requests and ensure they are reflected in queue demand.    */
annotation|@
name|Test
DECL|method|testQueueDemandCalculation ()
specifier|public
name|void
name|testQueueDemandCalculation
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|id11
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id11
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id11
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|id21
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id21
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id21
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|id22
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id22
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id22
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|minReqSize
init|=
name|FairSchedulerConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_INCREMENT_ALLOCATION_MB
decl_stmt|;
comment|// First ask, queue1 requests 1 large (minReqSize * 2).
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask1
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request1
init|=
name|createResourceRequest
argument_list|(
name|minReqSize
operator|*
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id11
argument_list|,
name|ask1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Second ask, queue2 requests 1 large + (2 * minReqSize)
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask2
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request2
init|=
name|createResourceRequest
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|request3
init|=
name|createResourceRequest
argument_list|(
name|minReqSize
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ask2
operator|.
name|add
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|ask2
operator|.
name|add
argument_list|(
name|request3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id21
argument_list|,
name|ask2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Third ask, queue2 requests 1 large
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask3
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request4
init|=
name|createResourceRequest
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask3
operator|.
name|add
argument_list|(
name|request4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id22
argument_list|,
name|ask3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queue1"
argument_list|)
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minReqSize
operator|+
literal|2
operator|*
name|minReqSize
operator|+
operator|(
literal|2
operator|*
name|minReqSize
operator|)
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queue2"
argument_list|)
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAdditionAndRemoval ()
specifier|public
name|void
name|testAppAdditionAndRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
name|AppAttemptAddedSchedulerEvent
name|attemptAddedEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|attemptAddedEvent
argument_list|)
expr_stmt|;
comment|// Scheduler should have two queues (the default and the one created for user1)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// That queue should have one app
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Now remove app
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
comment|// Queue should have no apps
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalQueueAllocationFileParsing ()
specifier|public
name|void
name|testHierarchicalQueueAllocationFileParsing
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
throws|,
name|ParserConfigurationException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|leafQueues
init|=
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|leafQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueC"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueD"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure querying for queues didn't create any new ones:
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|leafQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigureRootQueue ()
specifier|public
name|void
name|testConfigureRootQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingPolicy>drf</schedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,1vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,4vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>100</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>120</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionThreshold>.5</fairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>300</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>200</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.6</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSQueue
name|root
init|=
name|queueManager
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getPolicy
argument_list|()
operator|instanceof
name|DominantResourceFairnessPolicy
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100000
argument_list|,
name|root
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|root
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|root
operator|.
name|getFairSharePreemptionThreshold
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
comment|/**    * Make sure containers are chosen to be preempted in the correct order.    */
DECL|method|testChoiceOfPreemptedContainers ()
specifier|public
name|void
name|testChoiceOfPreemptedContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION_INTERVAL
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
operator|+
literal|".allocation.file"
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|MockClock
name|clock
init|=
operator|new
name|MockClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create two nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Queue A and B each request two applications
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
name|app2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|app3
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
name|app4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|true
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|true
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fair"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now new requests arrive from queueC and default
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// We should be able to claw back one container from queueA and queueB each.
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// First verify we are adding containers to preemption list for the app.
comment|// For queueA (fifo), app2 is selected.
comment|// For queueB (fair), app4 is selected.
name|assertTrue
argument_list|(
literal|"App2 should have container to be preempted"
argument_list|,
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App4 should have container to be preempted"
argument_list|,
operator|!
name|Collections
operator|.
name|disjoint
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pretend 15 seconds have passed
name|clock
operator|.
name|tick
argument_list|(
literal|15
argument_list|)
expr_stmt|;
comment|// Trigger a kill by insisting we want containers back
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// At this point the containers should have been killed (since we are not simulating AM)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Inside each app, containers are sorted according to their priorities.
comment|// Containers with priority 4 are preempted for app2 and app4.
name|Set
argument_list|<
name|RMContainer
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|RMContainer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getAllocatedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|4
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|RMContainer
name|container
range|:
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
if|if
condition|(
name|container
operator|.
name|getAllocatedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
literal|4
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Containers with priority=4 in app2 and app4 should be "
operator|+
literal|"preempted."
argument_list|,
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Trigger a kill by insisting we want containers back
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pretend 15 seconds have passed
name|clock
operator|.
name|tick
argument_list|(
literal|15
argument_list|)
expr_stmt|;
comment|// We should be able to claw back another container from A and B each.
comment|// For queueA (fifo), continue preempting from app2.
comment|// For queueB (fair), even app4 has a lowest priority container with p=4, it
comment|// still preempts from app3 as app3 is most over fair share.
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now A and B are below fair share, so preemption shouldn't do anything
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App1 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App2 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App3 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app3
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"App4 should have no container to be preempted"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app4
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionIsNotDelayedToNextRound ()
specifier|public
name|void
name|testPreemptionIsNotDelayedToNextRound
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|PREEMPTION_INTERVAL
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|MockClock
name|clock
init|=
operator|new
name|MockClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>8</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA1\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA2\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node of 8G
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Run apps in queueA.A1 and queueB
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA.queueA1"
argument_list|,
literal|"user1"
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// createSchedulingRequestExistingApplication(1 * 1024, 1, 2, app1);
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueB"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
block|}
comment|// verify if the apps got the containers they requested
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now submit an app in queueA.queueA2
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA.queueA2"
argument_list|,
literal|"user3"
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Let 11 sec pass
name|clock
operator|.
name|tick
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Resource
name|toPreempt
init|=
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA.queueA2"
argument_list|,
literal|false
argument_list|)
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3277
argument_list|,
name|toPreempt
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify if the 3 containers required by queueA2 are preempted in the same
comment|// round
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|toPreempt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app1
argument_list|)
operator|.
name|getPreemptionContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
comment|/**    * Tests the timing of decision to preempt tasks.    */
DECL|method|testPreemptionDecision ()
specifier|public
name|void
name|testPreemptionDecision
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|MockClock
name|clock
init|=
operator|new
name|MockClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create four nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
comment|// Queue A and B each request three containers
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app5
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app6
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
block|}
comment|// Now new requests arrive from queues C and D
name|ApplicationAttemptId
name|app7
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app8
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app9
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app10
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app11
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app12
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|schedC
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueC"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|schedD
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueD"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// After minSharePreemptionTime has passed, they should want to preempt min
comment|// share.
name|clock
operator|.
name|tick
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After fairSharePreemptionTime has passed, they should want to preempt
comment|// fair share.
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Tests the various timing of decision to preempt tasks.    */
DECL|method|testPreemptionDecisionWithVariousTimeout ()
specifier|public
name|void
name|testPreemptionDecisionWithVariousTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|MockClock
name|clock
init|=
operator|new
name|MockClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>0mb,0vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>10</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>25</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>20</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>30</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the min/fair share preemption timeout for each queue
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create one big node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|6
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A takes all resources
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
block|}
comment|// Now new requests arrive from queues B1, B2 and C
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB.queueB2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queueB1
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queueB2
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queueC
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queueC"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// After 5 seconds, queueB1 wants to preempt min share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 10 seconds, queueB2 wants to preempt min share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 15 seconds, queueC wants to preempt min share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 20 seconds, queueB2 should want to preempt fair share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 25 seconds, queueB1 should want to preempt fair share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// After 30 seconds, queueC should want to preempt fair share
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB1
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueB2
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|queueC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackwardsCompatiblePreemptionConfiguration ()
specifier|public
name|void
name|testBackwardsCompatiblePreemptionConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>30</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<fairSharePreemptionTimeout>40</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the min/fair share preemption timeout for each queue
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB1"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueB.queueB2"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"queueC"
argument_list|)
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// If both exist, we take the default one
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"default\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>5</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>25</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<fairSharePreemptionTimeout>30</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|25000
argument_list|,
name|queueMgr
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPreemptionVariablesForQueueCreatedRuntime ()
specifier|public
name|void
name|testPreemptionVariablesForQueueCreatedRuntime
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set preemption variables for the root queue
name|FSParentQueue
name|root
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|root
operator|.
name|setMinSharePreemptionTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|root
operator|.
name|setFairSharePreemptionTimeout
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|root
operator|.
name|setFairSharePreemptionThreshold
argument_list|(
literal|.6f
argument_list|)
expr_stmt|;
comment|// User1 submits one application
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// The user1 queue should inherit the configurations from the root queue
name|FSLeafQueue
name|userQueue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000
argument_list|,
name|userQueue
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15000
argument_list|,
name|userQueue
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|.6f
argument_list|,
name|userQueue
operator|.
name|getFairSharePreemptionThreshold
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMultipleContainersWaitingForReservation ()
specifier|public
name|void
name|testMultipleContainersWaitingForReservation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue3"
argument_list|,
literal|"user3"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// One container should get reservation and the other should get nothing
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testUserMaxRunningApps ()
specifier|public
name|void
name|testUserMaxRunningApps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set max running apps
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request for app 1
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 1 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 2 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request another container for app 1
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Request should be fulfilled
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReservationWhileMultiplePriorities ()
specifier|public
name|void
name|testReservationWhileMultiplePriorities
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
comment|// Cause reservation to be created
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create request at higher priority
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reserved container should still be at lower priority
for|for
control|(
name|RMContainer
name|container
range|:
name|app
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|container
operator|.
name|getReservedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Complete container
name|scheduler
operator|.
name|allocate
argument_list|(
name|attId
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// Schedule at opening
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Reserved container (at lower priority) should be run
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|app
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|liveContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RMContainer
name|liveContainer
range|:
name|liveContainers
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|liveContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclSubmitApplication ()
specifier|public
name|void
name|testAclSubmitApplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set acl's
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps></aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps></aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>norealuserhasthisname</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>norealuserhasthisname</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"norealuserhasthisname"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"norealuserhasthisname2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The application was not allowed"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"The application was allowed"
argument_list|,
name|app2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMultipleNodesSingleRackRequest ()
specifier|public
name|void
name|testMultipleNodesSingleRackRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appId
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|appId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|appId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 1 request with 2 nodes on the same rack. another request with 1 node on
comment|// a different rack
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node2
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node3
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node3
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|appId
argument_list|,
name|asks
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// node 1 checks in
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent1
argument_list|)
expr_stmt|;
comment|// should assign node local
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// node 2 checks in
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// should assign rack local
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testFifoWithinQueue ()
specifier|public
name|void
name|testFifoWithinQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Even if submitted at exact same time, apps will be deterministically
comment|// ordered by name.
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|setPolicy
argument_list|(
operator|new
name|FifoPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// First two containers should go to app 1, third should go to app 2.
comment|// Because tests set assignmultiple to false, each heartbeat assigns a single
comment|// container.
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testMaxAssign ()
specifier|public
name|void
name|testMaxAssign
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16384
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
comment|// set maxAssign to 2: only 2 containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
literal|2
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|2
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// set maxAssign to -1: all remaining containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
operator|-
literal|1
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|8
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testMaxAssignWithZeroMemoryContainers ()
specifier|public
name|void
name|testMaxAssignWithZeroMemoryContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16384
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
comment|// set maxAssign to 2: only 2 containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
literal|2
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|2
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// set maxAssign to -1: all remaining containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
operator|-
literal|1
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|8
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify the behavior of    * {@link FSQueue#assignContainer(FSSchedulerNode)})    *     * Create two queues under root (fifoQueue and fairParent), and two queues    * under fairParent (fairChild1 and fairChild2). Submit two apps to the    * fifoQueue and one each to the fairChild* queues, all apps requiring 4    * containers each of the total 16 container capacity    *     * Assert the number of containers for each app after 4, 8, 12 and 16 updates.    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAssignContainer ()
specifier|public
name|void
name|testAssignContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
specifier|final
name|String
name|fifoQueue
init|=
literal|"fifo"
decl_stmt|;
specifier|final
name|String
name|fairParent
init|=
literal|"fairParent"
decl_stmt|;
specifier|final
name|String
name|fairChild1
init|=
name|fairParent
operator|+
literal|".fairChild1"
decl_stmt|;
specifier|final
name|String
name|fairChild2
init|=
name|fairParent
operator|+
literal|".fairChild2"
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fifoQueue
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fairChild1
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fairChild2
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fifoQueue
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|fifoQueue
argument_list|,
literal|true
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// 4 node updates: fifoQueue should have received 2, and fairChild*
comment|// should have received one each
name|String
name|ERR
init|=
literal|"Wrong number of assigned containers after "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" updates"
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|4
condition|)
block|{
comment|// app1 req still not met
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// app1 req has been met, app4 should be served now
name|assertEquals
argument_list|(
name|ERR
argument_list|,
literal|4
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|-
literal|3
operator|)
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testNotAllowSubmitApplication ()
specifier|public
name|void
name|testNotAllowSubmitApplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set acl's
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps></aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps></aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>userallow</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>userallow</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|appId
init|=
name|this
operator|.
name|APP_ID
operator|++
decl_stmt|;
name|String
name|user
init|=
literal|"usernotallow"
decl_stmt|;
name|String
name|queue
init|=
literal|"queue1"
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|MockApps
operator|.
name|newAppName
argument_list|()
decl_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|submissionContext
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setAMContainerSpec
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
operator|new
name|RMAppImpl
argument_list|(
name|applicationId
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|submissionContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|applicationId
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|MAX_TRIES
init|=
literal|20
decl_stmt|;
name|int
name|numTries
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|application
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|)
operator|&&
name|numTries
operator|<
name|MAX_TRIES
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|numTries
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"The application doesn't reach SUBMITTED."
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|application
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|attId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|queue
argument_list|,
name|user
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|numTries
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|application
operator|.
name|getFinishTime
argument_list|()
operator|==
literal|0
operator|&&
name|numTries
operator|<
name|MAX_TRIES
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|numTries
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
name|application
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationThatDoesntFit ()
specifier|public
name|void
name|testReservationThatDoesntFit
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveNodeUpdatesRootQueueMetrics ()
specifier|public
name|void
name|testRemoveNodeUpdatesRootQueueMetrics
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|addEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|addEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// update shouldn't change things
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|NodeRemovedSchedulerEvent
name|removeEvent
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|removeEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// update shouldn't change things
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStrictLocality ()
specifier|public
name|void
name|testStrictLocality
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|node1UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|node2UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
comment|// no matter how many heartbeats, node2 should never get a container
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then node1 should get the container
name|scheduler
operator|.
name|handle
argument_list|(
name|node1UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelStrictLocality ()
specifier|public
name|void
name|testCancelStrictLocality
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|"rack1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|node2UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
comment|// no matter how many heartbeats, node2 should never get a container
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// relax locality
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|update
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|"rack1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|attId1
argument_list|,
name|update
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// then node2 should get the container
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * If we update our ask to strictly request a node, it doesn't make sense to keep    * a reservation on another.    */
annotation|@
name|Test
DECL|method|testReservationsStrictLocality ()
specifier|public
name|void
name|testReservationsStrictLocality
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node2
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|"rack1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now, make our request node-specific (on a different node)
name|rackRequest
operator|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|"rack1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|anyRequest
operator|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|attId
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|rackRequest
argument_list|,
name|anyRequest
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMoreCpuOnNode ()
specifier|public
name|void
name|testNoMoreCpuOnNode
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicDRFAssignment ()
specifier|public
name|void
name|testBasicDRFAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|8192
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId2
argument_list|)
decl_stmt|;
name|DominantResourceFairnessPolicy
name|drfPolicy
init|=
operator|new
name|DominantResourceFairnessPolicy
argument_list|()
decl_stmt|;
name|drfPolicy
operator|.
name|initialize
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// First both apps get a container
comment|// Then the first gets another container because its dominant share of
comment|// 2048/8192 is less than the other's of 2/5
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two apps on one queue, one app on another    */
annotation|@
name|Test
DECL|method|testBasicDRFWithQueues ()
specifier|public
name|void
name|testBasicDRFWithQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|8192
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|3072
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId3
argument_list|)
decl_stmt|;
name|DominantResourceFairnessPolicy
name|drfPolicy
init|=
operator|new
name|DominantResourceFairnessPolicy
argument_list|()
decl_stmt|;
name|drfPolicy
operator|.
name|initialize
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDRFHierarchicalQueues ()
specifier|public
name|void
name|testDRFHierarchicalQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|12288
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|3074
argument_list|,
literal|1
argument_list|,
literal|"queue1.subqueue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|3
argument_list|,
literal|"queue1.subqueue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId3
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
literal|"queue1.subqueue2"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId4
argument_list|)
decl_stmt|;
name|DominantResourceFairnessPolicy
name|drfPolicy
init|=
operator|new
name|DominantResourceFairnessPolicy
argument_list|()
decl_stmt|;
name|drfPolicy
operator|.
name|initialize
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1.subqueue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app1 gets first container because it asked first
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app4 gets second container because it's on queue2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app4 gets another container because queue2's dominant share of memory
comment|// is still less than queue1's of cpu
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app3 gets one because queue1 gets one and queue1.subqueue2 is behind
comment|// queue1.subqueue1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app4 would get another one, but it doesn't have any requests
comment|// queue1.subqueue2 is still using less than queue1.subqueue1, so it
comment|// gets another
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// queue1.subqueue1 is behind again, so it gets one, which it gives to app2
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// at this point, we've used all our CPU up, so nobody else should get a container
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHostPortNodeName ()
specifier|public
name|void
name|testHostPortNodeName
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getNodeID
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|node1
operator|.
name|getNodeID
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|node1UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|node2UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
comment|// no matter how many heartbeats, node2 should never get a container
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then node1 should get the container
name|scheduler
operator|.
name|handle
argument_list|(
name|node1UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAppRunnable (ApplicationAttemptId attId, boolean runnable)
specifier|private
name|void
name|verifyAppRunnable
parameter_list|(
name|ApplicationAttemptId
name|attId
parameter_list|,
name|boolean
name|runnable
parameter_list|)
block|{
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue
init|=
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSAppAttempt
argument_list|>
name|runnableApps
init|=
name|queue
operator|.
name|getRunnableAppSchedulables
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSAppAttempt
argument_list|>
name|nonRunnableApps
init|=
name|queue
operator|.
name|getNonRunnableAppSchedulables
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|runnable
argument_list|,
name|runnableApps
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|runnable
argument_list|,
name|nonRunnableApps
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueNumRunnable (String queueName, int numRunnableInQueue, int numNonRunnableInQueue)
specifier|private
name|void
name|verifyQueueNumRunnable
parameter_list|(
name|String
name|queueName
parameter_list|,
name|int
name|numRunnableInQueue
parameter_list|,
name|int
name|numNonRunnableInQueue
parameter_list|)
block|{
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|queueName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numRunnableInQueue
argument_list|,
name|queue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numNonRunnableInQueue
argument_list|,
name|queue
operator|.
name|getNonRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserAndQueueMaxRunningApps ()
specifier|public
name|void
name|testUserAndQueueMaxRunningApps
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>2</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// exceeds user limit
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// exceeds queue limit
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Remove app 1 and both app 2 and app 4 should becomes runnable in its place
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// A new app to queue1 should not be runnable
name|ApplicationAttemptId
name|attId5
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxAMShare ()
specifier|public
name|void
name|testQueueMaxAMShare
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.2</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|20480
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue1's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue1
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Resource
name|amResource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|amResource3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1860
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|amPriority
init|=
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
decl_stmt|;
comment|// Exceeds no limits
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app1
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds no limits
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId2
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app2
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds queue limit
name|ApplicationAttemptId
name|attId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId3
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId3
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app3
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Still can run non-AM container
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1 should have two running containers"
argument_list|,
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove app1, app3's AM should become running
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM should be finished"
argument_list|,
literal|0
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds queue limit
name|ApplicationAttemptId
name|attId4
init|=
name|createAppAttemptId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId4
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource2
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|amPriority
argument_list|,
name|attId4
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM requests 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|app4
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds queue limit
name|ApplicationAttemptId
name|attId5
init|=
name|createAppAttemptId
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId5
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource2
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|amPriority
argument_list|,
name|attId5
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app5
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId5
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM requests 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|app5
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove un-running app doesn't affect others
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent4
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId4
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove app2 and app3, app5's AM should become running
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent2
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent3
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId3
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM should be finished"
argument_list|,
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should be finished"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check amResource normalization
name|ApplicationAttemptId
name|attId6
init|=
name|createAppAttemptId
argument_list|(
literal|6
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId6
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource3
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1860
argument_list|,
literal|2
argument_list|,
name|amPriority
argument_list|,
name|attId6
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app6
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId6
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app6
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM requests 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|app6
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove all apps
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent5
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId5
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent6
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId6
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent5
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent6
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 0"
argument_list|,
literal|0
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxAMShareDefault ()
specifier|public
name|void
name|testQueueMaxAMShareDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.4</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue3\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue5\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue1's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue1
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue2
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue2's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue2
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue3
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue3"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue3's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue3
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue4
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue4"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue4's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue4
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue5
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue5"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue5's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue5
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"root.queue3"
argument_list|,
literal|"root.queue4"
argument_list|,
literal|"root.queue5"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|queues
control|)
block|{
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
name|queue
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
block|}
name|Resource
name|amResource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|amPriority
init|=
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
decl_stmt|;
comment|// The fair share is 2048 MB, and the default maxAMShare is 0.5f,
comment|// so the AM is accepted.
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"queue1"
argument_list|,
literal|"test1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app1
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now the fair share is 1639 MB, and the maxAMShare is 0.4f,
comment|// so the AM is not accepted.
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"queue2"
argument_list|,
literal|"test1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId2
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app2
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue2's AM resource usage should be 0 MB memory"
argument_list|,
literal|0
argument_list|,
name|queue2
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxRunningAppsHierarchicalQueues ()
specifier|public
name|void
name|testMaxRunningAppsHierarchicalQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|MockClock
name|clock
init|=
operator|new
name|MockClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"sub1\"></queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"sub2\"></queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"sub3\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub3"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds queue1 limit
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds sub3 limit
name|ApplicationAttemptId
name|attId5
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub3"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Even though the app was removed from sub3, the app from sub2 gets to go
comment|// because it came in first
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now test removal of a non-runnable app
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent2
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId5
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|maxRunningEnforcer
operator|.
name|usersNonRunnableApps
operator|.
name|get
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify app gone in queue accounting
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify it doesn't become runnable when there would be space for it
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent3
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId4
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent3
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
DECL|method|testContinuousScheduling ()
specifier|public
name|void
name|testContinuousScheduling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set continuous scheduling enabled
name|FairScheduler
name|fs
init|=
operator|new
name|FairScheduler
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|fs
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|start
argument_list|()
expr_stmt|;
name|fs
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Continuous scheduling should be enabled."
argument_list|,
name|fs
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add two nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|fs
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|fs
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// available resource
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|fs
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
comment|// send application request
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|fs
operator|.
name|addApplication
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue11"
argument_list|,
literal|"user11"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|addApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// waiting for continuous_scheduler_sleep_time
comment|// at least one pass
name|Thread
operator|.
name|sleep
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
operator|.
name|getContinuousSchedulingSleepMs
argument_list|()
operator|+
literal|500
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|fs
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
comment|// Wait until app gets resources.
while|while
condition|(
name|app
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
condition|)
block|{ }
comment|// check consumption
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|app
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// another request
name|request
operator|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ask
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fs
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Wait until app gets resources
while|while
condition|(
name|app
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
condition|)
block|{ }
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|app
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app
operator|.
name|getCurrentConsumption
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// 2 containers should be assigned to 2 nodes
name|Set
argument_list|<
name|NodeId
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<
name|NodeId
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|RMContainer
argument_list|>
name|it
init|=
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testContinuousSchedulingWithNodeRemoved ()
specifier|public
name|void
name|testContinuousSchedulingWithNodeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable continuous scheduling, will invoke continuous scheduling once manually
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Continuous scheduling should be disabled."
argument_list|,
operator|!
name|scheduler
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add two nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We should have two alive nodes."
argument_list|,
literal|2
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove one node
name|NodeRemovedSchedulerEvent
name|removeNode1
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|removeNode1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"We should only have one alive node."
argument_list|,
literal|1
argument_list|,
name|scheduler
operator|.
name|getNumClusterNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invoke the continuous scheduling once
try|try
block|{
name|scheduler
operator|.
name|continuousSchedulingAttempt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Exception happened when doing continuous scheduling. "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDontAllowUndeclaredPools ()
specifier|public
name|void
name|testDontAllowUndeclaredPools
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"jerry\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|jerryQueue
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"jerry"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|defaultQueue
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Should get put into jerry
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"jerry"
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jerryQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should get forced into default
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"newqueue"
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jerryQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|defaultQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Would get put into someuser because of user-as-default-queue, but should
comment|// be forced into default
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"someuser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|jerryQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should get put into jerry because of user-as-default-queue
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"jerry"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jerryQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|defaultQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultRuleInitializesProperlyWhenPolicyNotConfigured ()
specifier|public
name|void
name|testDefaultRuleInitializesProperlyWhenPolicyNotConfigured
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This test verifies if default rule in queue placement policy
comment|// initializes properly when policy is not configured and
comment|// undeclared pools is not allowed.
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create an alloc file with no queue placement policy
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
name|scheduler
operator|.
name|allocConf
operator|.
name|placementPolicy
operator|.
name|getRules
argument_list|()
decl_stmt|;
for|for
control|(
name|QueuePlacementRule
name|rule
range|:
name|rules
control|)
block|{
if|if
condition|(
name|rule
operator|instanceof
name|Default
condition|)
block|{
name|Default
name|defaultRule
init|=
operator|(
name|Default
operator|)
name|rule
decl_stmt|;
name|assertNotNull
argument_list|(
name|defaultRule
operator|.
name|defaultQueueName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRecoverRequestAfterPreemption ()
specifier|public
name|void
name|testRecoverRequestAfterPreemption
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|WAIT_TIME_BEFORE_KILL
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|MockClock
name|clock
init|=
operator|new
name|MockClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Priority
name|priority
init|=
name|Priority
operator|.
name|newInstance
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|int
name|GB
init|=
literal|1024
decl_stmt|;
comment|// Create Node and raised Node Added event
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|0
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
comment|// Create 3 container requests and place it in ask
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|nodeLocalRequest
init|=
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|,
name|host
argument_list|,
name|priority
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackLocalRequest
init|=
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
name|priority
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|offRackRequest
init|=
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|priority
operator|.
name|getPriority
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|nodeLocalRequest
argument_list|)
expr_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|rackLocalRequest
argument_list|)
expr_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|offRackRequest
argument_list|)
expr_stmt|;
comment|// Create Request and update
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createSchedulingRequest
argument_list|(
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
name|ask
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
name|NodeUpdateSchedulerEvent
name|nodeUpdate
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
comment|// ResourceRequest will be empty once NodeUpdate is completed
name|Assert
operator|.
name|assertNull
argument_list|(
name|app
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId1
init|=
name|ContainerId
operator|.
name|newInstance
argument_list|(
name|appAttemptId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RMContainer
name|rmContainer
init|=
name|app
operator|.
name|getRMContainer
argument_list|(
name|containerId1
argument_list|)
decl_stmt|;
comment|// Create a preempt event and register for preemption
name|scheduler
operator|.
name|warnOrKillContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
comment|// Wait for few clock ticks
name|clock
operator|.
name|tick
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// preempt now
name|scheduler
operator|.
name|warnOrKillContainer
argument_list|(
name|rmContainer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
init|=
name|rmContainer
operator|.
name|getResourceRequests
argument_list|()
decl_stmt|;
comment|// Once recovered, resource request will be present again in app
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|requests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ResourceRequest
name|request
range|:
name|requests
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getResourceRequest
argument_list|(
name|priority
argument_list|,
name|request
operator|.
name|getResourceName
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Send node heartbeat
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Container
argument_list|>
name|containers
init|=
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
operator|.
name|getContainers
argument_list|()
decl_stmt|;
comment|// Now with updated ResourceRequest, a container is allocated for AM.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|containers
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
annotation|@
name|Test
DECL|method|testBlacklistNodes ()
specifier|public
name|void
name|testBlacklistNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|0
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createSchedulingRequest
argument_list|(
name|GB
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
comment|// Verify the blacklist can be updated independent of requesting containers
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|app
operator|.
name|isBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|isBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|update
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
name|node
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// Verify a container does not actually get placed on the blacklisted host
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|update
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|app
operator|.
name|isBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify a container gets placed on the empty blacklist
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|update
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|app
operator|.
name|isBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
name|GB
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAppsInQueue ()
specifier|public
name|void
name|testGetAppsInQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1.subqueue1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1.subqueue2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"queue1.subqueue1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId1
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// with and without root prefix should work
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root.queue1.subqueue1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId1
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId3
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// with and without root prefix should work
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root.user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId3
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// apps in subqueues should be included
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"queue1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appAttIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appAttIds
operator|.
name|contains
argument_list|(
name|appAttId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appAttIds
operator|.
name|contains
argument_list|(
name|appAttId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddAndRemoveAppFromFairScheduler ()
specifier|public
name|void
name|testAddAndRemoveAppFromFairScheduler
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|TestSchedulerUtils
operator|.
name|verifyAppAddedAndRemovedFromScheduler
argument_list|(
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
argument_list|,
name|scheduler
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveRunnableApp ()
specifier|public
name|void
name|testMoveRunnableApp
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|targetQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationId
name|appId
init|=
name|appAttId
operator|.
name|getApplicationId
argument_list|()
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3072
argument_list|,
literal|3
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appId
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|targetQueue
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|oldQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|,
name|targetQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|3072
argument_list|,
literal|3
argument_list|)
argument_list|,
name|targetQueue
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveNonRunnableApp ()
specifier|public
name|void
name|testMoveNonRunnableApp
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|targetQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|queueMaxApps
operator|.
name|put
argument_list|(
literal|"root.queue1"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|queueMaxApps
operator|.
name|put
argument_list|(
literal|"root.queue2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|oldQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|targetQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMoveMakesAppRunnable ()
specifier|public
name|void
name|testMoveMakesAppRunnable
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|targetQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|queueMaxApps
operator|.
name|put
argument_list|(
literal|"root.queue1"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|oldQueue
operator|.
name|getNonRunnableAppSchedulables
argument_list|()
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|oldQueue
operator|.
name|getNonRunnableAppSchedulables
argument_list|()
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|targetQueue
operator|.
name|getNonRunnableAppSchedulables
argument_list|()
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|targetQueue
operator|.
name|getRunnableAppSchedulables
argument_list|()
operator|.
name|contains
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|targetQueue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueMgr
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveWouldViolateMaxAppsConstraints ()
specifier|public
name|void
name|testMoveWouldViolateMaxAppsConstraints
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|queueMaxApps
operator|.
name|put
argument_list|(
literal|"root.queue2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveWouldViolateMaxResourcesConstraints ()
specifier|public
name|void
name|testMoveWouldViolateMaxResourcesConstraints
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|maxQueueResources
operator|.
name|put
argument_list|(
literal|"root.queue2"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveToNonexistentQueue ()
specifier|public
name|void
name|testMoveToNonexistentQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowestCommonAncestorForNonRootParent ()
specifier|public
name|void
name|testLowestCommonAncestorForNonRootParent
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|aQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|bQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|aQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.a"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.b"
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSParentQueue
name|queue1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|bQueue
argument_list|)
expr_stmt|;
name|FSQueue
name|ancestorQueue
init|=
name|scheduler
operator|.
name|findLowestCommonAncestorQueue
argument_list|(
name|aQueue
argument_list|,
name|bQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ancestorQueue
argument_list|,
name|queue1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowestCommonAncestorRootParent ()
specifier|public
name|void
name|testLowestCommonAncestorRootParent
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|aQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|bQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|aQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.a"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.b"
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSParentQueue
name|queue1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|bQueue
argument_list|)
expr_stmt|;
name|FSQueue
name|ancestorQueue
init|=
name|scheduler
operator|.
name|findLowestCommonAncestorQueue
argument_list|(
name|aQueue
argument_list|,
name|bQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ancestorQueue
argument_list|,
name|queue1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowestCommonAncestorDeeperHierarchy ()
specifier|public
name|void
name|testLowestCommonAncestorDeeperHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|FSQueue
name|aQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSQueue
name|bQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSQueue
name|a1Queue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSQueue
name|b1Queue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|a1Queue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.a.a1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|b1Queue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.b.b1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|aQueue
operator|.
name|getChildQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a1Queue
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bQueue
operator|.
name|getChildQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|b1Queue
argument_list|)
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSParentQueue
name|queue1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|bQueue
argument_list|)
expr_stmt|;
name|FSQueue
name|ancestorQueue
init|=
name|scheduler
operator|.
name|findLowestCommonAncestorQueue
argument_list|(
name|a1Queue
argument_list|,
name|b1Queue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ancestorQueue
argument_list|,
name|queue1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testThreadLifeCycle ()
specifier|public
name|void
name|testThreadLifeCycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|updateThread
init|=
name|scheduler
operator|.
name|updateThread
decl_stmt|;
name|Thread
name|schedulingThread
init|=
name|scheduler
operator|.
name|schedulingThread
decl_stmt|;
name|assertTrue
argument_list|(
name|updateThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|schedulingThread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|int
name|numRetries
init|=
literal|100
decl_stmt|;
while|while
condition|(
name|numRetries
operator|--
operator|>
literal|0
operator|&&
operator|(
name|updateThread
operator|.
name|isAlive
argument_list|()
operator|||
name|schedulingThread
operator|.
name|isAlive
argument_list|()
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
name|assertNotEquals
argument_list|(
literal|"One of the threads is still alive"
argument_list|,
literal|0
argument_list|,
name|numRetries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerfMetricsInited ()
specifier|public
name|void
name|testPerfMetricsInited
parameter_list|()
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|MetricsCollectorImpl
name|collector
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|fsOpDurations
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of perf metrics"
argument_list|,
literal|1
argument_list|,
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

