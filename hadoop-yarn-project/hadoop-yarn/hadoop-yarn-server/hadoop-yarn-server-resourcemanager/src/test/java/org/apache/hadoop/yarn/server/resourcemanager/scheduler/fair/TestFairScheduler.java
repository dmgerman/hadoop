begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ha
operator|.
name|HAServiceProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|impl
operator|.
name|MetricsCollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetworkTopology
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|GroupMappingServiceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|EventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|SchedulerInvalidResoureRequestException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRuntimeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|YarnAuthorizationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockRM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|NodeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|RMContextImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|recovery
operator|.
name|MemoryRMStateStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|MockRMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainerEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNodeResourceUpdateEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|AbstractYarnScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|QueueMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerApplicationAttempt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|SchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|TestSchedulerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAttemptRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|ContainerExpiredSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|QueuePlacementRule
operator|.
name|Default
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|DominantResourceFairnessPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FifoPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|utils
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ControlledClock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|ResourceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|class|TestFairScheduler
specifier|public
class|class
name|TestFairScheduler
extends|extends
name|FairSchedulerTestBase
block|{
DECL|field|GB
specifier|private
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
DECL|field|ALLOC_FILE
specifier|private
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-queues"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|()
expr_stmt|;
name|conf
operator|=
name|createConfiguration
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getStateStore
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// to initialize the master key
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getContainerTokenSecretManager
argument_list|()
operator|.
name|rollMasterKey
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|resourceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
name|QueueMetrics
operator|.
name|clearQueueMetrics
argument_list|()
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|YarnAuthorizationProvider
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testConfValidation ()
specifier|public
name|void
name|testConfValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|2048
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected because the min memory allocation is"
operator|+
literal|" larger than the max memory allocation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// Exception is expected.
name|assertTrue
argument_list|(
literal|"The thrown exception is not the expected one."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid resource scheduler memory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
operator|new
name|YarnConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|serviceInit
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected because the min vcores allocation is"
operator|+
literal|" larger than the max vcores allocation."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRuntimeException
name|e
parameter_list|)
block|{
comment|// Exception is expected.
name|assertTrue
argument_list|(
literal|"The thrown exception is not the expected one."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Invalid resource scheduler vcores"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testLoadConfigurationOnInitialize ()
specifier|public
name|void
name|testLoadConfigurationOnInitialize
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|MAX_ASSIGN
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|SIZE_BASED_WEIGHT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_NODE
argument_list|,
literal|.5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_RACK
argument_list|,
literal|.7
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|CONTINUOUS_SCHEDULING_SLEEP_MS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_DELAY_RACK_MS
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_DELAY_NODE_MS
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|assignMultiple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|maxAssign
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|sizeBasedWeight
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.5
argument_list|,
name|scheduler
operator|.
name|nodeLocalityThreshold
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.7
argument_list|,
name|scheduler
operator|.
name|rackLocalityThreshold
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The continuous scheduling should be enabled"
argument_list|,
name|scheduler
operator|.
name|continuousSchedulingEnabled
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|scheduler
operator|.
name|continuousSchedulingSleepMs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|scheduler
operator|.
name|nodeLocalityDelayMs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5000
argument_list|,
name|scheduler
operator|.
name|rackLocalityDelayMs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|128
argument_list|,
name|scheduler
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonMinZeroResourcesSettings ()
specifier|public
name|void
name|testNonMinZeroResourcesSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|256
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMinZeroResourcesSettings ()
specifier|public
name|void
name|testMinZeroResourcesSettings
parameter_list|()
throws|throws
name|IOException
block|{
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_INCREMENT_ALLOCATION_VCORES
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ResourceUtils
operator|.
name|resetResourceTypes
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getIncrementResourceCapability
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregateCapacityTracking ()
specifier|public
name|void
name|testAggregateCapacityTracking
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add another node
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|512
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the first node
name|NodeRemovedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleFairShareCalculation ()
specifier|public
name|void
name|testSimpleFairShareCalculation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Have two queues which want entire cluster capacity
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Divided three ways - between the two queues and the default queue
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3414
argument_list|,
name|p
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testQueueMaximumCapacityAllocations ()
specifier|public
name|void
name|testQueueMaximumCapacityAllocations
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|int
name|tooHighQueueAllocation
init|=
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
operator|+
literal|1
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxContainerAllocation>512 mb 1 vcores</maxContainerAllocation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxContainerAllocation>2048 mb 3 vcores</maxContainerAllocation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueE\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxContainerAllocation>"
operator|+
name|tooHighQueueAllocation
operator|+
literal|" mb 1 vcores</maxContainerAllocation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueA"
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueA"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueB"
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueB"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueC"
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueC"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueC.queueD"
argument_list|)
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueC.queueD"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|(
literal|"root.queueE"
argument_list|)
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNormalizationUsingQueueMaximumAllocation ()
specifier|public
name|void
name|testNormalizationUsingQueueMaximumAllocation
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|queueMaxAllocation
init|=
literal|4096
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxContainerAllocation>"
operator|+
name|queueMaxAllocation
operator|+
literal|" mb 1 vcores"
operator|+
literal|"</maxContainerAllocation>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|allocateAppAttempt
argument_list|(
literal|"root.queueA"
argument_list|,
literal|1
argument_list|,
name|queueMaxAllocation
operator|+
literal|1024
argument_list|)
expr_stmt|;
name|allocateAppAttempt
argument_list|(
literal|"root.queueB"
argument_list|,
literal|2
argument_list|,
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
operator|+
literal|1024
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSQueue
name|queueToCheckA
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queueA"
argument_list|)
decl_stmt|;
name|FSQueue
name|queueToCheckB
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queueB"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|queueMaxAllocation
argument_list|,
name|queueToCheckA
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
name|queueToCheckB
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|allocateAppAttempt (String queueName, int id, int memorySize)
specifier|private
name|void
name|allocateAppAttempt
parameter_list|(
name|String
name|queueName
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|memorySize
parameter_list|)
block|{
name|ApplicationAttemptId
name|id11
init|=
name|createAppAttemptId
argument_list|(
name|id
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|id11
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id11
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|queueName
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id11
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask1
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request1
init|=
name|createResourceRequest
argument_list|(
name|memorySize
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id11
argument_list|,
name|ask1
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test fair shares when max resources are set but are too high to impact    * the shares.    *    * @throws IOException if scheduler reinitialization fails    */
annotation|@
name|Test
DECL|method|testFairShareWithHighMaxResources ()
specifier|public
name|void
name|testFairShareWithHighMaxResources
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB maxResources,
comment|// the sum of queueA and queueB maxResources is more than
comment|// Integer.MAX_VALUE.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>1073741824 mb 1000 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>1073741824 mb 1000 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.75</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 1 * 1024.
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 6 * 1024
name|createSchedulingRequest
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.25, so its fair share should be 2 * 1024.
name|assertEquals
argument_list|(
literal|"Queue A did not get its expected fair share"
argument_list|,
literal|2
operator|*
literal|1024
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.75, so its fair share should be 6 * 1024.
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue B did not get its expected fair share"
argument_list|,
literal|6
operator|*
literal|1024
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test fair shares when max resources are set and are low enough to impact    * the shares.    *    * @throws IOException if scheduler reinitialization fails    */
annotation|@
name|Test
DECL|method|testFairShareWithLowMaxResources ()
specifier|public
name|void
name|testFairShareWithLowMaxResources
parameter_list|()
throws|throws
name|IOException
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>1024 mb 1 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.75</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>3072 mb 3 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.5, so its fair share should be 6GB, but it's
comment|// capped at 1GB.
name|assertEquals
argument_list|(
literal|"Queue A did not get its expected fair share"
argument_list|,
literal|1
operator|*
literal|1024
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.5, so its fair share should be 2GB, but the
comment|// other queue is capped at 1GB, so queueB's share is 7GB,
comment|// capped at 3GB.
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue B did not get its expected fair share"
argument_list|,
literal|3
operator|*
literal|1024
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 1 should be running with 1 container
name|assertEquals
argument_list|(
literal|"App 1 is not running with the correct number of containers"
argument_list|,
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// App 2 should be running with 3 containers
name|assertEquals
argument_list|(
literal|"App 2 is not running with the correct number of containers"
argument_list|,
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the child max resource settings.    *    * @throws IOException if scheduler reinitialization fails    */
annotation|@
name|Test
DECL|method|testChildMaxResources ()
specifier|public
name|void
name|testChildMaxResources
parameter_list|()
throws|throws
name|IOException
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxChildResources>2048mb,2vcores</maxChildResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA.queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queueA.queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
comment|// Send 4 node heartbeats, this should be enough to allocate 4 containers
comment|// As we have 2 queues with capacity: 2GB,2cores, we could only have
comment|// 4 containers at most
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|drainEventsOnRM
argument_list|()
expr_stmt|;
comment|// Apps should be running with 2 containers
name|assertEquals
argument_list|(
literal|"App 1 is not running with the correct number of containers"
argument_list|,
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App 2 is not running with the correct number of containers"
argument_list|,
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//ensure that a 5th node heartbeat does not allocate more containers
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|drainEventsOnRM
argument_list|()
expr_stmt|;
comment|// Apps should be running with 2 containers
name|assertEquals
argument_list|(
literal|"App 1 is not running with the correct number of containers"
argument_list|,
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App 2 is not running with the correct number of containers"
argument_list|,
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxChildResources>3072mb,3vcores</maxChildResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Send 2 node heartbeats, this should be enough to allocate 2
comment|// more containers.
comment|// As we have 2 queues with capacity: 3GB,3cores, we could only have
comment|// 6 containers at most
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|drainEventsOnRM
argument_list|()
expr_stmt|;
comment|// Apps should be running with 3 containers now
name|assertEquals
argument_list|(
literal|"App 1 is not running with the correct number of containers"
argument_list|,
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App 2 is not running with the correct number of containers"
argument_list|,
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxChildResources>1024mb,1vcores</maxChildResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//ensure that a 7th node heartbeat does not allocate more containers
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|drainEventsOnRM
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|drainEventsOnRM
argument_list|()
expr_stmt|;
comment|// Apps still should be running with 3 containers because we don't preempt
name|assertEquals
argument_list|(
literal|"App 1 is not running with the correct number of containers"
argument_list|,
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App 2 is not running with the correct number of containers"
argument_list|,
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|drainEventsOnRM ()
specifier|private
name|void
name|drainEventsOnRM
parameter_list|()
block|{
if|if
condition|(
name|resourceManager
operator|instanceof
name|MockRM
condition|)
block|{
operator|(
operator|(
name|MockRM
operator|)
name|resourceManager
operator|)
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFairShareWithZeroWeight ()
specifier|public
name|void
name|testFairShareWithZeroWeight
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB weight zero.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 2 * 1024.
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 6 * 1024
name|createSchedulingRequest
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.0, so its fair share should be 0.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.0, so its fair share should be 0.
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test if we compute the maximum AM resource correctly.    *    * @throws IOException if scheduler reinitialization fails    */
annotation|@
name|Test
DECL|method|testComputeMaxAMResource ()
specifier|public
name|void
name|testComputeMaxAMResource
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueFSZeroWithMax\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.5</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>4096 mb 4 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueFSZeroWithAVL\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.5</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueFSNonZero\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.5</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>drf"
operator|+
literal|"</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|memCapacity
init|=
literal|20
operator|*
name|GB
decl_stmt|;
name|int
name|cpuCapacity
init|=
literal|20
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|memCapacity
argument_list|,
name|cpuCapacity
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Resource
name|amResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|amPriority
init|=
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
decl_stmt|;
comment|// queueFSZeroWithMax
name|FSLeafQueue
name|queueFSZeroWithMax
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueFSZeroWithMax"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"queueFSZeroWithMax"
argument_list|,
literal|"user1"
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// queueFSZeroWithMax's weight is 0.0, so its fair share should be 0, we use
comment|// the min(maxShare, available resource) to compute maxAMShare, in this
comment|// case, we use maxShare, since it is smaller than available resource.
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithMax's fair share should be zero"
argument_list|,
literal|0
argument_list|,
name|queueFSZeroWithMax
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|expectedAMResource
init|=
name|Resources
operator|.
name|multiplyAndRoundUp
argument_list|(
name|queueFSZeroWithMax
operator|.
name|getMaxShare
argument_list|()
argument_list|,
name|queueFSZeroWithMax
operator|.
name|getMaxAMShare
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithMax's maximum AM resource should be "
operator|+
literal|"maxShare * maxAMShare"
argument_list|,
name|expectedAMResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|queueFSZeroWithMax
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithMax's maximum AM resource should be "
operator|+
literal|"maxShare * maxAMShare"
argument_list|,
name|expectedAMResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|queueFSZeroWithMax
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareVCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithMax's AM resource usage should be the same to "
operator|+
literal|"AM resource request"
argument_list|,
name|amResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|queueFSZeroWithMax
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAMResourceUsageMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueFSZeroWithAVL
name|amResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queueFSZeroWithAVL
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueFSZeroWithAVL"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"queueFSZeroWithAVL"
argument_list|,
literal|"user1"
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// queueFSZeroWithAVL's weight is 0.0, so its fair share is 0, and we use
comment|// the min(maxShare, available resource) to compute maxAMShare, in this
comment|// case, we use available resource since it is smaller than the
comment|// default maxShare.
name|expectedAMResource
operator|=
name|Resources
operator|.
name|multiplyAndRoundUp
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|memCapacity
operator|-
name|amResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|cpuCapacity
operator|-
name|amResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
argument_list|,
name|queueFSZeroWithAVL
operator|.
name|getMaxAMShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithAVL's fair share should be zero"
argument_list|,
literal|0
argument_list|,
name|queueFSZeroWithAVL
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithAVL's maximum AM resource should be "
operator|+
literal|" available resource * maxAMShare"
argument_list|,
name|expectedAMResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|queueFSZeroWithAVL
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithAVL's maximum AM resource should be "
operator|+
literal|" available resource * maxAMShare"
argument_list|,
name|expectedAMResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|queueFSZeroWithAVL
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareVCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSZeroWithMax's AM resource usage should be the same to "
operator|+
literal|"AM resource request"
argument_list|,
name|amResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|queueFSZeroWithAVL
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAMResourceUsageMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueFSNonZero
name|amResource
operator|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queueFSNonZero
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueFSNonZero"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId3
argument_list|,
literal|"queueFSNonZero"
argument_list|,
literal|"user1"
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// queueFSNonZero's weight is 1, so its fair share is not 0, and we use the
comment|// fair share to compute maxAMShare
name|assertNotEquals
argument_list|(
literal|"QueueFSNonZero's fair share shouldn't be zero"
argument_list|,
literal|0
argument_list|,
name|queueFSNonZero
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|expectedAMResource
operator|=
name|Resources
operator|.
name|multiplyAndRoundUp
argument_list|(
name|queueFSNonZero
operator|.
name|getFairShare
argument_list|()
argument_list|,
name|queueFSNonZero
operator|.
name|getMaxAMShare
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSNonZero's maximum AM resource should be "
operator|+
literal|" fair share * maxAMShare"
argument_list|,
name|expectedAMResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|queueFSNonZero
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSNonZero's maximum AM resource should be "
operator|+
literal|" fair share * maxAMShare"
argument_list|,
name|expectedAMResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
name|queueFSNonZero
operator|.
name|getMetrics
argument_list|()
operator|.
name|getMaxAMShareVCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"QueueFSNonZero's AM resource usage should be the same to "
operator|+
literal|"AM resource request"
argument_list|,
name|amResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
name|queueFSNonZero
operator|.
name|getMetrics
argument_list|()
operator|.
name|getAMResourceUsageMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithZeroWeightNoneZeroMinRes ()
specifier|public
name|void
name|testFairShareWithZeroWeightNoneZeroMinRes
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB weight zero.
comment|// set queueA and queueB minResources 1.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 2 * 1024.
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 6 * 1024
name|createSchedulingRequest
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.0 and minResources is 1,
comment|// so its fair share should be 1 (minShare).
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.0 and minResources is 1,
comment|// so its fair share should be 1 (minShare).
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithNoneZeroWeightNoneZeroMinRes ()
specifier|public
name|void
name|testFairShareWithNoneZeroWeightNoneZeroMinRes
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set queueA and queueB weight 0.5.
comment|// set queueA and queueB minResources 1024.
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.5</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.5</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 4 * 1024.
name|createSchedulingRequest
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 4 * 1024
name|createSchedulingRequest
argument_list|(
literal|4
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// queueA's weight is 0.5 and minResources is 1024,
comment|// so its fair share should be 4096.
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// queueB's weight is 0.5 and minResources is 1024,
comment|// so its fair share should be 4096.
name|queue
operator|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|queue
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueInfo ()
specifier|public
name|void
name|testQueueInfo
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.75</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 1 * 1024.
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// Queue B wants 6 * 1024
name|createSchedulingRequest
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Capacity should be the same as weight of Queue,
comment|// because the sum of all active Queues' weight are 1.
comment|// Before NodeUpdate Event, CurrentCapacity should be 0
name|QueueInfo
name|queueInfo
init|=
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.25f
argument_list|,
name|queueInfo
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|queueInfo
operator|.
name|getCurrentCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
comment|// test queueMetrics
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueInfo
operator|.
name|getQueueStatistics
argument_list|()
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueInfo
operator|.
name|getQueueStatistics
argument_list|()
operator|.
name|getAllocatedMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|queueInfo
operator|=
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75f
argument_list|,
name|queueInfo
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|queueInfo
operator|.
name|getCurrentCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
comment|// Each NodeUpdate Event will only assign one container.
comment|// To assign two containers, call handle NodeUpdate Event twice.
name|NodeUpdateSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// After NodeUpdate Event, CurrentCapacity for queueA should be 1/2=0.5
comment|// and CurrentCapacity for queueB should be 6/6=1.
name|queueInfo
operator|=
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.25f
argument_list|,
name|queueInfo
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|queueInfo
operator|.
name|getCurrentCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
comment|// test queueMetrics
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueInfo
operator|.
name|getQueueStatistics
argument_list|()
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|queueInfo
operator|.
name|getQueueStatistics
argument_list|()
operator|.
name|getAllocatedMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
name|queueInfo
operator|=
name|scheduler
operator|.
name|getQueueInfo
argument_list|(
literal|"queueB"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0.75f
argument_list|,
name|queueInfo
operator|.
name|getCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|queueInfo
operator|.
name|getCurrentCapacity
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
comment|// test queueMetrics
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueInfo
operator|.
name|getQueueStatistics
argument_list|()
operator|.
name|getAllocatedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|queueInfo
operator|.
name|getQueueStatistics
argument_list|()
operator|.
name|getAllocatedMemoryMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleHierarchicalFairShareCalculation ()
specifier|public
name|void
name|testSimpleHierarchicalFairShareCalculation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|int
name|capacity
init|=
literal|10
operator|*
literal|24
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|capacity
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Have two queues which want entire cluster capacity
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"parent.queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"parent.queue3"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue3
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.queue3"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getMetrics
argument_list|()
operator|.
name|getFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSteadyFairShareMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalQueuesSimilarParents ()
specifier|public
name|void
name|testHierarchicalQueuesSimilarParents
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|leafQueue
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|leafQueue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"root.parent.child"
argument_list|,
name|leafQueue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|leafQueue2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue3
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child.grandchild"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|leafQueue3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue4
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.sister"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|leafQueue4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"root.parent.sister"
argument_list|,
name|leafQueue4
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulerRootQueueMetrics ()
specifier|public
name|void
name|testSchedulerRootQueueMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests likewise
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure reserved memory gets updated correctly
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now another node checks in with capacity
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// The old reservation should still be there...
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but it should disappear when we update the first node.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|rootMetrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSimpleContainerAllocation ()
specifier|public
name|void
name|testSimpleContainerAllocation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Add another node
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|512
argument_list|,
literal|2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Asked for less than increment allocation.
name|assertEquals
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify metrics
name|QueueMetrics
name|queue1Metrics
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|queue1Metrics
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queue1Metrics
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAllocatedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSimpleContainerReservation ()
specifier|public
name|void
name|testSimpleContainerReservation
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 1 is allocated app capacity
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests likewise
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 2 is waiting with a reservation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now another node checks in with capacity
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// Make sure this goes to queue 2
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// The old reservation should still be there...
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but it should disappear when we update the first node.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testOffSwitchAppReservationThreshold ()
specifier|public
name|void
name|testOffSwitchAppReservationThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RESERVABLE_NODES
argument_list|,
literal|0.50f
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add three node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
comment|// Ensure capacity on all nodes are allocated
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify capacity allocation
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create new app with a resource request that can be satisfied by any
comment|// node but would be
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
comment|// No new reservations should happen since it exceeds threshold
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add 1 more node
name|RMNode
name|node4
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent4
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent4
argument_list|)
expr_stmt|;
comment|// New node satisfies resource request
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8192
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Verify number of reservations have decremented
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testRackLocalAppReservationThreshold ()
specifier|public
name|void
name|testRackLocalAppReservationThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RESERVABLE_NODES
argument_list|,
literal|0.50f
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add four node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// These 3 on different rack
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
name|RMNode
name|node4
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent4
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent4
argument_list|)
expr_stmt|;
comment|// Ensure capacity on all nodes are allocated
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify capacity allocation
name|assertEquals
argument_list|(
literal|8192
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create new app with a resource request that can be satisfied by any
comment|// node but would be
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|attemptId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|2048
argument_list|,
name|node2
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|attemptId
argument_list|,
name|asks
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
comment|// No new reservations should happen since it exceeds threshold
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add 1 more node
name|RMNode
name|node5
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.4"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent5
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node5
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent5
argument_list|)
expr_stmt|;
comment|// New node satisfies resource request
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node4
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Verify number of reservations have decremented
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReservationThresholdWithAssignMultiple ()
specifier|public
name|void
name|testReservationThresholdWithAssignMultiple
parameter_list|()
throws|throws
name|Exception
block|{
comment|// set reservable-nodes to 0 which make reservation exceed
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RESERVABLE_NODES
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|DYNAMIC_MAX_ASSIGN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add two node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|//create one request and assign containers
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify capacity allocation
name|assertEquals
argument_list|(
literal|8192
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify number of reservations have decremented
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getNumReservations
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500000
argument_list|)
DECL|method|testContainerReservationAttemptExceedingQueueMax ()
specifier|public
name|void
name|testContainerReservationAttemptExceedingQueueMax
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>2048mb,5vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>2048mb,10vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of the queue
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 1 is allocated app capacity
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests likewise
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 2 is allocated app capacity
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Ensure the reservation does not get created as allocated memory of
comment|// queue1 exceeds max
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The test verifies that zero-FairShare queues (because of zero/tiny    * weight) can get resources for the AM.    */
annotation|@
name|Test
DECL|method|testRequestAMResourceInZeroFairShareQueue ()
specifier|public
name|void
name|testRequestAMResourceInZeroFairShareQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>4096mb,10vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.5</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue3\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.000001</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|//create request for non-zero weight queue
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"root.queue2"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// A managed AM which need 3G memory will not get resource,
comment|// since it request more than the maxAMShare (4G * 0.5 = 2G).
name|Resource
name|amResource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|amPriority
init|=
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application 1 should not be running"
argument_list|,
literal|0
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// A managed AM which need 2G memory will get resource,
comment|// since it request no more than the maxAMShare (4G * 0.5 = 2G).
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId2
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application 2 should be running"
argument_list|,
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// A managed AM which need 1G memory will get resource, even thought its
comment|// fair share is 0 because its weight is tiny(0.000001).
name|ApplicationAttemptId
name|attId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId3
argument_list|,
literal|"root.queue3"
argument_list|,
literal|"user1"
argument_list|,
name|amResource
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId3
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application 3 should be running"
argument_list|,
literal|1
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|500000
argument_list|)
DECL|method|testContainerReservationNotExceedingQueueMax ()
specifier|public
name|void
name|testContainerReservationNotExceedingQueueMax
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>3072mb,10vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>2048mb,10vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of the queue
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 1 is allocated app capacity
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests likewise
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 2 is allocated app capacity
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 1 is waiting with a reservation
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exercise checks that reservation fits
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Ensure the reservation still exists as allocated memory of queue1 doesn't
comment|// exceed max
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now reduce max Resources of queue1 down to 2048
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>2048mb,10vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>2048mb,10vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure allocated memory of queue1 doesn't exceed its maximum
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|//the reservation of queue1 should be reclaim
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationThresholdGatesReservations ()
specifier|public
name|void
name|testReservationThresholdGatesReservations
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>drf"
operator|+
literal|"</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Set threshold to 2 * 1024 ==> 2048 MB& 2 * 1 ==> 2 vcores (test will
comment|// use vcores)
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of node
name|createSchedulingRequest
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 1 is allocated app capacity
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests below threshold
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 2 has no reservation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now queue requests CPU above threshold
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 2 is waiting with a reservation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now another node checks in with capacity
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// Make sure this goes to queue 2
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// The old reservation should still be there...
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but it should disappear when we update the first node.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyQueueName ()
specifier|public
name|void
name|testEmptyQueueName
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// only default queue
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit app with empty queue
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|""
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
comment|// submission rejected
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueuNameWithPeriods ()
specifier|public
name|void
name|testQueueuNameWithPeriods
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// only default queue
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit app with queue name (.A)
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent1
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|".A"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent1
argument_list|)
expr_stmt|;
comment|// submission rejected
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit app with queue name (A.)
name|ApplicationAttemptId
name|appAttemptId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent2
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"A."
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent2
argument_list|)
expr_stmt|;
comment|// submission rejected
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit app with queue name (A.B)
name|ApplicationAttemptId
name|appAttemptId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent3
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId3
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"A.B"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent3
argument_list|)
expr_stmt|;
comment|// submission accepted
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssignToQueue ()
specifier|public
name|void
name|testAssignToQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp2
init|=
operator|new
name|MockRMApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp1
argument_list|,
literal|"default"
argument_list|,
literal|"asterix"
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue2
init|=
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp2
argument_list|,
literal|"notdefault"
argument_list|,
literal|"obelix"
argument_list|)
decl_stmt|;
comment|// assert FSLeafQueue's name is the correct name is the one set in the RMApp
name|assertEquals
argument_list|(
name|rmApp1
operator|.
name|getQueue
argument_list|()
argument_list|,
name|queue1
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.asterix"
argument_list|,
name|rmApp1
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rmApp2
operator|.
name|getQueue
argument_list|()
argument_list|,
name|queue2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.notdefault"
argument_list|,
name|rmApp2
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAssignToBadDefaultQueue ()
specifier|public
name|void
name|testAssignToBadDefaultQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"specified\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"default\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
try|try
block|{
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp1
argument_list|,
literal|"default"
argument_list|,
literal|"asterix"
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Bad queue placement policy terminal rule should not throw "
operator|+
literal|"exception "
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAssignToNonLeafQueueReturnsNull ()
specifier|public
name|void
name|testAssignToNonLeafQueueReturnsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"root.child1.granchild"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"root.child2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp2
init|=
operator|new
name|MockRMApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
comment|// Trying to assign to non leaf queue would return null
name|assertNull
argument_list|(
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp1
argument_list|,
literal|"root.child1"
argument_list|,
literal|"tintin"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp2
argument_list|,
literal|"root.child2"
argument_list|,
literal|"snowy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueuePlacementWithPolicy ()
specifier|public
name|void
name|testQueuePlacementWithPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appId
decl_stmt|;
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<
name|QueuePlacementRule
argument_list|>
argument_list|()
decl_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Specified
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|User
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|PrimaryGroup
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|SecondaryGroupExistingQueue
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Default
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"root.user1"
argument_list|,
literal|"root.user3group"
argument_list|,
literal|"root.user4subgroup1"
argument_list|,
literal|"root.user4subgroup2"
argument_list|,
literal|"root.user5subgroup2"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|configuredQueues
init|=
operator|new
name|HashMap
argument_list|<
name|FSQueueType
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|configuredQueues
operator|.
name|put
argument_list|(
name|FSQueueType
operator|.
name|LEAF
argument_list|,
name|queues
argument_list|)
expr_stmt|;
name|configuredQueues
operator|.
name|put
argument_list|(
name|FSQueueType
operator|.
name|PARENT
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|placementPolicy
operator|=
operator|new
name|QueuePlacementPolicy
argument_list|(
name|rules
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"somequeue"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.somequeue"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user3group"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user4"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user4subgroup1"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"user5"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user5subgroup2"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// test without specified as first rule
name|rules
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueuePlacementRule
argument_list|>
argument_list|()
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|User
argument_list|()
operator|.
name|initialize
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Specified
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rules
operator|.
name|add
argument_list|(
operator|new
name|QueuePlacementRule
operator|.
name|Default
argument_list|()
operator|.
name|initialize
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getAllocationConfiguration
argument_list|()
operator|.
name|placementPolicy
operator|=
operator|new
name|QueuePlacementPolicy
argument_list|(
name|rules
argument_list|,
name|configuredQueues
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"somequeue"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"somequeue"
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.somequeue"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|appId
operator|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"default"
argument_list|,
literal|"otheruser"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.default"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appId
argument_list|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithMinAlloc ()
specifier|public
name|void
name|testFairShareWithMinAlloc
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueA"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueB"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testNestedUserQueue ()
specifier|public
name|void
name|testNestedUserQueue
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"user1group\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"specified\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"nestedUserQueue\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"primaryGroup\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"default\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|user1Leaf
init|=
name|scheduler
operator|.
name|assignToQueue
argument_list|(
name|rmApp1
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1group.user1"
argument_list|,
name|user1Leaf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareAndWeightsInNestedUserQueueRule ()
specifier|public
name|void
name|testFairShareAndWeightsInNestedUserQueueRule
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"parentq\" type=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"nestedUserQueue\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"specified\" create=\"false\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</rule>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<rule name=\"default\" />"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queuePlacementPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|RMApp
name|rmApp1
init|=
operator|new
name|MockRMApp
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|RMApp
name|rmApp2
init|=
operator|new
name|MockRMApp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|RMAppState
operator|.
name|NEW
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|capacity
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
comment|// create node with 16 G
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|capacity
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// user1,user2 submit their apps to parentq and create user queues
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.parentq"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.parentq"
argument_list|,
literal|"user2"
argument_list|)
expr_stmt|;
comment|// user3 submits app in default queue
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user3"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|setSteadyFairShare
argument_list|(
name|scheduler
operator|.
name|getClusterResource
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|recomputeSteadyShares
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|leafQueues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
for|for
control|(
name|FSLeafQueue
name|leaf
range|:
name|leafQueues
control|)
block|{
if|if
condition|(
name|leaf
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.parentq.user1"
argument_list|)
operator|||
name|leaf
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.parentq.user2"
argument_list|)
condition|)
block|{
comment|// assert that the fair share is 1/4th node1's capacity
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|leaf
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert that the steady fair share is 1/4th node1's capacity
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|leaf
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert weights are equal for both the user queues
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|leaf
operator|.
name|getWeight
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSteadyFairShareWithReloadAndNodeAddRemove ()
specifier|public
name|void
name|testSteadyFairShareWithReloadAndNodeAddRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingPolicy>drf</schedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// The steady fair share for all queues should be 0
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6144
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// The steady fair shares for all queues should be updated
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reload the allocation configuration file
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingPolicy>drf</schedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child3\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// The steady fair shares for all queues should be updated
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child3"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the node, steady fair shares should back to 0
name|NodeRemovedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSteadyFairShareWithQueueCreatedRuntime ()
specifier|public
name|void
name|testSteadyFairShareWithQueueCreatedRuntime
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_GROUP_MAPPING
argument_list|,
name|SimpleGroupsMapping
operator|.
name|class
argument_list|,
name|GroupMappingServiceProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add one node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|6144
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getClusterResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getRootQueue
argument_list|()
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6144
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Submit one application
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|false
argument_list|)
operator|.
name|getSteadyFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make allocation requests and ensure they are reflected in queue demand.    */
annotation|@
name|Test
DECL|method|testQueueDemandCalculation ()
specifier|public
name|void
name|testQueueDemandCalculation
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|minReqSize
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
decl_stmt|;
comment|// First ask, queue1 requests 1 large (minReqSize * 2).
name|ApplicationAttemptId
name|id11
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|id11
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id11
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id11
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask1
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request1
init|=
name|createResourceRequest
argument_list|(
name|minReqSize
operator|*
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id11
argument_list|,
name|ask1
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
comment|// Second ask, queue2 requests 1 large.
name|ApplicationAttemptId
name|id21
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|id21
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id21
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id21
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask2
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request2
init|=
name|createResourceRequest
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|request3
init|=
name|createResourceRequest
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ask2
operator|.
name|add
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|ask2
operator|.
name|add
argument_list|(
name|request3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id21
argument_list|,
name|ask2
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
comment|// Third ask, queue2 requests 2 small (minReqSize).
name|ApplicationAttemptId
name|id22
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|id22
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id22
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id22
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask3
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request4
init|=
name|createResourceRequest
argument_list|(
name|minReqSize
argument_list|,
literal|"bar"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|request5
init|=
name|createResourceRequest
argument_list|(
name|minReqSize
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask3
operator|.
name|add
argument_list|(
name|request4
argument_list|)
expr_stmt|;
name|ask3
operator|.
name|add
argument_list|(
name|request5
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id22
argument_list|,
name|ask3
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queue1"
argument_list|)
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minReqSize
operator|+
literal|2
operator|*
name|minReqSize
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queue2"
argument_list|)
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalQueueAllocationFileParsing ()
specifier|public
name|void
name|testHierarchicalQueueAllocationFileParsing
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
throws|,
name|ParserConfigurationException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048mb,0vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|leafQueues
init|=
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|leafQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueC"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueD"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure querying for queues didn't create any new ones:
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|leafQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConfigureRootQueue ()
specifier|public
name|void
name|testConfigureRootQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<schedulingPolicy>drf</schedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,1vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024mb,4vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>100</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>120</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionThreshold>.5</fairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionTimeout>300</defaultFairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>200</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultFairSharePreemptionThreshold>.6</defaultFairSharePreemptionThreshold>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSQueue
name|root
init|=
name|queueManager
operator|.
name|getRootQueue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getPolicy
argument_list|()
operator|instanceof
name|DominantResourceFairnessPolicy
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child1"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"child2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100000
argument_list|,
name|root
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|root
operator|.
name|getMinSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|root
operator|.
name|getFairSharePreemptionThreshold
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMultipleContainersWaitingForReservation ()
specifier|public
name|void
name|testMultipleContainersWaitingForReservation
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue3"
argument_list|,
literal|"user3"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// One container should get reservation and the other should get nothing
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testUserMaxRunningApps ()
specifier|public
name|void
name|testUserMaxRunningApps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set max running apps
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request for app 1
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 1 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 2 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request another container for app 1
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Request should be fulfilled
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testIncreaseQueueMaxRunningAppsOnTheFly ()
specifier|public
name|void
name|testIncreaseQueueMaxRunningAppsOnTheFly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|allocBefore
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>1</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|String
name|allocAfter
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>3</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|testIncreaseQueueSettingOnTheFlyInternal
argument_list|(
name|allocBefore
argument_list|,
name|allocAfter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testIncreaseUserMaxRunningAppsOnTheFly ()
specifier|public
name|void
name|testIncreaseUserMaxRunningAppsOnTheFly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|allocBefore
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>10</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"<user name=\"user1\">"
operator|+
literal|"<maxRunningApps>1</maxRunningApps>"
operator|+
literal|"</user>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|String
name|allocAfter
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>10</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"<user name=\"user1\">"
operator|+
literal|"<maxRunningApps>3</maxRunningApps>"
operator|+
literal|"</user>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|testIncreaseQueueSettingOnTheFlyInternal
argument_list|(
name|allocBefore
argument_list|,
name|allocAfter
argument_list|)
expr_stmt|;
block|}
DECL|method|testIncreaseQueueSettingOnTheFlyInternal (String allocBefore, String allocAfter)
specifier|private
name|void
name|testIncreaseQueueSettingOnTheFlyInternal
parameter_list|(
name|String
name|allocBefore
parameter_list|,
name|String
name|allocAfter
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set max running apps
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|allocBefore
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request for app 1
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 1 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 2 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// App 3 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// App 4 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|allocAfter
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 2 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 3 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 4 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now remove app 1
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 4 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testDecreaseQueueMaxRunningAppsOnTheFly ()
specifier|public
name|void
name|testDecreaseQueueMaxRunningAppsOnTheFly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|allocBefore
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>3</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|String
name|allocAfter
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>1</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|testDecreaseQueueSettingOnTheFlyInternal
argument_list|(
name|allocBefore
argument_list|,
name|allocAfter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testDecreaseUserMaxRunningAppsOnTheFly ()
specifier|public
name|void
name|testDecreaseUserMaxRunningAppsOnTheFly
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|allocBefore
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>10</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"<user name=\"user1\">"
operator|+
literal|"<maxRunningApps>3</maxRunningApps>"
operator|+
literal|"</user>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|String
name|allocAfter
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<allocations>"
operator|+
literal|"<queue name=\"root\">"
operator|+
literal|"<queue name=\"queue1\">"
operator|+
literal|"<maxRunningApps>10</maxRunningApps>"
operator|+
literal|"</queue>"
operator|+
literal|"</queue>"
operator|+
literal|"<user name=\"user1\">"
operator|+
literal|"<maxRunningApps>1</maxRunningApps>"
operator|+
literal|"</user>"
operator|+
literal|"</allocations>"
decl_stmt|;
name|testDecreaseQueueSettingOnTheFlyInternal
argument_list|(
name|allocBefore
argument_list|,
name|allocAfter
argument_list|)
expr_stmt|;
block|}
DECL|method|testDecreaseQueueSettingOnTheFlyInternal (String allocBefore, String allocAfter)
specifier|private
name|void
name|testDecreaseQueueSettingOnTheFlyInternal
parameter_list|(
name|String
name|allocBefore
parameter_list|,
name|String
name|allocAfter
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Set max running apps
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
name|allocBefore
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request for app 1
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 1 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 2 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// App 3 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// App 4 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|allocAfter
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 2 should still be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 3 should still be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 4 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now remove app 1
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 4 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now remove app 2
name|appRemovedEvent1
operator|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 4 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now remove app 3
name|appRemovedEvent1
operator|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId3
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 4 should be running now
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Reserve at a lower priority and verify the lower priority request gets    * allocated    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReservationWithMultiplePriorities ()
specifier|public
name|void
name|testReservationWithMultiplePriorities
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
comment|// Create first app and take up half resources so the second app that asks
comment|// for the entire node won't have enough.
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue"
argument_list|,
literal|"user"
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Basic allocation failed"
argument_list|,
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create another app and reserve at a lower priority first
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Reservation at lower priority failed"
argument_list|,
literal|1
argument_list|,
name|app2
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request container on the second app at a higher priority
name|createSchedulingRequestExistingApplication
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|attId
argument_list|)
expr_stmt|;
comment|// Complete the first container so we can trigger allocation for app2
name|ContainerId
name|containerId
init|=
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|app1
operator|.
name|getApplicationAttemptId
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|containerId
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
comment|// Trigger allocation for app2
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Reserved container (at lower priority) should be run
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|app2
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Allocation post completion failed"
argument_list|,
literal|1
argument_list|,
name|liveContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"High prio container allocated against low prio reservation"
argument_list|,
literal|2
argument_list|,
name|liveContainers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAclSubmitApplication ()
specifier|public
name|void
name|testAclSubmitApplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set acl's
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps></aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps></aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>norealuserhasthisname</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>norealuserhasthisname</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"norealuserhasthisname"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"norealuserhasthisname2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The application was not allowed"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"The application was allowed"
argument_list|,
name|app2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMultipleNodesSingleRackRequest ()
specifier|public
name|void
name|testMultipleNodesSingleRackRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|attemptId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// 1 request with 2 nodes on the same rack. another request with 1 node on
comment|// a different rack
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node2
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node3
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node3
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|attemptId
argument_list|,
name|asks
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
comment|// node 1 checks in
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent1
argument_list|)
expr_stmt|;
comment|// should assign node local
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// node 2 checks in
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// should assign rack local
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attemptId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testFifoWithinQueue ()
specifier|public
name|void
name|testFifoWithinQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Even if submitted at exact same time, apps will be deterministically
comment|// ordered by name.
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|setPolicy
argument_list|(
operator|new
name|FifoPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// First two containers should go to app 1, third should go to app 2.
comment|// Because tests set assignmultiple to false, each heartbeat assigns a single
comment|// container.
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testFixedMaxAssign ()
specifier|public
name|void
name|testFixedMaxAssign
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|DYNAMIC_MAX_ASSIGN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16384
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
comment|// set maxAssign to 2: only 2 containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
literal|2
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|2
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// set maxAssign to -1: all remaining containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
operator|-
literal|1
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|8
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify the behavior of dynamic-max-assign.    * 1. Verify the value of maxassign doesn't affect number of containers    * affected.    * 2. Verify the node is fully allocated.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testDynamicMaxAssign ()
specifier|public
name|void
name|testDynamicMaxAssign
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
comment|// Set maxassign to a value smaller than half the remaining resources
name|scheduler
operator|.
name|maxAssign
operator|=
literal|2
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// New container allocations should be floor(8/2) + 1 = 5
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|5
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set maxassign to a value larger than half the remaining resources
name|scheduler
operator|.
name|maxAssign
operator|=
literal|4
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// New container allocations should be floor(3/2) + 1 = 2
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|7
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// New container allocations should be 1
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|8
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|3000
argument_list|)
DECL|method|testMaxAssignWithZeroMemoryContainers ()
specifier|public
name|void
name|testMaxAssignWithZeroMemoryContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|DYNAMIC_MAX_ASSIGN
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16384
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
comment|// set maxAssign to 2: only 2 containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
literal|2
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|2
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// set maxAssign to -1: all remaining containers should be allocated
name|scheduler
operator|.
name|maxAssign
operator|=
operator|-
literal|1
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|8
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify the behavior of    * {@link FSQueue#assignContainer(FSSchedulerNode)})    *     * Create two queues under root (fifoQueue and fairParent), and two queues    * under fairParent (fairChild1 and fairChild2). Submit two apps to the    * fifoQueue and one each to the fairChild* queues, all apps requiring 4    * containers each of the total 16 container capacity    *     * Assert the number of containers for each app after 4, 8, 12 and 16 updates.    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAssignContainer ()
specifier|public
name|void
name|testAssignContainer
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
specifier|final
name|String
name|fifoQueue
init|=
literal|"fifo"
decl_stmt|;
specifier|final
name|String
name|fairParent
init|=
literal|"fairParent"
decl_stmt|;
specifier|final
name|String
name|fairChild1
init|=
name|fairParent
operator|+
literal|".fairChild1"
decl_stmt|;
specifier|final
name|String
name|fairChild2
init|=
name|fairParent
operator|+
literal|".fairChild2"
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fifoQueue
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fairChild1
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fairChild2
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fifoQueue
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|fifoQueue
argument_list|,
literal|true
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// 4 node updates: fifoQueue should have received 2, and fairChild*
comment|// should have received one each
name|String
name|ERR
init|=
literal|"Wrong number of assigned containers after "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" updates"
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|4
condition|)
block|{
comment|// app1 req still not met
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// app1 req has been met, app4 should be served now
name|assertEquals
argument_list|(
name|ERR
argument_list|,
literal|4
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|-
literal|3
operator|)
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testNotAllowSubmitApplication ()
specifier|public
name|void
name|testNotAllowSubmitApplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set acl's
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"root\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps></aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps></aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>userallow</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>userallow</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|appId
init|=
name|this
operator|.
name|APP_ID
operator|++
decl_stmt|;
name|String
name|user
init|=
literal|"usernotallow"
decl_stmt|;
name|String
name|queue
init|=
literal|"queue1"
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|MockApps
operator|.
name|newAppName
argument_list|()
decl_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|submissionContext
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setAMContainerSpec
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
operator|new
name|RMAppImpl
argument_list|(
name|applicationId
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|submissionContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|"YARN"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|applicationId
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|MAX_TRIES
init|=
literal|20
decl_stmt|;
name|int
name|numTries
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|application
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|)
operator|&&
name|numTries
operator|<
name|MAX_TRIES
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|numTries
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"The application doesn't reach SUBMITTED."
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|application
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|ApplicationAttemptId
operator|.
name|newInstance
argument_list|(
name|applicationId
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|attId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|queue
argument_list|,
name|user
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|numTries
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|application
operator|.
name|getFinishTime
argument_list|()
operator|==
literal|0
operator|&&
name|numTries
operator|<
name|MAX_TRIES
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|numTries
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
name|application
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemoveNodeUpdatesRootQueueMetrics ()
specifier|public
name|void
name|testRemoveNodeUpdatesRootQueueMetrics
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|addEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|addEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// update shouldn't change things
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|NodeRemovedSchedulerEvent
name|removeEvent
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|removeEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// update shouldn't change things
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
operator|.
name|getAvailableVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStrictLocality ()
specifier|public
name|void
name|testStrictLocality
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|node1UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|node2UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
comment|// no matter how many heartbeats, node2 should never get a container
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then node1 should get the container
name|scheduler
operator|.
name|handle
argument_list|(
name|node1UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelStrictLocality ()
specifier|public
name|void
name|testCancelStrictLocality
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|"rack1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|node2UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
comment|// no matter how many heartbeats, node2 should never get a container
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// relax locality
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|update
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|"rack1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|attId1
argument_list|,
name|update
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
comment|// then node2 should get the container
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMStrictLocalityRack ()
specifier|public
name|void
name|testAMStrictLocalityRack
parameter_list|()
throws|throws
name|IOException
block|{
name|testAMStrictLocality
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMStrictLocalityNode ()
specifier|public
name|void
name|testAMStrictLocalityNode
parameter_list|()
throws|throws
name|IOException
block|{
name|testAMStrictLocality
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMStrictLocalityRackInvalid ()
specifier|public
name|void
name|testAMStrictLocalityRackInvalid
parameter_list|()
throws|throws
name|IOException
block|{
name|testAMStrictLocality
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAMStrictLocalityNodeInvalid ()
specifier|public
name|void
name|testAMStrictLocalityNodeInvalid
parameter_list|()
throws|throws
name|IOException
block|{
name|testAMStrictLocality
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testAMStrictLocality (boolean node, boolean invalid)
specifier|private
name|void
name|testAMStrictLocality
parameter_list|(
name|boolean
name|node
parameter_list|,
name|boolean
name|invalid
parameter_list|)
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|reqs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node2
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|&&
name|invalid
condition|)
block|{
name|nodeRequest
operator|.
name|setResourceName
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node2
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
operator|!
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|node
operator|&&
name|invalid
condition|)
block|{
name|rackRequest
operator|.
name|setResourceName
argument_list|(
literal|"invalid"
argument_list|)
expr_stmt|;
block|}
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|anyRequest
argument_list|)
expr_stmt|;
name|reqs
operator|.
name|add
argument_list|(
name|rackRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
condition|)
block|{
name|reqs
operator|.
name|add
argument_list|(
name|nodeRequest
argument_list|)
expr_stmt|;
block|}
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|reqs
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|node2UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
comment|// node2 should get the container
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|invalid
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNode
argument_list|(
name|node2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNode
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getNode
argument_list|(
name|node2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getNode
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getNumContainers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Strict locality requests shouldn't reserve resources on another node.    */
annotation|@
name|Test
DECL|method|testReservationsStrictLocality ()
specifier|public
name|void
name|testReservationsStrictLocality
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add two nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Submit application without container requests
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
comment|// Request a container on node2
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node2
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|"rack1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Heartbeat from node1. App shouldn't get an allocation or reservation
name|NodeUpdateSchedulerEvent
name|nodeUpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App assigned a container on the wrong node"
argument_list|,
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"App reserved a container on the wrong node"
argument_list|,
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoMoreCpuOnNode ()
specifier|public
name|void
name|testNoMoreCpuOnNode
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBasicDRFAssignment ()
specifier|public
name|void
name|testBasicDRFAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|8192
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId2
argument_list|)
decl_stmt|;
name|DominantResourceFairnessPolicy
name|drfPolicy
init|=
operator|new
name|DominantResourceFairnessPolicy
argument_list|()
decl_stmt|;
name|drfPolicy
operator|.
name|initialize
argument_list|(
name|scheduler
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// First both apps get a container
comment|// Then the first gets another container because its dominant share of
comment|// 2048/8192 is less than the other's of 2/5
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Two apps on one queue, one app on another    */
annotation|@
name|Test
DECL|method|testBasicDRFWithQueues ()
specifier|public
name|void
name|testBasicDRFWithQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|8192
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|3072
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId3
argument_list|)
decl_stmt|;
name|DominantResourceFairnessPolicy
name|drfPolicy
init|=
operator|new
name|DominantResourceFairnessPolicy
argument_list|()
decl_stmt|;
name|drfPolicy
operator|.
name|initialize
argument_list|(
name|scheduler
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDRFHierarchicalQueues ()
specifier|public
name|void
name|testDRFHierarchicalQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|12288
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|3074
argument_list|,
literal|1
argument_list|,
literal|"queue1.subqueue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|3
argument_list|,
literal|"queue1.subqueue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId3
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
literal|"queue1.subqueue2"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// so that start times will be different
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttId4
argument_list|)
decl_stmt|;
name|DominantResourceFairnessPolicy
name|drfPolicy
init|=
operator|new
name|DominantResourceFairnessPolicy
argument_list|()
decl_stmt|;
name|drfPolicy
operator|.
name|initialize
argument_list|(
name|scheduler
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1.subqueue1"
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|drfPolicy
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app1 gets first container because it asked first
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app4 gets second container because it's on queue2
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app4 gets another container because queue2's dominant share of memory
comment|// is still less than queue1's of cpu
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app3 gets one because queue1 gets one and queue1.subqueue2 is behind
comment|// queue1.subqueue1
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// app4 would get another one, but it doesn't have any requests
comment|// queue1.subqueue2 is still using less than queue1.subqueue1, so it
comment|// gets another
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// queue1.subqueue1 is behind again, so it gets one, which it gives to app2
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// at this point, we've used all our CPU up, so nobody else should get a container
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
DECL|method|testHostPortNodeName ()
specifier|public
name|void
name|testHostPortNodeName
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_INCLUDE_PORT_IN_NODE_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ResourceRequest
name|nodeRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getNodeID
argument_list|()
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|node1
operator|.
name|getNodeID
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|rackRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ResourceRequest
name|anyRequest
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|nodeRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|rackRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|anyRequest
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|node1UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|node2UpdateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
comment|// no matter how many heartbeats, node2 should never get a container
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|node2UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app
operator|.
name|getReservedContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// then node1 should get the container
name|scheduler
operator|.
name|handle
argument_list|(
name|node1UpdateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyAppRunnable (ApplicationAttemptId attId, boolean runnable)
specifier|private
name|void
name|verifyAppRunnable
parameter_list|(
name|ApplicationAttemptId
name|attId
parameter_list|,
name|boolean
name|runnable
parameter_list|)
block|{
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue
init|=
name|app
operator|.
name|getQueue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|runnable
argument_list|,
name|queue
operator|.
name|isRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|!
name|runnable
argument_list|,
name|queue
operator|.
name|isNonRunnableApp
argument_list|(
name|app
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyQueueNumRunnable (String queueName, int numRunnableInQueue, int numNonRunnableInQueue)
specifier|private
name|void
name|verifyQueueNumRunnable
parameter_list|(
name|String
name|queueName
parameter_list|,
name|int
name|numRunnableInQueue
parameter_list|,
name|int
name|numNonRunnableInQueue
parameter_list|)
block|{
name|FSLeafQueue
name|queue
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|queueName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numRunnableInQueue
argument_list|,
name|queue
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numNonRunnableInQueue
argument_list|,
name|queue
operator|.
name|getNumNonRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserAndQueueMaxRunningApps ()
specifier|public
name|void
name|testUserAndQueueMaxRunningApps
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>2</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// exceeds user limit
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue2"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// exceeds queue limit
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Remove app 1 and both app 2 and app 4 should becomes runnable in its place
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// A new app to queue1 should not be runnable
name|ApplicationAttemptId
name|attId5
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleCompletedEvent ()
specifier|public
name|void
name|testMultipleCompletedEvent
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up a fair scheduler
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.2</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a node
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|20480
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Launch an app
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|RMContainer
name|container
init|=
name|app1
operator|.
name|getLiveContainersMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|completedContainer
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|LOST_CONTAINER
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|KILL
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|completedContainer
argument_list|(
name|container
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|container
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|COMPLETED_APPLICATION
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|FINISHED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app1
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxAMShare ()
specifier|public
name|void
name|testQueueMaxAMShare
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.2</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|20480
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue1's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue1
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"root.default"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|Resource
name|amResource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Resource
name|amResource3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1860
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|int
name|amPriority
init|=
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
decl_stmt|;
comment|// Exceeds no limits
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app1
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds no limits
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId2
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app2
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds queue limit
name|ApplicationAttemptId
name|attId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId3
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId3
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Still can run non-AM container
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1 should have two running containers"
argument_list|,
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove app1, app3's AM should become running
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM should be finished"
argument_list|,
literal|0
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app1
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app3
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds queue limit
name|ApplicationAttemptId
name|attId4
init|=
name|createAppAttemptId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId4
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource2
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|amPriority
argument_list|,
name|attId4
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app4
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Exceeds queue limit
name|ApplicationAttemptId
name|attId5
init|=
name|createAppAttemptId
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId5
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource2
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|amPriority
argument_list|,
name|attId5
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app5
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId5
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app5
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app5
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove un-running app doesn't affect others
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent4
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId4
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app5
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove app2 and app3, app5's AM should become running
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent2
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent3
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId3
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM should be finished"
argument_list|,
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app2
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should be finished"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app3
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM requests 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|app5
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// request non-AM container for app5
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|attId5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should have 1 container"
argument_list|,
literal|1
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// complete AM container before non-AM container is allocated.
comment|// spark application hit this situation.
name|RMContainer
name|amContainer5
init|=
operator|(
name|RMContainer
operator|)
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|toArray
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|ContainerExpiredSchedulerEvent
name|containerExpired
init|=
operator|new
name|ContainerExpiredSchedulerEvent
argument_list|(
name|amContainer5
operator|.
name|getContainerId
argument_list|()
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|containerExpired
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should have 0 container"
argument_list|,
literal|0
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app5
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// non-AM container should be allocated
comment|// check non-AM container allocation is not rejected
comment|// due to queue MaxAMShare limitation.
name|assertEquals
argument_list|(
literal|"Application5 should have 1 container"
argument_list|,
literal|1
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// check non-AM container allocation won't affect queue AmResourceUsage
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check amResource normalization
name|ApplicationAttemptId
name|attId6
init|=
name|createAppAttemptId
argument_list|(
literal|6
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId6
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource3
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1860
argument_list|,
literal|2
argument_list|,
name|amPriority
argument_list|,
name|attId6
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app6
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId6
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app6
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Finished application usage should be none"
argument_list|,
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|app6
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app6
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove all apps
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent5
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId5
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent6
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId6
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent5
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent6
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 0"
argument_list|,
literal|0
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueMaxAMShareDefault ()
specifier|public
name|void
name|testQueueMaxAMShareDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue2\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.4</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue3\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>10240 mb 4 vcores</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue4\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue5\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue1's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue1
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue2
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue2's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue2
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue3
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue3"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue3's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue3
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue4
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue4"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue4's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue4
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue5
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue5"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Queue queue5's fair share should be 0"
argument_list|,
literal|0
argument_list|,
name|queue5
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|queues
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"root.queue3"
argument_list|,
literal|"root.queue4"
argument_list|,
literal|"root.queue5"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|queue
range|:
name|queues
control|)
block|{
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
name|queue
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
block|}
name|Resource
name|amResource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|amPriority
init|=
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
decl_stmt|;
comment|// The fair share is 2048 MB, and the default maxAMShare is 0.5f,
comment|// so the AM is accepted.
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"queue1"
argument_list|,
literal|"test1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app1
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now the fair share is 1639 MB, and the maxAMShare is 0.4f,
comment|// so the AM is not accepted.
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"queue2"
argument_list|,
literal|"test1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId2
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app2
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue2's AM resource usage should be 0 MB memory"
argument_list|,
literal|0
argument_list|,
name|queue2
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the app2
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent2
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// AM3 can pass the fair share checking, but it takes all available VCore,
comment|// So the AM3 is not accepted.
name|ApplicationAttemptId
name|attId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId3
argument_list|,
literal|"queue3"
argument_list|,
literal|"test1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|6
argument_list|,
name|amPriority
argument_list|,
name|attId3
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue3's AM resource usage should be 0 MB memory"
argument_list|,
literal|0
argument_list|,
name|queue3
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// AM4 can pass the fair share checking and it doesn't takes all
comment|// available VCore, but it need 5 VCores which are more than
comment|// maxResources(4 VCores). So the AM4 is not accepted.
name|ApplicationAttemptId
name|attId4
init|=
name|createAppAttemptId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId4
argument_list|,
literal|"queue3"
argument_list|,
literal|"test1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|5
argument_list|,
name|amPriority
argument_list|,
name|attId4
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue3's AM resource usage should be 0 MB memory"
argument_list|,
literal|0
argument_list|,
name|queue3
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * The test verifies container gets reserved when not over maxAMShare,    * reserved container gets unreserved when over maxAMShare,    * container doesn't get reserved when over maxAMShare,    * reserved container is turned into an allocation and    * superfluously reserved container gets unreserved.    * 1. create three nodes: Node1 is 10G, Node2 is 10G and Node3 is 5G.    * 2. APP1 allocated 1G on Node1 and APP2 allocated 1G on Node2.    * 3. APP3 reserved 10G on Node1 and Node2.    * 4. APP4 allocated 5G on Node3, which makes APP3 over maxAMShare.    * 5. Remove APP1 to make Node1 have 10G available resource.    * 6. APP3 unreserved its container on Node1 because it is over maxAMShare.    * 7. APP5 allocated 1G on Node1 after APP3 unreserved its container.    * 8. Remove APP3.    * 9. APP6 failed to reserve a 10G container on Node1 due to AMShare limit.    * 10. APP7 allocated 1G on Node1.    * 11. Remove APP4 and APP5.    * 12. APP6 reserved 10G on Node1 and Node2.    * 13. APP8 failed to allocate a 1G container on Node1 and Node2 because    *     APP6 reserved Node1 and Node2.    * 14. Remove APP2.    * 15. APP6 turned the 10G reservation into an allocation on node2.    * 16. APP6 unreserved its container on node1, APP8 allocated 1G on Node1.    */
annotation|@
name|Test
DECL|method|testQueueMaxAMShareWithContainerReservation ()
specifier|public
name|void
name|testQueueMaxAMShareWithContainerReservation
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RESERVABLE_NODES
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxAMShare>0.5</maxAMShare>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|5120
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|"127.0.0.3"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeE1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateE1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeE2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateE2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeE3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateE3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeE1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeE2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeE3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Resource
name|amResource1
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource2
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource3
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource4
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5120
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource5
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource6
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource7
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Resource
name|amResource8
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|int
name|amPriority
init|=
name|RMAppAttemptImpl
operator|.
name|AM_CONTAINER_PRIORITY
operator|.
name|getPriority
argument_list|()
decl_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource1
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app1
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Allocate app1's AM container on node1.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app1
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application1's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource2
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId2
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Allocate app2's AM container on node2.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app2
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application2's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId3
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource3
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId3
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app3
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app3 reserves a container on node1 because node1's available resource
comment|// is less than app3's AM container resource.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
comment|// Similarly app3 reserves a container on node2.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application3's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId4
init|=
name|createAppAttemptId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId4
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource4
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|5120
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId4
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app4
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app4 can't allocate its AM container on node1 because
comment|// app3 already reserved its container on node1.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Allocate app4's AM container on node3.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM requests 5120 MB memory"
argument_list|,
literal|5120
argument_list|,
name|app4
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application4's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 7168 MB memory"
argument_list|,
literal|7168
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId1
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Release app1's AM container on node1.
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 6144 MB memory"
argument_list|,
literal|6144
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId5
init|=
name|createAppAttemptId
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId5
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource5
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId5
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app5
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId5
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app5 can allocate its AM container on node1 after
comment|// app3 unreserve its container on node1 due to
comment|// exceeding queue MaxAMShare limit.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app5
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application5's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app5
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 7168 MB memory"
argument_list|,
literal|7168
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent3
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId3
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Remove app3.
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 7168 MB memory"
argument_list|,
literal|7168
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId6
init|=
name|createAppAttemptId
argument_list|(
literal|6
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId6
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource6
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId6
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app6
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId6
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app6 can't reserve a container on node1 because
comment|// it exceeds queue MaxAMShare limit.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app6
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app6
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 7168 MB memory"
argument_list|,
literal|7168
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId7
init|=
name|createAppAttemptId
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId7
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource7
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId7
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app7
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId7
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Allocate app7's AM container on node1 to prove
comment|// app6 didn't reserve a container on node1.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application7's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app7
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application7's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app7
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 8192 MB memory"
argument_list|,
literal|8192
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent4
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId4
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Release app4's AM container on node3.
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 3072 MB memory"
argument_list|,
literal|3072
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent5
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId5
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Release app5's AM container on node1.
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app6 reserves a container on node1 because node1's available resource
comment|// is less than app6's AM container resource and
comment|// app6 is not over AMShare limit.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
comment|// Similarly app6 reserves a container on node2.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId8
init|=
name|createAppAttemptId
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId8
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
name|amResource8
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|amPriority
argument_list|,
name|attId8
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app8
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attId8
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app8 can't allocate a container on node1 because
comment|// app6 already reserved a container on node1.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application8's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app8
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application8's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app8
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app8 can't allocate a container on node2 because
comment|// app6 already reserved a container on node2.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application8's AM resource shouldn't be updated"
argument_list|,
literal|0
argument_list|,
name|app8
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application8's AM should not be running"
argument_list|,
literal|0
argument_list|,
name|app8
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 2048 MB memory"
argument_list|,
literal|2048
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent2
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Release app2's AM container on node2.
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app6 turns the reservation into an allocation on node2.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM requests 10240 MB memory"
argument_list|,
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB_VALUE
argument_list|,
name|app6
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application6's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app6
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 11264 MB memory"
argument_list|,
literal|11264
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// app6 unreserve its container on node1 because
comment|// it already got a container on node2.
comment|// Now app8 can allocate its AM container on node1.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateE1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application8's AM requests 1024 MB memory"
argument_list|,
literal|1024
argument_list|,
name|app8
operator|.
name|getAMResource
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Application8's AM should be running"
argument_list|,
literal|1
argument_list|,
name|app8
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1's AM resource usage should be 12288 MB memory"
argument_list|,
literal|12288
argument_list|,
name|queue1
operator|.
name|getAmResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxRunningAppsHierarchicalQueues ()
specifier|public
name|void
name|testMaxRunningAppsHierarchicalQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"sub1\"></queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"sub2\"></queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"sub3\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub3"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds no limits
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId3
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds queue1 limit
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// exceeds sub3 limit
name|ApplicationAttemptId
name|attId5
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1.sub3"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|clock
operator|.
name|tickSec
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Even though the app was removed from sub3, the app from sub2 gets to go
comment|// because it came in first
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId2
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId4
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyAppRunnable
argument_list|(
name|attId5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now test removal of a non-runnable app
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent2
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId5
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|maxRunningEnforcer
operator|.
name|usersNonRunnableApps
operator|.
name|get
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify app gone in queue accounting
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// verify it doesn't become runnable when there would be space for it
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent3
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|attId4
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent3
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub2"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyQueueNumRunnable
argument_list|(
literal|"queue1.sub3"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Test
DECL|method|testSchedulingOnRemovedNode ()
specifier|public
name|void
name|testSchedulingOnRemovedNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Disable continuous scheduling, will invoke continuous scheduling manually
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Continuous scheduling should be disabled."
argument_list|,
operator|!
name|scheduler
operator|.
name|isContinuousSchedulingEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|id11
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|id11
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id11
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|id11
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request1
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
literal|8
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id11
argument_list|,
name|ask1
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|String
name|hostName
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
literal|1024
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|1
argument_list|,
name|hostName
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|FSSchedulerNode
name|node
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
decl_stmt|;
name|NodeRemovedSchedulerEvent
name|removeNode1
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|removeNode1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|attemptScheduling
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|id11
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultRuleInitializesProperlyWhenPolicyNotConfigured ()
specifier|public
name|void
name|testDefaultRuleInitializesProperlyWhenPolicyNotConfigured
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This test verifies if default rule in queue placement policy
comment|// initializes properly when policy is not configured and
comment|// undeclared pools is not allowed.
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create an alloc file with no queue placement policy
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|QueuePlacementRule
argument_list|>
name|rules
init|=
name|scheduler
operator|.
name|allocConf
operator|.
name|placementPolicy
operator|.
name|getRules
argument_list|()
decl_stmt|;
for|for
control|(
name|QueuePlacementRule
name|rule
range|:
name|rules
control|)
block|{
if|if
condition|(
name|rule
operator|instanceof
name|Default
condition|)
block|{
name|Default
name|defaultRule
init|=
operator|(
name|Default
operator|)
name|rule
decl_stmt|;
name|assertNotNull
argument_list|(
name|defaultRule
operator|.
name|defaultQueueName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testBlacklistNodes ()
specifier|public
name|void
name|testBlacklistNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|GB
init|=
literal|1024
decl_stmt|;
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|16
operator|*
name|GB
argument_list|,
literal|16
argument_list|)
argument_list|,
literal|0
argument_list|,
name|host
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createSchedulingRequest
argument_list|(
name|GB
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
comment|// Verify the blacklist can be updated independent of requesting containers
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|app
operator|.
name|isPlaceBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|Collections
operator|.
expr|<
name|ResourceRequest
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|isPlaceBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|update
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|createResourceRequest
argument_list|(
name|GB
argument_list|,
name|node
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// Verify a container does not actually get placed on the blacklisted host
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|update
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|app
operator|.
name|isPlaceBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|0
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify a container gets placed on the empty blacklist
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|update
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|ContainerId
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|host
argument_list|)
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|app
operator|.
name|isPlaceBlacklisted
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
name|GB
argument_list|,
literal|"root.default"
argument_list|,
literal|"user"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of containers allocated"
argument_list|,
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testGetAppsInQueue ()
specifier|public
name|void
name|testGetAppsInQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1.subqueue1"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1.subqueue2"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|appAttId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|apps
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"queue1.subqueue1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId1
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// with and without root prefix should work
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root.queue1.subqueue1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId1
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId3
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// with and without root prefix should work
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"root.user1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|appAttId3
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// apps in subqueues should be included
name|apps
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"queue1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|apps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appAttIds
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|apps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|apps
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|appAttIds
operator|.
name|contains
argument_list|(
name|appAttId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|appAttIds
operator|.
name|contains
argument_list|(
name|appAttId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddAndRemoveAppFromFairScheduler ()
specifier|public
name|void
name|testAddAndRemoveAppFromFairScheduler
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
name|scheduler
init|=
operator|(
name|AbstractYarnScheduler
argument_list|<
name|SchedulerApplicationAttempt
argument_list|,
name|SchedulerNode
argument_list|>
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
decl_stmt|;
name|TestSchedulerUtils
operator|.
name|verifyAppAddedAndRemovedFromScheduler
argument_list|(
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
argument_list|,
name|scheduler
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceUsageByMoveApp ()
specifier|public
name|void
name|testResourceUsageByMoveApp
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
name|GB
argument_list|,
literal|2
argument_list|,
literal|"parent1.queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSQueue
name|parent1
init|=
name|queueMgr
operator|.
name|getParentQueue
argument_list|(
literal|"parent1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSQueue
name|parent2
init|=
name|queueMgr
operator|.
name|getParentQueue
argument_list|(
literal|"parent2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSQueue
name|queue2
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"parent2.queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSQueue
name|queue1
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"parent1.queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parent2
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queue2
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parent1
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queue1
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"parent2.queue2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parent2
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queue2
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|1
operator|*
name|GB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|parent1
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|queue1
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveWouldViolateMaxAppsConstraints ()
specifier|public
name|void
name|testMoveWouldViolateMaxAppsConstraints
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSQueue
name|queue2
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue2
operator|.
name|setMaxRunningApps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveWouldViolateMaxResourcesConstraints ()
specifier|public
name|void
name|testMoveWouldViolateMaxResourcesConstraints
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueMgr
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|oldQueue
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSQueue
name|queue2
init|=
name|queueMgr
operator|.
name|getLeafQueue
argument_list|(
literal|"queue2"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue2
operator|.
name|setMaxShare
argument_list|(
operator|new
name|ConfigurableResource
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|,
name|oldQueue
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveToNonexistentQueue ()
specifier|public
name|void
name|testMoveToNonexistentQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|appAttId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"queue2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowestCommonAncestorForNonRootParent ()
specifier|public
name|void
name|testLowestCommonAncestorForNonRootParent
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|aQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|bQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|aQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.a"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.b"
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSParentQueue
name|queue1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|bQueue
argument_list|)
expr_stmt|;
name|FSQueue
name|ancestorQueue
init|=
name|scheduler
operator|.
name|findLowestCommonAncestorQueue
argument_list|(
name|aQueue
argument_list|,
name|bQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ancestorQueue
argument_list|,
name|queue1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowestCommonAncestorRootParent ()
specifier|public
name|void
name|testLowestCommonAncestorRootParent
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|aQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|bQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|aQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.a"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bQueue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.b"
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSParentQueue
name|queue1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"root"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|bQueue
argument_list|)
expr_stmt|;
name|FSQueue
name|ancestorQueue
init|=
name|scheduler
operator|.
name|findLowestCommonAncestorQueue
argument_list|(
name|aQueue
argument_list|,
name|bQueue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ancestorQueue
argument_list|,
name|queue1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowestCommonAncestorDeeperHierarchy ()
specifier|public
name|void
name|testLowestCommonAncestorDeeperHierarchy
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|FSQueue
name|aQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSQueue
name|bQueue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSQueue
name|a1Queue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|FSQueue
name|b1Queue
init|=
name|mock
argument_list|(
name|FSLeafQueue
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|a1Queue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.a.a1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|b1Queue
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"root.queue1.b.b1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|aQueue
operator|.
name|getChildQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|a1Queue
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|bQueue
operator|.
name|getChildQueues
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|b1Queue
argument_list|)
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSParentQueue
name|queue1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|bQueue
argument_list|)
expr_stmt|;
name|FSQueue
name|ancestorQueue
init|=
name|scheduler
operator|.
name|findLowestCommonAncestorQueue
argument_list|(
name|a1Queue
argument_list|,
name|b1Queue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ancestorQueue
argument_list|,
name|queue1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleRemoval ()
specifier|public
name|void
name|testDoubleRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testUser
init|=
literal|"user1"
decl_stmt|;
comment|// convenience var
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// The placement rule will add the app to the user based queue but the
comment|// passed in queue must exist.
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|testUser
argument_list|,
name|testUser
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
name|AppAttemptAddedSchedulerEvent
name|attemptAddedEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|attemptAddedEvent
argument_list|)
expr_stmt|;
comment|// Get a handle on the attempt.
name|FSAppAttempt
name|attempt
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|attemptRemovedEvent
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Make sure the app attempt is in the queue.
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|attemptList
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
name|testUser
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue missing"
argument_list|,
name|attemptList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Attempt should be in the queue"
argument_list|,
name|attemptList
operator|.
name|contains
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Attempt is stopped"
argument_list|,
name|attempt
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now remove the app attempt
name|scheduler
operator|.
name|handle
argument_list|(
name|attemptRemovedEvent
argument_list|)
expr_stmt|;
comment|// The attempt is not in the queue, and stopped
name|attemptList
operator|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Attempt should not be in the queue"
argument_list|,
name|attemptList
operator|.
name|contains
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Attempt should have been stopped"
argument_list|,
name|attempt
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now remove the app attempt again, since it is stopped nothing happens.
name|scheduler
operator|.
name|handle
argument_list|(
name|attemptRemovedEvent
argument_list|)
expr_stmt|;
comment|// The attempt should still show the original queue info.
name|assertTrue
argument_list|(
literal|"Attempt queue has changed"
argument_list|,
name|attempt
operator|.
name|getQueue
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|YarnException
operator|.
name|class
argument_list|)
DECL|method|testMoveAfterRemoval ()
specifier|public
name|void
name|testMoveAfterRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|testUser
init|=
literal|"user1"
decl_stmt|;
comment|// convenience var
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
name|testUser
argument_list|,
name|testUser
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
name|AppAttemptAddedSchedulerEvent
name|attemptAddedEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|attemptAddedEvent
argument_list|)
expr_stmt|;
comment|// Get a handle on the attempt.
name|FSAppAttempt
name|attempt
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|attemptId
argument_list|)
decl_stmt|;
name|AppAttemptRemovedSchedulerEvent
name|attemptRemovedEvent
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Remove the app attempt
name|scheduler
operator|.
name|handle
argument_list|(
name|attemptRemovedEvent
argument_list|)
expr_stmt|;
comment|// Make sure the app attempt is not in the queue and stopped.
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|attemptList
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
name|testUser
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Queue missing"
argument_list|,
name|attemptList
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Attempt should not be in the queue"
argument_list|,
name|attemptList
operator|.
name|contains
argument_list|(
name|attemptId
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Attempt should have been stopped"
argument_list|,
name|attempt
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
comment|// The attempt should still show the original queue info.
name|assertTrue
argument_list|(
literal|"Attempt queue has changed"
argument_list|,
name|attempt
operator|.
name|getQueue
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|testUser
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now move the app: not using an event since there is none
comment|// in the scheduler. This should throw.
name|scheduler
operator|.
name|moveApplication
argument_list|(
name|attemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"default"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPerfMetricsInited ()
specifier|public
name|void
name|testPerfMetricsInited
parameter_list|()
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|MetricsCollectorImpl
name|collector
init|=
operator|new
name|MetricsCollectorImpl
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|fsOpDurations
operator|.
name|getMetrics
argument_list|(
name|collector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of perf metrics"
argument_list|,
literal|1
argument_list|,
name|collector
operator|.
name|getRecords
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testQueueNameWithTrailingSpace ()
specifier|public
name|void
name|testQueueNameWithTrailingSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// only default queue
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit app with queue name "A"
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent1
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId1
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"A"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent1
argument_list|)
expr_stmt|;
comment|// submission accepted
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId1
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AppAttemptAddedSchedulerEvent
name|attempAddedEvent
init|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|attempAddedEvent
argument_list|)
expr_stmt|;
comment|// That queue should have one app
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"A"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId1
argument_list|)
argument_list|)
expr_stmt|;
comment|// submit app with queue name "A "
name|ApplicationAttemptId
name|appAttemptId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent2
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId2
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"A "
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent2
argument_list|)
expr_stmt|;
comment|// submission rejected
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// submit app with queue name "B.C"
name|ApplicationAttemptId
name|appAttemptId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent3
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId3
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"B.C"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent3
argument_list|)
expr_stmt|;
comment|// submission accepted
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId3
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attempAddedEvent
operator|=
operator|new
name|AppAttemptAddedSchedulerEvent
argument_list|(
name|appAttemptId3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|attempAddedEvent
argument_list|)
expr_stmt|;
comment|// That queue should have one app
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"B.C"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId3
argument_list|)
argument_list|)
expr_stmt|;
comment|// submit app with queue name "A\u00a0" (non-breaking space)
name|ApplicationAttemptId
name|appAttemptId4
init|=
name|createAppAttemptId
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent4
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|appAttemptId4
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"A\u00a0"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent4
argument_list|)
expr_stmt|;
comment|// submission rejected
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApplications
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId4
operator|.
name|getApplicationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEmptyQueueNameInConfigFile ()
specifier|public
name|void
name|testEmptyQueueNameInConfigFile
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
comment|// set empty queue name
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"scheduler init should fail because"
operator|+
literal|" empty queue name."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed to initialize FairScheduler"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUserAsDefaultQueueWithLeadingTrailingSpaceUserName ()
specifier|public
name|void
name|testUserAsDefaultQueueWithLeadingTrailingSpaceUserName
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"default"
argument_list|,
literal|"  user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId2
argument_list|,
literal|"default"
argument_list|,
literal|"user1  "
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|attId2
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createAppAttemptId
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|attId3
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|,
literal|true
argument_list|)
operator|.
name|getNumRunnableApps
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.user1"
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|get
argument_list|(
name|attId3
operator|.
name|getApplicationId
argument_list|()
argument_list|)
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRemovedNodeDecomissioningNode ()
specifier|public
name|void
name|testRemovedNodeDecomissioningNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Register nodemanager
name|NodeManager
name|nm
init|=
name|registerNode
argument_list|(
literal|"host_decom"
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|RMNode
name|node
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Send a heartbeat to kick the tires on the Scheduler
name|NodeUpdateSchedulerEvent
name|nodeUpdate
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|handle
argument_list|(
name|nodeUpdate
argument_list|)
expr_stmt|;
comment|// Force remove the node to simulate race condition
operator|(
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|getNodeTracker
argument_list|()
operator|.
name|removeNode
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Kick off another heartbeat with the node state mocked to decommissioning
name|RMNode
name|spyNode
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyNode
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|spyNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testResourceUpdateDecommissioningNode ()
specifier|public
name|void
name|testResourceUpdateDecommissioningNode
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Mock the RMNodeResourceUpdate event handler to update SchedulerNode
comment|// to have 0 available resource
name|RMContext
name|spyContext
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|Dispatcher
name|mockDispatcher
init|=
name|mock
argument_list|(
name|AsyncDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockDispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|EventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|instanceof
name|RMNodeResourceUpdateEvent
condition|)
block|{
name|RMNodeResourceUpdateEvent
name|resourceEvent
init|=
operator|(
name|RMNodeResourceUpdateEvent
operator|)
name|event
decl_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|resourceEvent
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|updateTotalResource
argument_list|(
name|resourceEvent
operator|.
name|getResourceOption
argument_list|()
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockDispatcher
argument_list|)
operator|.
name|when
argument_list|(
name|spyContext
argument_list|)
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
operator|(
operator|(
name|FairScheduler
operator|)
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|)
operator|.
name|setRMContext
argument_list|(
name|spyContext
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|mockDispatcher
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Register node
name|String
name|host_0
init|=
literal|"host_0"
decl_stmt|;
name|NodeManager
name|nm_0
init|=
name|registerNode
argument_list|(
name|host_0
argument_list|,
literal|1234
argument_list|,
literal|2345
argument_list|,
name|NetworkTopology
operator|.
name|DEFAULT_RACK
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|RMNode
name|node
init|=
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm_0
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Send a heartbeat to kick the tires on the Scheduler
name|NodeUpdateSchedulerEvent
name|nodeUpdate
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|handle
argument_list|(
name|nodeUpdate
argument_list|)
expr_stmt|;
comment|// Kick off another heartbeat with the node state mocked to decommissioning
comment|// This should update the schedulernodes to have 0 available resource
name|RMNode
name|spyNode
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm_0
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|spyNode
operator|.
name|getState
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|NodeState
operator|.
name|DECOMMISSIONING
argument_list|)
expr_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|spyNode
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the used resource is 0 GB 0 core
comment|// Assert.assertEquals(1 * GB, nm_0.getUsed().getMemory());
name|Resource
name|usedResource
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|nm_0
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getAllocatedResource
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|usedResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|usedResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Check total resource of scheduler node is also changed to 0 GB 0 core
name|Resource
name|totalResource
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|nm_0
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getTotalResource
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|0
operator|*
name|GB
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|totalResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Check the available resource is 0/0
name|Resource
name|availableResource
init|=
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|getSchedulerNode
argument_list|(
name|nm_0
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|.
name|getUnallocatedResource
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|availableResource
operator|.
name|getMemorySize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|availableResource
operator|.
name|getVirtualCores
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|registerNode (String hostName, int containerManagerPort, int httpPort, String rackName, Resource capability)
specifier|private
name|NodeManager
name|registerNode
parameter_list|(
name|String
name|hostName
parameter_list|,
name|int
name|containerManagerPort
parameter_list|,
name|int
name|httpPort
parameter_list|,
name|String
name|rackName
parameter_list|,
name|Resource
name|capability
parameter_list|)
throws|throws
name|IOException
throws|,
name|YarnException
block|{
name|NodeManager
name|nm
init|=
operator|new
name|NodeManager
argument_list|(
name|hostName
argument_list|,
name|containerManagerPort
argument_list|,
name|httpPort
argument_list|,
name|rackName
argument_list|,
name|capability
argument_list|,
name|resourceManager
argument_list|)
decl_stmt|;
comment|// after YARN-5375, scheduler event is processed in rm main dispatcher,
comment|// wait it processed, or may lead dead lock
name|drainEventsOnRM
argument_list|()
expr_stmt|;
name|NodeAddedSchedulerEvent
name|nodeAddEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMNodes
argument_list|()
operator|.
name|get
argument_list|(
name|nm
operator|.
name|getNodeId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getResourceScheduler
argument_list|()
operator|.
name|handle
argument_list|(
name|nodeAddEvent1
argument_list|)
expr_stmt|;
return|return
name|nm
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testContainerAllocationWithContainerIdLeap ()
specifier|public
name|void
name|testContainerAllocationWithContainerIdLeap
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setFloat
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|RESERVABLE_NODES
argument_list|,
literal|0.50f
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add two node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|2048
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|//container will be reserved at node1
name|RMContainer
name|reservedContainer1
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|node1
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|reservedContainer1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RMContainer
name|reservedContainer2
init|=
name|scheduler
operator|.
name|getSchedulerNode
argument_list|(
name|node2
operator|.
name|getNodeID
argument_list|()
argument_list|)
operator|.
name|getReservedContainer
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|reservedContainer2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// release resource
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|app1
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemorySize
argument_list|()
argument_list|)
expr_stmt|;
comment|// container will be allocated at node2
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|long
name|maxId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RMContainer
name|container
range|:
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|container
operator|.
name|getContainer
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|node2
operator|.
name|getNodeID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
operator|>
name|maxId
condition|)
block|{
name|maxId
operator|=
name|container
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|reservedId
init|=
name|reservedContainer1
operator|.
name|getContainerId
argument_list|()
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|reservedId
operator|+
literal|1
argument_list|,
name|maxId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
DECL|method|testRefreshQueuesWhenRMHA ()
specifier|public
name|void
name|testRefreshQueuesWhenRMHA
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|AUTO_FAILOVER_ENABLED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|YarnConfiguration
operator|.
name|RECOVERY_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOW_UNDECLARED_POOLS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
name|requestInfo
init|=
operator|new
name|HAServiceProtocol
operator|.
name|StateChangeRequestInfo
argument_list|(
name|HAServiceProtocol
operator|.
name|RequestSource
operator|.
name|REQUEST_BY_USER
argument_list|)
decl_stmt|;
comment|// 1. start a standby RM, file 'ALLOC_FILE' is empty, so there is no queues
name|MockRM
name|rm1
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rm1
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|start
argument_list|()
expr_stmt|;
name|rm1
operator|.
name|getAdminService
argument_list|()
operator|.
name|transitionToStandby
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
comment|// 2. add a new queue "test_queue"
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"test_queue\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_STORE
argument_list|,
name|MemoryRMStateStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. start a active RM
name|MockRM
name|rm2
init|=
operator|new
name|MockRM
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|MemoryRMStateStore
name|memStore
init|=
operator|(
name|MemoryRMStateStore
operator|)
name|rm2
operator|.
name|getRMStateStore
argument_list|()
decl_stmt|;
name|rm2
operator|.
name|start
argument_list|()
expr_stmt|;
name|MockNM
name|nm
init|=
operator|new
name|MockNM
argument_list|(
literal|"127.0.0.1:1234"
argument_list|,
literal|15120
argument_list|,
name|rm2
operator|.
name|getResourceTrackerService
argument_list|()
argument_list|)
decl_stmt|;
name|nm
operator|.
name|registerNode
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|getAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
comment|// 4. submit a app to the new added queue "test_queue"
name|RMApp
name|app
init|=
name|rm2
operator|.
name|submitApp
argument_list|(
literal|200
argument_list|,
literal|"test_app"
argument_list|,
literal|"user"
argument_list|,
literal|null
argument_list|,
literal|"test_queue"
argument_list|)
decl_stmt|;
name|RMAppAttempt
name|attempt0
init|=
name|app
operator|.
name|getCurrentAppAttempt
argument_list|()
decl_stmt|;
name|nm
operator|.
name|nodeHeartbeat
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MockAM
name|am0
init|=
name|rm2
operator|.
name|sendAMLaunched
argument_list|(
name|attempt0
operator|.
name|getAppAttemptId
argument_list|()
argument_list|)
decl_stmt|;
name|am0
operator|.
name|registerAppAttempt
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"root.test_queue"
argument_list|,
name|app
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5. Transit rm1 to active, recover app
operator|(
operator|(
name|RMContextImpl
operator|)
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|)
operator|.
name|setStateStore
argument_list|(
name|memStore
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|getAdminService
argument_list|()
operator|.
name|transitionToActive
argument_list|(
name|requestInfo
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|drainEvents
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RMApp
name|recoveredApp
init|=
name|rm1
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"root.test_queue"
argument_list|,
name|recoveredApp
operator|.
name|getQueue
argument_list|()
argument_list|)
expr_stmt|;
name|rm1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|rm2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReservationMetrics ()
specifier|public
name|void
name|testReservationMetrics
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|QueueMetrics
name|metrics
init|=
name|scheduler
operator|.
name|getRootQueueMetrics
argument_list|()
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|"127.0.0.1"
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|appAttemptId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// no reservation yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// create reservation of {4096, 4}
name|createSchedulingRequestExistingApplication
argument_list|(
literal|4096
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
name|appAttemptId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// reservation created
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|metrics
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4096
argument_list|,
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove AppAttempt
name|AppAttemptRemovedSchedulerEvent
name|attRemoveEvent
init|=
operator|new
name|AppAttemptRemovedSchedulerEvent
argument_list|(
name|appAttemptId
argument_list|,
name|RMAppAttemptState
operator|.
name|KILLED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|attRemoveEvent
argument_list|)
expr_stmt|;
comment|// The reservation metrics should be subtracted
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedContainers
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedMB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metrics
operator|.
name|getReservedVirtualCores
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpdateDemand ()
specifier|public
name|void
name|testUpdateDemand
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Resource
name|maxResource
init|=
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
operator|*
literal|8
argument_list|)
decl_stmt|;
name|ConfigurableResource
name|maxResourceConf
init|=
operator|new
name|ConfigurableResource
argument_list|(
name|maxResource
argument_list|)
decl_stmt|;
name|FSAppAttempt
name|app1
init|=
name|mock
argument_list|(
name|FSAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app1
operator|.
name|getDemand
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxResource
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app1
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app2
init|=
name|mock
argument_list|(
name|FSAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app2
operator|.
name|getDemand
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|maxResource
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app2
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|)
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSParentQueue
name|queue1
init|=
name|queueManager
operator|.
name|getParentQueue
argument_list|(
literal|"queue1"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|aQueue
init|=
operator|new
name|FSLeafQueue
argument_list|(
literal|"root.queue1.a"
argument_list|,
name|scheduler
argument_list|,
name|queue1
argument_list|)
decl_stmt|;
name|aQueue
operator|.
name|setMaxShare
argument_list|(
name|maxResourceConf
argument_list|)
expr_stmt|;
name|aQueue
operator|.
name|addApp
argument_list|(
name|app1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|bQueue
init|=
operator|new
name|FSLeafQueue
argument_list|(
literal|"root.queue1.b"
argument_list|,
name|scheduler
argument_list|,
name|queue1
argument_list|)
decl_stmt|;
name|bQueue
operator|.
name|setMaxShare
argument_list|(
name|maxResourceConf
argument_list|)
expr_stmt|;
name|bQueue
operator|.
name|addApp
argument_list|(
name|app2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|setMaxShare
argument_list|(
name|maxResourceConf
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|aQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|addChildQueue
argument_list|(
name|bQueue
argument_list|)
expr_stmt|;
name|queue1
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Demand is greater than max allowed "
argument_list|,
name|Resources
operator|.
name|equals
argument_list|(
name|queue1
operator|.
name|getDemand
argument_list|()
argument_list|,
name|maxResource
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Demand of child queue not updated "
argument_list|,
name|Resources
operator|.
name|equals
argument_list|(
name|aQueue
operator|.
name|getDemand
argument_list|()
argument_list|,
name|maxResource
argument_list|)
operator|&&
name|Resources
operator|.
name|equals
argument_list|(
name|bQueue
operator|.
name|getDemand
argument_list|()
argument_list|,
name|maxResource
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDumpState ()
specifier|public
name|void
name|testDumpState
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"parent\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"child1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>1</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|ControlledClock
name|clock
init|=
operator|new
name|ControlledClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|child1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child1"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Resource
name|resource
init|=
name|Resource
operator|.
name|newInstance
argument_list|(
literal|4
operator|*
name|GB
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|child1
operator|.
name|setMaxShare
argument_list|(
operator|new
name|ConfigurableResource
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|app
init|=
name|mock
argument_list|(
name|FSAppAttempt
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app
operator|.
name|getDemand
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|app
operator|.
name|getResourceUsage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|child1
operator|.
name|addApp
argument_list|(
name|app
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|child1
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|String
name|childQueueString
init|=
literal|"{Name: root.parent.child1,"
operator|+
literal|" Weight: 1.0,"
operator|+
literal|" Policy: fair,"
operator|+
literal|" FairShare:<memory:0, vCores:0>,"
operator|+
literal|" SteadyFairShare:<memory:0, vCores:0>,"
operator|+
literal|" MaxShare:<memory:4096, vCores:4>,"
operator|+
literal|" MinShare:<memory:0, vCores:0>,"
operator|+
literal|" ResourceUsage:<memory:4096, vCores:4>,"
operator|+
literal|" Demand:<memory:4096, vCores:4>,"
operator|+
literal|" Runnable: 1,"
operator|+
literal|" NumPendingApps: 0,"
operator|+
literal|" NonRunnable: 0,"
operator|+
literal|" MaxAMShare: 0.5,"
operator|+
literal|" MaxAMResource:<memory:0, vCores:0>,"
operator|+
literal|" AMResourceUsage:<memory:0, vCores:0>,"
operator|+
literal|" LastTimeAtMinShare: "
operator|+
name|clock
operator|.
name|getTime
argument_list|()
operator|+
literal|"}"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected state dump string"
argument_list|,
name|childQueueString
argument_list|,
name|child1
operator|.
name|dumpState
argument_list|()
argument_list|)
expr_stmt|;
name|FSParentQueue
name|parent
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getParentQueue
argument_list|(
literal|"parent"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|parent
operator|.
name|setMaxShare
argument_list|(
operator|new
name|ConfigurableResource
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|updateDemand
argument_list|()
expr_stmt|;
name|String
name|parentQueueString
init|=
literal|"{Name: root.parent,"
operator|+
literal|" Weight: 1.0,"
operator|+
literal|" Policy: fair,"
operator|+
literal|" FairShare:<memory:0, vCores:0>,"
operator|+
literal|" SteadyFairShare:<memory:0, vCores:0>,"
operator|+
literal|" MaxShare:<memory:4096, vCores:4>,"
operator|+
literal|" MinShare:<memory:0, vCores:0>,"
operator|+
literal|" ResourceUsage:<memory:4096, vCores:4>,"
operator|+
literal|" Demand:<memory:4096, vCores:4>,"
operator|+
literal|" MaxAMShare: 0.5,"
operator|+
literal|" Runnable: 0}"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected state dump string"
argument_list|,
name|parentQueueString
operator|+
literal|", "
operator|+
name|childQueueString
argument_list|,
name|parent
operator|.
name|dumpState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCompletedContainerOnRemovedNode ()
specifier|public
name|void
name|testCompletedContainerOnRemovedNode
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|"127.0.0.2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create application attempt
name|ApplicationAttemptId
name|appAttemptId
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|createMockRMApp
argument_list|(
name|appAttemptId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|appAttemptId
operator|.
name|getApplicationId
argument_list|()
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplicationAttempt
argument_list|(
name|appAttemptId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create container request that goes to a specific node.
comment|// Without the 2nd and 3rd request we do not get live containers
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request1
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|ResourceRequest
name|request2
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|ResourceRequest
name|request3
init|=
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request3
argument_list|)
expr_stmt|;
comment|// Perform allocation
name|scheduler
operator|.
name|allocate
argument_list|(
name|appAttemptId
argument_list|,
name|ask1
argument_list|,
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NULL_UPDATE_REQUESTS
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the allocated containers for the application (list can not be null)
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|clist
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clist
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that we remove the correct node (should never fail)
name|RMContainer
name|rmc
init|=
name|clist
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeId
name|containerNodeID
init|=
name|rmc
operator|.
name|getAllocatedNode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|node
operator|.
name|getNodeID
argument_list|()
argument_list|,
name|containerNodeID
argument_list|)
expr_stmt|;
comment|// Remove node
name|scheduler
operator|.
name|handle
argument_list|(
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call completedContainer() should not fail even if the node has been
comment|// removed
name|scheduler
operator|.
name|completedContainer
argument_list|(
name|rmc
argument_list|,
name|SchedulerUtils
operator|.
name|createAbnormalContainerStatus
argument_list|(
name|rmc
operator|.
name|getContainerId
argument_list|()
argument_list|,
name|SchedulerUtils
operator|.
name|COMPLETED_APPLICATION
argument_list|)
argument_list|,
name|RMContainerEventType
operator|.
name|EXPIRE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppRejectedToQueueWithZeroCapacityOfVcores ()
specifier|public
name|void
name|testAppRejectedToQueueWithZeroCapacityOfVcores
parameter_list|()
throws|throws
name|IOException
block|{
name|testAppRejectedToQueueWithZeroCapacityOfResource
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppRejectedToQueueWithZeroCapacityOfMemory ()
specifier|public
name|void
name|testAppRejectedToQueueWithZeroCapacityOfMemory
parameter_list|()
throws|throws
name|IOException
block|{
name|testAppRejectedToQueueWithZeroCapacityOfResource
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
expr_stmt|;
block|}
DECL|method|testAppRejectedToQueueWithZeroCapacityOfResource (String resource)
specifier|private
name|void
name|testAppRejectedToQueueWithZeroCapacityOfResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|generateAllocationFileWithZeroResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Event
argument_list|>
name|recordedEvents
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|RMContext
name|spyContext
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
decl_stmt|;
name|Dispatcher
name|mockDispatcher
init|=
name|mock
argument_list|(
name|AsyncDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockDispatcher
operator|.
name|getEventHandler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|(
name|EventHandler
operator|)
name|event
lambda|->
block|{
if|if
condition|(
name|event
operator|instanceof
name|RMAppEvent
condition|)
block|{
name|recordedEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|mockDispatcher
argument_list|)
operator|.
name|when
argument_list|(
name|spyContext
argument_list|)
operator|.
name|getDispatcher
argument_list|()
expr_stmt|;
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|mockDispatcher
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|setRMContext
argument_list|(
name|spyContext
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// submit app with queue name (queueA)
name|ApplicationAttemptId
name|appAttemptId1
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceRequest
name|amReqs
init|=
name|ResourceRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|capability
argument_list|(
name|Resource
operator|.
name|newInstance
argument_list|(
literal|5
operator|*
name|GB
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|createApplicationWithAMResource
argument_list|(
name|appAttemptId1
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
name|Resource
operator|.
name|newInstance
argument_list|(
name|GB
argument_list|,
literal|1
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|amReqs
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Exactly one APP_REJECTED event is expected"
argument_list|,
literal|1
argument_list|,
name|recordedEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Event
name|event
init|=
name|recordedEvents
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RMAppEvent
name|rmAppEvent
init|=
operator|(
name|RMAppEvent
operator|)
name|event
decl_stmt|;
name|assertEquals
argument_list|(
name|RMAppEventType
operator|.
name|APP_REJECTED
argument_list|,
name|rmAppEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Diagnostic message does not match: "
operator|+
name|rmAppEvent
operator|.
name|getDiagnosticMsg
argument_list|()
argument_list|,
name|rmAppEvent
operator|.
name|getDiagnosticMsg
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Cannot submit application application[\\d_]+ to queue "
operator|+
literal|"root.queueA because it has zero amount of resource "
operator|+
literal|"for a requested resource! "
operator|+
literal|"Invalid requested AM resources: .+, "
operator|+
literal|"maximum queue resources: .+"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|generateAllocationFileWithZeroResource (String resource)
specifier|private
name|void
name|generateAllocationFileWithZeroResource
parameter_list|(
name|String
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|String
name|resources
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|)
condition|)
block|{
name|resources
operator|=
literal|"0 mb,2vcores"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|resource
operator|.
name|equals
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|)
condition|)
block|{
name|resources
operator|=
literal|"10000 mb,0vcores"
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>"
operator|+
name|resources
operator|+
literal|"</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxResources>"
operator|+
name|resources
operator|+
literal|"</maxResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>2.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1 mb 1 vcores</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>0.0</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingRejectedToQueueWithZeroCapacityOfMemory ()
specifier|public
name|void
name|testSchedulingRejectedToQueueWithZeroCapacityOfMemory
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This request is not valid as queue will have 0 capacity of memory and
comment|// the requests asks 2048M
name|ResourceRequest
name|invalidRequest
init|=
name|createResourceRequest
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|validRequest
init|=
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|testSchedulingRejectedToQueueZeroCapacityOfResource
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|invalidRequest
argument_list|,
name|validRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingAllowedToQueueWithZeroCapacityOfMemory ()
specifier|public
name|void
name|testSchedulingAllowedToQueueWithZeroCapacityOfMemory
parameter_list|()
throws|throws
name|IOException
block|{
name|testSchedulingAllowedToQueueZeroCapacityOfResource
argument_list|(
name|ResourceInformation
operator|.
name|MEMORY_URI
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingRejectedToQueueWithZeroCapacityOfVcores ()
specifier|public
name|void
name|testSchedulingRejectedToQueueWithZeroCapacityOfVcores
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This request is not valid as queue will have 0 capacity of vCores and
comment|// the requests asks 1
name|ResourceRequest
name|invalidRequest
init|=
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ResourceRequest
name|validRequest
init|=
name|createResourceRequest
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|testSchedulingRejectedToQueueZeroCapacityOfResource
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|invalidRequest
argument_list|,
name|validRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSchedulingAllowedToQueueWithZeroCapacityOfVcores ()
specifier|public
name|void
name|testSchedulingAllowedToQueueWithZeroCapacityOfVcores
parameter_list|()
throws|throws
name|IOException
block|{
name|testSchedulingAllowedToQueueZeroCapacityOfResource
argument_list|(
name|ResourceInformation
operator|.
name|VCORES_URI
argument_list|,
literal|2048
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testSchedulingRejectedToQueueZeroCapacityOfResource ( String resource, Collection<ResourceRequest> requests)
specifier|private
name|void
name|testSchedulingRejectedToQueueZeroCapacityOfResource
parameter_list|(
name|String
name|resource
parameter_list|,
name|Collection
argument_list|<
name|ResourceRequest
argument_list|>
name|requests
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|generateAllocationFileWithZeroResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
try|try
block|{
name|createSchedulingRequest
argument_list|(
name|requests
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception is expected because the queue has zero capacity of "
operator|+
name|resource
operator|+
literal|" and requested resource capabilities are: "
operator|+
name|requests
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ResourceRequest
operator|::
name|getCapability
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerInvalidResoureRequestException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The thrown exception is not the expected one. Exception message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|matches
argument_list|(
literal|"Resource request is invalid for application "
operator|+
literal|"application[\\d_]+ because queue root\\.queueA has 0 "
operator|+
literal|"amount of resource for a resource type! "
operator|+
literal|"Validation result:.*"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ApplicationAttemptId
argument_list|>
name|appsInQueue
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"queueA"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of apps in queue 'queueA' should be one!"
argument_list|,
literal|1
argument_list|,
name|appsInQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appAttemptId
init|=
name|scheduler
operator|.
name|getAppsInQueue
argument_list|(
literal|"queueA"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Scheduler app for appAttemptId "
operator|+
name|appAttemptId
operator|+
literal|" should not be null!"
argument_list|,
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
argument_list|)
expr_stmt|;
name|FSAppAttempt
name|schedulerApp
init|=
name|scheduler
operator|.
name|getSchedulerApp
argument_list|(
name|appAttemptId
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Scheduler app queueInfo for appAttemptId "
operator|+
name|appAttemptId
operator|+
literal|" should not be null!"
argument_list|,
name|schedulerApp
operator|.
name|getAppSchedulingInfo
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"There should be no requests accepted"
argument_list|,
name|schedulerApp
operator|.
name|getAppSchedulingInfo
argument_list|()
operator|.
name|getAllResourceRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSchedulingAllowedToQueueZeroCapacityOfResource ( String resource, int memory, int vCores)
specifier|private
name|void
name|testSchedulingAllowedToQueueZeroCapacityOfResource
parameter_list|(
name|String
name|resource
parameter_list|,
name|int
name|memory
parameter_list|,
name|int
name|vCores
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|generateAllocationFileWithZeroResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
name|memory
argument_list|,
name|vCores
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

