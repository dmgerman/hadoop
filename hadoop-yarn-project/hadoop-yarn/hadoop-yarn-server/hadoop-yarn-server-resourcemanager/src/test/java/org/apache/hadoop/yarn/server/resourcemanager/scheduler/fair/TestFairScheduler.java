begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|MockApps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationAttemptId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ApplicationSubmissionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ContainerLaunchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|FinalApplicationStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|QueueACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|ResourceRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|impl
operator|.
name|pb
operator|.
name|ApplicationSubmissionContextPBImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|event
operator|.
name|AsyncDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factories
operator|.
name|RecordFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|factory
operator|.
name|providers
operator|.
name|RecordFactoryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ApplicationMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|MockNodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|resource
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMApp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|RMAppState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmapp
operator|.
name|attempt
operator|.
name|RMAppAttemptState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmcontainer
operator|.
name|RMContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|rmnode
operator|.
name|RMNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|AppRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeAddedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeRemovedSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|event
operator|.
name|NodeUpdateSchedulerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|fair
operator|.
name|policies
operator|.
name|FifoPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
DECL|class|TestFairScheduler
specifier|public
class|class
name|TestFairScheduler
block|{
DECL|class|MockClock
specifier|private
class|class
name|MockClock
implements|implements
name|Clock
block|{
DECL|field|time
specifier|private
name|long
name|time
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
DECL|method|getTime ()
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|time
return|;
block|}
DECL|method|tick (int seconds)
specifier|public
name|void
name|tick
parameter_list|(
name|int
name|seconds
parameter_list|)
block|{
name|time
operator|=
name|time
operator|+
name|seconds
operator|*
literal|1000
expr_stmt|;
block|}
block|}
DECL|field|TEST_DIR
specifier|final
specifier|static
name|String
name|TEST_DIR
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.data"
argument_list|,
literal|"/tmp"
argument_list|)
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|ALLOC_FILE
specifier|final
specifier|static
name|String
name|ALLOC_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_DIR
argument_list|,
literal|"test-queues"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
DECL|field|scheduler
specifier|private
name|FairScheduler
name|scheduler
decl_stmt|;
DECL|field|resourceManager
specifier|private
name|ResourceManager
name|resourceManager
decl_stmt|;
DECL|field|recordFactory
specifier|private
specifier|static
name|RecordFactory
name|recordFactory
init|=
name|RecordFactoryProvider
operator|.
name|getRecordFactory
argument_list|(
literal|null
argument_list|)
decl_stmt|;
DECL|field|APP_ID
specifier|private
name|int
name|APP_ID
init|=
literal|1
decl_stmt|;
comment|// Incrementing counter for schedling apps
DECL|field|ATTEMPT_ID
specifier|private
name|int
name|ATTEMPT_ID
init|=
literal|1
decl_stmt|;
comment|// Incrementing counter for scheduling attempts
comment|// HELPER METHODS
annotation|@
name|Before
DECL|method|setUp ()
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|scheduler
operator|=
operator|new
name|FairScheduler
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
comment|// All tests assume only one assignment per node update
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
operator|new
name|ResourceManager
argument_list|()
expr_stmt|;
name|resourceManager
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AsyncDispatcher
operator|)
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getDispatcher
argument_list|()
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|tearDown ()
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|scheduler
operator|=
literal|null
expr_stmt|;
name|resourceManager
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|createConfiguration ()
specifier|private
name|Configuration
name|createConfiguration
parameter_list|()
block|{
name|Configuration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER
argument_list|,
name|FairScheduler
operator|.
name|class
argument_list|,
name|ResourceScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|createAppAttemptId (int appId, int attemptId)
specifier|private
name|ApplicationAttemptId
name|createAppAttemptId
parameter_list|(
name|int
name|appId
parameter_list|,
name|int
name|attemptId
parameter_list|)
block|{
name|ApplicationAttemptId
name|attId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|ApplicationId
name|appIdImpl
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationId
operator|.
name|class
argument_list|)
decl_stmt|;
name|appIdImpl
operator|.
name|setId
argument_list|(
name|appId
argument_list|)
expr_stmt|;
name|attId
operator|.
name|setAttemptId
argument_list|(
name|attemptId
argument_list|)
expr_stmt|;
name|attId
operator|.
name|setApplicationId
argument_list|(
name|appIdImpl
argument_list|)
expr_stmt|;
return|return
name|attId
return|;
block|}
DECL|method|createResourceRequest (int memory, String host, int priority, int numContainers)
specifier|private
name|ResourceRequest
name|createResourceRequest
parameter_list|(
name|int
name|memory
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
name|ResourceRequest
name|request
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ResourceRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setCapability
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
name|memory
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setHostName
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|request
operator|.
name|setNumContainers
argument_list|(
name|numContainers
argument_list|)
expr_stmt|;
name|Priority
name|prio
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|Priority
operator|.
name|class
argument_list|)
decl_stmt|;
name|prio
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|request
operator|.
name|setPriority
argument_list|(
name|prio
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
comment|/**    * Creates a single container priority-1 request and submits to    * scheduler.    */
DECL|method|createSchedulingRequest (int memory, String queueId, String userId)
specifier|private
name|ApplicationAttemptId
name|createSchedulingRequest
parameter_list|(
name|int
name|memory
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|userId
parameter_list|)
block|{
return|return
name|createSchedulingRequest
argument_list|(
name|memory
argument_list|,
name|queueId
argument_list|,
name|userId
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|createSchedulingRequest (int memory, String queueId, String userId, int numContainers)
specifier|private
name|ApplicationAttemptId
name|createSchedulingRequest
parameter_list|(
name|int
name|memory
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|userId
parameter_list|,
name|int
name|numContainers
parameter_list|)
block|{
return|return
name|createSchedulingRequest
argument_list|(
name|memory
argument_list|,
name|queueId
argument_list|,
name|userId
argument_list|,
name|numContainers
argument_list|,
literal|1
argument_list|)
return|;
block|}
DECL|method|createSchedulingRequest (int memory, String queueId, String userId, int numContainers, int priority)
specifier|private
name|ApplicationAttemptId
name|createSchedulingRequest
parameter_list|(
name|int
name|memory
parameter_list|,
name|String
name|queueId
parameter_list|,
name|String
name|userId
parameter_list|,
name|int
name|numContainers
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|ApplicationAttemptId
name|id
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id
argument_list|,
name|queueId
argument_list|,
name|userId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|createResourceRequest
argument_list|(
name|memory
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|priority
argument_list|,
name|numContainers
argument_list|)
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
DECL|method|createSchedulingRequestExistingApplication (int memory, int priority, ApplicationAttemptId attId)
specifier|private
name|void
name|createSchedulingRequestExistingApplication
parameter_list|(
name|int
name|memory
parameter_list|,
name|int
name|priority
parameter_list|,
name|ApplicationAttemptId
name|attId
parameter_list|)
block|{
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request
init|=
name|createResourceRequest
argument_list|(
name|memory
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
name|priority
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ask
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|attId
argument_list|,
name|ask
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TESTS
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2000
argument_list|)
DECL|method|testLoadConfigurationOnInitialize ()
specifier|public
name|void
name|testLoadConfigurationOnInitialize
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ASSIGN_MULTIPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|MAX_ASSIGN
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|SIZE_BASED_WEIGHT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_NODE
argument_list|,
literal|.5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|LOCALITY_THRESHOLD_RACK
argument_list|,
literal|.7
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MAXIMUM_ALLOCATION_MB
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|YarnConfiguration
operator|.
name|RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
literal|512
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|assignMultiple
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scheduler
operator|.
name|maxAssign
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|sizeBasedWeight
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.5
argument_list|,
name|scheduler
operator|.
name|nodeLocalityThreshold
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|.7
argument_list|,
name|scheduler
operator|.
name|rackLocalityThreshold
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getMaximumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getMinimumResourceCapability
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAggregateCapacityTracking ()
specifier|public
name|void
name|testAggregateCapacityTracking
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getClusterCapacity
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add another node
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|512
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536
argument_list|,
name|scheduler
operator|.
name|getClusterCapacity
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the first node
name|NodeRemovedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeRemovedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|512
argument_list|,
name|scheduler
operator|.
name|getClusterCapacity
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleFairShareCalculation ()
specifier|public
name|void
name|testSimpleFairShareCalculation
parameter_list|()
block|{
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Have two queues which want entire cluster capacity
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.default"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|5120
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleHierarchicalFairShareCalculation ()
specifier|public
name|void
name|testSimpleHierarchicalFairShareCalculation
parameter_list|()
block|{
comment|// Add one big node (only care about aggregate capacity)
name|int
name|capacity
init|=
literal|10
operator|*
literal|24
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
name|capacity
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Have two queues which want entire cluster capacity
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"parent.queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|10
operator|*
literal|1024
argument_list|,
literal|"parent.queue3"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.queue2"
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue3
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.queue3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|2
argument_list|,
name|queue1
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue2
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|capacity
operator|/
literal|4
argument_list|,
name|queue3
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalQueuesSimilarParents ()
specifier|public
name|void
name|testHierarchicalQueuesSimilarParents
parameter_list|()
block|{
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|FSLeafQueue
name|leafQueue
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|leafQueue
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"root.parent.child"
argument_list|,
name|leafQueue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue2
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|leafQueue2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue3
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.child.grandchild"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|leafQueue3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|FSLeafQueue
name|leafQueue4
init|=
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"parent.sister"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|leafQueue4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"root.parent.sister"
argument_list|,
name|leafQueue4
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSimpleContainerAllocation ()
specifier|public
name|void
name|testSimpleContainerAllocation
parameter_list|()
block|{
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Add another node
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|512
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|512
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Asked for less than min_allocation.
name|assertEquals
argument_list|(
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testSimpleContainerReservation ()
specifier|public
name|void
name|testSimpleContainerReservation
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue 1 requests full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 1 is allocated app capacity
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue1"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now queue 2 requests likewise
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Make sure queue 2 is waiting with a reservation
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now another node checks in with capacity
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// Make sure this goes to queue 2
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"queue2"
argument_list|)
operator|.
name|getResourceUsage
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// The old reservation should still be there...
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but it should disappear when we update the first node.
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUserAsDefaultQueue ()
specifier|public
name|void
name|testUserAsDefaultQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|getAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|USER_AS_DEFAULT_QUEUE
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|AppAddedSchedulerEvent
name|appAddedEvent2
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|,
literal|"user2"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|getAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|)
operator|.
name|getAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user2"
argument_list|)
operator|.
name|getAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFairShareWithMinAlloc ()
specifier|public
name|void
name|testFairShareWithMinAlloc
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|createSchedulingRequest
argument_list|(
literal|2
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueA"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueB"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|2048
argument_list|,
name|p
operator|.
name|getFairShare
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Make allocation requests and ensure they are reflected in queue demand.    */
annotation|@
name|Test
DECL|method|testQueueDemandCalculation ()
specifier|public
name|void
name|testQueueDemandCalculation
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationAttemptId
name|id11
init|=
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id11
argument_list|,
literal|"root.queue1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|id21
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id21
argument_list|,
literal|"root.queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|id22
init|=
name|createAppAttemptId
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|id22
argument_list|,
literal|"root.queue2"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|int
name|minReqSize
init|=
name|YarnConfiguration
operator|.
name|DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB
decl_stmt|;
comment|// First ask, queue1 requests 1 large (minReqSize * 2).
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask1
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request1
init|=
name|createResourceRequest
argument_list|(
name|minReqSize
operator|*
literal|2
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ask1
operator|.
name|add
argument_list|(
name|request1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id11
argument_list|,
name|ask1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Second ask, queue2 requests 1 large + (2 * minReqSize)
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask2
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request2
init|=
name|createResourceRequest
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
literal|"foo"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ResourceRequest
name|request3
init|=
name|createResourceRequest
argument_list|(
name|minReqSize
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ask2
operator|.
name|add
argument_list|(
name|request2
argument_list|)
expr_stmt|;
name|ask2
operator|.
name|add
argument_list|(
name|request3
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id21
argument_list|,
name|ask2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Third ask, queue2 requests 1 large
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|ask3
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ResourceRequest
name|request4
init|=
name|createResourceRequest
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ask3
operator|.
name|add
argument_list|(
name|request4
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|id22
argument_list|,
name|ask3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minReqSize
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queue1"
argument_list|)
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|minReqSize
operator|+
literal|2
operator|*
name|minReqSize
operator|+
operator|(
literal|2
operator|*
name|minReqSize
operator|)
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getQueue
argument_list|(
literal|"root.queue2"
argument_list|)
operator|.
name|getDemand
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppAdditionAndRemoval ()
specifier|public
name|void
name|testAppAdditionAndRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|AppAddedSchedulerEvent
name|appAddedEvent1
init|=
operator|new
name|AppAddedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|"default"
argument_list|,
literal|"user1"
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|appAddedEvent1
argument_list|)
expr_stmt|;
comment|// Scheduler should have two queues (the default and the one created for user1)
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// That queue should have one app
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|getAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AppRemovedSchedulerEvent
name|appRemovedEvent1
init|=
operator|new
name|AppRemovedSchedulerEvent
argument_list|(
name|createAppAttemptId
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|RMAppAttemptState
operator|.
name|FINISHED
argument_list|)
decl_stmt|;
comment|// Now remove app
name|scheduler
operator|.
name|handle
argument_list|(
name|appRemovedEvent1
argument_list|)
expr_stmt|;
comment|// Queue should have no apps
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"user1"
argument_list|)
operator|.
name|getAppSchedulables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllocationFileParsing ()
specifier|public
name|void
name|testAllocationFileParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give queue A a minimum of 1024 M
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue B a minimum of 2048 M
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>alice,bob admins</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue C no minimum
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>alice,bob admins</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue D a limit of 3 running apps
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Give queue E a preemption timeout of one minute
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueE\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per queue to 15
name|out
operator|.
name|println
argument_list|(
literal|"<queueMaxAppsDefault>15</queueMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per user to 5
name|out
operator|.
name|println
argument_list|(
literal|"<userMaxAppsDefault>5</userMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Give user1 a limit of 10 jobs
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>10</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
comment|// Set default min share preemption timeout to 2 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>120"
operator|+
literal|"</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
comment|// Set fair share preemption timeout to 5 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>300</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5 in file + default queue
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|queueManager
operator|.
name|getUserMaxApps
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queueManager
operator|.
name|getUserMaxApps
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unspecified queues should get default ACL
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|aclsA
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
literal|"root.queueA"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclsA
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|aclsA
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclsA
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|aclsA
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue B ACL
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|aclsB
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
literal|"root.queueB"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclsB
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|aclsB
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue c ACL
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|aclsC
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
literal|"root.queueC"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclsC
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|aclsC
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300000
argument_list|,
name|queueManager
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHierarchicalQueueAllocationFileParsing ()
specifier|public
name|void
name|testHierarchicalQueueAllocationFileParsing
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|AllocationConfigurationException
throws|,
name|ParserConfigurationException
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|leafQueues
init|=
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|leafQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"queueB.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|queueManager
operator|.
name|getLeafQueue
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure querying for queues didn't create any new ones:
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|leafQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackwardsCompatibleAllocationFileParsing ()
specifier|public
name|void
name|testBackwardsCompatibleAllocationFileParsing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
comment|// Give queue A a minimum of 1024 M
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue B a minimum of 2048 M
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclAdministerApps>alice,bob admins</aclAdministerApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue C no minimum
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>alice,bob admins</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue D a limit of 3 running apps
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>3</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Give queue E a preemption timeout of one minute
name|out
operator|.
name|println
argument_list|(
literal|"<pool name=\"queueE\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minSharePreemptionTimeout>60</minSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</pool>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per queue to 15
name|out
operator|.
name|println
argument_list|(
literal|"<queueMaxAppsDefault>15</queueMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Set default limit of apps per user to 5
name|out
operator|.
name|println
argument_list|(
literal|"<userMaxAppsDefault>5</userMaxAppsDefault>"
argument_list|)
expr_stmt|;
comment|// Give user1 a limit of 10 jobs
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>10</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
comment|// Set default min share preemption timeout to 2 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>120"
operator|+
literal|"</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
comment|// Set fair share preemption timeout to 5 minutes
name|out
operator|.
name|println
argument_list|(
literal|"<fairSharePreemptionTimeout>300</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|queueManager
operator|.
name|getLeafQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// 5 in file + default queue
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|2048
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|0
argument_list|)
argument_list|,
name|queueManager
operator|.
name|getMinResources
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|queueManager
operator|.
name|getQueueMaxApps
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|queueManager
operator|.
name|getUserMaxApps
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queueManager
operator|.
name|getUserMaxApps
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Unspecified queues should get default ACL
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|aclsA
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
literal|"queueA"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclsA
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|aclsA
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|aclsA
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|aclsA
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue B ACL
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|aclsB
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
literal|"root.queueB"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclsB
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|aclsB
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|ADMINISTER_QUEUE
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue c ACL
name|Map
argument_list|<
name|QueueACL
argument_list|,
name|AccessControlList
argument_list|>
name|aclsC
init|=
name|queueManager
operator|.
name|getQueueAcls
argument_list|(
literal|"root.queueC"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|aclsC
operator|.
name|containsKey
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"alice,bob admins"
argument_list|,
name|aclsC
operator|.
name|get
argument_list|(
name|QueueACL
operator|.
name|SUBMIT_APPLICATIONS
argument_list|)
operator|.
name|getAclString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root."
operator|+
name|YarnConfiguration
operator|.
name|DEFAULT_QUEUE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueC"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueD"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|120000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60000
argument_list|,
name|queueManager
operator|.
name|getMinSharePreemptionTimeout
argument_list|(
literal|"root.queueE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|300000
argument_list|,
name|queueManager
operator|.
name|getFairSharePreemptionTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testIsStarvedForMinShare ()
specifier|public
name|void
name|testIsStarvedForMinShare
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>2048</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 3 * 1024. Node update gives this all to A
name|createSchedulingRequest
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Queue B arrives and wants 1 * 1024
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue A should be above min share, B below.
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueA"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scheduler
operator|.
name|isStarvedForMinShare
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueB"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|isStarvedForMinShare
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Node checks in again, should allocate for B
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Now B should have min share ( = demand here)
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueB"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scheduler
operator|.
name|isStarvedForMinShare
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testIsStarvedForFairShare ()
specifier|public
name|void
name|testIsStarvedForFairShare
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.75</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Add one big node (only care about aggregate capacity)
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|4
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Queue A wants 3 * 1024. Node update gives this all to A
name|createSchedulingRequest
argument_list|(
literal|3
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// Queue B arrives and wants 1 * 1024
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|FSLeafQueue
argument_list|>
name|queues
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Queue A should be above fair share, B below.
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueA"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scheduler
operator|.
name|isStarvedForFairShare
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueB"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scheduler
operator|.
name|isStarvedForFairShare
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Node checks in again, should allocate for B
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
comment|// B should not be starved for fair share, since entire demand is
comment|// satisfied.
for|for
control|(
name|FSLeafQueue
name|p
range|:
name|queues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"root.queueB"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scheduler
operator|.
name|isStarvedForFairShare
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
comment|/**    * Make sure containers are chosen to be preempted in the correct order. Right    * now this means decreasing order of priority.    */
DECL|method|testChoiceOfPreemptedContainers ()
specifier|public
name|void
name|testChoiceOfPreemptedContainers
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
operator|+
literal|".allocation.file"
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Create four nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
comment|// Queue A and B each request three containers
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app5
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app6
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app5
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app6
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now new requests arrive from queues C and D
name|ApplicationAttemptId
name|app7
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app8
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app9
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app10
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app11
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app12
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// We should be able to claw back one container from A and B each.
comment|// Make sure it is lowest priority container.
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app5
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app6
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should be able to claw back another container from A and B each.
comment|// Make sure it is lowest priority container.
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app5
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app6
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now A and B are below fair share, so preemption shouldn't do anything
name|scheduler
operator|.
name|preemptResources
argument_list|(
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueues
argument_list|()
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app3
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app4
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app5
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|app6
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
comment|/**    * Tests the timing of decision to preempt tasks.    */
DECL|method|testPreemptionDecision ()
specifier|public
name|void
name|testPreemptionDecision
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|MockClock
name|clock
init|=
operator|new
name|MockClock
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|setClock
argument_list|(
name|clock
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueA\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueB\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueC\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queueD\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<weight>.25</weight>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<minResources>1024</minResources>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"<fairSharePreemptionTimeout>10</fairSharePreemptionTimeout>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Create four nodes
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent3
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent3
argument_list|)
expr_stmt|;
comment|// Queue A and B each request three containers
name|ApplicationAttemptId
name|app1
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app2
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app3
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueA"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app4
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app5
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app6
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueB"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// Sufficient node check-ins to fully schedule containers
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|NodeUpdateSchedulerEvent
name|nodeUpdate1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate1
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate2
argument_list|)
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|nodeUpdate3
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeUpdate3
argument_list|)
expr_stmt|;
block|}
comment|// Now new requests arrive from queues C and D
name|ApplicationAttemptId
name|app7
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app8
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app9
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueC"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app10
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app11
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|app12
init|=
name|createSchedulingRequest
argument_list|(
literal|1
operator|*
literal|1024
argument_list|,
literal|"queueD"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|FSLeafQueue
name|schedC
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueC"
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|schedD
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queueD"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|none
argument_list|()
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// After minSharePreemptionTime has passed, they should want to preempt min
comment|// share.
name|clock
operator|.
name|tick
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// After fairSharePreemptionTime has passed, they should want to preempt
comment|// fair share.
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|clock
operator|.
name|tick
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1536
argument_list|)
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedC
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Resources
operator|.
name|equals
argument_list|(
name|Resources
operator|.
name|createResource
argument_list|(
literal|1536
argument_list|)
argument_list|,
name|scheduler
operator|.
name|resToPreempt
argument_list|(
name|schedD
argument_list|,
name|clock
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMultipleContainersWaitingForReservation ()
specifier|public
name|void
name|testMultipleContainersWaitingForReservation
parameter_list|()
block|{
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request full capacity of node
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue2"
argument_list|,
literal|"user2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue3"
argument_list|,
literal|"user3"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// One container should get reservation and the other should get nothing
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId1
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId2
argument_list|)
operator|.
name|getCurrentReservation
argument_list|()
operator|.
name|getMemory
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testUserMaxRunningApps ()
specifier|public
name|void
name|testUserMaxRunningApps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set max running apps
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<user name=\"user1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<maxRunningApps>1</maxRunningApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Request for app 1
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 1 should be running
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// App 2 should not be running
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId2
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request another container for app 1
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|attId1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Request should be fulfilled
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId1
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testReservationWhileMultiplePriorities ()
specifier|public
name|void
name|testReservationWhileMultiplePriorities
parameter_list|()
block|{
comment|// Add a node
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|FSSchedulerApp
name|app
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ContainerId
name|containerId
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getContainerId
argument_list|()
decl_stmt|;
comment|// Cause reservation to be created
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|2
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create request at higher priority
name|createSchedulingRequestExistingApplication
argument_list|(
literal|1024
argument_list|,
literal|1
argument_list|,
name|attId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reserved container should still be at lower priority
for|for
control|(
name|RMContainer
name|container
range|:
name|app
operator|.
name|getReservedContainers
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|container
operator|.
name|getReservedPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Complete container
name|scheduler
operator|.
name|allocate
argument_list|(
name|attId
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|containerId
argument_list|)
argument_list|)
expr_stmt|;
comment|// Schedule at opening
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
comment|// Reserved container (at lower priority) should be run
name|Collection
argument_list|<
name|RMContainer
argument_list|>
name|liveContainers
init|=
name|app
operator|.
name|getLiveContainers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|liveContainers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RMContainer
name|liveContainer
range|:
name|liveContainers
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|liveContainer
operator|.
name|getContainer
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAclSubmitApplication ()
specifier|public
name|void
name|testAclSubmitApplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set acl's
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>norealuserhasthisname</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"norealuserhasthisname"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"norealuserhasthisname2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|app1
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The application was not allowed"
argument_list|,
name|app1
argument_list|)
expr_stmt|;
name|FSSchedulerApp
name|app2
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"The application was allowed"
argument_list|,
name|app2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testMultipleNodesSingleRackRequest ()
specifier|public
name|void
name|testMultipleNodesSingleRackRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|RMNode
name|node3
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|2
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|appId
init|=
name|createAppAttemptId
argument_list|(
name|this
operator|.
name|APP_ID
operator|++
argument_list|,
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|appId
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|)
expr_stmt|;
comment|// 1 request with 2 nodes on the same rack. another request with 1 node on
comment|// a different rack
name|List
argument_list|<
name|ResourceRequest
argument_list|>
name|asks
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceRequest
argument_list|>
argument_list|()
decl_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node2
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node3
operator|.
name|getHostName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node1
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|node3
operator|.
name|getRackName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|asks
operator|.
name|add
argument_list|(
name|createResourceRequest
argument_list|(
literal|1024
argument_list|,
name|ResourceRequest
operator|.
name|ANY
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|allocate
argument_list|(
name|appId
argument_list|,
name|asks
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ContainerId
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// node 1 checks in
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent1
argument_list|)
expr_stmt|;
comment|// should assign node local
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// node 2 checks in
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
comment|// should assign rack local
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|appId
argument_list|)
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testFifoWithinQueue ()
specifier|public
name|void
name|testFifoWithinQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|3072
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
comment|// Even if submitted at exact same time, apps will be deterministically
comment|// ordered by name.
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
literal|"queue1"
argument_list|,
literal|"user1"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|app1
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|app2
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|FSLeafQueue
name|queue1
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
literal|"queue1"
argument_list|)
decl_stmt|;
name|queue1
operator|.
name|setPolicy
argument_list|(
operator|new
name|FifoPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
comment|// First two containers should go to app 1, third should go to app 2.
comment|// Because tests set assignmultiple to false, each heartbeat assigns a single
comment|// container.
name|NodeUpdateSchedulerEvent
name|updateEvent
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to verify the behavior of    * {@link FSQueue#assignContainer(FSSchedulerNode)})    *     * Create two queues under root (fifoQueue and fairParent), and two queues    * under fairParent (fairChild1 and fairChild2). Submit two apps to the    * fifoQueue and one each to the fairChild* queues, all apps requiring 4    * containers each of the total 16 container capacity    *     * Assert the number of containers for each app after 4, 8, 12 and 16 updates.    *     * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|5000
argument_list|)
DECL|method|testAssignContainer ()
specifier|public
name|void
name|testAssignContainer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|user
init|=
literal|"user1"
decl_stmt|;
specifier|final
name|String
name|fifoQueue
init|=
literal|"fifo"
decl_stmt|;
specifier|final
name|String
name|fairParent
init|=
literal|"fairParent"
decl_stmt|;
specifier|final
name|String
name|fairChild1
init|=
name|fairParent
operator|+
literal|".fairChild1"
decl_stmt|;
specifier|final
name|String
name|fairChild2
init|=
name|fairParent
operator|+
literal|".fairChild2"
decl_stmt|;
name|RMNode
name|node1
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|)
argument_list|)
decl_stmt|;
name|RMNode
name|node2
init|=
name|MockNodes
operator|.
name|newNodeInfo
argument_list|(
literal|1
argument_list|,
name|Resources
operator|.
name|createResource
argument_list|(
literal|8192
argument_list|)
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent1
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeAddedSchedulerEvent
name|nodeEvent2
init|=
operator|new
name|NodeAddedSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|nodeEvent2
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId1
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fifoQueue
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId2
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fairChild1
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId3
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fairChild2
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|ApplicationAttemptId
name|attId4
init|=
name|createSchedulingRequest
argument_list|(
literal|1024
argument_list|,
name|fifoQueue
argument_list|,
name|user
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|app1
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId1
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|app2
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId2
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|app3
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId3
argument_list|)
decl_stmt|;
name|FSSchedulerApp
name|app4
init|=
name|scheduler
operator|.
name|applications
operator|.
name|get
argument_list|(
name|attId4
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|getQueueManager
argument_list|()
operator|.
name|getLeafQueue
argument_list|(
name|fifoQueue
argument_list|)
operator|.
name|setPolicy
argument_list|(
name|SchedulingPolicy
operator|.
name|parse
argument_list|(
literal|"fifo"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|update
argument_list|()
expr_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent1
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node1
argument_list|)
decl_stmt|;
name|NodeUpdateSchedulerEvent
name|updateEvent2
init|=
operator|new
name|NodeUpdateSchedulerEvent
argument_list|(
name|node2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|handle
argument_list|(
name|updateEvent2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// 4 node updates: fifoQueue should have received 2, and fairChild*
comment|// should have received one each
name|String
name|ERR
init|=
literal|"Wrong number of assigned containers after "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" updates"
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|4
condition|)
block|{
comment|// app1 req still not met
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
literal|0
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// app1 req has been met, app4 should be served now
name|assertEquals
argument_list|(
name|ERR
argument_list|,
literal|4
argument_list|,
name|app1
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|-
literal|3
operator|)
argument_list|,
name|app4
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|app2
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
operator|(
name|i
operator|+
literal|1
operator|)
operator|/
literal|2
argument_list|,
name|app3
operator|.
name|getLiveContainers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
DECL|method|testNotAllowSubmitApplication ()
specifier|public
name|void
name|testNotAllowSubmitApplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set acl's
name|Configuration
name|conf
init|=
name|createConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|FairSchedulerConfiguration
operator|.
name|ALLOCATION_FILE
argument_list|,
name|ALLOC_FILE
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|reinitialize
argument_list|(
name|conf
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|ALLOC_FILE
argument_list|)
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<?xml version=\"1.0\"?>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<queue name=\"queue1\">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"<aclSubmitApps>userallow</aclSubmitApps>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</queue>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"</allocations>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueManager
name|queueManager
init|=
name|scheduler
operator|.
name|getQueueManager
argument_list|()
decl_stmt|;
name|queueManager
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|int
name|appId
init|=
name|this
operator|.
name|APP_ID
operator|++
decl_stmt|;
name|String
name|user
init|=
literal|"usernotallow"
decl_stmt|;
name|String
name|queue
init|=
literal|"queue1"
decl_stmt|;
name|ApplicationId
name|applicationId
init|=
name|MockApps
operator|.
name|newAppID
argument_list|(
name|appId
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|MockApps
operator|.
name|newAppName
argument_list|()
decl_stmt|;
name|ApplicationMasterService
name|masterService
init|=
operator|new
name|ApplicationMasterService
argument_list|(
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|scheduler
argument_list|)
decl_stmt|;
name|ApplicationSubmissionContext
name|submissionContext
init|=
operator|new
name|ApplicationSubmissionContextPBImpl
argument_list|()
decl_stmt|;
name|ContainerLaunchContext
name|clc
init|=
name|BuilderUtils
operator|.
name|newContainerLaunchContext
argument_list|(
name|user
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|submissionContext
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|submissionContext
operator|.
name|setAMContainerSpec
argument_list|(
name|clc
argument_list|)
expr_stmt|;
name|RMApp
name|application
init|=
operator|new
name|RMAppImpl
argument_list|(
name|applicationId
argument_list|,
name|resourceManager
operator|.
name|getRMContext
argument_list|()
argument_list|,
name|conf
argument_list|,
name|name
argument_list|,
name|user
argument_list|,
name|queue
argument_list|,
name|submissionContext
argument_list|,
name|scheduler
argument_list|,
name|masterService
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|resourceManager
operator|.
name|getRMContext
argument_list|()
operator|.
name|getRMApps
argument_list|()
operator|.
name|putIfAbsent
argument_list|(
name|applicationId
argument_list|,
name|application
argument_list|)
expr_stmt|;
name|application
operator|.
name|handle
argument_list|(
operator|new
name|RMAppEvent
argument_list|(
name|applicationId
argument_list|,
name|RMAppEventType
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|MAX_TRIES
init|=
literal|20
decl_stmt|;
name|int
name|numTries
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|application
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|RMAppState
operator|.
name|SUBMITTED
argument_list|)
operator|&&
name|numTries
operator|<
name|MAX_TRIES
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|numTries
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"The application doesn't reach SUBMITTED."
argument_list|,
name|RMAppState
operator|.
name|SUBMITTED
argument_list|,
name|application
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|ApplicationAttemptId
name|attId
init|=
name|recordFactory
operator|.
name|newRecordInstance
argument_list|(
name|ApplicationAttemptId
operator|.
name|class
argument_list|)
decl_stmt|;
name|attId
operator|.
name|setAttemptId
argument_list|(
name|this
operator|.
name|ATTEMPT_ID
operator|++
argument_list|)
expr_stmt|;
name|attId
operator|.
name|setApplicationId
argument_list|(
name|applicationId
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|addApplication
argument_list|(
name|attId
argument_list|,
name|queue
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|numTries
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|application
operator|.
name|getFinishTime
argument_list|()
operator|==
literal|0
operator|&&
name|numTries
operator|<
name|MAX_TRIES
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|numTries
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|FinalApplicationStatus
operator|.
name|FAILED
argument_list|,
name|application
operator|.
name|getFinalApplicationStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

