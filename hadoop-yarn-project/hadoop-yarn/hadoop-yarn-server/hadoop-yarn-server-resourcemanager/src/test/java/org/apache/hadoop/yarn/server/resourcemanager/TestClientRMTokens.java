begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|org.apache.hadoop.yarn.server.resourcemanager
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|SecurityUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
operator|.
name|InvalidToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|ClientRMProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|CancelDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|GetNewApplicationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|protocolrecords
operator|.
name|RenewDelegationTokenRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|api
operator|.
name|records
operator|.
name|DelegationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|conf
operator|.
name|YarnConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|exceptions
operator|.
name|YarnRemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|ipc
operator|.
name|YarnRPC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|security
operator|.
name|client
operator|.
name|RMDelegationTokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|scheduler
operator|.
name|ResourceScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|resourcemanager
operator|.
name|security
operator|.
name|RMDelegationTokenSecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|server
operator|.
name|security
operator|.
name|ApplicationACLsManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|BuilderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|ProtoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|yarn
operator|.
name|util
operator|.
name|Records
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestClientRMTokens
specifier|public
class|class
name|TestClientRMTokens
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestClientRMTokens
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
DECL|method|resetSecretManager ()
specifier|public
name|void
name|resetSecretManager
parameter_list|()
block|{
name|RMDelegationTokenIdentifier
operator|.
name|Renewer
operator|.
name|setSecretManager
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDelegationToken ()
specifier|public
name|void
name|testDelegationToken
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|YarnConfiguration
name|conf
init|=
operator|new
name|YarnConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|YarnConfiguration
operator|.
name|RM_PRINCIPAL
argument_list|,
literal|"testuser/localhost@apache.org"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ResourceScheduler
name|scheduler
init|=
name|createMockScheduler
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|long
name|initialInterval
init|=
literal|10000l
decl_stmt|;
name|long
name|maxLifetime
init|=
literal|20000l
decl_stmt|;
name|long
name|renewInterval
init|=
literal|10000l
decl_stmt|;
name|RMDelegationTokenSecretManager
name|rmDtSecretManager
init|=
name|createRMDelegationTokenSecretManager
argument_list|(
name|initialInterval
argument_list|,
name|maxLifetime
argument_list|,
name|renewInterval
argument_list|)
decl_stmt|;
name|rmDtSecretManager
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating DelegationTokenSecretManager with initialInterval: "
operator|+
name|initialInterval
operator|+
literal|", maxLifetime: "
operator|+
name|maxLifetime
operator|+
literal|", renewInterval: "
operator|+
name|renewInterval
argument_list|)
expr_stmt|;
specifier|final
name|ClientRMService
name|clientRMService
init|=
operator|new
name|ClientRMServiceForTest
argument_list|(
name|conf
argument_list|,
name|scheduler
argument_list|,
name|rmDtSecretManager
argument_list|)
decl_stmt|;
name|clientRMService
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|clientRMService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ClientRMProtocol
name|clientRMWithDT
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Create a user for the renewr and fake the authentication-method
name|UserGroupInformation
name|loggedInUser
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
literal|"testrenewer@APACHE.ORG"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"testrenewer"
argument_list|,
name|loggedInUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Default realm is APACHE.ORG
name|loggedInUser
operator|.
name|setAuthenticationMethod
argument_list|(
name|AuthenticationMethod
operator|.
name|KERBEROS
argument_list|)
expr_stmt|;
name|DelegationToken
name|token
init|=
name|getDelegationToken
argument_list|(
name|loggedInUser
argument_list|,
name|clientRMService
argument_list|,
name|loggedInUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|tokenFetchTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got delegation token at: "
operator|+
name|tokenFetchTime
argument_list|)
expr_stmt|;
comment|// Now try talking to RMService using the delegation token
name|clientRMWithDT
operator|=
name|getClientRMProtocolWithDT
argument_list|(
name|token
argument_list|,
name|clientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|,
literal|"loginuser1"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|GetNewApplicationRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|clientRMWithDT
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Renew after 50% of token age.
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|tokenFetchTime
operator|+
name|initialInterval
operator|/
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500l
argument_list|)
expr_stmt|;
block|}
name|long
name|nextExpTime
init|=
name|renewDelegationToken
argument_list|(
name|loggedInUser
argument_list|,
name|clientRMService
argument_list|,
name|token
argument_list|)
decl_stmt|;
name|long
name|renewalTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Renewed token at: "
operator|+
name|renewalTime
operator|+
literal|", NextExpiryTime: "
operator|+
name|nextExpTime
argument_list|)
expr_stmt|;
comment|// Wait for first expiry, but before renewed expiry.
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|tokenFetchTime
operator|+
name|initialInterval
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|nextExpTime
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500l
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50l
argument_list|)
expr_stmt|;
comment|// Valid token because of renewal.
try|try
block|{
name|clientRMWithDT
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Wait for expiry.
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|renewalTime
operator|+
name|renewInterval
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500l
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|50l
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"At time: "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|", token should be invalid"
argument_list|)
expr_stmt|;
comment|// Token should have expired.
try|try
block|{
name|clientRMWithDT
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have succeeded with an expired token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|InvalidToken
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"is expired"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test cancellation
comment|// Stop the existing proxy, start another.
if|if
condition|(
name|clientRMWithDT
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|clientRMWithDT
argument_list|)
expr_stmt|;
name|clientRMWithDT
operator|=
literal|null
expr_stmt|;
block|}
name|token
operator|=
name|getDelegationToken
argument_list|(
name|loggedInUser
argument_list|,
name|clientRMService
argument_list|,
name|loggedInUser
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
name|tokenFetchTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got delegation token at: "
operator|+
name|tokenFetchTime
argument_list|)
expr_stmt|;
comment|// Now try talking to RMService using the delegation token
name|clientRMWithDT
operator|=
name|getClientRMProtocolWithDT
argument_list|(
name|token
argument_list|,
name|clientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|,
literal|"loginuser2"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|request
operator|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetNewApplicationRequest
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
block|{
name|clientRMWithDT
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Unexpected exception"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|cancelDelegationToken
argument_list|(
name|loggedInUser
argument_list|,
name|clientRMService
argument_list|,
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientRMWithDT
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|clientRMWithDT
argument_list|)
expr_stmt|;
name|clientRMWithDT
operator|=
literal|null
expr_stmt|;
block|}
comment|// Creating a new connection.
name|clientRMWithDT
operator|=
name|getClientRMProtocolWithDT
argument_list|(
name|token
argument_list|,
name|clientRMService
operator|.
name|getBindAddress
argument_list|()
argument_list|,
literal|"loginuser2"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cancelled delegation token at: "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify cancellation worked.
try|try
block|{
name|clientRMWithDT
operator|.
name|getNewApplication
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not have succeeded with a cancelled delegation token"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
catch|catch
parameter_list|(
name|YarnRemoteException
name|e
parameter_list|)
block|{       }
block|}
finally|finally
block|{
name|rmDtSecretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
comment|// TODO PRECOMMIT Close proxies.
if|if
condition|(
name|clientRMWithDT
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|stopProxy
argument_list|(
name|clientRMWithDT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testShortCircuitRenewCancel ()
specifier|public
name|void
name|testShortCircuitRenewCancel
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|InetSocketAddress
name|addr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|checkShortCircuitRenewCancel
argument_list|(
name|addr
argument_list|,
name|addr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShortCircuitRenewCancelWildcardAddress ()
specifier|public
name|void
name|testShortCircuitRenewCancelWildcardAddress
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|InetSocketAddress
name|rmAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
literal|123
argument_list|)
decl_stmt|;
name|checkShortCircuitRenewCancel
argument_list|(
name|rmAddr
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
name|rmAddr
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShortCircuitRenewCancelSameHostDifferentPort ()
specifier|public
name|void
name|testShortCircuitRenewCancelSameHostDifferentPort
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|InetSocketAddress
name|rmAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|checkShortCircuitRenewCancel
argument_list|(
name|rmAddr
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
name|rmAddr
operator|.
name|getAddress
argument_list|()
argument_list|,
name|rmAddr
operator|.
name|getPort
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShortCircuitRenewCancelDifferentHostSamePort ()
specifier|public
name|void
name|testShortCircuitRenewCancelDifferentHostSamePort
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|InetSocketAddress
name|rmAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|checkShortCircuitRenewCancel
argument_list|(
name|rmAddr
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"1.1.1.1"
argument_list|,
name|rmAddr
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testShortCircuitRenewCancelDifferentHostDifferentPort ()
specifier|public
name|void
name|testShortCircuitRenewCancelDifferentHostDifferentPort
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|InetSocketAddress
name|rmAddr
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|,
literal|123
argument_list|)
decl_stmt|;
name|checkShortCircuitRenewCancel
argument_list|(
name|rmAddr
argument_list|,
operator|new
name|InetSocketAddress
argument_list|(
literal|"1.1.1.1"
argument_list|,
name|rmAddr
operator|.
name|getPort
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|checkShortCircuitRenewCancel (InetSocketAddress rmAddr, InetSocketAddress serviceAddr, boolean shouldShortCircuit )
specifier|private
name|void
name|checkShortCircuitRenewCancel
parameter_list|(
name|InetSocketAddress
name|rmAddr
parameter_list|,
name|InetSocketAddress
name|serviceAddr
parameter_list|,
name|boolean
name|shouldShortCircuit
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|YarnConfiguration
operator|.
name|IPC_RPC_IMPL
argument_list|,
name|YarnBadRPC
operator|.
name|class
argument_list|,
name|YarnRPC
operator|.
name|class
argument_list|)
expr_stmt|;
name|RMDelegationTokenSecretManager
name|secretManager
init|=
name|mock
argument_list|(
name|RMDelegationTokenSecretManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|RMDelegationTokenIdentifier
operator|.
name|Renewer
operator|.
name|setSecretManager
argument_list|(
name|secretManager
argument_list|,
name|rmAddr
argument_list|)
expr_stmt|;
name|RMDelegationTokenIdentifier
name|ident
init|=
operator|new
name|RMDelegationTokenIdentifier
argument_list|(
operator|new
name|Text
argument_list|(
literal|"owner"
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"renewer"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
name|token
init|=
operator|new
name|Token
argument_list|<
name|RMDelegationTokenIdentifier
argument_list|>
argument_list|(
name|ident
argument_list|,
name|secretManager
argument_list|)
decl_stmt|;
name|SecurityUtil
operator|.
name|setTokenService
argument_list|(
name|token
argument_list|,
name|serviceAddr
argument_list|)
expr_stmt|;
if|if
condition|(
name|shouldShortCircuit
condition|)
block|{
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretManager
argument_list|)
operator|.
name|renewToken
argument_list|(
name|eq
argument_list|(
name|token
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"renewer"
argument_list|)
argument_list|)
expr_stmt|;
name|reset
argument_list|(
name|secretManager
argument_list|)
expr_stmt|;
name|token
operator|.
name|cancel
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|secretManager
argument_list|)
operator|.
name|cancelToken
argument_list|(
name|eq
argument_list|(
name|token
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|"renewer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|token
operator|.
name|renew
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"getProxy"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|secretManager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|renewToken
argument_list|(
name|any
argument_list|(
name|Token
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|token
operator|.
name|cancel
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"getProxy"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|secretManager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|cancelToken
argument_list|(
name|any
argument_list|(
name|Token
operator|.
name|class
argument_list|)
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|class|YarnBadRPC
specifier|public
specifier|static
class|class
name|YarnBadRPC
extends|extends
name|YarnRPC
block|{
annotation|@
name|Override
DECL|method|getProxy (Class protocol, InetSocketAddress addr, Configuration conf)
specifier|public
name|Object
name|getProxy
parameter_list|(
name|Class
name|protocol
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getProxy"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|stopProxy (Object proxy, Configuration conf)
specifier|public
name|void
name|stopProxy
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"stopProxy"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getServer (Class protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig)
specifier|public
name|Server
name|getServer
parameter_list|(
name|Class
name|protocol
parameter_list|,
name|Object
name|instance
parameter_list|,
name|InetSocketAddress
name|addr
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|SecretManager
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|,
name|int
name|numHandlers
parameter_list|,
name|String
name|portRangeConfig
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getServer"
argument_list|)
throw|;
block|}
block|}
comment|// Get the delegation token directly as it is a little difficult to setup
comment|// the kerberos based rpc.
DECL|method|getDelegationToken ( final UserGroupInformation loggedInUser, final ClientRMProtocol clientRMService, final String renewerString)
specifier|private
name|DelegationToken
name|getDelegationToken
parameter_list|(
specifier|final
name|UserGroupInformation
name|loggedInUser
parameter_list|,
specifier|final
name|ClientRMProtocol
name|clientRMService
parameter_list|,
specifier|final
name|String
name|renewerString
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|DelegationToken
name|token
init|=
name|loggedInUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|DelegationToken
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DelegationToken
name|run
parameter_list|()
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|GetDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|GetDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setRenewer
argument_list|(
name|renewerString
argument_list|)
expr_stmt|;
return|return
name|clientRMService
operator|.
name|getDelegationToken
argument_list|(
name|request
argument_list|)
operator|.
name|getRMDelegationToken
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|token
return|;
block|}
DECL|method|renewDelegationToken (final UserGroupInformation loggedInUser, final ClientRMProtocol clientRMService, final DelegationToken dToken)
specifier|private
name|long
name|renewDelegationToken
parameter_list|(
specifier|final
name|UserGroupInformation
name|loggedInUser
parameter_list|,
specifier|final
name|ClientRMProtocol
name|clientRMService
parameter_list|,
specifier|final
name|DelegationToken
name|dToken
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|nextExpTime
init|=
name|loggedInUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|run
parameter_list|()
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|RenewDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|RenewDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setDelegationToken
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
return|return
name|clientRMService
operator|.
name|renewDelegationToken
argument_list|(
name|request
argument_list|)
operator|.
name|getNextExpirationTime
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|nextExpTime
return|;
block|}
DECL|method|cancelDelegationToken (final UserGroupInformation loggedInUser, final ClientRMProtocol clientRMService, final DelegationToken dToken)
specifier|private
name|void
name|cancelDelegationToken
parameter_list|(
specifier|final
name|UserGroupInformation
name|loggedInUser
parameter_list|,
specifier|final
name|ClientRMProtocol
name|clientRMService
parameter_list|,
specifier|final
name|DelegationToken
name|dToken
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|loggedInUser
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|YarnRemoteException
throws|,
name|IOException
block|{
name|CancelDelegationTokenRequest
name|request
init|=
name|Records
operator|.
name|newRecord
argument_list|(
name|CancelDelegationTokenRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|request
operator|.
name|setDelegationToken
argument_list|(
name|dToken
argument_list|)
expr_stmt|;
name|clientRMService
operator|.
name|cancelDelegationToken
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getClientRMProtocolWithDT (DelegationToken token, final InetSocketAddress rmAddress, String user, final Configuration conf)
specifier|private
name|ClientRMProtocol
name|getClientRMProtocolWithDT
parameter_list|(
name|DelegationToken
name|token
parameter_list|,
specifier|final
name|InetSocketAddress
name|rmAddress
parameter_list|,
name|String
name|user
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
comment|// Maybe consider converting to Hadoop token, serialize de-serialize etc
comment|// before trying to renew the token.
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|ugi
operator|.
name|addToken
argument_list|(
name|ProtoUtils
operator|.
name|convertFromProtoFormat
argument_list|(
name|token
argument_list|,
name|rmAddress
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|YarnRPC
name|rpc
init|=
name|YarnRPC
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ClientRMProtocol
name|clientRMWithDT
init|=
name|ugi
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClientRMProtocol
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClientRMProtocol
name|run
parameter_list|()
block|{
return|return
operator|(
name|ClientRMProtocol
operator|)
name|rpc
operator|.
name|getProxy
argument_list|(
name|ClientRMProtocol
operator|.
name|class
argument_list|,
name|rmAddress
argument_list|,
name|conf
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|clientRMWithDT
return|;
block|}
DECL|class|ClientRMServiceForTest
class|class
name|ClientRMServiceForTest
extends|extends
name|ClientRMService
block|{
DECL|method|ClientRMServiceForTest (Configuration conf, ResourceScheduler scheduler, RMDelegationTokenSecretManager rmDTSecretManager)
specifier|public
name|ClientRMServiceForTest
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|ResourceScheduler
name|scheduler
parameter_list|,
name|RMDelegationTokenSecretManager
name|rmDTSecretManager
parameter_list|)
block|{
name|super
argument_list|(
name|mock
argument_list|(
name|RMContext
operator|.
name|class
argument_list|)
argument_list|,
name|scheduler
argument_list|,
name|mock
argument_list|(
name|RMAppManager
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|ApplicationACLsManager
argument_list|(
name|conf
argument_list|)
argument_list|,
name|rmDTSecretManager
argument_list|)
expr_stmt|;
block|}
comment|// Use a random port unless explicitly specified.
annotation|@
name|Override
DECL|method|getBindAddress (Configuration conf)
name|InetSocketAddress
name|getBindAddress
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|getSocketAddr
argument_list|(
name|YarnConfiguration
operator|.
name|RM_ADDRESS
argument_list|,
name|YarnConfiguration
operator|.
name|DEFAULT_RM_ADDRESS
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|rmDTSecretManager
operator|!=
literal|null
condition|)
block|{
name|rmDTSecretManager
operator|.
name|stopThreads
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createMockScheduler (Configuration conf)
specifier|private
specifier|static
name|ResourceScheduler
name|createMockScheduler
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|ResourceScheduler
name|mockSched
init|=
name|mock
argument_list|(
name|ResourceScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|512
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockSched
argument_list|)
operator|.
name|getMinimumResourceCapability
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|BuilderUtils
operator|.
name|newResource
argument_list|(
literal|5120
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockSched
argument_list|)
operator|.
name|getMaximumResourceCapability
argument_list|()
expr_stmt|;
return|return
name|mockSched
return|;
block|}
DECL|method|createRMDelegationTokenSecretManager ( long secretKeyInterval, long tokenMaxLifetime, long tokenRenewInterval)
specifier|private
specifier|static
name|RMDelegationTokenSecretManager
name|createRMDelegationTokenSecretManager
parameter_list|(
name|long
name|secretKeyInterval
parameter_list|,
name|long
name|tokenMaxLifetime
parameter_list|,
name|long
name|tokenRenewInterval
parameter_list|)
block|{
name|RMDelegationTokenSecretManager
name|rmDtSecretManager
init|=
operator|new
name|RMDelegationTokenSecretManager
argument_list|(
name|secretKeyInterval
argument_list|,
name|tokenMaxLifetime
argument_list|,
name|tokenRenewInterval
argument_list|,
literal|3600000
argument_list|)
decl_stmt|;
return|return
name|rmDtSecretManager
return|;
block|}
block|}
end_class

end_unit

